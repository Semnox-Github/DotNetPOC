//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
// 
#pragma warning disable 1591

namespace Parafait_POS.ParafaitWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://semnox.com/ParafaitWS/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UploadSiteDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastUpdateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateServerUploadTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadSiteDataV2OperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateInitialUploadStatusV2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerDataV2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastUpdateTimeV2OperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateServerUploadTimeV2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerCardActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRoamingSitesV2OperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::Parafait_POS.Properties.Settings.Default.Parafait_POS_ParafaitWS_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UploadSiteDataCompletedEventHandler UploadSiteDataCompleted;
        
        /// <remarks/>
        public event GetLastUpdateTimeCompletedEventHandler GetLastUpdateTimeCompleted;
        
        /// <remarks/>
        public event GetServerDataCompletedEventHandler GetServerDataCompleted;
        
        /// <remarks/>
        public event UpdateServerUploadTimeCompletedEventHandler UpdateServerUploadTimeCompleted;
        
        /// <remarks/>
        public event UploadSiteDataV2CompletedEventHandler UploadSiteDataV2Completed;
        
        /// <remarks/>
        public event UpdateInitialUploadStatusV2CompletedEventHandler UpdateInitialUploadStatusV2Completed;
        
        /// <remarks/>
        public event GetServerDataV2CompletedEventHandler GetServerDataV2Completed;
        
        /// <remarks/>
        public event GetLastUpdateTimeV2CompletedEventHandler GetLastUpdateTimeV2Completed;
        
        /// <remarks/>
        public event UpdateServerUploadTimeV2CompletedEventHandler UpdateServerUploadTimeV2Completed;
        
        /// <remarks/>
        public event GetServerCardCompletedEventHandler GetServerCardCompleted;
        
        /// <remarks/>
        public event GetServerCardActivityCompletedEventHandler GetServerCardActivityCompleted;
        
        /// <remarks/>
        public event GetRoamingSitesV2CompletedEventHandler GetRoamingSitesV2Completed;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/UploadSiteData", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadSiteData(System.Data.DataSet PlayData, System.Data.DataSet ManagementData, System.DateTime UpdateTime) {
            object[] results = this.Invoke("UploadSiteData", new object[] {
                        PlayData,
                        ManagementData,
                        UpdateTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadSiteDataAsync(System.Data.DataSet PlayData, System.Data.DataSet ManagementData, System.DateTime UpdateTime) {
            this.UploadSiteDataAsync(PlayData, ManagementData, UpdateTime, null);
        }
        
        /// <remarks/>
        public void UploadSiteDataAsync(System.Data.DataSet PlayData, System.Data.DataSet ManagementData, System.DateTime UpdateTime, object userState) {
            if ((this.UploadSiteDataOperationCompleted == null)) {
                this.UploadSiteDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadSiteDataOperationCompleted);
            }
            this.InvokeAsync("UploadSiteData", new object[] {
                        PlayData,
                        ManagementData,
                        UpdateTime}, this.UploadSiteDataOperationCompleted, userState);
        }
        
        private void OnUploadSiteDataOperationCompleted(object arg) {
            if ((this.UploadSiteDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadSiteDataCompleted(this, new UploadSiteDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/GetLastUpdateTime", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetLastUpdateTime(System.Data.DataSet SiteData) {
            object[] results = this.Invoke("GetLastUpdateTime", new object[] {
                        SiteData});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetLastUpdateTimeAsync(System.Data.DataSet SiteData) {
            this.GetLastUpdateTimeAsync(SiteData, null);
        }
        
        /// <remarks/>
        public void GetLastUpdateTimeAsync(System.Data.DataSet SiteData, object userState) {
            if ((this.GetLastUpdateTimeOperationCompleted == null)) {
                this.GetLastUpdateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastUpdateTimeOperationCompleted);
            }
            this.InvokeAsync("GetLastUpdateTime", new object[] {
                        SiteData}, this.GetLastUpdateTimeOperationCompleted, userState);
        }
        
        private void OnGetLastUpdateTimeOperationCompleted(object arg) {
            if ((this.GetLastUpdateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastUpdateTimeCompleted(this, new GetLastUpdateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/GetServerData", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetServerData(long SiteId, ref System.Data.DataSet ManagementDataSet, ref System.DateTime ServerUploadTime, ref string message) {
            object[] results = this.Invoke("GetServerData", new object[] {
                        SiteId,
                        ManagementDataSet,
                        ServerUploadTime,
                        message});
            ManagementDataSet = ((System.Data.DataSet)(results[1]));
            ServerUploadTime = ((System.DateTime)(results[2]));
            message = ((string)(results[3]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerDataAsync(long SiteId, System.Data.DataSet ManagementDataSet, System.DateTime ServerUploadTime, string message) {
            this.GetServerDataAsync(SiteId, ManagementDataSet, ServerUploadTime, message, null);
        }
        
        /// <remarks/>
        public void GetServerDataAsync(long SiteId, System.Data.DataSet ManagementDataSet, System.DateTime ServerUploadTime, string message, object userState) {
            if ((this.GetServerDataOperationCompleted == null)) {
                this.GetServerDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerDataOperationCompleted);
            }
            this.InvokeAsync("GetServerData", new object[] {
                        SiteId,
                        ManagementDataSet,
                        ServerUploadTime,
                        message}, this.GetServerDataOperationCompleted, userState);
        }
        
        private void OnGetServerDataOperationCompleted(object arg) {
            if ((this.GetServerDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerDataCompleted(this, new GetServerDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/UpdateServerUploadTime", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateServerUploadTime(long SiteId, System.DateTime ServerUploadTime, ref string message) {
            object[] results = this.Invoke("UpdateServerUploadTime", new object[] {
                        SiteId,
                        ServerUploadTime,
                        message});
            message = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateServerUploadTimeAsync(long SiteId, System.DateTime ServerUploadTime, string message) {
            this.UpdateServerUploadTimeAsync(SiteId, ServerUploadTime, message, null);
        }
        
        /// <remarks/>
        public void UpdateServerUploadTimeAsync(long SiteId, System.DateTime ServerUploadTime, string message, object userState) {
            if ((this.UpdateServerUploadTimeOperationCompleted == null)) {
                this.UpdateServerUploadTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateServerUploadTimeOperationCompleted);
            }
            this.InvokeAsync("UpdateServerUploadTime", new object[] {
                        SiteId,
                        ServerUploadTime,
                        message}, this.UpdateServerUploadTimeOperationCompleted, userState);
        }
        
        private void OnUpdateServerUploadTimeOperationCompleted(object arg) {
            if ((this.UpdateServerUploadTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateServerUploadTimeCompleted(this, new UpdateServerUploadTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/UploadSiteDataV2", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadSiteDataV2(string CompanyKey, int SiteID, System.Data.DataSet SiteDataSet, System.DateTime UpdateTime) {
            object[] results = this.Invoke("UploadSiteDataV2", new object[] {
                        CompanyKey,
                        SiteID,
                        SiteDataSet,
                        UpdateTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadSiteDataV2Async(string CompanyKey, int SiteID, System.Data.DataSet SiteDataSet, System.DateTime UpdateTime) {
            this.UploadSiteDataV2Async(CompanyKey, SiteID, SiteDataSet, UpdateTime, null);
        }
        
        /// <remarks/>
        public void UploadSiteDataV2Async(string CompanyKey, int SiteID, System.Data.DataSet SiteDataSet, System.DateTime UpdateTime, object userState) {
            if ((this.UploadSiteDataV2OperationCompleted == null)) {
                this.UploadSiteDataV2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadSiteDataV2OperationCompleted);
            }
            this.InvokeAsync("UploadSiteDataV2", new object[] {
                        CompanyKey,
                        SiteID,
                        SiteDataSet,
                        UpdateTime}, this.UploadSiteDataV2OperationCompleted, userState);
        }
        
        private void OnUploadSiteDataV2OperationCompleted(object arg) {
            if ((this.UploadSiteDataV2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadSiteDataV2Completed(this, new UploadSiteDataV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/UpdateInitialUploadStatusV2", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateInitialUploadStatusV2(string CompanyKey, int SiteId, bool UploadDone, ref string message) {
            object[] results = this.Invoke("UpdateInitialUploadStatusV2", new object[] {
                        CompanyKey,
                        SiteId,
                        UploadDone,
                        message});
            message = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateInitialUploadStatusV2Async(string CompanyKey, int SiteId, bool UploadDone, string message) {
            this.UpdateInitialUploadStatusV2Async(CompanyKey, SiteId, UploadDone, message, null);
        }
        
        /// <remarks/>
        public void UpdateInitialUploadStatusV2Async(string CompanyKey, int SiteId, bool UploadDone, string message, object userState) {
            if ((this.UpdateInitialUploadStatusV2OperationCompleted == null)) {
                this.UpdateInitialUploadStatusV2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateInitialUploadStatusV2OperationCompleted);
            }
            this.InvokeAsync("UpdateInitialUploadStatusV2", new object[] {
                        CompanyKey,
                        SiteId,
                        UploadDone,
                        message}, this.UpdateInitialUploadStatusV2OperationCompleted, userState);
        }
        
        private void OnUpdateInitialUploadStatusV2OperationCompleted(object arg) {
            if ((this.UpdateInitialUploadStatusV2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateInitialUploadStatusV2Completed(this, new UpdateInitialUploadStatusV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/GetServerDataV2", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetServerDataV2(string CompanyKey, int SiteId, bool RoamingAllowed, ref System.DateTime ServerUploadTime, ref string message) {
            object[] results = this.Invoke("GetServerDataV2", new object[] {
                        CompanyKey,
                        SiteId,
                        RoamingAllowed,
                        ServerUploadTime,
                        message});
            ServerUploadTime = ((System.DateTime)(results[1]));
            message = ((string)(results[2]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerDataV2Async(string CompanyKey, int SiteId, bool RoamingAllowed, System.DateTime ServerUploadTime, string message) {
            this.GetServerDataV2Async(CompanyKey, SiteId, RoamingAllowed, ServerUploadTime, message, null);
        }
        
        /// <remarks/>
        public void GetServerDataV2Async(string CompanyKey, int SiteId, bool RoamingAllowed, System.DateTime ServerUploadTime, string message, object userState) {
            if ((this.GetServerDataV2OperationCompleted == null)) {
                this.GetServerDataV2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerDataV2OperationCompleted);
            }
            this.InvokeAsync("GetServerDataV2", new object[] {
                        CompanyKey,
                        SiteId,
                        RoamingAllowed,
                        ServerUploadTime,
                        message}, this.GetServerDataV2OperationCompleted, userState);
        }
        
        private void OnGetServerDataV2OperationCompleted(object arg) {
            if ((this.GetServerDataV2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerDataV2Completed(this, new GetServerDataV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/GetLastUpdateTimeV2", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetLastUpdateTimeV2(string CompanyKey, System.Data.DataSet SiteData) {
            object[] results = this.Invoke("GetLastUpdateTimeV2", new object[] {
                        CompanyKey,
                        SiteData});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetLastUpdateTimeV2Async(string CompanyKey, System.Data.DataSet SiteData) {
            this.GetLastUpdateTimeV2Async(CompanyKey, SiteData, null);
        }
        
        /// <remarks/>
        public void GetLastUpdateTimeV2Async(string CompanyKey, System.Data.DataSet SiteData, object userState) {
            if ((this.GetLastUpdateTimeV2OperationCompleted == null)) {
                this.GetLastUpdateTimeV2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastUpdateTimeV2OperationCompleted);
            }
            this.InvokeAsync("GetLastUpdateTimeV2", new object[] {
                        CompanyKey,
                        SiteData}, this.GetLastUpdateTimeV2OperationCompleted, userState);
        }
        
        private void OnGetLastUpdateTimeV2OperationCompleted(object arg) {
            if ((this.GetLastUpdateTimeV2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastUpdateTimeV2Completed(this, new GetLastUpdateTimeV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/UpdateServerUploadTimeV2", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateServerUploadTimeV2(string CompanyKey, long SiteId, System.DateTime ServerUploadTime, ref string message) {
            object[] results = this.Invoke("UpdateServerUploadTimeV2", new object[] {
                        CompanyKey,
                        SiteId,
                        ServerUploadTime,
                        message});
            message = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateServerUploadTimeV2Async(string CompanyKey, long SiteId, System.DateTime ServerUploadTime, string message) {
            this.UpdateServerUploadTimeV2Async(CompanyKey, SiteId, ServerUploadTime, message, null);
        }
        
        /// <remarks/>
        public void UpdateServerUploadTimeV2Async(string CompanyKey, long SiteId, System.DateTime ServerUploadTime, string message, object userState) {
            if ((this.UpdateServerUploadTimeV2OperationCompleted == null)) {
                this.UpdateServerUploadTimeV2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateServerUploadTimeV2OperationCompleted);
            }
            this.InvokeAsync("UpdateServerUploadTimeV2", new object[] {
                        CompanyKey,
                        SiteId,
                        ServerUploadTime,
                        message}, this.UpdateServerUploadTimeV2OperationCompleted, userState);
        }
        
        private void OnUpdateServerUploadTimeV2OperationCompleted(object arg) {
            if ((this.UpdateServerUploadTimeV2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateServerUploadTimeV2Completed(this, new UpdateServerUploadTimeV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/GetServerCard", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetServerCard(string CompanyKey, string CardNumber, int SiteId, ref string message) {
            object[] results = this.Invoke("GetServerCard", new object[] {
                        CompanyKey,
                        CardNumber,
                        SiteId,
                        message});
            message = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerCardAsync(string CompanyKey, string CardNumber, int SiteId, string message) {
            this.GetServerCardAsync(CompanyKey, CardNumber, SiteId, message, null);
        }
        
        /// <remarks/>
        public void GetServerCardAsync(string CompanyKey, string CardNumber, int SiteId, string message, object userState) {
            if ((this.GetServerCardOperationCompleted == null)) {
                this.GetServerCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerCardOperationCompleted);
            }
            this.InvokeAsync("GetServerCard", new object[] {
                        CompanyKey,
                        CardNumber,
                        SiteId,
                        message}, this.GetServerCardOperationCompleted, userState);
        }
        
        private void OnGetServerCardOperationCompleted(object arg) {
            if ((this.GetServerCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerCardCompleted(this, new GetServerCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/GetServerCardActivity", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetServerCardActivity(string CompanyKey, string CardNumber, int SiteId, ref string message) {
            object[] results = this.Invoke("GetServerCardActivity", new object[] {
                        CompanyKey,
                        CardNumber,
                        SiteId,
                        message});
            message = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerCardActivityAsync(string CompanyKey, string CardNumber, int SiteId, string message) {
            this.GetServerCardActivityAsync(CompanyKey, CardNumber, SiteId, message, null);
        }
        
        /// <remarks/>
        public void GetServerCardActivityAsync(string CompanyKey, string CardNumber, int SiteId, string message, object userState) {
            if ((this.GetServerCardActivityOperationCompleted == null)) {
                this.GetServerCardActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerCardActivityOperationCompleted);
            }
            this.InvokeAsync("GetServerCardActivity", new object[] {
                        CompanyKey,
                        CardNumber,
                        SiteId,
                        message}, this.GetServerCardActivityOperationCompleted, userState);
        }
        
        private void OnGetServerCardActivityOperationCompleted(object arg) {
            if ((this.GetServerCardActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerCardActivityCompleted(this, new GetServerCardActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/GetRoamingSitesV2", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRoamingSitesV2(string CompanyKey, int SiteId, ref string message) {
            object[] results = this.Invoke("GetRoamingSitesV2", new object[] {
                        CompanyKey,
                        SiteId,
                        message});
            message = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRoamingSitesV2Async(string CompanyKey, int SiteId, string message) {
            this.GetRoamingSitesV2Async(CompanyKey, SiteId, message, null);
        }
        
        /// <remarks/>
        public void GetRoamingSitesV2Async(string CompanyKey, int SiteId, string message, object userState) {
            if ((this.GetRoamingSitesV2OperationCompleted == null)) {
                this.GetRoamingSitesV2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoamingSitesV2OperationCompleted);
            }
            this.InvokeAsync("GetRoamingSitesV2", new object[] {
                        CompanyKey,
                        SiteId,
                        message}, this.GetRoamingSitesV2OperationCompleted, userState);
        }
        
        private void OnGetRoamingSitesV2OperationCompleted(object arg) {
            if ((this.GetRoamingSitesV2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRoamingSitesV2Completed(this, new GetRoamingSitesV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void UploadSiteDataCompletedEventHandler(object sender, UploadSiteDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadSiteDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadSiteDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetLastUpdateTimeCompletedEventHandler(object sender, GetLastUpdateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastUpdateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastUpdateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetServerDataCompletedEventHandler(object sender, GetServerDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataSet ManagementDataSet {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public System.DateTime ServerUploadTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void UpdateServerUploadTimeCompletedEventHandler(object sender, UpdateServerUploadTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateServerUploadTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateServerUploadTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void UploadSiteDataV2CompletedEventHandler(object sender, UploadSiteDataV2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadSiteDataV2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadSiteDataV2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void UpdateInitialUploadStatusV2CompletedEventHandler(object sender, UpdateInitialUploadStatusV2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateInitialUploadStatusV2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateInitialUploadStatusV2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetServerDataV2CompletedEventHandler(object sender, GetServerDataV2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerDataV2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerDataV2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.DateTime ServerUploadTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetLastUpdateTimeV2CompletedEventHandler(object sender, GetLastUpdateTimeV2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastUpdateTimeV2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastUpdateTimeV2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void UpdateServerUploadTimeV2CompletedEventHandler(object sender, UpdateServerUploadTimeV2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateServerUploadTimeV2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateServerUploadTimeV2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetServerCardCompletedEventHandler(object sender, GetServerCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetServerCardActivityCompletedEventHandler(object sender, GetServerCardActivityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerCardActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerCardActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetRoamingSitesV2CompletedEventHandler(object sender, GetRoamingSitesV2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRoamingSitesV2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRoamingSitesV2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591