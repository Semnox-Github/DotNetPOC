//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Semnox.Core.GenericUtilities;
using Semnox.Core.Utilities;
using System.Collections.Generic;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://Parafait.Remoting", ConfigurationName="IParafaitRemoting")]
public interface IParafaitRemoting
{
    [System.ServiceModel.OperationContractAttribute(Action="http://Parafait.Remoting/IParafaitRemoting/getServerCard", ReplyAction="http://Parafait.Remoting/IParafaitRemoting/getServerCardResponse")]
    int getServerCard(string CardNumber, int SiteId, ref string Message);

    [System.ServiceModel.OperationContractAttribute(Action = "http://Parafait.Remoting/IParafaitRemoting/getServerCardActivity", ReplyAction = "http://Parafait.Remoting/IParafaitRemoting/getServerCardActivityResponse")]
    System.Data.DataSet getServerCardActivity(string CardNumber, int SiteId);

    [System.ServiceModel.OperationContractAttribute(Action = "http://Parafait.Remoting/IParafaitRemoting/DownloadServerFiles", ReplyAction = "http://Parafait.Remoting/IParafaitRemoting/DownloadServerFilesResponse")]
    void DownloadServerFiles(int siteId, string fileName);

    [System.ServiceModel.OperationContractAttribute(Action = "http://Parafait.Remoting/IParafaitRemoting/Get",
        ReplyAction = "http://Parafait.Remoting/IParafaitRemoting/GetResponse")]
    Semnox.Core.GenericUtilities.WebApiResponse Get(string url, List<KeyValuePair<string, string>> headers);

    [System.ServiceModel.OperationContractAttribute(Action = "http://Parafait.Remoting/IParafaitRemoting/Post",
        ReplyAction = "http://Parafait.Remoting/IParafaitRemoting/PostResponse")]
    Semnox.Core.GenericUtilities.WebApiResponse Post(string url, List<KeyValuePair<string, string>> headers, string content, string contentType);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IParafaitRemotingChannel : IParafaitRemoting, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class ParafaitRemotingClient : System.ServiceModel.ClientBase<IParafaitRemoting>, IParafaitRemoting
{
    private static readonly Semnox.Parafait.logging.Logger log = new Semnox.Parafait.logging.Logger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

    public ParafaitRemotingClient()
    {
        log.LogMethodEntry();
        log.LogMethodExit(null);
    }
    
    public ParafaitRemotingClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
        log.LogMethodEntry(endpointConfigurationName);
        log.LogMethodExit(null);
    }
    
    public ParafaitRemotingClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
        log.LogMethodEntry(endpointConfigurationName, remoteAddress);
        log.LogMethodExit(null);
    }
    
    public ParafaitRemotingClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
        log.LogMethodEntry(endpointConfigurationName, remoteAddress);
        log.LogMethodExit(null);
    }
    
    public ParafaitRemotingClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
        log.LogMethodEntry(binding, remoteAddress);
        log.LogMethodExit(null);
    }
    
    public int getServerCard(string CardNumber, int SiteId, ref string Message)
    {
        log.LogMethodEntry(CardNumber,SiteId,Message);
        int returnvalue= (base.Channel.getServerCard(CardNumber, SiteId, ref Message));
        log.LogVariableState("Message", Message);
        log.LogMethodExit(returnvalue);
        return returnvalue;
    }

    public System.Data.DataSet getServerCardActivity(string CardNumber, int SiteId)
    {
        log.LogMethodEntry(CardNumber, SiteId);
        System.Data.DataSet returnvalue=(base.Channel.getServerCardActivity(CardNumber, SiteId));
        log.LogMethodExit(returnvalue);
        return (returnvalue);
    }

    public void DownloadServerFiles(int siteId, string fileName)
    {
        log.LogMethodEntry(fileName, siteId);
        base.Channel.DownloadServerFiles(siteId, fileName);
        log.LogMethodExit(); 
    }

    public Semnox.Core.GenericUtilities.WebApiResponse Get(string url, List<KeyValuePair<string, string>> headers)
    {
        log.LogMethodEntry(url, headers);
        Semnox.Core.GenericUtilities.WebApiResponse result =(base.Channel.Get(url, headers));
        log.LogMethodExit(result);
        return (result);
    }

    public Semnox.Core.GenericUtilities.WebApiResponse Post(string url, List<KeyValuePair<string, string>> headers, string content, string contentType)
    {
        log.LogMethodEntry(url, headers);
        Semnox.Core.GenericUtilities.WebApiResponse result =(base.Channel.Post(url, headers, content, contentType));
        log.LogMethodExit(result);
        return (result);
    }
}
