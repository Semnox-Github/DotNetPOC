/**********************************************************************************************************************************
 * Project Name - Transaction
 * Description  - Business Logic to create and save transaction
 * 
 **************
 **Version Log
 **************
*Version     Date             Modified By      Remarks          
 **********************************************************************************************************************************
 *1.00         17-Sep-2008      Iqbal Mohammad  Created 
 *2.00         19-Sep-2018      Mathew Ninan    Logic to get eligible and valid lines to Printer
 *                                              list for printing  
 *2.40.0       04-Oct-2018      Indhu K         Modified for Modifierchanges                 
 *2.40.1       10-Nov-2018      Mathew Ninan    CancelOrderedKOT method modified for new print logic
 *2.50.0       28-Nov-2018      Mathew Ninan    Remove staticDataExchange from calls as Staticdataexchange
 *                                              is deprecated. TransactionPaymentsDTO is added
 *2.50.0       28-Jan-2019      Guru S A        Booking changes     
 *2.6.0        07-Mar-2019      Guru S A        OTP validation check updates 
 *2.6.0        21-Mar-2019      Iqbal           Reschdule attraction changes
 *2.6.0        04-Apr-2019      Nitin Pai       Change Product Availability, Split Product Enhancements
 *2.6.0        26-Apr-2019      Guru S A        Reprint changes
 *2.60.2       27-May-2019      Mathew Ninan    VariableCard product to be loaded as credit plus lines.
 *                                              If credit plus is not part of set up, load as Card Balance
 *2.60.2       06-15-2019       Nitin Pai       Moved Split Product Enhancement to AccountBL class
 *2.70         1-Jul-2019       Lakshminarayana Modified to add support for ULC cards     
 *2.70         25-Mar-2019      Guru S A        Booking Phase 2 changes
 *2.70         06-Aug-2019      Nitin Pai       Attraction enhancements changes to allow combo attractions to be selected together
 *2.70         05-Sep-2019      Indrajeet K     Added ExternalSystemReference to trxInsCommandText
 *2.70.1       10-Dec-2019      Mathew Ninan    Added check to prevent cancel line when card is already used 
 *2.70.2       22-Aug-2019      Jinto Thomas    Added UpdateTransactionLine method for TaskProcs.consolidate()
 *2.70.2       04-Oct-2019      Jinto Thomas    Modified insert trx_header query. Added createdby,creationdate fields  
 *2.70.2       07-Nov-2019      Akshay G        ClubSpeed interface phase-1 enhancement changes - Added LastUpdateTime for TransactionLines
 *2.70.2       09-Nov-2019      Guru S A        Waiver phase 2 changes
 *2.70.2       26-Nov-2019      Lakshminarayana Virtual store enhancement
 *2.70.2       18-Dec-2019      Jinto Thomas    Added parameter execution context for userbl declaration with userid 
 *2.70.3       21-Jan-2020      Mathew Ninan    Changes in clsTransactionInfo class to handle additional properties. Changes
 *                                              are specific to Club speed integration (PopulateTrxWaiverInfo)
 *2.70.3       06-Feb-2020      Nitin Pai       BIR and Reschedule related enhancements 
 *2.70.3       19-Mar-2020      Jinto Thomas    Modified UpdateTransactionLine() method
 *2.70.3       19-Mar-2020      Nitin Pai       Changing to user TrxHeaderDTO
 *2.80.0       19-Mar-2020      Jinto Thomas    Modified UpdateTransactionLine() method
 *2.80.0       11-Mar-2020      Mathew Ninan    Avoiding saving transaction before performing credit card payment.
 *                                              Transaction will be saved only if Payment is successful. 
 *                                              Card Entitlements to be marked as Valid on completion only if 
 *                                              LOAD_CARD_ENTITLEMENT_ON_TRANSACTION_COMPLETE is enabled.
 *2.80.0       15-Apr-2020      Jinto Thomas    Modified cancelLine() and cancelTransactionLine() method                                            
 * *2.80.0      13-Apr-2020      Deeksha        Split product entitlement for product type Recharge/Card sale/Gametime
 *2.80.0       29-Apr-2020      Akshay G        Added Assignment of Price,TaxId and CardId to the TransactionLineDTO.CardId
 *2.80.0       26-May-2020      Dakshakh        CardCount enhancement for product type Cardsale/GameTime/Attraction/Combo 
 *2.80.0       09-Jun-2020      Jinto Thomas    Enable Active flag for Comboproduct data
 *2.80.0       04-Jun-2020      Nitin           Removed TrxHeaderDTO and TrxLineDTO. Using TransactionDTO and TransactionLineDTO. Enhanced TransactionDTO() to send more details
 *2.80.0       04-Jun-2020      Nitin           Website Enhancement - Continue as Guest - Saving CustomerIdentifier field in trx_header table
 *2.80.0       23-Jun-2020      Deeksha         Issue Fix : Miami time play can not cancel line
 *2.90.0       23-Jun-2020      Raghuveera      Variable refund changes in CreateTransactionLine()
 *2.90         03-Jun-2020      Guru S A        Reservation enhancements for commando release
 *2.90         03-July-2020     Girish Kundar   Modified : Change as part of CardCodeDTOList replaced with AccountDTOList in CustomerDTO
 *2.90         19-Aug-2020      Nitin Pai       Issue Fix: Pricing of Attraction does not work correctly for Debit purchase with CP consumption 
 *2.100.0      23-Jul-2020      Mathew Ninan    Tracking Save and Print time of Transaction 
 *2.100        24-Sep-2020      Nitin Pai       Attraction Reschedule: Replace Attraction booking schdule fiels with Day Attraction Schedule entities
 *2.100        02-Nov-2020      Girish kundar   Modified: Added method to find Transaction reversed or not
 *2.100.0      30-Oct-2020      Mathew Ninan    Added LinkAsChildCard property to Transaction Line 
 *2.110        25-Nov-2020      Girish Kundar   Modified:  ThirdParty reference removed from the project
 *2.110.0      08-Dec-2020      Guru S A        Subscription changes
 *2.110.0      14-Dec-2020      Dakshakh Raj    Modified: for Peru Invoice Enhancement  
 *2.110.0      14-Feb-2021      Nitin Pau       Modified: Performance enhancements for Attractions
 *2.120.0      01-Apr-2021      Dakshakh raj    modified : Enabling variable hours for Passtech Lockers and enabling function to extend the time
 *2.120.0      18-Mar-2021      Guru S A        For Subscription phase 2 changes
 *2.120.0      12-Apr-2021      Dakshakh raj    modified : Enabling variable hours for Passtech Lockers and enabling function to extend the time - Price amount changes
 *2.120.0      26-Apr-2021      Abhishek        Modified : POS UI Redesign
 *2.120.1      10-Aug-2021      Deeksha         Modified : Print Reciept Issue Fix: Ticket#: 30702
 *2.140.0      14-Sep-2021      Guru S A        Waiver mapping UI enhancements
 *2.140.0      27-Jun-2021      Fiona Lishal    Modified for Delivery Order enhancements for F&B and Urban Piper
 *2.140.0      09-Sep-2021      Girish Kundar   Modified: Check In/Check out changes
 *2.140.0      23-June-2021     Prashanth V     Modified: Added BuildAccountRelationshipList method
 *2.140.0      12-Dec-2021      Guru S A        Booking execute process performance fixes
 *2.140.0      15-Mar-2022      Fiona           GetStock issue Fix - Passing Site Id to this method.
 *2.140.0      08-Feb-2022	    Girish Kundar   Modified: Smartro Fiscalization
 *2.150.0      11-07-2022       Girish Kundar   Modified: Check-In Check-Out Phase-2
 *2.160.0      12-May-2022      Guru S A        Auto gratuity and service charge changes
 *2.150.1      22-Feb-2023      Guru S A        Kiosk Cart Enhancements
 *2.150.2      20-Jun-2023      Nitin Pai       Security Testing Fix: Catch SQL excpeption and throw as generic exception.
 *2.150.3      30-Jun-2023      Abhishek        Hecere Locker Integration, modified to get card details associated with Hecere Locker.
 *2.150.1      03-Aug-2023      Ashish Sreejith Modified: Removed check for TrxLine.ComboChildLine in createTransactionLine() to allow combo child products to have promotion
 ***********************************************************************************************************************************/

using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Reflection;
using System.Linq;
using Microsoft.SqlServer.Server;
using Semnox.Parafait.Discounts;
using Semnox.Parafait.Waiver;
using Semnox.Core.Utilities;
using Semnox.Parafait.Customer;
using Semnox.Parafait.Product;
using Semnox.Parafait.Category;
using Semnox.Parafait.Customer.Accounts;
using Semnox.Core.GenericUtilities;
using Semnox.Parafait.Device.PaymentGateway;
using Semnox.Parafait.Promotions;
using Semnox.Parafait.CardCore;
using Semnox.Parafait.Device.Lockers;
using Semnox.Parafait.Printer;
using Semnox.Parafait.POS;
using Semnox.Parafait.Communication;
using Semnox.Parafait.Customer.Waivers;
using Semnox.Parafait.User;
using Semnox.Parafait.Device.Printer.FiscalPrint;
using Semnox.Parafait.Languages;
using Semnox.Parafait.Tags;
using Semnox.Parafait.Transaction.KDS;
using Semnox.Parafait.Device.Printer.FiscalPrint.Smartro;
using Semnox.Parafait.Site;
using System.Collections.Concurrent;

namespace Semnox.Parafait.Transaction
{
    public class Transaction
    {
        private TransactionDTO transactionDTO = new TransactionDTO();

        public int Trx_id;
        public string Trx_No = "";
        public OrderHeaderBL Order;
        public string LoginID;
        public string Username;
        public string POSMachine;
        public double Transaction_Amount; // total amount without discounts, including taxes
        public double Discount_Amount; // discount amount applied on Transaction_Amount
        public double Net_Transaction_Amount; // nett amount after applying discounts
        public double Pre_TaxAmount; // total amount before applying line level discounts
        public double Tip_Amount; //Modification on 09-Nov-2015: Tip Feature
        public double Tax_Amount; // total tax amount
        public DateTime TransactionDate;
        public List<TransactionLine> TrxLines;
        public List<TransactionPaymentsDTO> TransactionPaymentsDTOList;
        public double PaymentUsedCreditPlus;
        public string PaymentCardNumber;
        List<DiscountsSummaryDTO> discountsSummaryDTOList;
        Dictionary<int, DiscountsSummaryDTO> discountsSummaryDTODictionary;
        List<DiscountApplicationHistoryDTO> discountApplicationHistoryDTOList;
        HashSet<int> manuallyRemovedDiscountIdList;
        public int PaymentMode;
        public string PaymentReference;
        public DateTime? TrxInitiatedTime = null;
        public string Remarks = "";
        public int POSMachineId = -1;
        public int POSTypeId = -1;
        public int TrxProfileId = -1;
        public string TokenNumber;
        public object site_id = DBNull.Value;
        public DateTime TrxDate = DateTime.MinValue;
        public DateTime EntitlementReferenceDate;//New variable to capture purchase date of card product online
        //Begin:Added to update originalSystemReference with trxId on Nov-19-2015//
        public string originalSystemReference;
        public string transactionOTP;
        public string externalSystemReference;//Modification on 17-May-2016 for adding PosPlus 
        public string customerIdentifier;
        //End//
        public DateTime DBReadTime = ServerDateTime.Now;

        public int OriginalTrxId = -1; //22-Jun-2016 Added to see that original trxid is populated for the transaction

        public double CashAmount = 0;
        public double CreditCardAmount = 0;
        public double GameCardAmount = 0;
        public double OtherModeAmount = 0;

        public double TotalPaidAmount = 0;

        //to track card update by others
        public DateTime GameCardReadTime;
        //public int GameCardId = -1;
        public string ZoneCode = "";

        public Card PrimaryCard;
        //public staticDataExchange StaticDataExchange;
        public Utilities Utilities;//Make Trx Utilities available for Trx specific properties
        TransactionUtils TransactionUtils;
        ParafaitEnv ParafaitEnv;
        bool applyProductPrice = false;//Added to check if combo price is -1on 06-Oct-2015. Added to calculate individual product prices within a combo
        List<TransactionLine> transactionLineList = new List<TransactionLine>();
        internal FrmProductModifier.TransactionModifier transactionModifier = new FrmProductModifier.TransactionModifier();
        PurchasedProducts purchasedProduct = new PurchasedProducts();
        private Dictionary<int, DataRow> productDictionary = new Dictionary<int, DataRow>();
        private Dictionary<int, DataTable> comboManualChildDictionary = new Dictionary<int, DataTable>();
        private Dictionary<int, List<ComboProductDTO>> comboProductSetupDataDictionary = new Dictionary<int, List<ComboProductDTO>>();
        private Dictionary<int, List<ProductsDTO>> attractionCategroyProductDictionary = new Dictionary<int, List<ProductsDTO>>();
        private Dictionary<string, bool> inventoryProductStatusDictionary = new Dictionary<string, bool>();
        private List<Tuple<int, int, int, int>> childComboQtyList = new List<Tuple<int, int, int, int>>();
        private List<BookingAttendeeDTO> bookingAttendeeList = new List<BookingAttendeeDTO>();
        private string trxGuid;
        private Dictionary<int, ProductsDTO> productDTODictionary = new Dictionary<int, ProductsDTO>();
        private Dictionary<int, ComboProductDTO> comboProductDTODictionary = new Dictionary<int, ComboProductDTO>();
        private List<MasterScheduleBL> masterScheduleBLList = null;
        private const string DAYSTILLRESERVATIONRESCHEDULE = "DAYS_TILL_RESERVATION_RESCHEDULE";
        private List<KeyValuePair<Transaction.TransactionLine, List<ValidationError>>> rescheduleReservationValidationList = new List<KeyValuePair<TransactionLine, List<ValidationError>>>();
        private const string TRXTOKENOBJECTCODE = "TRX_HEADER";
        public List<string> customerIdentifiersList;
        private List<TrxPOSPrinterOverrideRulesDTO> trxPOSPrinterOverrideRulesDTOList = new List<TrxPOSPrinterOverrideRulesDTO>();
        private List<LookupValuesDTO> peruValidationLookupValuesDTOList = new List<LookupValuesDTO>();
        private const string FISCAL_OPTION_VALIDATION_LOOKUP = "FISCAL_OPTION_VALIDATION";
        private const string FISCAL_CUSTOMER_VALIDATION_LOOKUP = "FISCAL_CUSTOMER_VALIDATION";
        private bool? queueSetupReqForGames = null;
        private ConcurrentQueue<KeyValuePair<int, string>> statusProgressMsgQueue = null;
        private TransactionOrderDispensingDTO transctionOrderDispensingDTO;
        private Dictionary<string, bool> dbHasCancelledLineForProductType = new Dictionary<string, bool>();
        private ExecutionContext masterSiteExecutionContext = null;
        private const string EXTERNALPOSUSER = "External POS";
        private const string USLANGUAGECODE = "en-US";
        private Dictionary<int, double> productCardCreditPlusBalanceData = new Dictionary<int, double>();
        /// <summary>
        /// TrxStatus
        /// </summary>
        public enum TrxStatus
        {
            INITIATED,
            BOOKING, //Should be renamed as BOOKED?
            ORDERED,
            RESERVED,
            OPEN,
            PREPARED,
            CANCELLED,
            CLOSED,
            PENDING, //Should be renamed as PENDINGCLOSE?
            SYSTEMABANDONED
            // MERGED to be added later
        };
        public TrxStatus Status;
        public Dictionary<string, int> TransactionOrderTypes = null;
        public List<EligibleTrxLinesPrinterMapper> EligibleTrxLinesPrinterMapperList;
        public List<ValidTrxLinePrinterListMapper> ValidTrxLinePrinterListMapperList;
        // public bool IsWaiverSigned = false; // added on - 18-May-2016 for waiver implementation

        public clsTransactionInfo TransactionInfo;
        //Start Modification on 14-3-2016
        public String ParentModifierName = "";
        public int ParentModifierProductId = -1;
        public decimal ParentModifierProductPrice = 0;
        public int ParentModifierSetId = 0;
        public bool isModifierPriceApplied = false;
        //End Modification on 14-3-2016
        public CustomerDTO customerDTO;//Added to get the customerDTO object and link the customer id to the transaction line on Dec-16-2015//
        public int ReprintCount;//Modification on 03-OCT-2016
        public int PrintCount = 0;

        public bool IsOrderPrinted = false; //Modifier added for KOT enhancement, to add running order for new order if an item being order from existing

        public bool ApplyBookingDatePromotionPrice = false; //added to apply booking promotion based on booking date 

        public bool IsGroupMeal = false;

        //2.100.0 - Tracking Save and Print time for transaction
        public DateTime? SaveStartTime = null;
        public DateTime? SaveEndTime = null;
        public DateTime? PrintStartTime = null;
        public DateTime? PrintEndTime = null;

        public int OrderTypeGroupId = -1;
        private HashSet<int> orderTypeIdSet;
        private List<OrderTypeGroupBL> orderTypeGroupBLList;
        //private List<WaiverSignatureDTO> waiversSignedHistoryDTOList;

        public WaiverSigningMode WaiverSignedMode;

        public List<POSPrinterDTO> POSPrinterDTOList;

        public int offSetDuration = 0;

        public double PaymentCreditCardSurchargeAmount = 0;

        public Dictionary<string, ApprovalAction> transactionApprovals = new Dictionary<string, ApprovalAction>();

        public List<BookingAttendeeDTO> BookingAttendeeList { get { return bookingAttendeeList; } set { bookingAttendeeList = value; } }
        public List<TrxPOSPrinterOverrideRulesDTO> TrxPOSPrinterOverrideRulesDTOList { get { return trxPOSPrinterOverrideRulesDTOList; } set { trxPOSPrinterOverrideRulesDTOList = value; } }
        public string TrxGuid { get { return trxGuid; } set { trxGuid = value; } }
        public ConcurrentQueue<KeyValuePair<int, string>> SetStatusProgressMsgQueue { set { statusProgressMsgQueue = value; } }
        /// <summary>
        /// TransctionOrderDispensingDTO
        /// </summary>
        public TransactionOrderDispensingDTO TransctionOrderDispensingDTO { get { return transctionOrderDispensingDTO; } set { transctionOrderDispensingDTO = value; } }

        /// <summary>
        /// default constructor
        /// </summary>
        public Transaction()
        {
        }

        //public Transaction(List<POSPrinterDTO> posPrinterDTOList, staticDataExchange pStaticDataExchange) : this(pStaticDataExchange)
        //{
        //    if (POSPrinterDTOList == null)
        //        POSPrinterDTOList = new List<POSPrinterDTO>();
        //    POSPrinterDTOList = posPrinterDTOList;
        //}

        /// <summary>
        /// Constructor taking POS Printer list and Utilities object
        /// </summary>
        /// <param name="posPrinterDTOList">POS Printer DTO List</param>
        /// <param name="pUtilities">Utilities object</param>
        public Transaction(List<POSPrinterDTO> posPrinterDTOList, Utilities pUtilities) : this(pUtilities)
        {
            if (POSPrinterDTOList == null)
                POSPrinterDTOList = new List<POSPrinterDTO>();
            POSPrinterDTOList = posPrinterDTOList;
        }

        internal Transaction(Utilities pUtilities, ReservationDTO reservationDTO) : this(pUtilities)
        {
            log.LogMethodEntry(reservationDTO);
            if (reservationDTO == null)
            {
                throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2131));// "Sorry, unable to proceed. Reservation details are missing" 
            }
            this.TrxDate = reservationDTO.FromDate;
            this.EntitlementReferenceDate = reservationDTO.FromDate;
            this.ApplyBookingDatePromotionPrice = true;
            log.LogMethodExit();
        }

        public class ComboCardProduct
        {
            public int ComboProductId;
            public int ChildProductId;
            public string ChildProductType; //added for reservation requirement - 06-Oct-2015
            public string ChildProductName;
            public int Quantity;
            public float Price;             //Added for Combo taxation requirement -12/9/2017
            public List<string> CardNumbers = new List<string>();
            public bool LoadToSingleCard = false;
            public SubscriptionHeaderDTO SubscriptionHeaderDTO = null;
        }

        public class ComboManualProduct
        {
            public int ComboProductId;
            public int ChildProductId;
            public string ChildProductName;
            public int Quantity;
            public decimal Price;
        }

        public class TransactionLine
        {
            private TransactionLineDTO transactionLineDTO = new TransactionLineDTO();

            public TransactionLine ParentLine;
            public int ProductID;
            public int CategoryId = -1;
            public string CardNumber;
            public string ProductName;
            public string ProductTypeCode;
            public string ProductType;
            public double Price;
            public double OriginalPrice;
            public double Credits;
            public double Courtesy;
            public double VariableCreditPlusCredits;
            public double Bonus = 0;
            public double Time = 0;
            public int Tickets = 0;
            public double LoyaltyPoints = 0;
            public double LineAmount;
            public double DiscountAmount;
            public double AllocatedProductPrice = 0;
            public double Discount_Percentage;
            public bool LineValid;
            public bool LineProcessed;
            public Card card;
            public double tax_percentage;
            public double tax_amount;
            public int tax_id = -1;
            public string taxName = "";
            public decimal quantity = 1;
            public float face_value;
            public string ticket_allowed = "Y";
            public string vip_card = "N";
            public string InventoryProductCode;
            public string TaxInclusivePrice;
            public AttractionBooking LineAtb;
            //public clsCheckIn LineCheckIn;//to be removed
            //public clsCheckOut LineCheckOut;//to be removed
            public CheckInDTO LineCheckInDTO;//Added CheckInDTO
            public CheckInDetailDTO LineCheckInDetailDTO;//Added CheckInDetailDTO
            public CheckInDetailDTO LineCheckOutDetailDTO;//Added CheckInDetailDTO
            public int CreditPlusConsumptionId = -1;
            public bool CreditPlusConsumptionApplied = false; //Added on 03-Feb-2016 to apply Consumption entitlement only once
            //public int CardTypeId = -1;
            public int PromotionId = -1;
            public string AttractionDetails = "";
            public string Remarks;
            public string cancelCode;
            public object KOTPrintCount = DBNull.Value;
            public bool PrintKOT = true;
            public bool KOTCountIncremented = false;
            public List<int> DiscountQualifierList = new List<int>();
            public string ApprovedBy = "";

            public int LockerNumber;
            public string LockerName;
            //public int LockerAllocationId = -1;
            //public string ZoneCode = "";
            //public DateTime LockerExpiryDate;
            public string LockerMode = "";
            public string LockerMake = "";
            public LockerAllocationDTO lockerAllocationDTO;

            public int OriginalLineID = -1; //22-Jun-2016 Added to see that originalline ID is populated in case of reversed/returned transaction

            //For rental returns
            public double RentalDeposit = 0;
            public int OrigRentalTrxId = -1;
            public int RentalProductId = -1;

            public bool UserPrice = false;
            public bool UsedInDiscounts = false;
            public bool ComboChildLine = false;
            public bool ModifierLine = false;
            public bool HasModifier = false;
            public bool AllowPriceOverride = false;
            public bool AllowEdit = true;
            public bool AllowCancel = true;
            public bool ReceiptPrinted = false;
            public bool LinkAsChildCard = false;
            public int DBLineId = 0;
            public object ModifierSetId = -1;

            public bool KDSSent = false;
            public bool SendToKDS = true;
            public string IsWaiverRequired = "N"; //Added on 12-May-2016 for waiver implementation
            public bool CancelledLine = false;
            public string LicenseType = ""; // Added on 10-Dec-2020 for License Functionality

            public long GameplayId = -1; // added iqbal Jun 2 2016

            public bool productSplitTaxExists = false;

            //public List<Discounts.DiscountLine> discountLines = new List<Discounts.DiscountLine>();
            private List<TransactionDiscountsDTO> transactionDiscountsDTOList;
            private List<DiscountCouponsDTO> issuedDiscountCouponsDTOList;
            //Start Modification on 14-3-2016
            public int ParentModifierProductId;
            public string ParentModifierName;
            public double ParentModifierPrice;
            public int ParentModifierSetId;
            public int ParentModifierTaxId;
            public double ParentModiferTaxPercent;
            public string ParentModiferTaxInclusive;
            private string discountTag;
            //End Modification on 14-3-2016
            public string productHSNCode;
            //SC-PWD details to be captured
            public string userVerificationId;
            public string userVerificationName;
            public string userVerificationRemarks;
            public NotificationTagIssuedDTO NotificationTagIssuedDTO;

            public string guid;
            //Line leve tax exempt
            public int TrxProfileId = -1;
            public int OrderTypeId = -1;

            public int MembershipId = -1;
            public int MembershipRewardsId = -1;
            public string ExpireWithMembership = "N";
            public string ForMembershipOnly = "N";

            public string CardGuid;
            public int WaiverSetId = -1;
            public DateTime lastUpdateDate = DateTime.MinValue;
            private List<WaiverSignatureDTO> waiverSignedDTOList;
            private int comboproductId = -1;
            //private TransactionReservationScheduleDTO transactionReservationScheduleDTO;
            private List<TransactionReservationScheduleDTO> transactionReservationScheduleDTOList;
            private SubscriptionHeaderDTO subscriptionHeaderDTO;
            private List<KDSOrderLineDTO> kDSOrderLineDTOList;
            private bool multiPointConversionRequired = false;
            private string convertToTimeGuid = string.Empty;

            public Dictionary<string, ApprovalAction> lineApprovals = new Dictionary<string, ApprovalAction>();
            public void AddApproval(string action, string approverId, DateTime? approvalTime)
            {
                if (this.lineApprovals != null)
                {
                    if (!lineApprovals.ContainsKey(action))
                    {
                        ApprovalAction approvalAction = new ApprovalAction(approverId, approvalTime);
                        lineApprovals.Add(action, approvalAction);
                    }
                }
            }

            public ApprovalAction GetApproval(string action)
            {
                ApprovalAction approvalAction = new ApprovalAction("", null);
                if (this.lineApprovals != null)
                {
                    if (lineApprovals.ContainsKey(action))
                    {
                        return lineApprovals[action];
                    }
                }
                return approvalAction;
            }

            public bool MultiPointConversionRequired { get { return multiPointConversionRequired; } set { multiPointConversionRequired = value; } }
            public string ConvertToTimeGuid { get { return convertToTimeGuid; } set { convertToTimeGuid = value; } }

            public Semnox.Parafait.logging.Logger log = new Semnox.Parafait.logging.Logger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

            public TransactionLine()
            {
            }

            public TransactionLineDTO TransactionLineDTO
            {
                get
                {
                    try
                    {
                        transactionLineDTO.ProductId = ProductID;
                        transactionLineDTO.Amount = (decimal)LineAmount;
                        transactionLineDTO.Price = (decimal)Price;
                        transactionLineDTO.TaxId = tax_id;
                        transactionLineDTO.TaxPercentage = Convert.ToDecimal(tax_percentage);
                        transactionLineDTO.TaxName = taxName;
                        transactionLineDTO.TaxAmount = Convert.ToDecimal(tax_amount);
                        transactionLineDTO.Quantity = quantity;
                        transactionLineDTO.LineId = DBLineId == 0 ? -1 : DBLineId;
                        transactionLineDTO.OriginalLineId = OriginalLineID;
                        transactionLineDTO.KOTPrintCount = ((KOTPrintCount != null && KOTPrintCount != DBNull.Value) ? (int)KOTPrintCount : 0);
                        transactionLineDTO.LastUpdatedDate = lastUpdateDate;
                        transactionLineDTO.ProductTypeCode = ProductTypeCode;
                        transactionLineDTO.ProductName = ProductName;
                        transactionLineDTO.CardNumber = CardNumber;
                        transactionLineDTO.ReceiptPrinted = ReceiptPrinted;
                        transactionLineDTO.Remarks = Remarks;
                        transactionLineDTO.CardGuid = CardGuid;
                        transactionLineDTO.Guid = Guid;
                        transactionLineDTO.SiteId = -1;
                        if (card != null)
                        {
                            transactionLineDTO.CardId = card.card_id;
                        }

                        transactionLineDTO.ParentLineId = ParentTransactionLine != null ? ParentTransactionLine.DBLineId : -1;
                        transactionLineDTO.ParentLineGuid = ParentTransactionLine != null ? ParentTransactionLine.Guid : "";

                        if (WaiverSignedDTOList != null)
                            transactionLineDTO.WaiverSignedDTOList = WaiverSignedDTOList;

                        if (this.LineAtb != null)
                            transactionLineDTO.AttractionBookingDTO = LineAtb.AttractionBookingDTO;

                        if (this.SubscriptionHeaderDTO != null)
                            transactionLineDTO.SubscriptionHeaderDTO = this.SubscriptionHeaderDTO;
                    }
                    catch (Exception ex)
                    {
                        log.Fatal("Failed to get transaction line " + ex.Message);
                    }
                    return transactionLineDTO;
                }
            }

            public CardCoreDTO CardCoreDTO
            {
                get
                {
                    CardCoreDTO cardCoreDTO = null;
                    if (card != null)
                    {
                        cardCoreDTO = new CardCoreDTO(card.card_id, card.CardNumber, card.issue_date,
                            card.face_value, card.refund_flag, card.refund_amount, card.refund_date,
                            card.valid_flag, card.ticket_count, card.notes, card.last_update_time.ToString(),
                            Convert.ToDecimal(card.credits), Convert.ToDecimal(card.courtesy), Convert.ToDecimal(card.bonus), Convert.ToDecimal(card.time), card.customer_id,
                            Convert.ToDecimal(card.credits_played), card.ticket_allowed, card.real_ticket_mode,
                            card.vip_customer, card.siteId, card.start_time, card.last_played_time,
                            card.technician_card, card.tech_games, 'N', Convert.ToInt32(card.loyalty_points),
                            // null, card.CardTypeId, null, -1, DateTime.MinValue, false, card.ExpiryDate,
                            null, -1, null, -1, DateTime.MinValue, false, card.ExpiryDate,
                            -1, DateTime.MinValue, -1, card.primaryCard);
                    }
                    return cardCoreDTO;
                }
            }

            public Transaction.TransactionLine ParentTransactionLine
            {
                get
                {
                    return ParentLine;
                }
            }

            public List<TransactionDiscountsDTO> TransactionDiscountsDTOList
            {
                get
                {
                    return transactionDiscountsDTOList;
                }
                set
                {
                    transactionDiscountsDTOList = value;
                }
            }

            public int TransactionProfileId
            {
                get
                {
                    return TrxProfileId;
                }
            }

            public int TaxId
            {
                get
                {
                    return tax_id;
                }
            }

            private void AddTransactionDiscountsDTO(TransactionDiscountsDTO transactionDiscountsDTO)
            {
                log.LogMethodEntry(transactionDiscountsDTO);

                if (transactionDiscountsDTOList == null)
                {
                    transactionDiscountsDTOList = new List<TransactionDiscountsDTO>();
                }
                transactionDiscountsDTOList.Add(transactionDiscountsDTO);

                log.LogMethodExit(null);
            }

            public void RemoveDiscount(int discountId)
            {
                log.LogMethodEntry(discountId);

                if (DiscountQualifierList.Any(x => x == discountId))
                {
                    DiscountQualifierList.RemoveAll(x => x == discountId);
                }
                if (transactionDiscountsDTOList != null && transactionDiscountsDTOList.Count > 0)
                {
                    List<TransactionDiscountsDTO> resultTransactionDiscountsDTOList =
                        transactionDiscountsDTOList.FindAll(transactionDiscountsDTO =>
                                                            transactionDiscountsDTO.DiscountId == discountId);
                    if (resultTransactionDiscountsDTOList != null && resultTransactionDiscountsDTOList.Count > 0)
                    {
                        foreach (var transactionDiscountsDTO in resultTransactionDiscountsDTOList)
                        {
                            if (transactionDiscountsDTO.TransactionDiscountId != -1)
                            {
                                TransactionDiscountsBL transactionDiscountsBL = new TransactionDiscountsBL(ExecutionContext.GetExecutionContext(), transactionDiscountsDTO);
                                transactionDiscountsBL.Delete();
                            }
                        }
                    }
                    List<TransactionDiscountsDTO> newTransactionDiscountsDTOList = transactionDiscountsDTOList.FindAll(transactionDiscountsDTO =>
                                                                                   transactionDiscountsDTO.DiscountId != discountId);
                    transactionDiscountsDTOList = newTransactionDiscountsDTOList;
                }

                log.LogMethodExit();
            }

            public List<DiscountCouponsDTO> IssuedDiscountCouponsDTOList
            {
                get
                {
                    return issuedDiscountCouponsDTOList;
                }
                set
                {
                    issuedDiscountCouponsDTOList = value;
                }
            }


            public List<WaiverSignatureDTO> WaiverSignedDTOList
            {
                get
                {
                    return waiverSignedDTOList;
                }
                set
                {
                    waiverSignedDTOList = value;
                }
            }


            public string Guid
            {
                get
                {
                    return guid;
                }

                set
                {
                    guid = value;
                }
            }
            /// <summary>
            /// Get Current Transaction Reservation ScheduleDTO
            /// </summary>
            /// <returns></returns>
            public TransactionReservationScheduleDTO GetCurrentTransactionReservationScheduleDTO()
            {
                log.LogMethodEntry();
                TransactionReservationScheduleDTO transactionReservationScheduleDTO = null;
                if (this.transactionReservationScheduleDTOList != null && this.transactionReservationScheduleDTOList.Any())
                {
                    List<TransactionReservationScheduleDTO> tempTRSDTOList = new List<TransactionReservationScheduleDTO>(this.transactionReservationScheduleDTOList.OrderBy(trs => trs.Cancelled).ThenByDescending(trs => trs.ExpiryDate).ToList());
                    transactionReservationScheduleDTO = tempTRSDTOList[0];
                }
                log.LogMethodExit(transactionReservationScheduleDTO);
                return transactionReservationScheduleDTO;
            }
            /// <summary>
            /// Set Transaction Reservation ScheduleDTO
            /// </summary>
            /// <param name="transactionReservationScheduleDTO"></param>
            public void SetTransactionReservationScheduleDTO(ExecutionContext executionContext, TransactionReservationScheduleDTO transactionReservationScheduleDTO)
            {
                log.LogMethodEntry();
                if (transactionReservationScheduleDTO != null)
                {
                    if (this.transactionReservationScheduleDTOList != null && this.transactionReservationScheduleDTOList.Any())
                    {
                        //match by id or by scheduleid and facilitymap id for unsaved record
                        TransactionReservationScheduleDTO trsDTo = this.transactionReservationScheduleDTOList.Find(trs => (trs.TrxReservationScheduleId == transactionReservationScheduleDTO.TrxReservationScheduleId
                                                                                                                           && transactionReservationScheduleDTO.TrxReservationScheduleId > -1)
                                                                                                                           || (trs.TrxReservationScheduleId == transactionReservationScheduleDTO.TrxReservationScheduleId
                                                                                                                                && transactionReservationScheduleDTO.TrxReservationScheduleId == -1
                                                                                                                                && trs.SchedulesId == transactionReservationScheduleDTO.SchedulesId
                                                                                                                                && trs.FacilityMapId == transactionReservationScheduleDTO.FacilityMapId
                                                                                                                                && trs.Cancelled == transactionReservationScheduleDTO.Cancelled)
                                                                                                                            );

                        if (trsDTo != null)
                        {
                            int index = this.transactionReservationScheduleDTOList.IndexOf(trsDTo);
                            if (index > -1)
                            {
                                this.transactionReservationScheduleDTOList[index] = transactionReservationScheduleDTO;
                            }
                            else
                            {
                                throw new ValidationException(MessageContainerList.GetMessage(executionContext, 1800));
                                //Schedule details are not set
                            }
                        }
                        else
                        {
                            this.transactionReservationScheduleDTOList.Add(transactionReservationScheduleDTO);
                        }
                    }
                    else
                    {
                        this.transactionReservationScheduleDTOList = new List<TransactionReservationScheduleDTO>();
                        this.transactionReservationScheduleDTOList.Add(transactionReservationScheduleDTO);
                    }
                }
                log.LogMethodExit();
            }
            public List<TransactionReservationScheduleDTO> TransactionReservationScheduleDTOList { get { return transactionReservationScheduleDTOList; } set { transactionReservationScheduleDTOList = value; } }
            /// <summary>
            /// 
            /// </summary>
            public List<KDSOrderLineDTO> KDSOrderLineDTOList { get { return kDSOrderLineDTOList; } set { kDSOrderLineDTOList = value; } }

            public int ComboproductId { get { return comboproductId; } set { comboproductId = value; } }

            /// <summary>
            /// Returns the total discount amount
            /// </summary>
            /// <returns></returns>
            public decimal GetDiscountAmount()
            {
                log.LogMethodEntry();
                decimal result = 0;
                if (TransactionDiscountsDTOList != null)
                {
                    foreach (TransactionDiscountsDTO transactionDiscountsDTO in TransactionDiscountsDTOList)
                    {
                        if (transactionDiscountsDTO.DiscountAmount.HasValue)
                        {
                            result += transactionDiscountsDTO.DiscountAmount.Value;
                        }
                    }
                }
                log.LogMethodExit(result);
                return result;
            }

            /// <summary>
            /// Returns whether the line can be discounted
            /// </summary>
            /// <param name="executionContext"></param>
            /// <param name="discountContainerDTO"></param>
            /// <returns></returns>
            public bool CanBeDiscounted(ExecutionContext executionContext, DiscountContainerDTO discountContainerDTO)
            {
                log.LogMethodEntry(discountContainerDTO);
                if (DiscountQualifierList.Any())
                {
                    foreach (int DiscountQualifier in DiscountQualifierList)
                    {
                        DiscountContainerDTO appliedDiscountContainerDTO;
                        if (DiscountQualifier == discountContainerDTO.DiscountId)
                        {
                            appliedDiscountContainerDTO = discountContainerDTO;
                        }
                        else
                        {
                            appliedDiscountContainerDTO = DiscountContainerList.GetDiscountContainerDTOOrDefault(executionContext, discountContainerDTO.DiscountId);

                        }
                        if (appliedDiscountContainerDTO != null &&
                            (appliedDiscountContainerDTO.AllowMultipleApplication == false ||
                             discountContainerDTO.AllowMultipleApplication == false))
                        {
                            string message = "Line is used as a criteria for another discount " + DiscountQualifier;
                            log.LogMethodExit(false, message);
                            return false;
                        }
                    }
                }

                if (LineAmount <= 0)
                {
                    log.LogMethodExit(false, "Line amount is less than or equal to 0. " + LineAmount);
                    return false;
                }

                if (DiscountContainerList.IsCriteria(executionContext, discountContainerDTO.DiscountId, ProductID) == false &&
                    DiscountContainerList.IsDiscounted(executionContext, discountContainerDTO.DiscountId, ProductID) == false)
                {
                    log.LogMethodExit(false, "Line is neither a criteria nor a discounted product.");
                    return false;
                }
                if (TransactionDiscountsDTOList != null && TransactionDiscountsDTOList.Any())
                {
                    decimal discountableAmount = GetDiscountableAmount();
                    if (discountableAmount <= 0)
                    {
                        log.LogMethodExit(false, "Line is fully discounted. Line amount : " + LineAmount + " discountable amount: " + discountableAmount);
                        return false;
                    }
                    foreach (TransactionDiscountsDTO transactionDiscountsDTO in TransactionDiscountsDTOList)
                    {
                        DiscountContainerDTO appliedDiscountContainerDTO;
                        if (transactionDiscountsDTO.DiscountId == discountContainerDTO.DiscountId)
                        {
                            appliedDiscountContainerDTO = discountContainerDTO;
                        }
                        else
                        {
                            appliedDiscountContainerDTO = DiscountContainerList.GetDiscountContainerDTOOrDefault(executionContext, transactionDiscountsDTO.DiscountId);
                        }

                        if (appliedDiscountContainerDTO != null &&
                            (appliedDiscountContainerDTO.AllowMultipleApplication == false ||
                             discountContainerDTO.AllowMultipleApplication == false))
                        {
                            string message = String.Format("Line is already discounted with discount {0} ({1}).", appliedDiscountContainerDTO.DiscountName, appliedDiscountContainerDTO.DiscountId);
                            log.LogMethodExit(false, message);
                            return false;
                        }
                    }
                }

                log.LogMethodExit(true);
                return true;
            }

            /// <summary>
            /// Returns the amount that can be discounted
            /// </summary>
            /// <returns></returns>
            public decimal GetDiscountableAmount()
            {
                log.LogMethodEntry();
                if (LineAmount <= 0)
                {
                    log.LogMethodExit(0, "Line amount is " + LineAmount + " which is <= 0");
                    return 0m;
                }
                decimal result = (decimal)LineAmount - GetDiscountAmount();
                if (result <= 0)
                {
                    log.LogMethodExit(0, "Discountable amount is " + result + " which is <= 0");
                    return 0m;
                }
                log.LogMethodExit(result);
                return result;
            }

            /// <summary>
            /// Applys the discount amount to the line
            /// </summary>
            /// <param name="discountId">discount id</param>
            /// <param name="discountAmount">discount amount</param>
            /// <param name="remarks">remarks</param>
            /// <param name="approvedBy">approved manager id</param>
            /// <param name="discountApplicability">discount applicablility</param>
            public void ApplyDiscountAmount(int discountId, decimal discountAmount, string remarks,
                int approvedBy, DiscountApplicability discountApplicability)
            {
                log.LogMethodEntry(discountAmount, remarks, approvedBy, discountApplicability);
                decimal discountableAmount = GetDiscountableAmount();
                if (discountableAmount == 0)
                {
                    log.LogMethodExit(null, "Unable to apply discount to line as discountable amount is 0.");
                    return;
                }

                decimal finalDiscountAmount = discountAmount;
                if (discountAmount > discountableAmount)
                {
                    finalDiscountAmount = discountableAmount;
                }

                if (finalDiscountAmount <= 0)
                {
                    log.LogMethodExit("Unable to apply discount final discount amount is 0");
                    return;
                }

                TransactionDiscountsDTO transactionDiscountsDTO = new TransactionDiscountsDTO
                {
                    DiscountId = discountId,
                    Remarks = remarks,
                    ApprovedBy = approvedBy,
                    Applicability = discountApplicability,
                    DiscountAmount = finalDiscountAmount,
                    DiscountPercentage = finalDiscountAmount / (decimal)LineAmount * 100m
                };
                AddTransactionDiscountsDTO(transactionDiscountsDTO);
                log.LogMethodExit();
            }

            /// <summary>
            /// Can fractional remaining discount amount can be adjusted to the line
            /// </summary>
            /// <param name="discountId">discount id</param>
            /// <returns></returns>
            public bool CanAdjustFractionDiscountAmount(int discountId)
            {
                log.LogMethodEntry(discountId);
                if (TransactionDiscountsDTOList == null || TransactionDiscountsDTOList.Count == 0)
                {
                    log.LogMethodExit(false, "No discount is applied to the line");
                    return false;
                }
                TransactionDiscountsDTO lastAppliedTransactionDiscountsDTO =
                    TransactionDiscountsDTOList[TransactionDiscountsDTOList.Count - 1];
                if (lastAppliedTransactionDiscountsDTO.DiscountId != discountId)
                {
                    log.LogMethodExit(false, "Last applied discount is different " + lastAppliedTransactionDiscountsDTO.DiscountId);
                    return false;
                }

                bool result = GetDiscountableAmount() > 0;
                return true;
            }

            /// <summary>
            /// Adjust the remaining discount amount to the line 
            /// </summary>
            /// <param name="discountId">discount id</param>
            /// <param name="discountAmount">discount amount</param>
            public void AdjustFractionDiscountAmount(int discountId, decimal discountAmount)
            {
                log.LogMethodEntry(discountId, discountAmount);
                TransactionDiscountsDTO lastAppliedTransactionDiscountsDTO =
                    TransactionDiscountsDTOList[TransactionDiscountsDTOList.Count - 1];
                lastAppliedTransactionDiscountsDTO.DiscountAmount += discountAmount;
                lastAppliedTransactionDiscountsDTO.DiscountPercentage =
                    lastAppliedTransactionDiscountsDTO.DiscountAmount / (decimal)LineAmount * 100m;
                log.LogMethodExit();
            }

            /// <summary>
            /// Returns how many time the discount is applied on the line
            /// </summary>
            /// <param name="discountId"></param>
            /// <returns></returns>
            public int GetDiscountApplicationCount(int discountId)
            {
                log.LogMethodEntry(discountId);
                int result = 0;
                if (transactionDiscountsDTOList != null)
                {
                    result = transactionDiscountsDTOList.Count(x => x.DiscountId == discountId);
                }
                log.LogMethodExit(result);
                return result;
            }
            /// <summary>
            /// Expire Trx Reservation Schedule
            /// </summary>
            /// <param name="sqlTrx"></param>
            public void ExpireTrxReservationSchedule(ExecutionContext executionContext, SqlTransaction sqlTrx)
            {
                log.LogMethodEntry(sqlTrx);
                if (this.transactionReservationScheduleDTOList != null && this.transactionReservationScheduleDTOList.Any())
                {
                    List<TransactionReservationScheduleDTO> activeTRSDTOLIst = this.transactionReservationScheduleDTOList.Where(trs => trs.Cancelled == false).ToList();
                    if (activeTRSDTOLIst != null && activeTRSDTOLIst.Any())
                    {
                        for (int i = 0; i < activeTRSDTOLIst.Count; i++)
                        {
                            int index = this.transactionReservationScheduleDTOList.IndexOf(activeTRSDTOLIst[i]);
                            TransactionReservationScheduleDTO transactionReservationScheduleDTO = activeTRSDTOLIst[i];
                            TransactionReservationScheduleBL transactionReservationScheduleBL = new TransactionReservationScheduleBL(executionContext, transactionReservationScheduleDTO);
                            transactionReservationScheduleBL.ExpireSchedule(sqlTrx);
                            //this.transactionReservationScheduleDTOList.RemoveAt(index);
                        }
                    }
                }
                log.LogMethodExit();
            }

            /// <summary>
            /// Expire Unsaved Trx Reservation Schedule
            /// </summary>
            /// <param name="sqlTrx"></param>
            public void ExpireUnSavedTrxReservationSchedule(ExecutionContext executionContext, SqlTransaction sqlTrx)
            {
                log.LogMethodEntry(sqlTrx);
                if (this.transactionReservationScheduleDTOList != null && this.transactionReservationScheduleDTOList.Any())
                {
                    List<TransactionReservationScheduleDTO> unSavedTrsDTOLIst = this.transactionReservationScheduleDTOList.Where(trs => trs.Cancelled == false && trs.TrxId == -1).ToList();
                    if (unSavedTrsDTOLIst != null && unSavedTrsDTOLIst.Any())
                    {
                        for (int i = 0; i < unSavedTrsDTOLIst.Count; i++)
                        {
                            int index = this.transactionReservationScheduleDTOList.IndexOf(unSavedTrsDTOLIst[i]);
                            TransactionReservationScheduleDTO transactionReservationScheduleDTO = unSavedTrsDTOLIst[i];
                            TransactionReservationScheduleBL transactionReservationScheduleBL = new TransactionReservationScheduleBL(executionContext, transactionReservationScheduleDTO);
                            transactionReservationScheduleBL.ExpireSchedule(sqlTrx);
                            this.transactionReservationScheduleDTOList.RemoveAt(index);
                        }
                    }
                }
                log.LogMethodExit();
            }

            internal void SaveTransactionReservationSchedule(ExecutionContext executionContext, int trxId, SqlTransaction sqlTrx)
            {
                log.LogMethodEntry(trxId, sqlTrx);
                for (int i = 0; i < this.TransactionReservationScheduleDTOList.Count; i++)
                {
                    if (this.TransactionReservationScheduleDTOList[i].TrxId != trxId)
                    {
                        this.TransactionReservationScheduleDTOList[i].TrxId = trxId;
                    }
                    if (this.TransactionReservationScheduleDTOList[i].LineId != this.DBLineId)
                    {
                        this.TransactionReservationScheduleDTOList[i].LineId = this.DBLineId;
                    }
                    if (this.TransactionReservationScheduleDTOList[i].IsChanged || this.TransactionReservationScheduleDTOList[i].TrxReservationScheduleId == -1)
                    {
                        TransactionReservationScheduleBL transactionReservationScheduleBL = new TransactionReservationScheduleBL(executionContext, this.TransactionReservationScheduleDTOList[i]);
                        transactionReservationScheduleBL.Save(sqlTrx);
                    }
                }
                log.LogMethodExit();
            }

            internal List<ValidationError> ValidateRescheduleReservationLine(ExecutionContext executionContext, List<MasterScheduleBL> masterScheduleBLList,
                List<Transaction.TransactionLine> trxLineList, TransactionReservationScheduleDTO oldTRSDTO, TransactionReservationScheduleDTO newTRSDTO)
            {
                log.LogMethodEntry(executionContext, masterScheduleBLList, trxLineList, oldTRSDTO, newTRSDTO);
                List<ValidationError> lineValidationErrorList0 = new List<ValidationError>();
                if (this.LineValid && this.ProductTypeCode == ProductTypeValues.RENTAL)
                {
                    //reservation schedule slots 
                    List<ValidationError> lineValidationErrorList1 = AdditionalTimeSlotValidation(executionContext, masterScheduleBLList, trxLineList, oldTRSDTO, newTRSDTO);
                    if (lineValidationErrorList1 != null && lineValidationErrorList1.Any())
                    {
                        lineValidationErrorList0.AddRange(lineValidationErrorList1);
                    }
                }
                else if (this.LineValid && this.ProductTypeCode == ProductTypeValues.ATTRACTION)
                {
                    List<ValidationError> lineValidationErrorList2 = AttractionProductScheduleValidation(executionContext, masterScheduleBLList, trxLineList, oldTRSDTO, newTRSDTO);
                    if (lineValidationErrorList2 != null && lineValidationErrorList2.Any())
                    {
                        lineValidationErrorList0.AddRange(lineValidationErrorList2);
                    }
                }
                log.LogMethodExit(lineValidationErrorList0);
                return lineValidationErrorList0;
            }

            private List<ValidationError> AdditionalTimeSlotValidation(ExecutionContext executionContext, List<MasterScheduleBL> masterScheduleBLList,
                                                                       List<Transaction.TransactionLine> trxLineList, TransactionReservationScheduleDTO oldBookingProductTRSDTO,
                                                                       TransactionReservationScheduleDTO newBookingProductTRSDTO)
            {
                log.LogMethodEntry(executionContext, masterScheduleBLList, trxLineList, oldBookingProductTRSDTO, newBookingProductTRSDTO);
                List<ValidationError> validationErrorList = new List<ValidationError>();
                if (IsAdditionalTimeSlotScheduleLineForReservation(trxLineList))
                {
                    TransactionReservationScheduleDTO lineOldTRSDTO = this.TransactionReservationScheduleDTOList.Find(trs => trs.Cancelled == false && trs.TrxId > -1);
                    if (lineOldTRSDTO != null)
                    {
                        TimeSpan fromTimeSpan = lineOldTRSDTO.ScheduleFromDate - oldBookingProductTRSDTO.ScheduleFromDate;
                        TimeSpan toTimeSpan = lineOldTRSDTO.ScheduleToDate - oldBookingProductTRSDTO.ScheduleToDate;
                        DateTime newSlotFromDateTime = newBookingProductTRSDTO.ScheduleFromDate + fromTimeSpan;
                        DateTime newSlotToDateTime = newBookingProductTRSDTO.ScheduleToDate + toTimeSpan;
                        log.LogVariableState("fromTimeSpan", fromTimeSpan);
                        log.LogVariableState("toTimeSpan", toTimeSpan);
                        log.LogVariableState("newSlotFromTime", newSlotFromDateTime);
                        log.LogVariableState("newSlotToTime", newSlotToDateTime);
                        TransactionReservationScheduleDTO lineNewTRSDTO = this.TransactionReservationScheduleDTOList.Find(trs => trs.Cancelled == false && trs.TrxId == -1);
                        LookupValuesList serverTimeObject = new LookupValuesList(executionContext);
                        if (lineNewTRSDTO == null || (lineNewTRSDTO.ExpiryDate != null && lineNewTRSDTO.ExpiryDate < serverTimeObject.GetServerDateTime()))
                        {
                            validationErrorList = ValidateReservationScheduleSlotAvailablity(executionContext, masterScheduleBLList, -1, newSlotFromDateTime, newSlotToDateTime);
                        }
                    }
                    else
                    {
                        throw new ValidationException(MessageContainerList.GetMessage(executionContext, 2701));
                        //Unable to find reservation schedule details 
                    }
                }
                log.LogMethodExit(validationErrorList);
                return validationErrorList;
            }
            private bool IsAdditionalTimeSlotScheduleLineForReservation(List<Transaction.TransactionLine> trxLineList)
            {
                log.LogMethodEntry();
                bool isAdditionalSlot = false;
                if (this.TransactionReservationScheduleDTOList != null && this.TransactionReservationScheduleDTOList.Any())
                {
                    isAdditionalSlot = (trxLineList.Exists(tl => tl.LineValid && tl.ParentLine == this && tl.ProductTypeCode == ProductTypeValues.BOOKINGS) == false);
                }
                log.LogMethodExit(isAdditionalSlot);
                return isAdditionalSlot;
            }

            private List<ValidationError> ValidateReservationScheduleSlotAvailablity(ExecutionContext executionContext, List<MasterScheduleBL> masterScheduleBLList, int trxReservationScheduleId, DateTime newScheduleFromDate, DateTime newScheduleToDate)
            {
                log.LogMethodEntry(masterScheduleBLList, trxReservationScheduleId, newScheduleFromDate, newScheduleToDate);
                List<ValidationError> validationErrorList = new List<ValidationError>();

                if (masterScheduleBLList != null && masterScheduleBLList.Any())
                {
                    MasterScheduleList masterScheduleList = new MasterScheduleList(executionContext);
                    decimal fromTime = (decimal)(newScheduleFromDate.Hour + Math.Round(newScheduleFromDate.Minute / 100.0, 2));
                    decimal toTime = (decimal)(newScheduleToDate.Hour + Math.Round(newScheduleToDate.Minute / 100.0, 2));
                    TransactionReservationScheduleDTO OldTRSDTO = this.TransactionReservationScheduleDTOList.Find(trs => trs.Cancelled == false && trs.TrxId > -1);
                    List<ScheduleDetailsDTO> scheduleDetailsDTOList = masterScheduleList.GetEligibleSchedules(masterScheduleBLList, newScheduleFromDate.Date, fromTime, toTime, OldTRSDTO.FacilityMapId, -1, ProductTypeValues.BOOKINGS);
                    if (scheduleDetailsDTOList == null || scheduleDetailsDTOList.Any() == false)
                    {
                        validationErrorList.Add(new ValidationError("ReservationSchedule", "schedule", MessageContainerList.GetMessage(executionContext, 2700, newScheduleFromDate, newScheduleToDate)));
                        //Unable to find suitable schedule for &1 to &2'
                    }
                    else
                    {
                        FacilityMapBL facilityMapBL = new FacilityMapBL(executionContext, scheduleDetailsDTOList[0].FacilityMapDTO);
                        int bookedUnits = facilityMapBL.GetTotalBookedUnitsForReservation(newScheduleFromDate, newScheduleToDate, OldTRSDTO.TrxId, trxReservationScheduleId);
                        int totalUnits = (scheduleDetailsDTOList[0].RuleUnits == null ? (int)scheduleDetailsDTOList[0].TotalUnits : (int)scheduleDetailsDTOList[0].RuleUnits);
                        if (OldTRSDTO.GuestQuantity > totalUnits - bookedUnits)
                        {
                            validationErrorList.Add(new ValidationError("ReservationSchedule", "schedule", MessageContainerList.GetMessage(executionContext, 326,
                                                                        OldTRSDTO.GuestQuantity, totalUnits - bookedUnits)));
                            //Cannot reserve quantity &1. Available: &2 
                        }
                    }
                }
                log.LogMethodExit(validationErrorList);
                return validationErrorList;
            }


            private List<ValidationError> AttractionProductScheduleValidation(ExecutionContext executionContext, List<MasterScheduleBL> masterScheduleBLList,
                                                                       List<Transaction.TransactionLine> trxLineList,
                                                                      TransactionReservationScheduleDTO oldTRSDTO, TransactionReservationScheduleDTO newTRSDTO)
            {
                log.LogMethodEntry(executionContext, masterScheduleBLList, trxLineList, oldTRSDTO, newTRSDTO);
                List<ValidationError> validationErrorList = new List<ValidationError>();
                if (this.ProductTypeCode == ProductTypeValues.ATTRACTION && this.LineAtb != null && this.LineAtb.AttractionBookingDTO != null)
                {
                    // Transaction.TransactionLine bookingProductScheduleLine = this.TrxLines.Find(tl => tl.LineValid && tl == bookingProductLine.ParentLine);
                    // if (bookingProductScheduleLine != null)
                    {
                        TimeSpan fromTimeSpan = this.LineAtb.AttractionBookingDTO.ScheduleFromDate - oldTRSDTO.ScheduleFromDate;
                        TimeSpan toTimeSpan = this.LineAtb.AttractionBookingDTO.ScheduleToDate - oldTRSDTO.ScheduleToDate;
                        DateTime newSlotFromDateTime = newTRSDTO.ScheduleFromDate + fromTimeSpan;
                        DateTime newSlotToDateTime = newTRSDTO.ScheduleToDate + toTimeSpan;
                        log.LogVariableState("fromTimeSpan", fromTimeSpan);
                        log.LogVariableState("toTimeSpan", toTimeSpan);
                        log.LogVariableState("newSlotFromTime", newSlotFromDateTime);
                        log.LogVariableState("newSlotToTime", newSlotToDateTime);
                        MasterScheduleList masterScheduleList = new MasterScheduleList(executionContext);
                        if (masterScheduleBLList != null && masterScheduleBLList.Any())
                        {
                            //selectedToDateTime == DateTime.MinValue ? 24 : (decimal)(selectedToDateTime.Hour + Math.Round(selectedToDateTime.Minute / 100.0, 2))
                            decimal fromTime = (decimal)(newSlotFromDateTime.Hour + Math.Round(newSlotFromDateTime.Minute / 100.0, 2));
                            decimal toTime = (decimal)(newSlotToDateTime.Hour + Math.Round(newSlotToDateTime.Minute / 100.0, 2));
                            List<ScheduleDetailsDTO> scheduleDetailsDTOList = masterScheduleList.GetEligibleSchedules(masterScheduleBLList, newSlotFromDateTime.Date, fromTime, toTime, this.LineAtb.AttractionBookingDTO.FacilityMapId, -1, ProductTypeValues.ATTRACTION);
                            if (scheduleDetailsDTOList == null || scheduleDetailsDTOList.Any() == false)
                            {
                                validationErrorList.Add(new ValidationError("AttractionSchedule", "schedule", MessageContainerList.GetMessage(executionContext, 2700, newSlotFromDateTime, newSlotToDateTime)));
                                //Unable to find suitable schedule for &1 to &2'
                            }
                            else
                            {
                                FacilityMapBL facilityMapBL = new FacilityMapBL(executionContext, scheduleDetailsDTOList[0].FacilityMapDTO);
                                int bookedUnits = facilityMapBL.GetTotalBookedUnitsForAttraction(scheduleDetailsDTOList[0].ScheduleFromDate, scheduleDetailsDTOList[0].ScheduleToDate);
                                int totalUnits = (scheduleDetailsDTOList[0].RuleUnits == null ? (int)scheduleDetailsDTOList[0].TotalUnits : (int)scheduleDetailsDTOList[0].RuleUnits);
                                int bookedUnitsInTrx = trxLineList.Where(tl => tl.LineValid
                                                                              && tl.LineAtb != null
                                                                              && tl.LineAtb.AttractionBookingDTO != null
                                                                              && tl.LineAtb.AttractionBookingDTO.FacilityMapId == this.LineAtb.AttractionBookingDTO.FacilityMapId
                                                                              && tl.LineAtb.AttractionBookingDTO.AttractionScheduleId == this.LineAtb.AttractionBookingDTO.AttractionScheduleId
                                                                              && tl.LineAtb.AttractionBookingDTO.ScheduleFromDate == this.LineAtb.AttractionBookingDTO.ScheduleFromDate
                                                                              && tl.LineAtb.AttractionBookingDTO.ScheduleToDate == this.LineAtb.AttractionBookingDTO.ScheduleToDate).Sum(tl => tl.LineAtb.AttractionBookingDTO.BookedUnits);
                                if (Math.Max(bookedUnitsInTrx, this.LineAtb.AttractionBookingDTO.BookedUnits) > totalUnits - bookedUnits)
                                {
                                    validationErrorList.Add(new ValidationError("AttractionSchedule", "schedule", MessageContainerList.GetMessage(executionContext, 326,
                                                                                Math.Max(bookedUnitsInTrx, this.LineAtb.AttractionBookingDTO.BookedUnits),
                                                                                totalUnits - bookedUnits)));
                                    //Cannot reserve quantity &1. Available: &2 
                                }
                                else
                                {
                                    try
                                    {
                                        //day attraction validations
                                        //Transaction.TransactionLine trxLine = TrxLines[lineIndex];
                                        int lineIndex = trxLineList.IndexOf(this);
                                        AttractionBookingDTO atbDTO = new AttractionBookingDTO(-1, scheduleDetailsDTOList[0].ScheduleId, scheduleDetailsDTOList[0].ScheduleFromDate,
                                             scheduleDetailsDTOList[0].AttractionPlayId, this.LineAtb.AttractionBookingDTO.TrxId, (this.DBLineId == 0 ? lineIndex + 1 : this.DBLineId),
                                             this.LineAtb.AttractionBookingDTO.BookedUnits, this.LineAtb.AttractionBookingDTO.ExpiryDate, null, executionContext.GetSiteId(), false, -1,
                                             null, ServerDateTime.Now, null, ServerDateTime.Now, this.LineAtb.AttractionBookingDTO.AttractionPlayName, this.LineAtb.AttractionBookingDTO.Price,
                                             this.LineAtb.AttractionBookingDTO.PromotionId, scheduleDetailsDTOList[0].ScheduleFromTime, scheduleDetailsDTOList[0].ScheduleToTime,
                                             this.LineAtb.AttractionBookingDTO.Identifier, scheduleDetailsDTOList[0].ScheduleName, this.LineAtb.AttractionBookingDTO.AttractionProductId,
                                             scheduleDetailsDTOList[0].FacilityMapId, scheduleDetailsDTOList[0].ScheduleToDate, this.LineAtb.AttractionBookingDTO.ExternalSystemReference,
                                             -1);
                                        AttractionBooking atb = new AttractionBooking(executionContext, atbDTO);
                                        atb.ValidateDayAttractionBooking();

                                        //Check for seats 
                                        List<ValidationError> seatValidationErrorList = AttractionSeatsValidation(executionContext, oldTRSDTO.FacilityMapId, scheduleDetailsDTOList[0]);
                                        if (seatValidationErrorList != null && seatValidationErrorList.Any())
                                        {
                                            validationErrorList.AddRange(seatValidationErrorList);
                                        }
                                    }
                                    catch (RowNotInTableException ex)
                                    {
                                        log.Error(ex);
                                        //Ignore this error as day attraction entry will be created durin save.
                                        //Check for seats 
                                        List<ValidationError> seatValidationErrorList = AttractionSeatsValidation(executionContext, oldTRSDTO.FacilityMapId, scheduleDetailsDTOList[0]);
                                        if (seatValidationErrorList != null && seatValidationErrorList.Any())
                                        {
                                            validationErrorList.AddRange(seatValidationErrorList);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        log.Error(ex);
                                        validationErrorList.Add(new ValidationError("AttractionSchedule", "schedule", ex.Message));
                                    }
                                }
                            }
                        }
                    }
                    //else
                    //{
                    //    throw new ValidationException(MessageContainerList.GetMessage(executionContext, 2701));
                    //    //Unable to find reservation schedule details
                    //}
                }
                log.LogMethodExit(validationErrorList);
                return validationErrorList;
            }


            private List<ValidationError> AttractionSeatsValidation(ExecutionContext executionContext, int oldFacilityMapId, ScheduleDetailsDTO scheduleDetailsDTO)
            {
                log.LogMethodEntry(oldFacilityMapId, scheduleDetailsDTO);
                List<ValidationError> validationErrorList = new List<ValidationError>();
                if (this.LineAtb != null
                    && this.LineAtb.AttractionBookingDTO != null
                    && this.LineAtb.AttractionBookingDTO.AttractionBookingSeatsDTOList != null
                    && this.LineAtb.AttractionBookingDTO.AttractionBookingSeatsDTOList.Any())
                {
                    //same facility map
                    if (this.LineAtb.AttractionBookingDTO.FacilityMapId == oldFacilityMapId)
                    {
                        FacilityMapBL rescheduledFacilityMapBL = new FacilityMapBL(executionContext, scheduleDetailsDTO.FacilityMapDTO);
                        List<FacilityDTO> facilityDTOList = rescheduledFacilityMapBL.GetMappedFacilityDTOList();
                        FacilitySeatsBL facilitySeatsBL = new FacilitySeatsBL(executionContext);
                        List<FacilitySeatsDTO> allFacilitySeatsDTOList = new List<FacilitySeatsDTO>();
                        foreach (FacilityDTO fac in facilityDTOList)
                        {
                            List<FacilitySeatsDTO> facilitySeatsDTOList = facilitySeatsBL.GetFacilitySeats(fac.FacilityId, scheduleDetailsDTO.ScheduleId, scheduleDetailsDTO.ScheduleFromDate);
                            if (facilitySeatsDTOList != null && facilitySeatsDTOList.Any())
                            {
                                allFacilitySeatsDTOList.AddRange(facilitySeatsDTOList);
                            }
                        }
                        foreach (AttractionBookingSeatsDTO atbSeat in this.LineAtb.AttractionBookingDTO.AttractionBookingSeatsDTOList)
                        {
                            if (allFacilitySeatsDTOList.Exists(facSeats => facSeats.SeatId == atbSeat.SeatId && facSeats.BookedSeat == -1) == false)
                            {
                                validationErrorList.Add(new ValidationError("AttractionSchedule", "schedule",
                                                                             MessageContainerList.GetMessage(executionContext, 2705,
                                                                                                          atbSeat.SeatName, scheduleDetailsDTO.ScheduleFromDate.ToString())));
                                //Cannot reschedule seat &1 for &2. Seat is already booked
                            }
                        }
                    }
                    else
                    { //facility map has changed

                        FacilityMapBL rescheduledFacilityMapBL = new FacilityMapBL(executionContext, scheduleDetailsDTO.FacilityMapDTO);
                        List<FacilityDTO> reScheduleFacilityDTOList = rescheduledFacilityMapBL.GetMappedFacilityDTOList();
                        FacilityMapBL originalFacilityMapBL = new FacilityMapBL(executionContext, this.LineAtb.AttractionBookingDTO.FacilityMapId);
                        List<FacilityDTO> originalFacilityDTOList = originalFacilityMapBL.GetMappedFacilityDTOList();
                        FacilitySeatsBL facilitySeatsBL = new FacilitySeatsBL(executionContext);
                        List<FacilitySeatsDTO> allOriginalFacilitySeatsDTOList = new List<FacilitySeatsDTO>();
                        foreach (FacilityDTO fac in originalFacilityDTOList)
                        {
                            List<FacilitySeatsDTO> facilitySeatsDTOList = facilitySeatsBL.GetFacilitySeats(fac.FacilityId, scheduleDetailsDTO.ScheduleId, scheduleDetailsDTO.ScheduleFromDate);
                            if (facilitySeatsDTOList != null && facilitySeatsDTOList.Any())
                            {
                                allOriginalFacilitySeatsDTOList.AddRange(facilitySeatsDTOList);
                            }
                        }
                        foreach (AttractionBookingSeatsDTO atbSeat in this.LineAtb.AttractionBookingDTO.AttractionBookingSeatsDTOList)
                        {
                            FacilitySeatsDTO facilitySeatsDTO = allOriginalFacilitySeatsDTOList.Find(facSeat => facSeat.SeatId == atbSeat.SeatId);
                            if (facilitySeatsDTO != null)
                            {
                                if (reScheduleFacilityDTOList != null && reScheduleFacilityDTOList.Exists(facSeat => facSeat.FacilityId == facilitySeatsDTO.FacilityId) == false)
                                {
                                    validationErrorList.Add(new ValidationError("AttractionSchedule", "schedule", MessageContainerList.GetMessage(executionContext, 2706, atbSeat.SeatName)));
                                    //Cannot reschedule seat &1 as its facility is not part of facility map considered for reschedule
                                }
                            }
                            else
                            {
                                validationErrorList.Add(new ValidationError("AttractionSchedule", "schedule", MessageContainerList.GetMessage(executionContext, 2707, atbSeat.SeatName)));
                                //Unable to find seat layout details for seat &1 
                            }
                        }
                        if (validationErrorList.Any() == false) //facility is present under rescheduled facility map
                        {
                            List<FacilitySeatsDTO> allRescheduleFacilitySeatsDTOList = new List<FacilitySeatsDTO>();
                            foreach (FacilityDTO fac in reScheduleFacilityDTOList)
                            {
                                List<FacilitySeatsDTO> facilitySeatsDTOList = facilitySeatsBL.GetFacilitySeats(fac.FacilityId, scheduleDetailsDTO.ScheduleId, scheduleDetailsDTO.ScheduleFromDate);
                                if (facilitySeatsDTOList != null && facilitySeatsDTOList.Any())
                                {
                                    allRescheduleFacilitySeatsDTOList.AddRange(facilitySeatsDTOList);
                                }
                            }
                            foreach (AttractionBookingSeatsDTO atbSeat in this.LineAtb.AttractionBookingDTO.AttractionBookingSeatsDTOList)
                            {
                                if (allRescheduleFacilitySeatsDTOList.Exists(facSeats => facSeats.SeatId == atbSeat.SeatId && facSeats.BookedSeat == -1) == false)
                                {
                                    validationErrorList.Add(new ValidationError("AttractionSchedule", "schedule",
                                                                              MessageContainerList.GetMessage(executionContext, 2705, atbSeat.SeatName,
                                                                                                          scheduleDetailsDTO.ScheduleFromDate.ToString())));
                                    //Cannot reschedule seat &1 for &2. Seat is already booked
                                }
                            }
                        }
                    }
                }
                log.LogMethodExit(validationErrorList);
                return validationErrorList;
            }

            /// <summary>
            /// Get Line Reservation Guest Quantity
            /// </summary>
            /// <returns></returns>
            public decimal? GetLineReservationGuestQuantity()
            {
                log.LogMethodEntry();
                decimal? guestQty = null;
                if (this.transactionReservationScheduleDTOList != null && this.transactionReservationScheduleDTOList.Any())
                {
                    TransactionReservationScheduleDTO transactionReservationScheduleDTO = GetCurrentTransactionReservationScheduleDTO();
                    guestQty = transactionReservationScheduleDTO.GuestQuantity;
                }
                log.LogMethodExit(guestQty);
                return guestQty;
            }

            internal void RescheduleReservationAttraction(ExecutionContext executionContext, List<MasterScheduleBL> masterScheduleBLList, TransactionReservationScheduleDTO oldScheduleTRSDTOForBookingProduct,
                                                          TransactionReservationScheduleDTO rescheduledTRSDTOForBookingProduct, int lineIndex, SqlTransaction sqlTrx)
            {
                log.LogMethodEntry(executionContext, masterScheduleBLList, oldScheduleTRSDTOForBookingProduct, rescheduledTRSDTOForBookingProduct, lineIndex, sqlTrx);
                AttractionBookingDTO rescheduledATBDTO = GetRescheduledATBDTO(executionContext, masterScheduleBLList, oldScheduleTRSDTOForBookingProduct, rescheduledTRSDTOForBookingProduct, lineIndex, sqlTrx);
                AttractionBooking reScheduledATB = new AttractionBooking(executionContext, rescheduledATBDTO);
                int cardId = -1;
                if (this.LineAtb.AttractionBookingDTO.AttractionBookingSeatsDTOList != null
                    && this.LineAtb.AttractionBookingDTO.AttractionBookingSeatsDTOList.Any())
                {
                    cardId = this.LineAtb.AttractionBookingDTO.AttractionBookingSeatsDTOList[0].CardId;
                }
                reScheduledATB.Save(cardId, sqlTrx);
                this.LineAtb.Expire(sqlTrx);
                this.LineAtb = null;
                this.LineAtb = reScheduledATB;
                log.LogMethodExit();
            }

            private AttractionBookingDTO GetRescheduledATBDTO(ExecutionContext executionContext, List<MasterScheduleBL> masterScheduleBLList, TransactionReservationScheduleDTO oldScheduleTRSDTOForBookingProduct,
                                                              TransactionReservationScheduleDTO rescheduledTRSDTOForBookingProduct, int lineIndex, SqlTransaction sqlTrx)
            {
                log.LogMethodEntry(executionContext, masterScheduleBLList, oldScheduleTRSDTOForBookingProduct, rescheduledTRSDTOForBookingProduct, lineIndex, sqlTrx);
                AttractionBookingDTO rescheduledATBDTO = null;

                if (this.ProductTypeCode == ProductTypeValues.ATTRACTION && this.LineAtb != null && this.LineAtb.AttractionBookingDTO != null)
                {
                    //Transaction.TransactionLine bookingProductScheduleLine = this.TrxLines.Find(tl => tl.LineValid && tl == bookingProductLine.ParentLine);
                    //if (bookingProductScheduleLine != null)
                    {
                        TimeSpan fromTimeSpan = this.LineAtb.AttractionBookingDTO.ScheduleFromDate - oldScheduleTRSDTOForBookingProduct.ScheduleFromDate;
                        TimeSpan toTimeSpan = this.LineAtb.AttractionBookingDTO.ScheduleToDate - oldScheduleTRSDTOForBookingProduct.ScheduleToDate;
                        DateTime newSlotFromDateTime = rescheduledTRSDTOForBookingProduct.ScheduleFromDate + fromTimeSpan;
                        DateTime newSlotToDateTime = rescheduledTRSDTOForBookingProduct.ScheduleToDate + toTimeSpan;
                        log.LogVariableState("fromTimeSpan", fromTimeSpan);
                        log.LogVariableState("toTimeSpan", toTimeSpan);
                        log.LogVariableState("newSlotFromTime", newSlotFromDateTime);
                        log.LogVariableState("newSlotToTime", newSlotToDateTime);
                        MasterScheduleList masterScheduleList = new MasterScheduleList(executionContext);
                        if (masterScheduleBLList != null && masterScheduleBLList.Any())
                        {
                            //selectedToDateTime == DateTime.MinValue ? 24 : (decimal)(selectedToDateTime.Hour + Math.Round(selectedToDateTime.Minute / 100.0, 2))
                            decimal fromTime = (decimal)(newSlotFromDateTime.Hour + Math.Round(newSlotFromDateTime.Minute / 100.0, 2));
                            decimal toTime = (decimal)(newSlotToDateTime.Hour + Math.Round(newSlotToDateTime.Minute / 100.0, 2));
                            List<ScheduleDetailsDTO> scheduleDetailsDTOList = masterScheduleList.GetEligibleSchedules(masterScheduleBLList, newSlotFromDateTime.Date, fromTime, toTime, this.LineAtb.AttractionBookingDTO.FacilityMapId, -1, ProductTypeValues.ATTRACTION);
                            if (scheduleDetailsDTOList == null || scheduleDetailsDTOList.Any() == false)
                            {
                                throw new ValidationException(MessageContainerList.GetMessage(executionContext, 2700, newSlotFromDateTime, newSlotToDateTime));
                                //Unable to find suitable schedule for &1 to &2'
                            }
                            else
                            {
                                FacilityMapBL facilityMapBL = new FacilityMapBL(executionContext, scheduleDetailsDTOList[0].FacilityMapDTO);
                                int bookedUnits = facilityMapBL.GetTotalBookedUnitsForAttraction(scheduleDetailsDTOList[0].ScheduleFromDate, scheduleDetailsDTOList[0].ScheduleToDate);
                                int totalUnits = (scheduleDetailsDTOList[0].RuleUnits == null ? (int)scheduleDetailsDTOList[0].TotalUnits : (int)scheduleDetailsDTOList[0].RuleUnits);
                                int availableUnits = totalUnits - bookedUnits;
                                log.Info("bookedUnits: " + bookedUnits.ToString());
                                log.Info("totalUnits: " + totalUnits.ToString());
                                log.Info("availableUnits: " + availableUnits.ToString());
                                if (this.LineAtb.AttractionBookingDTO.BookedUnits > totalUnits - bookedUnits)
                                {
                                    throw new ValidationException(MessageContainerList.GetMessage(executionContext, 326, this.LineAtb.AttractionBookingDTO.BookedUnits, totalUnits - bookedUnits));
                                    //Cannot reserve quantity &1. Available: &2 
                                }
                                else
                                {
                                    List<AttractionBookingSeatsDTO> rescheduledBookingSeatDTOList = null;
                                    if (this.LineAtb.AttractionBookingDTO != null
                                        && this.LineAtb.AttractionBookingDTO.AttractionBookingSeatsDTOList != null
                                        && this.LineAtb.AttractionBookingDTO.AttractionBookingSeatsDTOList.Any())
                                    {
                                        rescheduledBookingSeatDTOList = GetRescheduledBookingSeatDTOList(executionContext, oldScheduleTRSDTOForBookingProduct.FacilityMapId, scheduleDetailsDTOList[0]);

                                    }
                                    rescheduledATBDTO = new AttractionBookingDTO(-1, scheduleDetailsDTOList[0].ScheduleId, scheduleDetailsDTOList[0].ScheduleFromDate, scheduleDetailsDTOList[0].AttractionPlayId,
                                        this.LineAtb.AttractionBookingDTO.TrxId, (this.DBLineId == 0 ? lineIndex + 1 : this.DBLineId), this.LineAtb.AttractionBookingDTO.BookedUnits, this.LineAtb.AttractionBookingDTO.ExpiryDate, null,
                                        executionContext.GetSiteId(), false, -1, null, ServerDateTime.Now, null, ServerDateTime.Now, this.LineAtb.AttractionBookingDTO.AttractionPlayName,
                                        this.LineAtb.AttractionBookingDTO.Price, this.LineAtb.AttractionBookingDTO.PromotionId, scheduleDetailsDTOList[0].ScheduleFromTime,
                                        scheduleDetailsDTOList[0].ScheduleToTime, this.LineAtb.AttractionBookingDTO.Identifier, scheduleDetailsDTOList[0].ScheduleName,
                                        this.LineAtb.AttractionBookingDTO.AttractionProductId, scheduleDetailsDTOList[0].FacilityMapId,
                                        scheduleDetailsDTOList[0].ScheduleToDate, this.LineAtb.AttractionBookingDTO.ExternalSystemReference, -1);
                                    rescheduledATBDTO.AvailableUnits = availableUnits;
                                    if (rescheduledBookingSeatDTOList != null && rescheduledBookingSeatDTOList.Any())
                                    {
                                        rescheduledATBDTO.AttractionBookingSeatsDTOList = new List<AttractionBookingSeatsDTO>(rescheduledBookingSeatDTOList);
                                    }
                                }
                            }
                        }
                    }
                    //else
                    //{
                    //    throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2701));
                    //    //Unable to find reservation schedule details
                    //}
                }
                log.LogMethodExit(rescheduledATBDTO);
                return rescheduledATBDTO;
            }

            private List<AttractionBookingSeatsDTO> GetRescheduledBookingSeatDTOList(ExecutionContext executionContext, int oldFacilityMapId, ScheduleDetailsDTO scheduleDetailsDTO)
            {
                log.LogMethodEntry(executionContext, oldFacilityMapId, scheduleDetailsDTO);
                List<AttractionBookingSeatsDTO> attractionBookingSeatsDTOList = new List<AttractionBookingSeatsDTO>();
                if (this != null && this.LineAtb != null
                    && this.LineAtb.AttractionBookingDTO != null
                    && this.LineAtb.AttractionBookingDTO.AttractionBookingSeatsDTOList != null
                    && this.LineAtb.AttractionBookingDTO.AttractionBookingSeatsDTOList.Any())
                {
                    //same facility map
                    if (this.LineAtb.AttractionBookingDTO.FacilityMapId == oldFacilityMapId)
                    {
                        FacilityMapBL rescheduledFacilityMapBL = new FacilityMapBL(executionContext, scheduleDetailsDTO.FacilityMapDTO);
                        List<FacilityDTO> facilityDTOList = rescheduledFacilityMapBL.GetMappedFacilityDTOList();
                        FacilitySeatsBL facilitySeatsBL = new FacilitySeatsBL(executionContext);
                        List<FacilitySeatsDTO> allFacilitySeatsDTOList = new List<FacilitySeatsDTO>();
                        foreach (FacilityDTO fac in facilityDTOList)
                        {
                            List<FacilitySeatsDTO> facilitySeatsDTOList = facilitySeatsBL.GetFacilitySeats(fac.FacilityId, scheduleDetailsDTO.ScheduleId, scheduleDetailsDTO.ScheduleFromDate);
                            if (facilitySeatsDTOList != null && facilitySeatsDTOList.Any())
                            {
                                allFacilitySeatsDTOList.AddRange(facilitySeatsDTOList);
                            }
                        }
                        foreach (AttractionBookingSeatsDTO atbSeat in this.LineAtb.AttractionBookingDTO.AttractionBookingSeatsDTOList)
                        {
                            FacilitySeatsDTO facilitySeatsDTO = allFacilitySeatsDTOList.Find(facSeats => facSeats.SeatId == atbSeat.SeatId && facSeats.BookedSeat == -1);
                            if (facilitySeatsDTO == null)
                            {
                                throw new ValidationException(MessageContainerList.GetMessage(executionContext, 2705, atbSeat.SeatName,
                                                                                          scheduleDetailsDTO.ScheduleFromDate.ToString()));
                                //Cannot reschedule seat &1 for &2. Seat is already booked
                            }
                            else
                            {
                                AttractionBookingSeatsDTO attractionBookingSeatsDTO = new AttractionBookingSeatsDTO(-1, -1, atbSeat.SeatId, -1, string.Empty, false, executionContext.GetSiteId(), -1,
                                                                                                                       string.Empty, ServerDateTime.Now, string.Empty, ServerDateTime.Now, atbSeat.SeatName);
                                attractionBookingSeatsDTOList.Add(attractionBookingSeatsDTO);
                            }
                        }
                    }
                    else
                    { //facility map has changed

                        FacilityMapBL rescheduledFacilityMapBL = new FacilityMapBL(executionContext, scheduleDetailsDTO.FacilityMapDTO);
                        List<FacilityDTO> reScheduleFacilityDTOList = rescheduledFacilityMapBL.GetMappedFacilityDTOList();
                        FacilityMapBL originalFacilityMapBL = new FacilityMapBL(executionContext, this.LineAtb.AttractionBookingDTO.FacilityMapId);
                        List<FacilityDTO> originalFacilityDTOList = originalFacilityMapBL.GetMappedFacilityDTOList();
                        FacilitySeatsBL facilitySeatsBL = new FacilitySeatsBL(executionContext);
                        List<FacilitySeatsDTO> allOriginalFacilitySeatsDTOList = new List<FacilitySeatsDTO>();
                        foreach (FacilityDTO fac in originalFacilityDTOList)
                        {
                            List<FacilitySeatsDTO> facilitySeatsDTOList = facilitySeatsBL.GetFacilitySeats(fac.FacilityId, scheduleDetailsDTO.ScheduleId, scheduleDetailsDTO.ScheduleFromDate);
                            if (facilitySeatsDTOList != null && facilitySeatsDTOList.Any())
                            {
                                allOriginalFacilitySeatsDTOList.AddRange(facilitySeatsDTOList);
                            }
                        }
                        foreach (AttractionBookingSeatsDTO atbSeat in this.LineAtb.AttractionBookingDTO.AttractionBookingSeatsDTOList)
                        {
                            FacilitySeatsDTO facilitySeatsDTO = allOriginalFacilitySeatsDTOList.Find(facSeat => facSeat.SeatId == atbSeat.SeatId);
                            if (facilitySeatsDTO != null)
                            {
                                if (reScheduleFacilityDTOList != null && reScheduleFacilityDTOList.Exists(facSeat => facSeat.FacilityId == facilitySeatsDTO.FacilityId) == false)
                                {
                                    throw new ValidationException(MessageContainerList.GetMessage(executionContext, 2706, atbSeat.SeatName));
                                    //Cannot reschedule seat &1 as its facility is not part of facility map considered for reschedule
                                }
                            }
                            else
                            {
                                throw new ValidationException(MessageContainerList.GetMessage(executionContext, 2707, atbSeat.SeatName));
                                //Unable to find seat layout details for seat &1 
                            }
                        }
                        //No error so far, facility is present under rescheduled facility map

                        List<FacilitySeatsDTO> allRescheduleFacilitySeatsDTOList = new List<FacilitySeatsDTO>();
                        foreach (FacilityDTO fac in reScheduleFacilityDTOList)
                        {
                            List<FacilitySeatsDTO> facilitySeatsDTOList = facilitySeatsBL.GetFacilitySeats(fac.FacilityId, scheduleDetailsDTO.ScheduleId, scheduleDetailsDTO.ScheduleFromDate);
                            if (facilitySeatsDTOList != null && facilitySeatsDTOList.Any())
                            {
                                allRescheduleFacilitySeatsDTOList.AddRange(facilitySeatsDTOList);
                            }
                        }
                        foreach (AttractionBookingSeatsDTO atbSeat in this.LineAtb.AttractionBookingDTO.AttractionBookingSeatsDTOList)
                        {
                            FacilitySeatsDTO facilitySeatsDTO = allRescheduleFacilitySeatsDTOList.Find(facSeats => facSeats.SeatId == atbSeat.SeatId && facSeats.BookedSeat == -1);

                            if (facilitySeatsDTO == null)
                            {
                                throw new ValidationException(MessageContainerList.GetMessage(executionContext, 2705, atbSeat.SeatName, scheduleDetailsDTO.ScheduleFromDate.ToString()));
                                //Cannot reschedule seat &1 for &2. Seat is already booked
                            }
                            else
                            {
                                AttractionBookingSeatsDTO attractionBookingSeatsDTO = new AttractionBookingSeatsDTO(-1, -1, atbSeat.SeatId, -1, string.Empty, false, executionContext.GetSiteId(), -1,
                                                                                                                       string.Empty, ServerDateTime.Now, string.Empty, ServerDateTime.Now, atbSeat.SeatName);
                                attractionBookingSeatsDTOList.Add(attractionBookingSeatsDTO);
                            }
                        }
                    }
                }
                log.LogMethodExit(attractionBookingSeatsDTOList);
                return attractionBookingSeatsDTOList;
            }

            internal void SaveRescheduledReservationSlot(ExecutionContext executionContext, SqlTransaction sqlTrx)
            {
                log.LogMethodEntry(executionContext, sqlTrx);

                TransactionReservationScheduleDTO rescheduledTRSDTO = this.TransactionReservationScheduleDTOList.Find(trs => trs.Cancelled == false && trs.TrxId == -1);
                TransactionReservationScheduleDTO oldTRSDTO = this.TransactionReservationScheduleDTOList.Find(trs => trs.Cancelled == false && trs.TrxId > -1);
                int oldTRSIndex = this.TransactionReservationScheduleDTOList.IndexOf(oldTRSDTO);
                int newTRSIndex = this.TransactionReservationScheduleDTOList.IndexOf(rescheduledTRSDTO);

                TransactionReservationScheduleBL rescheduledTRSBL = new TransactionReservationScheduleBL(executionContext, rescheduledTRSDTO);
                rescheduledTRSDTO.TrxId = oldTRSDTO.TrxId;
                rescheduledTRSBL.Save(sqlTrx);
                TransactionReservationScheduleBL oldTRSBL = new TransactionReservationScheduleBL(executionContext, oldTRSDTO);
                oldTRSBL.ExpireSchedule(sqlTrx);

                this.TransactionReservationScheduleDTOList[newTRSIndex] = rescheduledTRSBL.TransactionReservationScheduleDTO;
                this.TransactionReservationScheduleDTOList[oldTRSIndex] = oldTRSBL.TransactionReservationScheduleDTO;

                log.LogMethodExit();
            }

            /// <summary>
            ///  Get Rescheduled Additional Time Slot DTO
            /// </summary>
            /// <param name="executionContext"></param>
            /// <param name="lineIndex"></param>
            /// <param name="oldScheduleFromDate"></param>
            /// <param name="oldScheduleTODate"></param>
            /// <param name="newScheduleFromDate"></param>
            /// <param name="newScheduleTODate"></param>
            /// <returns></returns>
            public TransactionReservationScheduleDTO GetRescheduledScheduleTimeSlotDTO(ExecutionContext executionContext, int lineIndex, DateTime oldScheduleFromDate, DateTime oldScheduleTODate,
                                                                                       DateTime newScheduleFromDate, DateTime newScheduleTODate)
            {
                log.LogMethodEntry(executionContext, lineIndex, oldScheduleFromDate, oldScheduleTODate, newScheduleFromDate, newScheduleTODate);
                TransactionReservationScheduleDTO newTRSDTO = null;
                //if (IsAdditionalTimeSlotScheduleLineForReservation())
                {
                    //Transaction.TransactionLine bookingProductScheduleLine = this.TrxLines.Find(tl => tl.LineValid && tl == bookingProductLine.ParentLine);
                    //if (bookingProductScheduleLine != null)
                    {
                        TransactionReservationScheduleDTO oldTRSDTO = this.TransactionReservationScheduleDTOList.Find(trs => trs.Cancelled == false && trs.TrxId > -1);
                        TimeSpan fromTimeSpan = oldTRSDTO.ScheduleFromDate - oldScheduleFromDate;
                        TimeSpan toTimeSpan = oldTRSDTO.ScheduleToDate - oldScheduleTODate;
                        DateTime newSlotFromDateTime = newScheduleFromDate + fromTimeSpan;
                        DateTime newSlotToDateTime = newScheduleTODate + toTimeSpan;
                        log.LogVariableState("fromTimeSpan", fromTimeSpan);
                        log.LogVariableState("toTimeSpan", toTimeSpan);
                        log.LogVariableState("newSlotFromTime", newSlotFromDateTime);
                        log.LogVariableState("newSlotToTime", newSlotToDateTime);
                        MasterScheduleList masterScheduleList = new MasterScheduleList(executionContext);
                        List<MasterScheduleBL> masterScheduleBLList = masterScheduleList.GetAllMasterScheduleBLList();
                        if (masterScheduleBLList != null && masterScheduleBLList.Any())
                        {
                            //selectedToDateTime == DateTime.MinValue ? 24 : (decimal)(selectedToDateTime.Hour + Math.Round(selectedToDateTime.Minute / 100.0, 2))
                            decimal fromTime = (decimal)(newSlotFromDateTime.Hour + Math.Round(newSlotFromDateTime.Minute / 100.0, 2));
                            decimal toTime = (decimal)(newSlotToDateTime.Hour + Math.Round(newSlotToDateTime.Minute / 100.0, 2));
                            List<ScheduleDetailsDTO> scheduleDetailsDTOList = masterScheduleList.GetEligibleSchedules(masterScheduleBLList, newSlotFromDateTime.Date, fromTime, toTime, oldTRSDTO.FacilityMapId, -1, ProductTypeValues.BOOKINGS);
                            if (scheduleDetailsDTOList == null || scheduleDetailsDTOList.Any() == false)
                            {
                                throw new ValidationException(MessageContainerList.GetMessage(executionContext, 2700, newSlotFromDateTime, newSlotToDateTime));
                                //Unable to find suitable schedule for &1 to &2'
                            }
                            else
                            {
                                FacilityMapBL facilityMapBL = new FacilityMapBL(executionContext, scheduleDetailsDTOList[0].FacilityMapDTO);
                                int bookedUnits = facilityMapBL.GetTotalBookedUnitsForReservation(scheduleDetailsDTOList[0].ScheduleFromDate, scheduleDetailsDTOList[0].ScheduleToDate, oldTRSDTO.TrxId);
                                int totalUnits = (scheduleDetailsDTOList[0].RuleUnits == null ? (int)scheduleDetailsDTOList[0].TotalUnits : (int)scheduleDetailsDTOList[0].RuleUnits);
                                if (oldTRSDTO.GuestQuantity > totalUnits - bookedUnits)
                                {
                                    throw new ValidationException(MessageContainerList.GetMessage(executionContext, 326, oldTRSDTO.GuestQuantity, totalUnits - bookedUnits));
                                    //Cannot reserve quantity &1. Available: &2 
                                }
                                else
                                {
                                    newTRSDTO = new TransactionReservationScheduleDTO(-1, -1, (this.DBLineId == 0 ? lineIndex + 1 : this.DBLineId),
                                                       oldTRSDTO.GuestQuantity, scheduleDetailsDTOList[0].ScheduleId, scheduleDetailsDTOList[0].ScheduleName,
                                                       scheduleDetailsDTOList[0].ScheduleFromDate, scheduleDetailsDTOList[0].ScheduleToDate, false, null, null, null, ServerDateTime.Now, null,
                                                       ServerDateTime.Now, executionContext.GetSiteId(), false, -1, oldTRSDTO.TrxLineProductId, oldTRSDTO.TrxLineProductName,
                                                       scheduleDetailsDTOList[0].FacilityMapId, scheduleDetailsDTOList[0].FacilityMapName, oldTRSDTO.ExpiryDate);
                                }
                            }
                        }
                    }
                    //else
                    //{
                    //    throw new ValidationException(MessageContainerList.GetMessage(executionContext, 2701));
                    //    //Unable to find reservation schedule details 
                    //}
                }
                log.LogMethodExit(newTRSDTO);
                return newTRSDTO;
            }
            /// <summary>
            /// Get/Set methods for subscriptionHeaderDTO
            /// </summary>
            public SubscriptionHeaderDTO SubscriptionHeaderDTO
            {
                get { return subscriptionHeaderDTO; }
                set { subscriptionHeaderDTO = value; }
            }

            internal void ClearSubscriptionEntity(Utilities utilities, SqlTransaction sQLTrx)
            {
                log.LogMethodEntry(sQLTrx);
                if (this.SubscriptionHeaderDTO != null)
                {
                    if (this.SubscriptionHeaderDTO.SubscriptionHeaderId > -1)
                    {
                        SubscriptionHeaderBL subscriptionHeaderBL = new SubscriptionHeaderBL(utilities.ExecutionContext, this.subscriptionHeaderDTO);
                        subscriptionHeaderBL.ClearSubscriptionEntity(utilities.ParafaitEnv.ApproverId, sQLTrx);
                    }
                    else
                    {
                        this.SubscriptionHeaderDTO = null;
                    }
                }
                log.LogMethodExit();
            }
        }

        public bool ContainsCardLine()
        {
            log.LogMethodEntry();
            bool cardLineFound = false;
            foreach (Transaction.TransactionLine tl in TrxLines)
            {
                if (string.IsNullOrEmpty(tl.CardNumber) == false && tl.LineValid)
                {
                    cardLineFound = true;
                    break;
                }
            }
            log.LogMethodExit(cardLineFound);
            return cardLineFound;
        }

        public List<DiscountsSummaryDTO> DiscountsSummaryDTOList
        {
            get
            {
                return discountsSummaryDTOList;
            }
            set
            {
                discountsSummaryDTOList = value;
            }
        }

        public List<DiscountApplicationHistoryDTO> DiscountApplicationHistoryDTOList
        {
            get
            {
                return discountApplicationHistoryDTOList;
            }
            set
            {
                discountApplicationHistoryDTOList = value;
            }
        }

        public Dictionary<int, DiscountsSummaryDTO> DiscountsSummaryDTODictionary
        {
            get
            {
                return discountsSummaryDTODictionary;
            }
            set
            {
                discountsSummaryDTODictionary = value;
            }
        }

        //public List<WaiverSignatureDTO> WaiversSignedHistoryDTOList
        //{
        //    get
        //    {
        //        return waiversSignedHistoryDTOList;
        //    }
        //}

        /// <summary>
        /// Class to hold Printer to Trx line mapping. 
        /// Only Eligible trx lines yet to be printed is maintained
        /// </summary>
        public class EligibleTrxLinesPrinterMapper
        {
            List<TransactionLine> trxLines;
            POSPrinterDTO posPrinterDTO;
            public EligibleTrxLinesPrinterMapper()
            {
                trxLines = new List<TransactionLine>();
            }
            public List<TransactionLine> TrxLines
            {
                get
                {
                    return trxLines;
                }
                set
                {
                    trxLines = value;
                }
            }
            public POSPrinterDTO POSPrinterDTO
            {
                get { return posPrinterDTO; }
                set { posPrinterDTO = value; }
            }
        }

        /// <summary>
        /// Class to hold Entire list of TrxLines and Printer mapping.
        /// This is used for identifying Parent line in case child mapping doesnt exist
        /// </summary>
        public class ValidTrxLinePrinterListMapper
        {
            TransactionLine printableTrxLine;
            List<POSPrinterDTO> posPrinterDTOList;
            public ValidTrxLinePrinterListMapper()
            {
                posPrinterDTOList = new List<POSPrinterDTO>();
            }
            public List<POSPrinterDTO> POSPrinterDTOList
            {
                get
                {
                    return posPrinterDTOList;
                }
                set
                {
                    posPrinterDTOList = value;
                }
            }
            public TransactionLine PrintableTrxLine
            {
                get { return printableTrxLine; }
                set { printableTrxLine = value; }
            }
        }

        private static readonly Semnox.Parafait.logging.Logger log = new Semnox.Parafait.logging.Logger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        //public Transaction(staticDataExchange pStaticDataExchange)
        //{
        //    log.LogMethodEntry(pStaticDataExchange);

        //    StaticDataExchange = pStaticDataExchange;
        //    Utilities = StaticDataExchange.Utilities;
        //    ParafaitEnv = Utilities.ParafaitEnv;
        //    TransactionInfo = new clsTransactionInfo(Utilities);

        //    LoginID = Utilities.ParafaitEnv.LoginID;
        //    Username = StaticDataExchange.Username;
        //    POSMachine = StaticDataExchange.POSMachine;
        //    POSMachineId = StaticDataExchange.POSMachineId;
        //    POSTypeId = StaticDataExchange.POSTypeId;
        //    Transaction_Amount = 0;
        //    Discount_Amount = 0;
        //    Net_Transaction_Amount = 0;
        //    TransactionDate = DateTime.Now;
        //    TrxLines = new List<TransactionLine>();
        //    GameCardReadTime = Utilities.getServerTime();
        //    Status = TrxStatus.OPEN;

        //    TransactionUtils = new TransactionUtils(Utilities);
        //    EntitlementReferenceDate = Utilities.getServerTime();//defaulting Reference to system date

        //    EligibleTrxLinesPrinterMapperList = new List<EligibleTrxLinesPrinterMapper>();
        //    ValidTrxLinePrinterListMapperList = new List<ValidTrxLinePrinterListMapper>();
        //    log.LogMethodExit(null);
        //}

        /// <summary>
        /// Constructor passing Utilities object
        /// </summary>
        /// <param name="pUtilities">Utilities object</param>
        public Transaction(Utilities pUtilities)
        {
            log.LogMethodEntry(pUtilities);

            Utilities = pUtilities;
            ParafaitEnv = Utilities.ParafaitEnv;
            TransactionInfo = new clsTransactionInfo(Utilities, this);

            TransactionPaymentsDTOList = new List<TransactionPaymentsDTO>();
            LoginID = Utilities.ParafaitEnv.LoginID;
            Username = Utilities.ParafaitEnv.Username;
            POSMachine = Utilities.ParafaitEnv.POSMachine;
            POSMachineId = Utilities.ParafaitEnv.POSMachineId;
            POSTypeId = Utilities.ParafaitEnv.POSTypeId;
            Transaction_Amount = 0;
            Discount_Amount = 0;
            Net_Transaction_Amount = 0;
            TransactionDate = Utilities.getServerTime();
            TrxLines = new List<TransactionLine>();
            GameCardReadTime = Utilities.getServerTime();
            TrxInitiatedTime = Utilities.getServerTime();
            Status = TrxStatus.OPEN;
            TransactionOrderTypes = LoadTransactionOrderType();
            TransactionUtils = new TransactionUtils(Utilities);
            //EntitlementReferenceDate = Utilities.getServerTime();//defaulting Reference to system date

            EligibleTrxLinesPrinterMapperList = new List<EligibleTrxLinesPrinterMapper>();
            ValidTrxLinePrinterListMapperList = new List<ValidTrxLinePrinterListMapper>();
            log.LogMethodExit(null);
        }



        //SubscriptionHeaderDTO gSubscriptionHeaderDTO;
        AttractionBooking gATB;
        public int createTransactionLine(Card inCard, int productId, AttractionBooking atb, double in_price, decimal in_quantity, ref string message, int comboProductId = -1, SubscriptionHeaderDTO subscriptionHeaderDTO = null)
        {
            log.LogMethodEntry(inCard, productId, atb, in_price, in_quantity, message, comboProductId, subscriptionHeaderDTO);
            gATB = atb;
            int returnValueNew = createTransactionLine(inCard, productId, in_price, in_quantity, ref message, null, true, null, comboProductId, null, subscriptionHeaderDTO);
            log.LogMethodExit(returnValueNew);
            return returnValueNew;
        }

        TransactionReservationScheduleDTO gtransactionReservationScheduleDTO;
        public int createTransactionLine(Card inCard, int productId, TransactionReservationScheduleDTO transactionReservationScheduleDTO, TransactionLine outTrxLine, double in_price, decimal in_quantity, ref string message)
        {
            log.LogMethodEntry(inCard, productId, transactionReservationScheduleDTO, outTrxLine, in_price, in_quantity, message);
            gtransactionReservationScheduleDTO = transactionReservationScheduleDTO;
            int returnValueNew = createTransactionLine(inCard, productId, in_price, in_quantity, ref message, outTrxLine, true, null);
            log.LogMethodExit(returnValueNew);
            return returnValueNew;
        }

        // public clsCheckIn gCheckIn;
        //added Checkin DTO declaration
        private CheckInDTO gCheckInDTO;
        private CheckInDetailDTO gCheckInDetailDTO;
        private CheckInDetailDTO gCheckOutDetailDTO;
        //public int createTransactionLine(Card inCard, int productId, clsCheckIn checkIn, double in_price, decimal in_quantity, ref string message)
        //{
        //    log.LogMethodEntry(inCard, productId, checkIn, in_price, in_quantity, message);
        //    gCheckIn = checkIn;

        //    int returnValueNew = createTransactionLine(inCard, productId, in_price, in_quantity, ref message, null);
        //    log.LogMethodExit(returnValueNew);
        //    return returnValueNew;
        //}

        public int createTransactionLine(Card inCard, int productId, CheckInDTO checkInDTO, CheckInDetailDTO checkInDetailDTO, double in_price, decimal in_quantity, ref string message, SubscriptionHeaderDTO subscriptionHeaderDTO)
        {
            log.LogMethodEntry(inCard, productId, checkInDTO, checkInDetailDTO, in_price, in_quantity, message);
            gCheckInDTO = checkInDTO;
            if (checkInDetailDTO != null && checkInDetailDTO.CheckInId != -1)
                gCheckOutDetailDTO = checkInDetailDTO;
            else
                gCheckInDetailDTO = checkInDetailDTO;

            int returnValueNew = createTransactionLine(inCard, productId, in_price, in_quantity, ref message, subscriptionHeaderDTO);
            log.LogMethodExit(returnValueNew);
            return returnValueNew;
        }
        // public clsCheckOut gCheckOut;
        //public int createTransactionLine(Card inCard, int productId, clsCheckOut checkOut, double in_price, decimal in_quantity, ref string message)
        //{
        //    log.LogMethodEntry(inCard, productId, checkOut, in_price, in_quantity, message);

        //    gCheckOut = checkOut;

        //    log.LogVariableState("message", message);

        //    int returnValueNew = createTransactionLine(inCard, productId, in_price, in_quantity, ref message, null);
        //    log.LogMethodExit(returnValueNew);
        //    return returnValueNew;
        //}

        bool checkForQueueProducts(Card inCard, int productId, SqlTransaction sqlTrx = null)
        {
            log.LogMethodEntry(inCard, productId);
            if (IsQueueSetupRequiredForGames(sqlTrx))
            {
                string existingProducts = "(-1";
                for (int i = 0; i < TrxLines.Count; i++)
                {
                    if (TrxLines[i].LineValid && TrxLines[i].ProductID > 0 && (inCard == null || inCard.CardNumber.Equals(TrxLines[i].CardNumber)))
                        existingProducts += ", " + TrxLines[i].ProductID.ToString();
                }
                existingProducts += ")";

                object o = Utilities.executeScalar(@"select top 1 1 
                                      from (select 1 a) v
                                    where (exists (select 1 
                                                     from cardGames cg
                                                    where cg.card_id = @card_id
                                                      and cg.BalanceGames > 0
                                                      and (cg.ExpiryDate is null or cg.ExpiryDate > getdate())
                                                      and dbo.GetGameProfileValue(cg.game_id, 'QUEUE_SETUP_REQUIRED') = '1')
                                        or exists (select 1 
                                                   from productGames pg
                                                  where pg.product_id in " + existingProducts +
                                                      @"and dbo.GetGameProfileValue(pg.game_id, 'QUEUE_SETUP_REQUIRED') = '1'))
                                      and exists (select 1 
                                                   from productGames pg
                                                  where pg.product_id = @product_id
                                                    and dbo.GetGameProfileValue(pg.game_id, 'QUEUE_SETUP_REQUIRED') = '1')", sqlTrx,
                                            new SqlParameter("@card_id", (inCard == null ? -1 : inCard.card_id)),
                                            new SqlParameter("@product_id", productId));
                if (o != null)
                {
                    log.LogMethodExit(false);
                    return false;
                }
            }
            log.LogMethodExit(true);
            return true;
        }

        //int gLockerNumber = -9999;
        LockerAllocationDTO lineLockerAllocation;
        string lockerMakeType;
        public int createLockerProduct(Card inCard, int productId, double price, int quantity, LockerAllocationDTO lockerAllocationDTO, string lockerMake, Transaction.TransactionLine parentLine, ref string message, SubscriptionHeaderDTO subscriptionHeaderDTO)
        {
            log.LogMethodEntry(inCard, productId, price, quantity, lockerAllocationDTO, lockerMake, parentLine, message, subscriptionHeaderDTO);
            //gSubscriptionHeaderDTO = subscriptionHeaderDTO;
            lineLockerAllocation = lockerAllocationDTO;
            lockerMakeType = lockerMake;
            log.LogVariableState("message ", message);

            int returnValueNew = -1;
            if (parentLine != null)
                returnValueNew = createTransactionLine(inCard, productId, price, quantity, parentLine, ref message, null, false, -1, subscriptionHeaderDTO);
            else
                returnValueNew = createTransactionLine(inCard, productId, price, quantity, ref message, subscriptionHeaderDTO);
            log.LogMethodExit(returnValueNew);
            return returnValueNew;
        }

        public int CreateAttractionProduct(int product_id, double price, int quantity, int parentLineId, AttractionBooking atb, List<Card> cardList, ref string message, int comboProductId = -1)
        {
            log.LogMethodEntry(product_id, price, quantity, parentLineId, atb, cardList, message, comboProductId);

            if (cardList != null && cardList.Count < quantity)
            {
                message = "Please provide required number of Cards";
                return -1;
            }

            int i = 0;
            int retVal = 0;
            int totalCount = quantity;
            int currentCount = 1;
            string processMsg = MessageContainerList.GetMessage(Utilities.ExecutionContext, "of");
            while (i < quantity)
            {
                Card card = null;
                if (cardList != null)
                {
                    card = cardList[i];
                }

                if (atb == null)
                {
                    retVal = createTransactionLine(card, product_id, (AttractionBooking)null, price, 1, ref message, comboProductId);

                    if (retVal != 0)
                        return retVal;
                }
                else
                {
                    AttractionBookingDTO attractionBookingDTO = new AttractionBookingDTO();
                    AttractionBooking atbNew = new AttractionBooking(Utilities.ExecutionContext, attractionBookingDTO);
                    //Semnox.Core.GenericUtilities.CommonFuncs cf = new Semnox.Core.GenericUtilities.CommonFuncs(Utilities);
                    //cf.CloneObject(atb, atbNew); 
                    atbNew.CloneObject(atb, 1);
                    atbNew.AttractionBookingDTO.AttractionProductId = atb.AttractionBookingDTO.AttractionProductId;


                    retVal = createTransactionLine(card, product_id, atbNew, price, atbNew.AttractionBookingDTO.BookedUnits, ref message, comboProductId);

                    if (retVal == 0)
                    {
                        atb.ReduceBookedUnits(1);
                        atbNew.Save(-1);
                        if (parentLineId != -1)
                        {
                            TrxLines[TrxLines.Count - 1].ParentLine = TrxLines[parentLineId];
                        }
                    }
                    else
                    {
                        return retVal;
                    }
                }
                string finalMsg = (atb != null
                                   ? currentCount + " " + processMsg + " " + totalCount + " " + MessageContainerList.GetMessage(Utilities.ExecutionContext, "for") + " " + atb.AttractionBookingDTO.AttractionPlayName + ":" + atb.AttractionBookingDTO.ScheduleFromDate.ToString("d-MMM-yyyy h:mm tt")
                                   : currentCount + " " + processMsg + " " + totalCount);
                SendMessageToStatusMsgQueue(finalMsg, totalCount, currentCount);
                currentCount++;
                i++;
            }

            return 0;
        }

        public int createTransactionLine(Card inCard, int productId, decimal in_quantity, ref string message)
        {
            log.LogMethodEntry(inCard, productId, in_quantity, message);

            log.LogVariableState("message", message);

            int returnValueNew = createTransactionLine(inCard, productId, -1, in_quantity, ref message, null, true, null, -1, null, null);
            log.LogMethodExit(returnValueNew);
            return returnValueNew;
        }

        public int createTransactionLine(Card inCard, int productId, double in_price, decimal in_quantity, ref string message)
        {
            log.LogMethodEntry(inCard, productId, in_price, in_quantity, message);

            log.LogVariableState("message", message);
            int returnValueNew = createTransactionLine(inCard, productId, in_price, in_quantity, ref message, null, true, null, -1, null, null);
            log.LogMethodExit(returnValueNew);
            return returnValueNew;
        }
        /// <summary>
        /// createTransactionLine
        /// </summary> 
        /// <returns></returns>
        public int createTransactionLine(Card inCard, int productId, double in_price, decimal in_quantity, TransactionLine ParentLine, ref string message, TransactionLine outTrxLine = null, bool CreateChildLines = true, int comboProductId = -1, SubscriptionHeaderDTO subscriptionHeaderDTO = null)
        {
            log.LogMethodEntry(inCard, productId, in_price, in_quantity, ParentLine, message, outTrxLine, CreateChildLines, comboProductId, subscriptionHeaderDTO);

            TransactionLine TrxLine;
            if (outTrxLine == null)
                outTrxLine = TrxLine = new TransactionLine();
            else
                TrxLine = outTrxLine;

            int succ = createTransactionLine(inCard, productId, in_price, in_quantity, ref message, TrxLine, CreateChildLines, null, comboProductId, null, subscriptionHeaderDTO);
            if (succ == 0)
            {
                TrxLine.ParentLine = ParentLine;
            }

            log.LogMethodExit(succ);
            return succ;
        }

        private void PopulateOrderTypeGroupBLList()
        {
            log.LogMethodEntry();
            OrderTypeGroupListBL orderTypeGroupListBL = new OrderTypeGroupListBL(Utilities.ExecutionContext);
            List<KeyValuePair<OrderTypeGroupDTO.SearchByParameters, string>> searchParameters = new List<KeyValuePair<OrderTypeGroupDTO.SearchByParameters, string>>();
            searchParameters.Add(new KeyValuePair<OrderTypeGroupDTO.SearchByParameters, string>(OrderTypeGroupDTO.SearchByParameters.SITE_ID, (Utilities.ParafaitEnv.IsCorporate ? Utilities.ParafaitEnv.SiteId : -1).ToString()));
            searchParameters.Add(new KeyValuePair<OrderTypeGroupDTO.SearchByParameters, string>(OrderTypeGroupDTO.SearchByParameters.ACTIVE_FLAG, 1.ToString()));
            List<OrderTypeGroupDTO> orderTypeGroupDTOList = orderTypeGroupListBL.GetOrderTypeGroupDTOList(searchParameters);
            orderTypeGroupBLList = new List<OrderTypeGroupBL>();
            if (orderTypeGroupDTOList != null)
            {
                foreach (var ordTypGrpDTO in orderTypeGroupDTOList)
                {
                    orderTypeGroupBLList.Add(new OrderTypeGroupBL(Utilities.ExecutionContext, ordTypGrpDTO));
                }
            }
            log.LogMethodExit();
        }

        private OrderTypeGroupDTO GetOrderTypeGroup(HashSet<int> orderTypeIdSet)
        {
            log.LogMethodEntry(orderTypeIdSet);

            OrderTypeGroupDTO orderTypeGroupDTO = null;
            if (orderTypeGroupBLList == null)
            {
                PopulateOrderTypeGroupBLList();
            }
            foreach (var orderTypeGroupBL in orderTypeGroupBLList)
            {
                if (orderTypeGroupBL.Match(orderTypeIdSet))
                {
                    if (orderTypeGroupDTO == null || orderTypeGroupDTO.Precedence < orderTypeGroupBL.OrderTypeGroupDTO.Precedence)
                    {
                        orderTypeGroupDTO = orderTypeGroupBL.OrderTypeGroupDTO;
                    }
                }
            }

            log.LogMethodExit(orderTypeGroupDTO);
            return orderTypeGroupDTO;
        }
        /// <summary>
        /// Loading Transaction order types
        /// </summary>
        /// <returns></returns>
        public Dictionary<string, int> LoadTransactionOrderType()
        {
            log.LogMethodEntry();
            if (TransactionOrderTypes == null)
            {
                Dictionary<string, int> transactionOrderTypes = new Dictionary<string, int>();
                TransactionOrderTypeList transactionOrderTypeList = new TransactionOrderTypeList(Utilities.ExecutionContext);
                List<KeyValuePair<TransactionOrderTypeDTO.SearchByParameters, string>> trxOrderTypeSearchParams = new List<KeyValuePair<TransactionOrderTypeDTO.SearchByParameters, string>>();
                trxOrderTypeSearchParams.Add(new KeyValuePair<TransactionOrderTypeDTO.SearchByParameters, string>(TransactionOrderTypeDTO.SearchByParameters.SITE_ID, Utilities.ExecutionContext.GetSiteId().ToString()));
                List<TransactionOrderTypeDTO> transactionOrderTypeDTOList = transactionOrderTypeList.GetAllTransactionOrderTypes(trxOrderTypeSearchParams);
                if (transactionOrderTypeDTOList != null && transactionOrderTypeDTOList.Count > 0)
                {
                    foreach (TransactionOrderTypeDTO transactionOrderTypeDTO in transactionOrderTypeDTOList)
                    {
                        if (!transactionOrderTypes.ContainsKey(transactionOrderTypeDTO.Name))
                            transactionOrderTypes.Add(transactionOrderTypeDTO.Name, transactionOrderTypeDTO.Id);
                    }
                }
                else if (Utilities.ExecutionContext.GetIsCorporate())
                {
                    // do nothing, this is a corporate environment, so some of the sites may not have order types populated yet
                    log.Error("Transaction order types not found for site " + Utilities.ExecutionContext.GetSiteId() + ":corpflag:" + Utilities.ExecutionContext.GetIsCorporate());
                }
                else
                {
                    log.LogMethodEntry("Transaction order types not found");
                    throw new Exception("Transaction order types not found");
                }
                TransactionOrderTypes = transactionOrderTypes;
            }
            log.LogMethodExit(TransactionOrderTypes);
            return TransactionOrderTypes;
        }

        public int createTransactionLine(Card inCard, int productId, double in_price, decimal in_quantity, ref string message, TransactionLine outTrxLine = null, bool CreateChildLines = true, SqlTransaction sqlTrx = null, int comboProductId = -1, PurchasedProducts productModiferInfo = null, SubscriptionHeaderDTO subscriptionHeaderDTO = null)
        {
            log.LogMethodEntry(inCard, productId, in_price, in_quantity, message, outTrxLine, CreateChildLines, sqlTrx, comboProductId, productModiferInfo, subscriptionHeaderDTO);
            //gSubscriptionHeaderDTO = subscriptionHeaderDTO;
            if (Order == null || (Order != null && Order.OrderHeaderDTO == null))
            {
                Order = new OrderHeaderBL(Utilities.ExecutionContext, new OrderHeaderDTO());
                Order.OrderHeaderDTO.UserId = Utilities.ParafaitEnv.User_Id;
            }
            //Dictionary<string, int> transactionOrderTypes = LoadTransactionOrderType();
            if (Order.OrderHeaderDTO.TransactionOrderTypeId == -1)
            {
                if (TransactionOrderTypes.ContainsKey("Sale"))
                    Order.OrderHeaderDTO.TransactionOrderTypeId = TransactionOrderTypes["Sale"];
            }
            TransactionLine TrxLine;
            if (outTrxLine == null)
                outTrxLine = TrxLine = new TransactionLine();
            else
                TrxLine = outTrxLine;

            TrxLine.LineValid = true;
            TrxLine.Remarks = message;
            message = "";

            TrxLine.ProductID = productId;
            TrxLine.quantity = in_quantity;
            if (comboProductId > -1)
            {
                TrxLine.ComboproductId = comboProductId;
            }

            if (!checkForQueueProducts(inCard, productId, sqlTrx))
            {
                message = Utilities.MessageUtils.getMessage(495);
                log.LogMethodExit(1);
                return 1;
            }

            if (TrxLines != null && TrxLines.Count > 0 && TransactionOrderTypes.Count > 0
                && (Order == null || (Order != null && Order.OrderHeaderDTO == null)
                     || (Order != null && Order.OrderHeaderDTO != null && Order.OrderHeaderDTO.TransactionOrderTypeId == -1 && TransactionOrderTypes.Count > 0)
                     || (Order != null && Order.OrderHeaderDTO != null && (Order.OrderHeaderDTO.TransactionOrderTypeId != TransactionOrderTypes["Refund"] && Order.OrderHeaderDTO.TransactionOrderTypeId != TransactionOrderTypes["Item Refund"])))
                && in_price < -1)
            {
                message = Utilities.MessageUtils.getMessage("Transaction order type is not set.");
                log.LogMethodExit(1);
                return 1;
            }

            DataRow Product = getProductDetails(productId);

            if (Product["ManagerApprovalRequired"].ToString().Equals("Y"))
            {
                if (!String.IsNullOrEmpty(Utilities.ParafaitEnv.ApproverId) && !Utilities.ParafaitEnv.ApproverId.Equals("-1"))
                {
                    TrxLine.AddApproval(ApprovalAction.GetApprovalActionType(ApprovalAction.ApprovalActionType.ADD), Utilities.ParafaitEnv.ApproverId, Utilities.ParafaitEnv.ApprovalTime);
                }
                else
                {
                    TrxLine.AddApproval(ApprovalAction.GetApprovalActionType(ApprovalAction.ApprovalActionType.ADD), Utilities.ParafaitEnv.ManagerId.ToString(), Utilities.ParafaitEnv.ApprovalTime);
                }
            }

            //Modified 02/2019 for BearCat - 86-68
            if (ParafaitDefaultContainerList.GetParafaitDefault<bool>(Utilities.ExecutionContext, "ALLOW_PRODUCTS_TOBE_MARKED_UNAVAILABLE") &&
                (Product["product_type"].ToString() == "MANUAL" || Product["product_type"].ToString() == "COMBO"))
            {
                decimal totalQty = 0;
                if (TrxLines != null && TrxLines.Count > 0)
                {
                    for (int i = 0; i < TrxLines.Count; i++)
                    {
                        if (TrxLines[i].DBLineId == 0 && TrxLines[i].ProductID == productId && TrxLines[i].LineValid)
                        {
                            totalQty += TrxLines[i].quantity;
                        }
                    }
                }

                ProductsAvailabilityListBL unavailableProductsList = new ProductsAvailabilityListBL(Utilities.ExecutionContext);
                ProductsAvailabilityDTO unavailableProduct = unavailableProductsList.SearchUnavailableProductByProductId(productId);
                if (!unavailableProduct.IsAvailable && (unavailableProduct.AvailableQty - (totalQty + in_quantity) < 0) && unavailableProduct.UnavailableTill > Utilities.getServerTime())
                {
                    message = Utilities.MessageUtils.getMessage(2049, Decimal.ToInt32(unavailableProduct.AvailableQty), unavailableProduct.ProductName);
                    log.LogVariableState("message ", message);
                    log.LogMethodExit(1);
                    return 1;
                }
            }

            if (subscriptionHeaderDTO != null
                && Product["product_type"].ToString() == "LOCKER"
                && Product["CardSale"].ToString().Equals("Y") == false)
            {
                message = MessageContainerList.GetMessage(Utilities.ExecutionContext, 2986, Product["product_type"].ToString());
                //"Invalid product setup. Cannot add Subscription details. &1 product type is not set up as Card Sale in Product type setup"
                log.LogVariableState("message ", message);
                log.LogMethodExit(1);
                return 1;
            }

            TrxLine.OrderTypeId = Convert.ToInt32(Product["OrderTypeId"] == DBNull.Value ? -1 : Product["OrderTypeId"]);
            //Assign LinkAsChildCard property
            TrxLine.LinkAsChildCard = Convert.ToBoolean(Convert.ToInt32(Product["LinkAsChildCard"]));
            if ((outTrxLine == null || (outTrxLine.ComboChildLine == false && outTrxLine.ModifierLine == false)) &&
                (orderTypeIdSet == null || orderTypeIdSet.Contains(TrxLine.OrderTypeId) == false))
            {
                if (orderTypeIdSet == null)
                {
                    orderTypeIdSet = new HashSet<int>();
                    foreach (var line in TrxLines)
                    {
                        if (line.LineValid && line.ParentLine == null)
                        {
                            orderTypeIdSet.Add(line.OrderTypeId);
                        }
                    }
                }
                orderTypeIdSet.Add(TrxLine.OrderTypeId);
                if (orderTypeIdSet.SetEquals(new HashSet<int>() { -1 }))
                {
                    OrderTypeGroupId = -1;
                }
                else
                {
                    OrderTypeGroupDTO orderTypeGroupDTO = GetOrderTypeGroup(orderTypeIdSet);
                    if (orderTypeGroupDTO == null)
                    {
                        orderTypeIdSet.Remove(TrxLine.OrderTypeId);
                        message = Utilities.MessageUtils.getMessage(1403);

                        log.LogVariableState("message ", message);
                        log.LogMethodExit(2);
                        return 2;
                    }
                    else
                    {
                        OrderTypeGroupId = orderTypeGroupDTO.Id;
                    }
                }
            }

            //Begin Modification on 12-May-2016 for waiver implementation
            if (!DBNull.Value.Equals(Product["WaiverRequired"]))
            {
                TrxLine.IsWaiverRequired = Product["WaiverRequired"].ToString();
            }
            //End Modification on 12-May-2016 for waiver implementation

            TrxLine.WaiverSetId = Convert.ToInt32(Product["WaiverSetId"] == DBNull.Value ? -1 : Product["WaiverSetId"]);


            #region Maximum quantity allowed  for the day check
            if (!DBNull.Value.Equals(Product["MaxQtyPerDay"]) && Convert.ToInt32(Product["MaxQtyPerDay"]) > 0)
            {
                List<TransactionLine> trxLines = new List<TransactionLine>();
                trxLines = TrxLines.FindAll(x => x.LineValid == true && x.ProductID == productId && x.DBLineId <= 0);
                int soldQty = GetProductQuantity(productId, this.TrxDate);
                if (Convert.ToInt32(Product["MaxQtyPerDay"]) <= (soldQty + trxLines.Count))
                {
                    message = Utilities.MessageUtils.getMessage(1158, Convert.ToInt32(Product["MaxQtyPerDay"]), soldQty);
                    log.LogVariableState("message ", message);
                    log.LogMethodExit(1);
                    return 1;
                }
            }
            #endregion

            //Begin Modification on 13-4-2016 for concatenating Parent Modifier Name
            if (ParentModifierProductId > 0 && Product["product_type"].ToString() == "MANUAL")
            {
                TrxLine.ProductName = ParentModifierName.ToString() + " - " + Product["product_name"].ToString();

                TrxLine.ParentModifierProductId = ParentModifierProductId;
                TrxLine.ParentModifierPrice = Convert.ToDouble(ParentModifierProductPrice);
                TrxLine.ParentModifierName = ParentModifierName;
                TrxLine.ParentModifierSetId = ParentModifierSetId;
            }
            else
            {
                TrxLine.ProductName = Product["product_name"].ToString();
            }

            //Modified on - 21-Apr-2016 for adding parent modifier price and tax details

            if (ParentModifierProductId > 0 && Product["product_type"].ToString() == "MANUAL")
            {
                DataRow parentProductDetails = getProductDetails(ParentModifierProductId);
                if (parentProductDetails != null)
                {
                    TrxLine.ParentModiferTaxInclusive = parentProductDetails["TaxInclusivePrice"].ToString();
                    TrxLine.ParentModifierTaxId = parentProductDetails["tax_id"] == DBNull.Value ? -1 : Convert.ToInt32(parentProductDetails["tax_id"]);
                    TrxLine.ParentModiferTaxPercent = parentProductDetails["tax_percentage"] == DBNull.Value ? 0 : Convert.ToDouble(parentProductDetails["tax_percentage"]);
                }
            }
            ParentModifierProductId = -1;
            //END Modified on - 21-Apr-2016 for adding parent modifier price and tax details

            TrxLine.ProductTypeCode = Product["product_type"].ToString();
            TrxLine.ProductType = Product["product_type_desc"].ToString();
            TrxLine.productHSNCode = Product["HsnSacCode"].ToString(); // HSN SAC Code 10-Jul-17
            TrxLine.TaxInclusivePrice = Product["TaxInclusivePrice"].ToString();
            TrxLine.AllowPriceOverride = (Product["AllowPriceOverride"].ToString() == "Y" ? true : false);
            //Set override price if context of order is Item Refund. Product may not have override price set up
            if (Order != null && Order.OrderHeaderDTO != null && TransactionOrderTypes.Count > 0
                && Order.OrderHeaderDTO.TransactionOrderTypeId == TransactionOrderTypes["Item Refund"])
                TrxLine.AllowPriceOverride = true;
            if (Product["CreditPlusConsumptionId"] != DBNull.Value && TrxLine.quantity == 1)
            {
                TrxLine.CreditPlusConsumptionId = Convert.ToInt32(Product["CreditPlusConsumptionId"]);
                TrxLine.quantity = 1;
            }

            if (Product["CategoryId"] != DBNull.Value)
                TrxLine.CategoryId = Convert.ToInt32(Product["CategoryId"]);

            //if (Product["CardTypeId"] != DBNull.Value)
            //{
            //    TrxLine.CardTypeId = Convert.ToInt32(Product["CardTypeId"]);
            //}

            if (Product["MembershipID"] != DBNull.Value)
            {
                TrxLine.MembershipId = Convert.ToInt32(Product["MembershipID"]);
            }

            if (TrxLine.ProductTypeCode == ProductTypeValues.SERVICECHARGE || TrxLine.ProductTypeCode == ProductTypeValues.GRATUITY)
            {
                TransactionLine activeLine = GetActiveLineForType(TrxLine.ProductTypeCode, sqlTrx);
                if (activeLine != null)
                {
                    message = MessageContainerList.GetMessage(Utilities.ExecutionContext, 4495, TrxLine.ProductTypeCode);
                    // "Sorry, transaction already have an entry for &1. Cannot add again"
                    log.LogVariableState("message ", message);
                    log.LogMethodExit(1);
                    return 1;
                }
                if (TrxLine.ProductTypeCode == ProductTypeValues.SERVICECHARGE)
                {
                    KeyValuePair<bool, List<string>> canAdd = CanProceedWithServiceChargeLineCreation(sqlTrx);
                    if (canAdd.Key == false && in_price == -1)//overider amount from manually applied charges
                    {
                        message = (canAdd.Value != null && canAdd.Value.Any())
                                          ? string.Join(",", canAdd.Value)
                                          : MessageContainerList.GetMessage(Utilities.ExecutionContext, "Sorry unexpected error");
                        log.LogVariableState("message ", message);
                        log.LogMethodExit(1);
                        return 1;
                    }
                }
                else if (TrxLine.ProductTypeCode == ProductTypeValues.GRATUITY)
                {
                    KeyValuePair<bool, List<string>> canAdd = CanProceedWithGratuityLineCreation(sqlTrx);
                    if (canAdd.Key == false)
                    {
                        message = (canAdd.Value != null && canAdd.Value.Any())
                                          ? string.Join(",", canAdd.Value)
                                          : MessageContainerList.GetMessage(Utilities.ExecutionContext, "Sorry unexpected error");
                        log.LogVariableState("message ", message);
                        log.LogMethodExit(1);
                        return 1;
                    }
                }
                if (in_price == -1)
                {
                    if (TrxLine.ProductTypeCode == ProductTypeValues.SERVICECHARGE)
                    {
                        in_price = ComputeServiceCharges(sqlTrx);
                        if (in_price <= 0)
                        {
                            message = MessageContainerList.GetMessage(Utilities.ExecutionContext, 4496);
                            //"Service Charge amount has to be greater than Zero"
                            log.LogVariableState("message ", message);
                            log.LogMethodExit(1);
                            return 1;
                        }
                    }
                    else if (TrxLine.ProductTypeCode == ProductTypeValues.GRATUITY)
                    {
                        in_price = ComputeGratuityAmount(sqlTrx); if (in_price <= 0)
                        {
                            message = MessageContainerList.GetMessage(Utilities.ExecutionContext, 4497);// "Gratuity amount has to be greater than Zero"
                            log.LogVariableState("message ", message);
                            log.LogMethodExit(1);
                            return 1;
                        }
                    }
                }
            }

            if (Product["UsedInDiscounts"] != DBNull.Value)
                TrxLine.UsedInDiscounts = true;

            if (Product["tax_id"] != DBNull.Value)
            {
                TrxLine.tax_id = Convert.ToInt32(Product["tax_id"]);
                TrxLine.tax_percentage = Convert.ToDouble(Product["tax_percentage"]);
                //Begin Modification 25-Mar-2016 for Service Charge change
                if (TrxLine.ProductTypeCode == "MANUAL")
                {
                    object productSplitTaxPercentage = Utilities.executeScalar
                                                                   (@"SELECT CAST((SUM(((T.Percentage/100) * PTP.PRICE))/@ProductPrice)*100 
                                                                                  as Numeric (5,2))
                                                                        FROM ProductTaxStructurePricing PTP,
                                                                            TaxStructure T
                                                                        WHERE ProductId = @ProductId
                                                                        AND PTP.TAXID = @TaxID
                                                                        AND ACTIVE = 1
                                                                        AND T.TAXID = PTP.TaxId
                                                                        AND T.ParentStructureId IS NULL
                                                                        AND T.TaxStructureId = PTP.TaxStructureId",
                                                                          new SqlParameter("@ProductPrice", Convert.ToDouble(Product["price"])),
                                                                          new SqlParameter("@ProductId", productId),
                                                                          new SqlParameter("@TaxId", TrxLine.tax_id));

                    log.LogVariableState("@ProductPrice", Convert.ToDouble(Product["price"]));
                    log.LogVariableState("@ProductId", productId);
                    log.LogVariableState("@TaxId", TrxLine.tax_id);

                    if (productSplitTaxPercentage != null && productSplitTaxPercentage != DBNull.Value)
                        TrxLine.tax_percentage = Convert.ToDouble(productSplitTaxPercentage.ToString());
                }
                //End Modification 25-Mar-2016
                TrxLine.taxName = Product["tax_name"].ToString();
            }

            if (subscriptionHeaderDTO != null && productId == subscriptionHeaderDTO.ProductsId)
            {
                ProductSubscriptionBuilder productSubscriptionBuilder = new ProductSubscriptionBuilder(Utilities.ExecutionContext);
                if (subscriptionHeaderDTO.SourceSubscriptionHeaderId == -1)
                {
                    TrxLine.SubscriptionHeaderDTO = productSubscriptionBuilder.BuildSubscriptionDTO(subscriptionHeaderDTO);
                }
                else
                {
                    ProductsDTO productsDTO = GetProductsDTO(subscriptionHeaderDTO.ProductsId);
                    TrxLine.SubscriptionHeaderDTO = productSubscriptionBuilder.BuildSubscriptionDTOForRenewal(subscriptionHeaderDTO, productsDTO, subscriptionHeaderDTO.SourceSubscriptionHeaderId);
                }
            }
            //Begin: Booking Related Changes. Added to create transaction lines if product type is "BOOKINGS" on 25-Aug-2015
            if (TrxLine.ProductTypeCode == "BOOKINGS")
            {
                TrxLine.Price = in_price;
            }
            //End: Booking Related chnages 25-Aug-2015

            if (TrxLine.ProductTypeCode == "ATTRACTION")
            {
                int availUnits = 0;
                if (gATB != null)
                    availUnits = (int)gATB.AttractionBookingDTO.AvailableUnits;
                //else if (Product["AvailableUnits"] != DBNull.Value)
                //    availUnits = Convert.ToInt32(Product["AvailableUnits"]);
                if (availUnits > 0)
                {
                    int bookedUnits = 0;
                    if (gATB == null)
                    {
                        bookedUnits = Convert.ToInt32(Utilities.executeScalar(@"select isnull(sum(tl.quantity), 0) 
                                                                                from trx_lines tl, trx_header th 
                                                                                where th.trxId = tl.trxId 
                                                                                and th.trxDate >= DATEADD(HOUR, 6, DATEADD(D, 0, DATEDIFF(D, 0, GETDATE()))) 
                                                                                and th.trxDate < 1 + DATEADD(HOUR, 6, DATEADD(D, 0, DATEDIFF(D, 0, GETDATE())))
                                                                                and tl.product_id = @productId",
                                                                                new SqlParameter("@productId", productId)));
                        log.LogVariableState("@productId", productId);

                        if (availUnits < bookedUnits + in_quantity)
                        {
                            message = Utilities.MessageUtils.getMessage(326, in_quantity, (availUnits - bookedUnits).ToString() + "(" + availUnits.ToString() + ")");
                            log.LogVariableState("message ", message);
                            log.LogMethodExit(2);
                            return 2;
                        }
                    }
                    // else
                    // {
                    // iqbal commented on 2-Aug-2018
                    // commented as ATB for required quantity is already created and hence unints are already blocked. no need to do additional validation
                    //                        bookedUnits = Convert.ToInt32(Utilities.executeScalar(@"select isnull(sum((case when expiryDate is null then BookedUnits when expiryDate< getdate() then 0 else BookedUnits end)), 0) bookedUnits 
                    //                                                                                    from attractionBookings atb 
                    //                                                                                    where atb.attractionScheduleId = @attractionScheduleId 
                    //                                                                                    and atb.ScheduleTime >= @date 
                    //                                                                                    and atb.ScheduleTime < 1 + @date",
                    //                                                                                new SqlParameter("@attractionScheduleId", gATB.AttractionScheduleId),
                    //                                                                                new SqlParameter("@date", gATB.ScheduleTime.Date.AddHours(6))));

                    //                        log.LogVariableState("@attractionScheduleId", gATB.AttractionScheduleId);
                    //                        log.LogVariableState("@date", gATB.ScheduleTime.Date.AddHours(6));
                    //  }
                }
            }

            if (inCard != null && TrxLine.ProductTypeCode == "ATTRACTION" && Product["CardSale"].ToString().Equals("Y"))
            {
                // removed the NEW only card restriction - iqbal 2-Aug-2018
                //if (inCard.CardStatus != "NEW")
                //{
                //    message = Utilities.MessageUtils.getMessage(363);
                //    log.LogVariableState("message ", message);
                //    log.LogMethodExit(2);
                //    return 2;
                //}

                if (inCard.CardStatus == "NEW") // added the condition, after above change
                {
                    bool newProductFound = false;
                    for (int i = 0; i < TrxLines.Count; i++)
                    {
                        if (TrxLines[i].CardNumber == inCard.CardNumber && (TrxLines[i].ProductTypeCode == "NEW" || TrxLines[i].ProductTypeCode == "CARDDEPOSIT")
                            && !TrxLines[i].Equals(TrxLine) && TrxLines[i].LineValid)
                        {
                            newProductFound = true;
                            break;
                        }
                    }
                    if (!newProductFound)
                    {
                        double deposit = 0;

                        if (Product["face_value"] != DBNull.Value)
                        {
                            deposit = Convert.ToDouble(Product["face_value"]);
                        }
                        if (deposit > 0)
                        {
                            deposit = (in_price == 0 ? 0 : deposit);
                            createTransactionLine(inCard, Utilities.ParafaitEnv.CardDepositProductId, deposit, 1, ref message, null);
                        }
                        // Product["price"] = Math.Max(0, (Convert.ToDouble(Product["price"]) - deposit));
                    }
                }

            }


            if (TrxLine.ProductTypeCode == "NEW")
            {
                if (TransactionOrderTypes.ContainsKey("Item Refund") && Order.OrderHeaderDTO.TransactionOrderTypeId == TransactionOrderTypes["Item Refund"])
                {
                    message = Utilities.MessageUtils.getMessage("Item refund is not supported");
                    log.LogVariableState("message ", message);
                    log.LogMethodExit(2);
                    return 2;
                }
                if (inCard.CardStatus != "NEW")
                {
                    message = Utilities.MessageUtils.getMessage(363);
                    log.LogVariableState("message ", message);
                    log.LogMethodExit(2);
                    return 2;
                }

                bool newProductFound = false;
                for (int i = 0; i < TrxLines.Count; i++)
                {
                    if (TrxLines[i].CardNumber == inCard.CardNumber && (TrxLines[i].ProductTypeCode == "NEW" || TrxLines[i].ProductTypeCode == "CARDDEPOSIT")
                        && !TrxLines[i].Equals(TrxLine) && TrxLines[i].LineValid)
                    {
                        newProductFound = true;
                        break;
                    }
                }

                if (inCard.CardStatus == "NEW" && newProductFound)
                {
                    message = Utilities.MessageUtils.getMessage(364);
                    log.LogVariableState("message ", message);
                    log.LogMethodExit(3);
                    return 3;
                }

                double deposit = 0;

                if (Product["face_value"] != DBNull.Value)
                {
                    deposit = Convert.ToDouble(Product["face_value"]);
                }
                if (deposit > 0)
                {
                    deposit = (in_price == 0 ? 0 : deposit);
                    createTransactionLine(inCard, Utilities.ParafaitEnv.CardDepositProductId, deposit, 1, ref message);
                }
                Product["price"] = Math.Max(0, (Convert.ToDouble(Product["price"]) - deposit));
                //in_price = -1; //27-5-2016. ignore user price in case of NEW product
            }
            else if (TrxLine.ProductTypeCode == "RECHARGE" || TrxLine.ProductTypeCode == "VARIABLECARD")
            {
                bool newProductFound = false;
                for (int i = 0; i < TrxLines.Count; i++)
                {
                    if (TrxLines[i].CardNumber == inCard.CardNumber
                        && (TrxLines[i].ProductTypeCode == "NEW"
                            || TrxLines[i].ProductTypeCode == "GAMETIME"
                            || TrxLines[i].ProductTypeCode == "CARDDEPOSIT"
                            || TrxLines[i].ProductTypeCode == "CARDSALE")
                        && !TrxLines[i].Equals(TrxLine) && TrxLines[i].LineValid)
                    {
                        newProductFound = true;
                        break;
                    }
                }

                if (inCard.CardStatus == "NEW" && !newProductFound)
                {
                    message = Utilities.MessageUtils.getMessage(365);
                    log.LogVariableState("message ", message);
                    log.LogMethodExit(4);
                    return 4;
                }
            }
            else if (TrxLine.ProductTypeCode == "LOCKER")
            {
                double deposit = 0;
                if (TrxLines != null)
                {
                    if (TrxLines.Where(x => (bool)(x.ProductTypeCode.Equals("LOCKER") && x.CardNumber.Equals(inCard.CardNumber) && x.LineValid)).ToList().Count >= 1)
                    {
                        message = Utilities.MessageUtils.getMessage(1583);//"Issuing multiple locker to same card is not allowed."
                        log.LogMethodExit(1);
                        return 1;
                    }
                }
                string mode = Product["LockerMode"].ToString();
                if (string.IsNullOrEmpty(mode))
                {
                    mode = Utilities.getParafaitDefaults("LOCKER_SELECTION_MODE");
                }
                ParafaitLockCardHandler locker;
                string lockerMake = Utilities.getParafaitDefaults("LOCKER_LOCK_MAKE");
                lockerMake = string.IsNullOrEmpty(lockerMakeType) ? (string.IsNullOrEmpty(Product["LockerMake"].ToString()) ? lockerMake : Product["LockerMake"].ToString()) : lockerMakeType;
                if (lockerMake.Equals(ParafaitLockCardHandlerDTO.LockerMake.COCY.ToString()))
                    locker = new CocyLockCardHandler(inCard.ReaderDevice, inCard.Utilities.ExecutionContext, Convert.ToByte(inCard.Utilities.ParafaitEnv.MifareCustomerKey));
                else if (lockerMake.Equals(ParafaitLockCardHandlerDTO.LockerMake.INNOVATE.ToString()))
                    locker = new InnovateLockCardHandler(inCard.ReaderDevice, inCard.Utilities.ExecutionContext, Convert.ToByte(inCard.Utilities.ParafaitEnv.MifareCustomerKey), inCard.CardNumber);
                else if (lockerMake.Equals(ParafaitLockCardHandlerDTO.LockerMake.PASSTECH.ToString()))
                    locker = new PassTechLockCardHandler(inCard.ReaderDevice, inCard.Utilities.ExecutionContext);
                else if (lockerMake.Equals(ParafaitLockCardHandlerDTO.LockerMake.METRA_ELS.ToString()) || lockerMake.Equals(ParafaitLockCardHandlerDTO.LockerMake.METRA_ELS_NET.ToString()))
                    locker = new MetraLockCardHandler(inCard.ReaderDevice, inCard.Utilities.ExecutionContext, inCard.CardNumber, null, null, lockerMake, mode);
                else if (lockerMake.Equals(ParafaitLockCardHandlerDTO.LockerMake.HECERE.ToString()))
                    locker = new HecereLockCardHandler(inCard.ReaderDevice, inCard.Utilities.ExecutionContext, inCard.CardNumber);
                else
                if (lockerMake.Equals(ParafaitLockCardHandlerDTO.LockerMake.NONE.ToString()) && mode.Equals(ParafaitLockCardHandlerDTO.LockerSelectionMode.FREE.ToString()))
                {
                    message = Utilities.MessageUtils.getMessage(1640);//Free mode locker issuing is not allowed in case of locker make none.
                    log.LogMethodExit(false, "Free mode locker issuing is not allowed in case of locker make none.");
                    return 1;
                }
                else
                    locker = new ParafaitLockCardHandler(inCard.ReaderDevice, inCard.Utilities.ExecutionContext);
                TrxLine.LockerMake = (string.IsNullOrEmpty(TrxLine.LockerMake) ? lockerMake : TrxLine.LockerMake);
                //int number = -1, id = -1, allocid = -1;
                //string name = "", panelName = "";
                LockerAllocationDTO lockerAllocationDTO;
                LockerDTO lockerDTO = null;
                try
                {
                    if (!string.IsNullOrEmpty(TrxLine.LockerMake) && TrxLine.LockerMake.Equals(ParafaitLockCardHandlerDTO.LockerMake.NONE.ToString()) && !string.IsNullOrEmpty(mode) && mode.Equals(ParafaitLockCardHandlerDTO.LockerSelectionMode.FREE.ToString()))
                    {
                        message = Utilities.MessageUtils.getMessage(1640);
                        log.Error(message);
                        return 4;
                    }
                    lockerAllocationDTO = locker.GetLockerAllocationCardDetails(inCard.card_id);
                    if (lockerAllocationDTO != null && lockerAllocationDTO.Id > -1)
                    {
                        Locker lockerBl = new Locker(lockerAllocationDTO.LockerId);
                        lockerDTO = lockerBl.getLockerDTO;
                        if (lockerDTO != null)
                        {
                            TrxLine.LockerName = lockerDTO.LockerName;
                        }
                    }
                    else if (mode.Equals(ParafaitLockCardHandlerDTO.LockerSelectionMode.FREE.ToString()))
                    {
                        TrxLine.LockerName = "Free Mode";
                    }

                    //locker.GetCardDetails(ref number, ref name, ref id, ref panelName, ref allocid);
                }
                catch (Exception ex)
                {
                    log.Error("Error occurred while getting the card details", ex);
                }
                if (lockerDTO != null &&
                    lockerDTO.LockerAllocated != null &&
                    lockerDTO.LockerAllocated.Id >= 0 && lineLockerAllocation != null &&
                    lineLockerAllocation.LockerId != lockerDTO.LockerId
                    )
                {
                    message = "Valid locker already allocated. Locker: " + lockerDTO.LockerName; // +" [#" + number.ToString() + "]";
                    log.LogVariableState("message ", message);
                    log.LogMethodExit(4);
                    return 4;
                }

                if (Product["face_value"] != DBNull.Value && lineLockerAllocation != null && lineLockerAllocation.Id > -1)
                {
                    deposit = 0;
                }
                else if (Product["face_value"] != DBNull.Value)
                {
                    deposit = Convert.ToDouble(Product["face_value"]);
                }
                if (deposit > 0)
                {
                    deposit = (in_price == 0 ? 0 : deposit);// to be updated here?
                    createTransactionLine(inCard, Utilities.ParafaitEnv.LockerDepositProductId, deposit, 1, ref message);
                }
                if (in_price > 0)
                {
                    Product["price"] = in_price;
                }
                else
                {
                    Product["price"] = Math.Max(0, (Convert.ToDouble(Product["price"]) - deposit));
                }
            }

            if (TrxLine.ProductTypeCode == "CARDDEPOSIT"
                || TrxLine.ProductTypeCode == "LOCKERDEPOSIT"
                || TrxLine.ProductTypeCode == "DEPOSIT")//Added a product type "Deposit" to handle rental deposit on Nov-27-2015//
            {
                TrxLine.Price = in_price;
                //Begin Modification 02-Nov-2015 - Added to handle -1 price so that engine can compute deposit value
                if (TrxLine.Price < 0)
                {
                    TrxLine.Price = ParafaitEnv.CardFaceValue;
                }
                //End Modification 02-Nov-2015
                try
                {
                    if (Product["TaxInclusivePrice"].ToString() == "Y")
                    {
                        TrxLine.Price = TrxLine.Price / (1.0 + TrxLine.tax_percentage / 100.0);
                    }
                }
                catch (Exception ex)
                {
                    log.Error("Error occurred when calculating Transaction Line Price", ex);
                }

                if (TrxLine.ProductTypeCode == "CARDDEPOSIT")
                {
                    //face value will be zero when we override, okay?
                    TrxLine.face_value = (float)in_price;// (float)TrxLine.Price; Card Deposit should include tax so that refund will reverse tax
                }
            }
            else if (TrxLine.ProductTypeCode == "VARIABLECARD")
            {
                try
                {
                    if (Product["TaxInclusivePrice"].ToString() == "Y")
                    {
                        TrxLine.Price = in_price / (1.0 + TrxLine.tax_percentage / 100.0);
                    }
                    else
                        TrxLine.Price = in_price;
                }
                catch (Exception ex)
                {
                    log.Error("Error occurred when calculating Transaction Line Price", ex);
                }

                double varMultiple = Convert.ToDouble(Product["credits"] == DBNull.Value ? 1 : Product["credits"]);
                if (varMultiple <= 0)
                    varMultiple = 1;
                if (ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "LOAD_FULL_VAR_AMOUNT_AS_CREDITS") == "Y")
                    TrxLine.VariableCreditPlusCredits = in_price * varMultiple;
                else
                    TrxLine.VariableCreditPlusCredits = TrxLine.Price * varMultiple;

                TrxLine.Courtesy = 0;
            }
            else if (TrxLine.ProductTypeCode == "LOCKER")
            {
                if (in_price >= 0)
                {
                    if (Product["MinimumUserPrice"] != DBNull.Value)
                    {
                        if (in_price < Convert.ToDouble(Product["MinimumUserPrice"]))
                        {
                            message = Utilities.MessageUtils.getMessage(367, Convert.ToDouble(Product["MinimumUserPrice"]).ToString(ParafaitEnv.AMOUNT_WITH_CURRENCY_SYMBOL));

                            log.LogVariableState("message ", message);
                            log.LogMethodExit(6);
                            return 6;
                        }
                    }
                    TrxLine.Price = in_price;
                }
                //else if (Convert.ToBoolean(Product["EnableVariableLockerHours"])
                //{

                //}
                else
                {
                    TrxLine.Price = Convert.ToDouble(Product["price"]);
                }
                try
                {
                    if (Product["TaxInclusivePrice"].ToString() == "Y")
                    {
                        TrxLine.Price = TrxLine.Price / (1.0 + TrxLine.tax_percentage / 100.0);
                    }
                }
                catch (Exception ex)
                {
                    log.Error("Error occurred when calculating Transaction Line Price", ex);
                }

                //TrxLine.LockerNumber = gLockerNumber;
                LockerZones lockerZones = null;
                TrxLine.lockerAllocationDTO = lineLockerAllocation;
                Locker locker = new Locker(lineLockerAllocation.LockerId);
                if (locker.getLockerDTO != null)
                {
                    TrxLine.LockerNumber = locker.getLockerDTO.Identifier;
                    TrxLine.LockerName = locker.getLockerDTO.LockerName;
                    LockerPanel lockerPanel = new LockerPanel(Utilities.ExecutionContext, locker.getLockerDTO.PanelId);
                    if (lockerPanel.getLockerPanelDTO != null)
                    {
                        //TrxLine.LockerName += "("+lockerPanel.getLockerPanelDTO.PanelName+")";
                        lockerZones = new LockerZones(Utilities.ExecutionContext, lockerPanel.getLockerPanelDTO.ZoneId);
                    }
                }
                if (lockerZones != null && lockerZones.GetLockerZonesDTO != null && lockerZones.GetLockerZonesDTO.ZoneId > -1)
                {
                    TrxLine.lockerAllocationDTO.ZoneCode = lockerZones.GetLockerZonesDTO.ZoneCode;
                    TrxLine.LockerMode = lockerZones.GetLockerZonesDTO.LockerMode;
                    ZoneCode = lockerZones.GetLockerZonesDTO.ZoneCode;
                }

                //if (string.IsNullOrEmpty(Product["ZoneCode"].ToString()))
                //{
                //    DataTable dTable = Utilities.executeDataTable(@"select lz.ZoneCode, lz.LockerMode from LockerZones lz 
                //                                                                join LockerPanels lp  on lp.zoneId = lz.ZoneId and lz.ActiveFlag = 1
                //                                                                join  Lockers l on l.PanelId = lp.PanelId and lp.ActiveFlag = 1
                //                                                            where l.Identifier = @id", 
                //                                                new SqlParameter("@id", TrxLine.LockerNumber));
                //    if (dTable != null && dTable.Rows.Count > 0)
                //    {
                //        //TrxLine.ZoneCode = dTable.Rows[0]["ZoneCode"].ToString();
                //        TrxLine.LockerMode = dTable.Rows[0]["LockerMode"].ToString();
                //    }
                //}
                //else
                //{
                //    //TrxLine.ZoneCode = Product["ZoneCode"].ToString();
                //    TrxLine.LockerMode = Product["LockerMode"].ToString();
                //}

                DateTime dtServerTime = Utilities.getServerTime();
                if (TrxLine.SubscriptionHeaderDTO != null && TrxLine.SubscriptionHeaderDTO.SourceSubscriptionHeaderId > -1)
                {
                    //for renewal case set subscription start as new valid from time
                    TrxLine.lockerAllocationDTO.ValidFromTime = TrxLine.SubscriptionHeaderDTO.SubscriptionStartDate;
                    TrxLine.lockerAllocationDTO.ValidToTime = (Product["LockerExpiryDate"] == DBNull.Value)
                                                              ? (TrxLine.SubscriptionHeaderDTO == null ? dtServerTime.Date.AddHours(24) : TrxLine.SubscriptionHeaderDTO.SubscriptionEndDate.AddMinutes(-1))
                                                              : Convert.ToDateTime(Product["LockerExpiryDate"]);
                }

                if (TrxLine.lockerAllocationDTO.ValidToTime.Equals(DateTime.MinValue))
                {
                    TrxLine.lockerAllocationDTO.ValidToTime = (Product["LockerExpiryDate"] == DBNull.Value)
                                                               ? (TrxLine.SubscriptionHeaderDTO == null ? dtServerTime.Date.AddHours(24) : TrxLine.SubscriptionHeaderDTO.SubscriptionEndDate.AddMinutes(-1))
                                                               : Convert.ToDateTime(Product["LockerExpiryDate"]);
                }
                if (TrxLine.lockerAllocationDTO.ValidToTime.CompareTo(dtServerTime) <= 0)
                {
                    //skip for subscription renewal
                    if ((TrxLine.SubscriptionHeaderDTO != null && TrxLine.SubscriptionHeaderDTO.SourceSubscriptionHeaderId > -1) == false)
                    {
                        message = Utilities.MessageUtils.getMessage(1436); //"Invalid Locker Expiry Date Set in Product.";
                        return 1;
                    }
                }
                //if (TrxLine.LockerNumber > 0)
                //{
                //    TrxLine.LockerName = Utilities.executeScalar("select LockerName from Lockers where Identifier = @id",
                //                                                new SqlParameter("@id", TrxLine.LockerNumber)).ToString();
                //}
                //else
                //    TrxLine.LockerName = "Free Mode";
            }
            else if (TrxLine.ProductTypeCode == "LOCKER_RETURN")
            {

                Order.OrderHeaderDTO.TransactionOrderTypeId = TransactionOrderTypes["Refund"];
                if (inCard.CardStatus == "NEW")
                {
                    message = Utilities.MessageUtils.getMessage(459);
                    log.LogVariableState("message ", message);
                    log.LogMethodExit(4);
                    return 4;
                }
                if (TrxLines != null)
                {
                    if (TrxLines.Where(x => (bool)(x.ProductTypeCode.Equals("LOCKER_RETURN") && x.CardNumber.Equals(inCard.CardNumber) && x.LineValid)).ToList().Count >= 1)
                    {
                        message = Utilities.MessageUtils.getMessage(1668);//"Issuing multiple locker return to same card is not allowed."
                        log.LogMethodExit(1);
                        return 1;
                    }
                }
                LockerAllocation lockerAllocation = new LockerAllocation();
                LockerAllocationDTO lockerAllocationDTO = lockerAllocation.GetValidAllocation(-1, inCard.card_id);
                if (lockerAllocationDTO == null || (lockerAllocationDTO != null && lockerAllocationDTO.Id == -1))
                {
                    message = message = Utilities.MessageUtils.getMessage("No locker allocated") + " " + ((inCard == null) ? "" : Utilities.MessageUtils.getMessage("for the card:") + inCard.CardNumber);
                    log.LogMethodExit(1);
                    return 1;
                }
                lockerAllocation.LoadAllocationByCardId(inCard.card_id);
                if (lockerAllocation.GetLockerAllocationDTO != null && !lockerAllocation.GetLockerAllocationDTO.Refunded)
                {
                    TrxLine.lockerAllocationDTO = lockerAllocation.GetLockerAllocationDTO;
                }
                if (lockerAllocation.GetLockerAllocationDTO != null)
                {
                    LockerZones lockerZones = new LockerZones(Utilities.ExecutionContext);
                    lockerZones.LoadLockerZonebyLockerId(lockerAllocation.GetLockerAllocationDTO.LockerId);
                    LockerZonesDTO zonesDTO = lockerZones.GetLockerZonesDTO;
                    if (zonesDTO != null)
                    {
                        lockerMakeType = zonesDTO.LockerMake;
                    }
                }
                TrxLine.Price = -1 * inCard.getOtherDeposits(TrxLine.lockerAllocationDTO);
                TrxLine.LockerMake = (string.IsNullOrEmpty(TrxLine.LockerMake) ? (string.IsNullOrEmpty(lockerMakeType) ? (string.IsNullOrEmpty(Product["LockerMake"].ToString()) ? Utilities.getParafaitDefaults("LOCKER_LOCK_MAKE") : Product["LockerMake"].ToString()) : lockerMakeType) : TrxLine.LockerMake);
                try
                {
                    if (Product["TaxInclusivePrice"].ToString() == "Y")
                    {
                        TrxLine.Price = TrxLine.Price / (1.0 + TrxLine.tax_percentage / 100.0);
                    }
                }
                catch (Exception ex)
                {
                    log.Error("Error occurred when calculating Transaction Line Price", ex);
                }
            }
            else if (TrxLine.ProductTypeCode == "CREDITCARDSURCHARGE")
            {
                TrxLine.Price = in_price;
            }
            else if (TrxLine.ProductTypeCode == "ATTRACTION")
            {
                TrxLine.LineAtb = gATB;

                // june 15 2016 iqbal
                if (TrxLine.CreditPlusConsumptionId == -1)
                {
                    if (in_price != -1)
                        TrxLine.Price = in_price;
                    else
                    {
                        if (gATB == null)
                        {
                            try
                            {
                                TrxLine.Price = Convert.ToDouble(Product["price"]);
                            }
                            catch (Exception ex)
                            {
                                log.Error("Error occurred when Converting Transaction Line Price to Double", ex);
                                message = Utilities.MessageUtils.getMessage(366);
                                log.LogVariableState("message ", message);
                                log.LogMethodExit(5);
                                return 5;
                            }
                        }
                        else
                        {
                            //Begin: Added to Calculate the attraction product price when purchased online and if price is "-1" on 30-Oct-2015//
                            if (gATB.AttractionBookingDTO.Price == -1)
                            {
                                object attractionPrice = Utilities.executeScalar(@"SELECT CASE 
                                                                                        WHEN isnull(p.price, 0) = 0 THEN ap.price
                                                                                        ELSE p.price
                                                                                        END Price
                                                                                FROM products p, 
                                                                                     attractionschedules ats, 
                                                                                     attractionPlays ap
                                                                                WHERE ats.AttractionScheduleId = @attractionScheduleId
                                                                                  AND ap.AttractionPlayId = ats.AttractionPlayId 
                                                                                  AND EXISTS (SELECT 1 
                                                                                                FROM ProductsAllowedInFacility paif,
                                                                                                     facilityMap fm 
                                                                                               WHERE Paif.ProductsId =  p.product_Id
                                                                                                 AND fm.facilityMapId = Paif.facilityMapId
                                                                                                 AND fm.MasterScheduleId = ats.AttractionMasterScheduleId ) 
                                                                                  AND p.product_Id = @productId 
                                                                                  ",
                                                                        new SqlParameter("@productId", TrxLine.ProductID),
                                                                        new SqlParameter("@attractionScheduleId", gATB.AttractionBookingDTO.AttractionScheduleId));

                                log.LogVariableState("@scheduledate", gATB.AttractionBookingDTO.ScheduleFromDate.Date);
                                log.LogVariableState("@productId", TrxLine.ProductID);
                                log.LogVariableState("@attractionScheduleId", gATB.AttractionBookingDTO.AttractionScheduleId);

                                if (attractionPrice != null && !string.IsNullOrEmpty(attractionPrice.ToString()))
                                    gATB.AttractionBookingDTO.Price = Convert.ToDouble(attractionPrice);
                                else
                                    gATB.AttractionBookingDTO.Price = 0; // scenario where no price is set for the product at any level.
                            }
                            //End: Calculating Attraction product Price on 30-Oct-2015//
                            TrxLine.Price = getSpecialPrice(productId, gATB.AttractionBookingDTO.Price);
                        }
                        //End: Calculating Attraction product Price on 30-Oct-2015//
                        //TrxLine.Price = getSpecialPrice(productId, gATB.Price);
                    }
                }
                else
                {
                    // price is not being calculated correctly if CP Consumption Rule defines a discount
                    //if (in_price != -1)
                    //    TrxLine.Price = in_price;
                    //else
                    {
                        try
                        {
                            TrxLine.Price = Convert.ToDouble(Product["price"]);
                        }
                        catch (Exception ex)
                        {
                            log.Error("Error occured when Converting Transaction Line Price to Double", ex);
                            message = Utilities.MessageUtils.getMessage(366);
                            log.LogVariableState("message ", message);
                            log.LogMethodExit(5);
                            return 5;
                        }
                    }
                }

                try
                {
                    if (Product["TaxInclusivePrice"].ToString() == "Y")
                    {
                        TrxLine.Price = TrxLine.Price / (1.0 + TrxLine.tax_percentage / 100.0);
                    }
                }
                catch (Exception ex)
                {
                    log.Error("Error occurred when Converting Transaction Line Price to Double", ex);
                }
            }
            else
            {
                try
                {
                    if (TrxLine.ProductTypeCode == "CHECK-IN" || TrxLine.ProductTypeCode == "CHECK-OUT")
                    {

                        double checkinProductPrice;
                        if (in_price != -1)
                            checkinProductPrice = in_price;
                        else
                        {
                            try
                            {
                                checkinProductPrice = Convert.ToDouble(Product["price"]);
                            }
                            catch (Exception ex)
                            {
                                log.Error("Error occured when Converting Transaction Line Price to Double", ex);
                                message = Utilities.MessageUtils.getMessage(366);
                                log.LogVariableState("message ", message);
                                log.LogMethodExit(5);
                                return 5;
                            }
                        }
                        TrxLine.Price = getSpecialPrice(productId, checkinProductPrice);
                        if (TrxLine.Price == in_price
                            && Product["CreditPlusConsumptionId"] != DBNull.Value
                            && Convert.ToInt32(Product["CreditPlusConsumptionId"]) > 0)
                        {
                            TrxLine.CreditPlusConsumptionId = Convert.ToInt32(Product["CreditPlusConsumptionId"]);
                            TrxLine.Price = Convert.ToDouble(Product["Price"]);
                        }
                    }
                    else if (TrxLine.ModifierLine == false
                            && TrxLine.ComboChildLine == false
                            && (TrxLine.ProductTypeCode == "MANUAL"
                                || TrxLine.ProductTypeCode == "COMBO"
                                || TrxLine.ProductTypeCode == "EXTERNAL POS"
                                || TrxLine.ProductTypeCode == "GENERICSALE")
                            && in_price >= 0
                            && (Utilities.ParafaitEnv.specialPricingId == -1 || TrxLine.DBLineId > 0)) // if override price is passed
                    {
                        if (Product["MinimumUserPrice"] != DBNull.Value)
                        {
                            if (in_price < Convert.ToDouble(Product["MinimumUserPrice"]))
                            {
                                message = Utilities.MessageUtils.getMessage(367, Convert.ToDouble(Product["MinimumUserPrice"]).ToString(ParafaitEnv.AMOUNT_WITH_CURRENCY_SYMBOL));

                                log.LogVariableState("message ", message);
                                log.LogMethodExit(6);
                                return 6;
                            }
                        }
                        TrxLine.Price = in_price;
                        if (in_price != Convert.ToDouble(Product["price"]) && TrxLine.DBLineId == 0)
                            TrxLine.UserPrice = true;
                    }
                    else //to handle modifier price set in Product Modifiers
                    {
                        if (in_price >= 0)
                            TrxLine.Price = in_price;
                        else
                            TrxLine.Price = Convert.ToDouble(Product["price"]);
                    }

                    if (Product["TaxInclusivePrice"].ToString() == "Y")
                    {
                        TrxLine.Price = TrxLine.Price / (1.0 + TrxLine.tax_percentage / 100.0);
                    }
                }
                catch (Exception ex)
                {
                    log.Error("Error occurred when Converting Transaction Line Price to Double", ex);
                }
            }

            //Begin: Added For Variable cash Refund-CASHREFUND on 07-Jan-2016//
            if (TrxLine.ProductTypeCode == "CASHREFUND")
            {
                Order.OrderHeaderDTO.TransactionOrderTypeId = TransactionOrderTypes["Item Refund"];
                TrxLine.Price = in_price;
            }
            //End: Added For Variable cash Refund-CASHREFUND on 07-Jan-2016//

            if (TrxLine.ProductTypeCode == ProductTypeValues.GENERICSALE)
            {
                if (inCard != null)
                {
                    TrxLine.card = inCard;
                    TrxLine.CardNumber = inCard.CardNumber;
                }
            }

            if (TrxLine.ProductTypeCode == "EXCESSVOUCHERVALUE")
            {
                TrxLine.Price = 0;
                TrxLine.AllocatedProductPrice = in_price;
                if (Product["TaxInclusivePrice"].ToString() == "Y")
                {
                    TrxLine.AllocatedProductPrice = TrxLine.AllocatedProductPrice / (1.0 + TrxLine.tax_percentage / 100.0);
                }
            }
            //Begin: Addd a new prodcut Type "RENTAL" to handle rental type products on Nov-27-2015//
            if (TrxLine.ProductTypeCode == "RENTAL")
            {
                double deposit = 0;
                if (gtransactionReservationScheduleDTO != null)
                {
                    TransactionReservationScheduleBL transactionReservationScheduleBL = new TransactionReservationScheduleBL(Utilities.ExecutionContext, gtransactionReservationScheduleDTO);
                    transactionReservationScheduleBL.Save(sqlTrx);
                    TrxLine.SetTransactionReservationScheduleDTO(Utilities.ExecutionContext, gtransactionReservationScheduleDTO);
                }
                if (Product["face_value"] != DBNull.Value)
                    deposit = Convert.ToDouble(Product["face_value"]);
                if (deposit > 0)
                {
                    deposit = (in_price == 0 ? 0 : deposit);
                    createTransactionLine(inCard, Utilities.ParafaitEnv.rentalDepositProductId, deposit, 1, ref message);
                }
                Product["price"] = Math.Max(0, (Convert.ToDouble(Product["price"]) - deposit));
                TrxLine.RentalDeposit = deposit; //Rental Deposit value set

                if (in_price >= 0)
                {
                    if (Product["MinimumUserPrice"] != DBNull.Value)
                    {
                        if (in_price < Convert.ToDouble(Product["MinimumUserPrice"]))
                        {
                            message = Utilities.MessageUtils.getMessage(367, Convert.ToDouble(Product["MinimumUserPrice"]).ToString(ParafaitEnv.AMOUNT_WITH_CURRENCY_SYMBOL));

                            log.LogVariableState("message ", message);
                            log.LogMethodExit(6);
                            return 6;
                        }
                    }
                    TrxLine.Price = in_price;
                    if (in_price != Convert.ToDouble(Product["price"]) && TrxLine.DBLineId == 0)
                        TrxLine.UserPrice = true;
                }
                else
                {
                    TrxLine.Price = Convert.ToDouble(Product["price"]);
                }
                try
                {
                    if (Product["TaxInclusivePrice"].ToString() == "Y")
                    {
                        TrxLine.Price = TrxLine.Price / (1.0 + TrxLine.tax_percentage / 100.0);
                    }

                    TrxLine.InventoryProductCode = Product["InventoryProductCode"].ToString();
                    if (TrxLine.InventoryProductCode != "")
                    {
                        using (SqlConnection cnn = Utilities.createConnection())
                        {
                            using (SqlCommand invCmd = new SqlCommand("", cnn))
                            {
                                //if (!Inventory.checkValidInvProduct(TrxLine.InventoryProductCode, invCmd))
                                if (ValidInventoryProduct(TrxLine.InventoryProductCode, invCmd) == false)
                                {
                                    message = Utilities.MessageUtils.getMessage(368, TrxLine.InventoryProductCode, TrxLine.ProductName);
                                    TrxLine.InventoryProductCode = "";
                                }
                                else
                                {
                                    if (ParafaitEnv.ALLOW_TRANSACTION_ON_ZERO_STOCK != "Y")
                                    {
                                        decimal stock = Inventory.getStock(TrxLine.InventoryProductCode, invCmd, POSMachine, Utilities.ExecutionContext.GetSiteId());
                                        if (stock - in_quantity < 0)
                                        {
                                            message = TrxLine.ProductName + " (" + TrxLine.InventoryProductCode + ") Stock is " + stock.ToString();

                                            log.LogVariableState("message ", message);
                                            log.LogMethodExit(7);
                                            return 7;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    log.Error("Error occurred while checking inventory for valid products", ex);
                }
            }
            //End: Addd a new product Type "RENTAL" to handle rental type products on Nov-27-2015//
            //Begin: Addd a new product Type "RENTAL_RETURN" to handle rental type products on Nov-27-2015//
            if (TrxLine.ProductTypeCode == "RENTAL_RETURN")
            {
                Order.OrderHeaderDTO.TransactionOrderTypeId = TransactionOrderTypes["Refund"];
                if (in_price >= 0)
                {
                    if (Product["MinimumUserPrice"] != DBNull.Value)
                    {
                        if (in_price < Convert.ToDouble(Product["MinimumUserPrice"]))
                        {
                            message = Utilities.MessageUtils.getMessage(367, Convert.ToDouble(Product["MinimumUserPrice"]).ToString(ParafaitEnv.AMOUNT_WITH_CURRENCY_SYMBOL));

                            log.LogVariableState("message ", message);
                            log.LogMethodExit(6);
                            return 6;
                        }
                    }
                    TrxLine.Price = -1 * in_price;
                    if (in_price != Convert.ToDouble(Product["price"]) && TrxLine.DBLineId == 0)
                        TrxLine.UserPrice = true;
                }
                else
                {
                    TrxLine.Price = -1 * Convert.ToDouble(Product["price"]);
                }
                try
                {
                    if (Product["TaxInclusivePrice"].ToString() == "Y")
                    {
                        TrxLine.Price = (TrxLine.Price / (1.0 + TrxLine.tax_percentage / 100.0));

                    }
                    //Begin: Added to link the rental return type product with the Inventory on Dec-9-2015//
                    TrxLine.InventoryProductCode = Product["InventoryProductCode"].ToString();
                    if (TrxLine.InventoryProductCode != "")
                    {
                        using (SqlConnection cnn = Utilities.createConnection())
                        {
                            using (SqlCommand invCmd = new SqlCommand("", cnn))
                            {
                                //if (!Inventory.checkValidInvProduct(TrxLine.InventoryProductCode, invCmd))
                                if (ValidInventoryProduct(TrxLine.InventoryProductCode, invCmd) == false)
                                {
                                    message = Utilities.MessageUtils.getMessage(368, TrxLine.InventoryProductCode, TrxLine.ProductName);
                                    TrxLine.InventoryProductCode = "";
                                }
                                else
                                {
                                    if (ParafaitEnv.ALLOW_TRANSACTION_ON_ZERO_STOCK != "Y")
                                    {
                                        decimal stock = Inventory.getStock(TrxLine.InventoryProductCode, invCmd, POSMachine, Utilities.ExecutionContext.GetSiteId());
                                        if (stock - in_quantity < 0)
                                        {
                                            message = TrxLine.ProductName + " (" + TrxLine.InventoryProductCode + ") Stock is " + stock.ToString();

                                            log.LogVariableState("message ", message);
                                            log.LogMethodExit(7);
                                            return 7;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //End//
                }
                catch (Exception ex)
                {
                    log.Error("Error occurred while checking inventory for valid RENTAL_RETURN products", ex);
                }
            }
            //End: Addd a new prodcut Type "RENTAL_RETURN" to handle rental type products on Nov-27-2015//

            if (TrxLine.ProductTypeCode == "CARDSALE" || TrxLine.ProductTypeCode == "GAMETIME")
            {
                TrxLine.card = inCard;
                TrxLine.CardNumber = inCard.CardNumber;

                if (inCard.CardStatus == "NEW")
                {
                    bool newProductFound = false;
                    for (int i = 0; i < TrxLines.Count; i++)
                    {
                        if (TrxLines[i].CardNumber == inCard.CardNumber && (TrxLines[i].ProductTypeCode == "NEW" || TrxLines[i].ProductTypeCode == "CARDDEPOSIT")
                            && !TrxLines[i].Equals(TrxLine) && TrxLines[i].LineValid)
                        {
                            newProductFound = true;
                            break;
                        }
                    }

                    if (!newProductFound)
                    {
                        double deposit = 0;

                        if (Product["face_value"] != DBNull.Value)
                        { deposit = Convert.ToDouble(Product["face_value"]); }
                        if (deposit != 0) //Modified on 02-Nov-2015
                        {
                            deposit = (in_price == 0 ? 0 : deposit);
                            createTransactionLine(inCard, Utilities.ParafaitEnv.CardDepositProductId, deposit, 1, ref message);
                        }
                    }
                }
            }

            if (TrxLine.ProductTypeCode == "MANUAL")
            {
                //object categoryId = Utilities.executeScalar("select isnull(categoryId, -1) from products where product_id = @productId",
                //                                                    new SqlParameter("@productId", TrxLine.ProductID));
                for (int i = 0; i < TrxLines.Count; i++)
                {
                    if (TrxLines[i].ProductTypeCode == "COMBO" && TrxLines[i].LineValid)//Changes Done to include Individual product price within combo.Added boolean applyProductPrice to skip the condition if combo has a price of -1 on 06-Oct-2015))
                    {
                        int neededQty = GetComboChildProductOrCategoryQty(TrxLines[i].ProductID, TrxLine.ProductID, TrxLine.CategoryId, TrxLines[i].quantity);

                        decimal usedQty = 0;
                        for (int j = 0; j < TrxLines.Count; j++)
                        {
                            if (TrxLines[j].LineValid == false)
                                continue;

                            //if (TrxLines[i].Equals(TrxLines[j].ParentLine)
                            //    && (TrxLines[j].ProductID.Equals(TrxLine.ProductID)
                            //        || categoryId.Equals(Utilities.executeScalar("select categoryId from products where product_id = @productId",
                            //                                        new SqlParameter("@productId", TrxLines[j].ProductID)))))
                            if (TrxLines[i].Equals(TrxLines[j].ParentLine)
                                && (TrxLines[j].ProductID.Equals(TrxLine.ProductID)
                                    || TrxLines[j].CategoryId == TrxLine.CategoryId))
                            {
                                usedQty += TrxLines[j].quantity;
                            }
                        }

                        decimal balanceQty = neededQty - usedQty;
                        if (balanceQty > 0)
                        {
                            if (TrxLines[i].OriginalPrice != -1.0 && TrxLines[i].Price != 0)
                            {
                                TrxLine.Price = 0;
                                TrxLine.AllowPriceOverride = false;
                            }
                            TrxLine.ParentLine = TrxLines[i];
                            TrxLine.UserPrice = false;
                            TrxLine.ComboChildLine = true;
                            TrxLines.Add(TrxLine);

                            decimal FinalBalanceQty = 0;
                            if (TrxLine.quantity > balanceQty)
                            {
                                FinalBalanceQty = TrxLine.quantity - balanceQty;
                                TrxLine.quantity = balanceQty;
                            }

                            if (FinalBalanceQty > 0)
                            {
                                createTransactionLine(null, TrxLine.ProductID, FinalBalanceQty, ref message);
                            }
                            break;
                        }
                    }
                }
            }

            if (TrxLine.ProductTypeCode == "CHECK-IN")
            {
                //TrxLine.LineCheckIn = gCheckIn;
                TrxLine.LineCheckInDTO = gCheckInDTO;
                TrxLine.LineCheckInDetailDTO = gCheckInDetailDTO;

                if (gCheckOutDetailDTO != null)
                {
                    TrxLine.LineCheckOutDetailDTO = gCheckOutDetailDTO;
                }

                if (gCheckInDTO != null)
                {
                    int allowedTime = Convert.ToInt32(Product["Time"] == DBNull.Value ? 0 : Product["Time"]);
                    if (allowedTime > 0)
                        TrxLine.LineCheckInDTO.AllowedTimeInMinutes = allowedTime;
                }
                if (inCard != null)
                {
                    TrxLine.card = inCard;
                    TrxLine.CardNumber = inCard.CardNumber;

                    TrxLine.ticket_allowed = Product["ticket_allowed"] == DBNull.Value ? "N" : Product["ticket_allowed"].ToString();
                    TrxLine.vip_card = Product["vip_card"] == DBNull.Value ? "N" : Product["vip_card"].ToString();

                    if (inCard.CardStatus == "NEW" && Product["face_value"] != DBNull.Value && Convert.ToDouble(Product["face_value"]) > 0)
                    {
                        bool createDepositLine = true;
                        if (this.TrxLines != null
                            && this.TrxLines.Exists(tl => tl.LineValid == true
                                                         && tl.CardNumber == inCard.CardNumber
                                                         && tl.ProductTypeCode == ProductTypeValues.CARDDEPOSIT))
                        {
                            createDepositLine = false;
                        }
                        if (createDepositLine)
                        {
                            double depositValue = (in_price == 0 ? 0 : Convert.ToDouble(Product["face_value"]));
                            createTransactionLine(inCard, Utilities.ParafaitEnv.CardDepositProductId, depositValue, 1, ref message);
                        }
                    }
                }
            }
            else if (TrxLine.ProductTypeCode == "CHECK-OUT")
            {
                //TrxLine.LineCheckOut = gCheckOut;
                TrxLine.LineCheckInDTO = gCheckInDTO;
                TrxLine.LineCheckOutDetailDTO = gCheckOutDetailDTO;
                //if (gCheckOut != null)
                //    TrxLine.LineCheckOut.BaseTimeForPrice = Convert.ToInt32(Product["Time"] == DBNull.Value ? 0 : Product["Time"]);
                if (inCard != null)
                {
                    TrxLine.card = inCard;
                    TrxLine.CardNumber = inCard.CardNumber;
                }
            }
            else if (TrxLine.ProductTypeCode != "MANUAL"
                    && TrxLine.ProductTypeCode != "ATTRACTION"
                    && TrxLine.ProductTypeCode != "VOUCHER"
                    && TrxLine.ProductTypeCode != "COMBO"
                    && TrxLine.ProductTypeCode != "GENERICSALE"
                    && TrxLine.ProductTypeCode != "BOOKINGS"
                    && TrxLine.ProductTypeCode != "RENTAL"
                    && TrxLine.ProductTypeCode != "RENTAL_RETURN"
                    && TrxLine.ProductTypeCode != "DEPOSIT"
                    && TrxLine.ProductTypeCode != "EXCESSVOUCHERVALUE"
                    && TrxLine.ProductTypeCode != "CASHREFUND" //Added for Variable cash Refund on 07-Jan-2016 //
                    && TrxLine.ProductTypeCode != "INVENTORYINTERSTORE"
                    && TrxLine.ProductTypeCode != "SERVICECHARGE"
                    && TrxLine.ProductTypeCode != "GRATUITY"
                    )
            {
                TrxLine.card = inCard;
                TrxLine.CardNumber = inCard.CardNumber;
                ////TrxLine.card.addVariableCreditPlusCredits = 0;
                //if (TrxLine.ProductTypeCode == "VARIABLECARD")
                //{//Assign to VariableCreditPlus
                //    TrxLine.card.addVariableCreditPlusCredits += TrxLine.Credits;
                //    TrxLine.Credits = 0;
                //}
                TrxLine.ticket_allowed = Product["ticket_allowed"] == DBNull.Value ? "N" : Product["ticket_allowed"].ToString();
                TrxLine.vip_card = Product["vip_card"] == DBNull.Value ? "N" : Product["vip_card"].ToString();
            }

            //Begin Modification on 20-sep-2016 for adding CardExpiry date
            if ((Product["product_type"].ToString() == "NEW" || Product["product_type"].ToString() == "CARDSALE") && !string.IsNullOrEmpty(Product["CardExpiryDate"].ToString()))
            {
                if (TrxLine.card != null && TrxLine.card.CardStatus == "NEW" && TrxLine.card.ExpiryDate == DateTime.MinValue)
                {
                    try
                    {
                        DateTime validDate = Convert.ToDateTime(Product["CardExpiryDate"]);
                        if (validDate < ServerDateTime.Now)
                        {
                            message = Utilities.MessageUtils.getMessage(1109);

                            log.LogVariableState("message ", message);
                            log.LogMethodExit(1);
                            return 1;
                        }
                        TrxLine.card.ExpiryDate = validDate;
                    }
                    catch (Exception ex)
                    {
                        log.Error("Error occurred when calculating the card expiry date", ex);
                    }
                }
            }
            //end Modification on 20-sep-2016 for adding CardExpiry date

            //Begin: Added to update a card expiry date  when product has credit plus and valid for days set on Dec-01-2015//
            //if (TrxLine.card != null
            //    && TrxLine.card.CardStatus == "NEW"
            //    && Convert.ToDouble(Product["CardValidFor"]) > 0
            //    && TrxLine.card.ExpiryDate == DateTime.MinValue)
            //{
            //    TrxLine.card.ExpiryDate = this.EntitlementReferenceDate.AddDays(Convert.ToDouble(Product["CardValidFor"])).Date.AddHours(6);
            //}

            //End: Added to update a card expiry date  when product has credit plus and valid for days set on Dec-01-2015//

            if (TrxLine.ProductTypeCode == "NEW"
                || TrxLine.ProductTypeCode == "RECHARGE"
                || TrxLine.ProductTypeCode == "CARDSALE"
                || TrxLine.ProductTypeCode == "GAMETIME"
                || TrxLine.ProductTypeCode == "VOUCHER" //Added on 03-Feb-2016 for handling Voucher product types
                || TrxLine.ProductTypeCode == "LOCKER")
            {
                try
                {
                    TrxLine.Credits = Convert.ToDouble(Product["credits"] == DBNull.Value ? 0 : Product["credits"]);
                    TrxLine.Courtesy = Convert.ToDouble(Product["courtesy"] == DBNull.Value ? 0 : Product["courtesy"]);
                    TrxLine.Bonus = Convert.ToDouble(Product["bonus"] == DBNull.Value ? 0 : Product["bonus"]);
                    TrxLine.Time = Convert.ToDouble(Product["time"] == DBNull.Value ? 0 : Product["time"]);
                    TrxLine.Tickets = Convert.ToInt32(Product["tickets"] == DBNull.Value ? 0 : Product["tickets"]);
                    TrxLine.face_value = (float)Convert.ToDouble(Product["face_value"] == DBNull.Value ? 0 : Product["face_value"]);
                }
                catch (Exception ex)
                {
                    log.Error("Error occurred when calculating card details like Credits, Courtesy etc.", ex);
                }
            }
            else if (TrxLine.ProductTypeCode == "MANUAL")
            {
                TrxLine.InventoryProductCode = Product["InventoryProductCode"].ToString();
                if (TrxLine.InventoryProductCode != "")
                {
                    using (SqlConnection cnn = Utilities.createConnection())
                    {
                        using (SqlCommand invCmd = new SqlCommand("", cnn))
                        {
                            //if (!Inventory.checkValidInvProduct(TrxLine.InventoryProductCode, invCmd))
                            if (ValidInventoryProduct(TrxLine.InventoryProductCode, invCmd) == false)
                            {
                                message = Utilities.MessageUtils.getMessage(368, TrxLine.InventoryProductCode, TrxLine.ProductName);
                                TrxLine.InventoryProductCode = "";
                            }
                            else
                            {
                                if (ParafaitEnv.ALLOW_TRANSACTION_ON_ZERO_STOCK != "Y")
                                {
                                    decimal stock = Inventory.getStock(TrxLine.InventoryProductCode, invCmd, POSMachine, Utilities.ExecutionContext.GetSiteId());
                                    if (stock - in_quantity < 0)
                                    {
                                        message = TrxLine.ProductName + " (" + TrxLine.InventoryProductCode + ") Stock is " + stock.ToString();

                                        log.LogVariableState("message ", message);
                                        log.LogMethodExit(7);
                                        return 7;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else if (TrxLine.ProductTypeCode == "ATTRACTION")
            {
                if (gATB != null)
                {
                    //if (gATB.SelectedSeatNames != null)
                    //{
                    //    string seats = "";
                    //    foreach (string seat in gATB.SelectedSeatNames)
                    //        seats += seat + ",";
                    //    seats = seats.TrimEnd(',');
                    //    TrxLine.AttractionDetails = gATB.AttractionBookingDTO.AttractionPlayName + ":" + gATB.AttractionBookingDTO.ScheduleTime.ToString("d-MMM-yyyy h:mm tt") + ":" + seats;
                    //}
                    if (gATB.AttractionBookingDTO != null && gATB.AttractionBookingDTO.AttractionBookingSeatsDTOList != null && gATB.AttractionBookingDTO.AttractionBookingSeatsDTOList.Count > 0)
                    {
                        string seats = "";
                        foreach (AttractionBookingSeatsDTO seatDTO in gATB.AttractionBookingDTO.AttractionBookingSeatsDTOList)
                        {
                            seats += seatDTO.SeatName + ",";
                        }
                        seats = seats.TrimEnd(',');
                        TrxLine.AttractionDetails = gATB.AttractionBookingDTO.AttractionPlayName + ":" + gATB.AttractionBookingDTO.ScheduleFromDate.ToString("d-MMM-yyyy h:mm tt") + ":" + seats;
                    }
                    else
                    {
                        TrxLine.AttractionDetails = gATB.AttractionBookingDTO.AttractionPlayName + ":" + gATB.AttractionBookingDTO.ScheduleFromDate.ToString("d-MMM-yyyy h:mm tt");
                    }
                }

                if (Product["CardSale"].ToString().Equals("Y") && inCard != null)
                {
                    TrxLine.card = inCard;
                    TrxLine.CardNumber = inCard.CardNumber;

                    TrxLine.ticket_allowed = Product["ticket_allowed"] == DBNull.Value ? "N" : Product["ticket_allowed"].ToString();
                    TrxLine.vip_card = Product["vip_card"] == DBNull.Value ? "N" : Product["vip_card"].ToString();

                    try
                    {
                        TrxLine.Credits = Convert.ToDouble(Product["credits"] == DBNull.Value ? 0 : Product["credits"]);
                        TrxLine.Courtesy = Convert.ToDouble(Product["courtesy"] == DBNull.Value ? 0 : Product["courtesy"]);
                        TrxLine.Bonus = Convert.ToDouble(Product["bonus"] == DBNull.Value ? 0 : Product["bonus"]);
                        TrxLine.Tickets = Convert.ToInt32(Product["tickets"] == DBNull.Value ? 0 : Product["tickets"]);
                        TrxLine.face_value = (float)Convert.ToDouble(Product["face_value"] == DBNull.Value ? 0 : Product["face_value"]);
                    }
                    catch (Exception ex)
                    {
                        log.Error("Error occurred when calculating card details like Credits, Courtesy etc.", ex);
                    }
                }
            }
            else if (TrxLine.ProductTypeCode == "CHECK-IN")
            {
                if (gCheckInDTO != null)
                {
                    //TrxLine.ProductName += (": " + gCheckIn.customerDTO.first_name + (gCheckIn.AllowedTimeInMinutes == 0 ? "" : ": " + gCheckIn.AllowedTimeInMinutes.ToString() + " Mins") + ", " + gCheckIn.CheckedInUnits.ToString() + " Units");
                    TrxLine.ProductName += Utilities.getServerTime().ToString(" - h:mm tt");
                }
                try
                {
                    TrxLine.Credits = Convert.ToDouble(Product["credits"] == DBNull.Value ? 0 : Product["credits"]);
                    TrxLine.Courtesy = Convert.ToDouble(Product["courtesy"] == DBNull.Value ? 0 : Product["courtesy"]);
                    TrxLine.Bonus = Convert.ToDouble(Product["bonus"] == DBNull.Value ? 0 : Product["bonus"]);
                    TrxLine.Tickets = Convert.ToInt32(Product["tickets"] == DBNull.Value ? 0 : Product["tickets"]);
                    TrxLine.face_value = (float)Convert.ToDouble(Product["face_value"] == DBNull.Value ? 0 : Product["face_value"]);
                    TrxLine.AllowCancel = false;
                }
                catch (Exception ex)
                {
                    log.Error("Error occurred when calculating card details like Credits, Courtesy etc.", ex);
                }
            }
            else if (TrxLine.ProductTypeCode == "CHECK-OUT")
            {
                if (gCheckOutDetailDTO != null)
                {
                    //TrxLine.ProductName += ": " + gCheckOut.CustomerName + (gCheckOut.Detail == "" ? "" : ": " + gCheckOut.Detail);
                    TrxLine.ProductName += Utilities.getServerTime().ToString(" - h:mm tt") + " [" + gCheckOutDetailDTO.Detail + "]";
                    TrxLine.AllowCancel = false;
                    List<KeyValuePair<NotificationTagIssuedDTO.SearchByParameters, string>> tagIssuedSearchParameters = new List<KeyValuePair<NotificationTagIssuedDTO.SearchByParameters, string>>();
                    tagIssuedSearchParameters.Add(new KeyValuePair<NotificationTagIssuedDTO.SearchByParameters, string>(NotificationTagIssuedDTO.SearchByParameters.SITE_ID, (Utilities.ParafaitEnv.IsCorporate ? Utilities.ParafaitEnv.SiteId : -1).ToString()));
                    tagIssuedSearchParameters.Add(new KeyValuePair<NotificationTagIssuedDTO.SearchByParameters, string>(NotificationTagIssuedDTO.SearchByParameters.ISRETURNED, 0.ToString()));
                    tagIssuedSearchParameters.Add(new KeyValuePair<NotificationTagIssuedDTO.SearchByParameters, string>(NotificationTagIssuedDTO.SearchByParameters.TRANSACTIONID, gCheckOutDetailDTO.CheckInTrxId.ToString()));
                    tagIssuedSearchParameters.Add(new KeyValuePair<NotificationTagIssuedDTO.SearchByParameters, string>(NotificationTagIssuedDTO.SearchByParameters.LINEID, gCheckOutDetailDTO.CheckInTrxLineId.ToString()));
                    NotificationTagIssuedListBL notificationTagIssuedListBL = new NotificationTagIssuedListBL(Utilities.ExecutionContext);
                    List<NotificationTagIssuedDTO> NotificationTagIssuedListDTO = notificationTagIssuedListBL.GetAllNotificationTagIssuedDTOList(tagIssuedSearchParameters);
                    if (NotificationTagIssuedListDTO.Count > 0
                        && TrxLine.NotificationTagIssuedDTO != null)
                    {
                        TrxLine.NotificationTagIssuedDTO.IsReturned = true;
                        TrxLine.NotificationTagIssuedDTO.NotificationTagIssuedId = NotificationTagIssuedListDTO[0].NotificationTagIssuedId;
                        TrxLine.NotificationTagIssuedDTO.ReturnDate = Utilities.getServerTime();
                    }
                    else if (NotificationTagIssuedListDTO.Count > 0)
                    {
                        NotificationTagIssuedDTO notificationTagIssuedDTO
                         = new NotificationTagIssuedDTO(NotificationTagIssuedListDTO[0].NotificationTagIssuedId,
                                                  NotificationTagIssuedListDTO[0].CardId,
                                                  NotificationTagIssuedListDTO[0].IssueDate,
                                                  NotificationTagIssuedListDTO[0].StartDate,
                                                  NotificationTagIssuedListDTO[0].ExpiryDate,
                                                  NotificationTagIssuedListDTO[0].TransactionId,
                                                  NotificationTagIssuedListDTO[0].LineId,
                                                  false, DateTime.MinValue,
                                                  NotificationTagIssuedListDTO[0].NotificationTagProfileId,
                                                  NotificationTagIssuedListDTO[0].LastSessionAlertTime,
                                                  NotificationTagIssuedListDTO[0].LastAlertTimeBeforeExpiry,
                                                  NotificationTagIssuedListDTO[0].LastAlertTimeOnExpiry, true);
                        TrxLine.NotificationTagIssuedDTO = notificationTagIssuedDTO;
                    }
                }
            }

            //Set Product subscription DTO and price based on subscription
            if (TrxLine.SubscriptionHeaderDTO != null && productId == TrxLine.SubscriptionHeaderDTO.ProductsId)
            {
                ProductSubscriptionBuilder productSubscriptionBuilder = new ProductSubscriptionBuilder(Utilities.ExecutionContext);
                double subscriptionPrice = productSubscriptionBuilder.GetSubscriptionProductPurchasePrice(TrxLine.SubscriptionHeaderDTO, TrxLine.tax_percentage);
                if (in_price >= 0)
                {
                    if (Product["MinimumUserPrice"] != DBNull.Value)
                    {
                        if (in_price < Convert.ToDouble(Product["MinimumUserPrice"]))
                        {
                            message = Utilities.MessageUtils.getMessage(367, Convert.ToDouble(Product["MinimumUserPrice"]).ToString(ParafaitEnv.AMOUNT_WITH_CURRENCY_SYMBOL));

                            log.LogVariableState("message ", message);
                            log.LogMethodExit(6);
                            return 6;
                        }
                    }
                    TrxLine.Price = in_price;
                    if (in_price != subscriptionPrice && TrxLine.DBLineId == 0)
                        TrxLine.UserPrice = true;
                }
                else
                {
                    TrxLine.Price = Convert.ToDouble(subscriptionPrice);
                }
            }

            if (TrxLine.card != null
                           && TrxLine.card.CardStatus == "NEW"
                           && Convert.ToDouble(Product["CardValidFor"]) > 0
                           && TrxLine.card.ExpiryDate == DateTime.MinValue)
            {
                int businessStartTime;
                if (int.TryParse(ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "BUSINESS_DAY_START_TIME"), out businessStartTime) == false)
                {
                    businessStartTime = 6;
                }
                TrxLine.card.ExpiryDate = (this.EntitlementReferenceDate == DateTime.MinValue ? Utilities.getServerTime() : this.EntitlementReferenceDate).AddDays(Convert.ToDouble(Product["CardValidFor"])).Date.AddHours(businessStartTime);
            }

            TrxLine.OriginalPrice = TrxLine.Price;

            if (TrxLine.UserPrice == false
                && Utilities.ParafaitEnv.specialPricingId == -1
                && TrxLine.AllowEdit
                && TrxLine.DBLineId == 0
                //&& TrxLine.ComboChildLine == false Removed check: Fix added to allow child items of combo product to have promotion price
                && TrxLine.ProductTypeCode != "CARDDEPOSIT"
                && TrxLine.ProductTypeCode != "CREDITCARDSURCHARGE"
                && TrxLine.ProductTypeCode != "ATTRACTION"
                && TrxLine.ProductTypeCode != "GENERICSALE"
                && TrxLine.ProductTypeCode != "VARIABLECARD"
                && TrxLine.ProductTypeCode != "EXCESSVOUCHERVALUE"
                && TrxLine.ProductTypeCode != "CASHREFUND" //Added for Variable cash Refund on 07-Jan-2016 //                
                && TrxLine.ProductTypeCode != "INVENTORYINTERSTORE"
                )
            {
                double promotionPrice = TrxLine.Price;
                int promotionId = -1;
                CustomerDTO tempCustomerDTO = (PrimaryCard != null && PrimaryCard.customerDTO != null ? PrimaryCard.customerDTO : this.customerDTO != null ? this.customerDTO : null);
                if (ApplyBookingDatePromotionPrice)
                    promotionId = Promotions.getProductPromotionPrice(tempCustomerDTO, productId, Product["CateGoryId"], Product["TaxInclusivePrice"].ToString(), TrxLine.tax_percentage, ref promotionPrice, Utilities, TrxDate);
                else
                    promotionId = Promotions.getProductPromotionPrice(tempCustomerDTO, productId, Product["CateGoryId"], Product["TaxInclusivePrice"].ToString(), TrxLine.tax_percentage, ref promotionPrice, Utilities);

                if (promotionId != -1)
                {
                    if (TrxLine.CreditPlusConsumptionId == -1
                        || (TrxLine.CreditPlusConsumptionId != -1 && TrxLine.Price > promotionPrice)
                       )
                    {
                        TrxLine.PromotionId = promotionId;
                        TrxLine.Price = promotionPrice;
                        TrxLine.CreditPlusConsumptionId = -1;
                        TrxLine.CreditPlusConsumptionApplied = false;
                    }
                    //if (TrxLine.PromotionId != -1 && TrxLine.LineCheckIn != null && TrxLine.LineCheckIn.CheckedInUnits > 1)
                    //    TrxLine.Price = TrxLine.Price * TrxLine.LineCheckIn.CheckedInUnits;
                    //if (TrxLine.PromotionId != -1 && TrxLine.LineCheckOut != null && TrxLine.LineCheckOut.balanceCheckIns > 1)
                    //    TrxLine.Price = TrxLine.Price * TrxLine.LineCheckOut.balanceCheckIns;
                }
            }

            #region Radian Profile set up for transaction line
            if (Convert.ToBoolean(Product["IssueNotificationDevice"])
                && Convert.ToInt32(Product["NotificationTagProfileId"]) > -1)
            {
                if (TrxLine.card == null)
                {
                    message = MessageContainerList.GetMessage(Utilities.ExecutionContext, 2958);
                    log.LogVariableState("Radian product set up", "Card is not present but product is assigned Notification Tag Profile");
                    return 1;
                }
                if (TrxLine.card != null
                    && TrxLine.card.CardNumber.StartsWith("T") == false)
                {
                    try
                    {
                        ValidateNotificationTag(TrxLine, sqlTrx);
                    }
                    catch (Exception ex)
                    {
                        message = ex.Message;
                        return 1;
                    }
                }
                NotificationTagIssuedDTO notificationTagIssuedDTO
                    = new NotificationTagIssuedDTO(-1, -1, DateTime.MinValue, DateTime.MinValue, DateTime.MinValue, -1, -1,
                                                   false, DateTime.MinValue, Convert.ToInt32(Product["NotificationTagProfileId"]),
                                                   DateTime.MinValue, DateTime.MinValue, DateTime.MinValue, true);
                TrxLine.NotificationTagIssuedDTO = notificationTagIssuedDTO;
            }
            #endregion

            if (TrxLine.ProductTypeCode == "ATTRACTION" && gATB != null)
            {
                log.LogVariableState("gATB.AttractionBookingDTO.PromotionId", gATB.AttractionBookingDTO.PromotionId);
                //Associate Notification tag Profile to attraction
                if (TrxLine.card != null
                    && TrxLine.LineAtb.AttractionBookingDTO != null
                    && TrxLine.LineAtb.AttractionBookingDTO.AttractionScheduleId > -1
                    && Convert.ToBoolean(Product["IssueNotificationDevice"]))
                {
                    SchedulesDTO schedulesDTO = new SchedulesBL(Utilities.ExecutionContext,
                                                                TrxLine.LineAtb.AttractionBookingDTO.AttractionScheduleId,
                                                                sqlTrx, false).ScheduleDTO;
                    if (schedulesDTO != null && schedulesDTO.NotificationTagProfileId > -1)
                    {
                        if (TrxLine.NotificationTagIssuedDTO != null)
                        {
                            TrxLine.NotificationTagIssuedDTO.NotificationTagProfileId = schedulesDTO.NotificationTagProfileId;
                        }
                        else
                        {
                            try
                            {
                                if (TrxLine.card.CardNumber.StartsWith("T") == false)
                                {
                                    ValidateNotificationTag(TrxLine, sqlTrx);
                                }
                            }
                            catch (Exception ex)
                            {
                                message = ex.Message;
                                return 1;
                            }
                            NotificationTagIssuedDTO notificationTagIssuedDTO
                             = new NotificationTagIssuedDTO(-1, -1, DateTime.MinValue, DateTime.MinValue, DateTime.MinValue, -1, -1,
                                                      false, DateTime.MinValue, schedulesDTO.NotificationTagProfileId,
                                                      DateTime.MinValue, DateTime.MinValue, DateTime.MinValue, true);
                            TrxLine.NotificationTagIssuedDTO = notificationTagIssuedDTO;
                        }
                    }
                }
                if (gATB.AttractionBookingDTO.PromotionId > -1)
                {
                    TrxLine.PromotionId = gATB.AttractionBookingDTO.PromotionId;
                }
                else
                {
                    double promotionPrice = TrxLine.Price;
                    CustomerDTO tempCustomerDTO = (PrimaryCard != null && PrimaryCard.customerDTO != null ? PrimaryCard.customerDTO : this.customerDTO != null ? this.customerDTO : null);
                    int promotionId = Promotions.getProductPromotionPrice(tempCustomerDTO, productId, Product["CateGoryId"], Product["TaxInclusivePrice"].ToString(), (in_price > -1 ? Convert.ToDouble(Product["tax_percentage"]) : 0), ref promotionPrice, Utilities, gATB.AttractionBookingDTO.ScheduleFromDate);
                    log.LogVariableState("promotionId", promotionId);
                    log.LogVariableState("promotionPrice", promotionPrice);
                    if (promotionId > -1)
                    {
                        TrxLine.PromotionId = promotionId;
                        TrxLine.Price = promotionPrice;
                    }
                }

            }
            //Modified on - 22-Apr-2016 - added for appending Parent modifier price and taxpercentage
            if (isModifierPriceApplied && TrxLine.ProductTypeCode == "MANUAL")
            {
                if (TrxLine.ParentModifierPrice != 0)
                {
                    if (in_price != 0)
                    {
                        double modifierTaxPercent = (TrxLine.Price * TrxLine.tax_percentage / 100.0);
                        double parentModTaxPercent = (TrxLine.ParentModifierPrice * TrxLine.ParentModiferTaxPercent / 100.0);
                        TrxLine.Price += TrxLine.ParentModifierPrice;
                        TrxLine.tax_percentage = 100 * (modifierTaxPercent + parentModTaxPercent) / TrxLine.Price;
                    }
                    else
                    {
                        TrxLine.Price += TrxLine.ParentModifierPrice;
                        TrxLine.tax_percentage = TrxLine.ParentModiferTaxPercent;
                    }
                }
            }
            isModifierPriceApplied = false;
            //end Modified ob - 22-Apr-2016 - added for appending Parent modifier price and tax percentage   

            TrxLine.LineAmount = TrxLine.Price * (double)TrxLine.quantity;
            Pre_TaxAmount = Pre_TaxAmount + TrxLine.LineAmount;

            TrxLine.tax_amount = (TrxLine.LineAmount * TrxLine.tax_percentage / 100.0);
            TrxLine.LineAmount += TrxLine.tax_amount;

            Transaction_Amount = Transaction_Amount + TrxLine.LineAmount;
            Tax_Amount = Tax_Amount + TrxLine.tax_amount;

            Net_Transaction_Amount = Transaction_Amount - Discount_Amount;

            if (!TrxLines.Contains(TrxLine))
                TrxLines.Add(TrxLine);

            int retVal = -1;

            try
            {
                //Modified 02/2019 for BearCat - 86-68 - handle the return of function
                if (!CreateProductModifiers(TrxLine, true, productModiferInfo))
                {
                    message = TrxLine.Remarks;
                    retVal = 1;
                }
            }
            catch (Exception ex)
            {
                log.Error(Utilities.MessageUtils.getMessage(1715) + ex.Message.ToString());
            }

            int savLineId = TrxLines.Count - 1;

            if (retVal == 1)
            {
                cancelTransactionLine(savLineId);
                //Modified 02/2019 for BearCat - 86-68 - handle the return of function
                log.LogVariableState("message ", message);
                log.LogMethodExit(8);
                return 8;
            }

            if (Net_Transaction_Amount > (double)ParafaitEnv.TRANSACTION_AMOUNT_LIMIT)
            {
                cancelTransactionLine(savLineId);
                message = Utilities.MessageUtils.getMessage(369, ParafaitEnv.TRANSACTION_AMOUNT_LIMIT.ToString(ParafaitEnv.AMOUNT_WITH_CURRENCY_SYMBOL));

                log.LogVariableState("message ", message);
                log.LogMethodExit(8);
                return 8;
            }

            if (TrxLine.ProductTypeCode == "COMBO" && CreateChildLines == true) // kept for backward compatibity. use CreateComboProduct() to create COMBO products for new development
            {
                bool success = true;
                int comboLineId = TrxLines.Count - 1;
                if (TrxLines[comboLineId].Price == -1.0)
                {
                    applyProductPrice = true;
                    TrxLines[comboLineId].Price = 0;
                }
                DataTable dtChilds;
                if (comboManualChildDictionary.ContainsKey(productId))
                {
                    dtChilds = comboManualChildDictionary[productId];
                }
                else
                {
                    dtChilds = Utilities.executeDataTable(@"select ChildProductId, cp.Quantity, product_type, cp.Price 
                                                              from ComboProduct cp, products p, product_type pt
                                                             where cp.Product_id = @productId
                                                               and p.product_id = ChildProductId
                                                               and pt.product_type = 'MANUAL'
                                                               and cp.Quantity > 0
                                                               and ISNULL(cp.IsActive, 1) = 1
                                                               and p.product_type_id = pt.product_type_id
                                                          ORDER BY isnull(cp.SortOrder, 1000)",
                                                                             new SqlParameter("@productId", productId));
                    comboManualChildDictionary.Add(productId, dtChilds);

                }
                log.LogVariableState("isModifierPriceApplied", isModifierPriceApplied);
                log.LogVariableState("@productId", productId);

                foreach (DataRow dr in dtChilds.Rows)
                {
                    int lclChildProduct = Convert.ToInt32(dr["ChildProductId"]);
                    TransactionLine newChildLine = new TransactionLine();
                    newChildLine.ComboChildLine = true;
                    bool goWithProductPrice = applyProductPrice;
                    if (applyProductPrice) // Combo child product price to be considered if combo price is -1
                    {
                        if (!DBNull.Value.Equals(dr["Price"]) && Convert.ToInt32(dr["Price"]) != 0)
                        {
                            success = (0 == createTransactionLine(null, lclChildProduct, Convert.ToDouble(dr["Price"]), 1, ref message, newChildLine));  //Combo child price considered from ComboProducts table  if combo price is -1 12/9/2017
                            goWithProductPrice = false;
                        }
                        else
                        {
                            success = (0 == createTransactionLine(null, lclChildProduct, -1, in_quantity * Convert.ToInt32(dr["Quantity"]), ref message, newChildLine));
                            goWithProductPrice = true;
                        }
                    }
                    else
                    {
                        success = (0 == createTransactionLine(null, lclChildProduct, 0, in_quantity * Convert.ToInt32(dr["Quantity"]), ref message, newChildLine));
                    }

                    if (success)
                    {
                        newChildLine.ParentLine = TrxLine;
                        if (goWithProductPrice == false)
                        {
                            newChildLine.AllowPriceOverride = false;
                        }
                        newChildLine.UserPrice = false;
                    }
                    else
                    {
                        cancelTransactionLine(comboLineId);
                        break;
                    }
                }
            }

            // Add LicenseType
            // Begin - Modification on 10-Dec-2020 for License Type Functinality Implementation
            if (Product["LicenseType"] != DBNull.Value && string.IsNullOrWhiteSpace(Convert.ToString(Product["LicenseType"])) == false)
            {
                TrxLine.LicenseType = Product["LicenseType"].ToString();
                bool ValidLicenseType = true;
                bool licenseProduct = Product["Product_Name"].ToString().Equals(CreditPlusTypeConverter.ToString(TrxLine.LicenseType), StringComparison.InvariantCultureIgnoreCase);
                try
                {
                    ValidLicenseType = ValidateCustomerLicense(PrimaryCard, TrxLine, Product, ref message, sqlTrx);
                    if (ValidLicenseType == false)
                    {
                        if (!licenseProduct)
                        {
                            cancelTransactionLine(TrxLines.Count - 1);
                            if (String.IsNullOrEmpty(message))
                                message = Utilities.MessageUtils.getMessage("Selected customer or card does not have a valid License.", (new List<object>()).ToArray());

                            log.LogVariableState("message ", message);
                            log.LogMethodExit(8);
                            return 8;
                        }
                    }
                    else
                    {
                        if (licenseProduct)
                            TrxLine.Price = 0;
                    }
                }
                catch (Exception vaex)
                {
                    cancelTransactionLine(TrxLines.Count - 1);
                    message = Utilities.MessageUtils.getMessage(vaex.Message, (new List<object>()).ToArray());
                    log.LogVariableState("message ", message);
                    log.LogMethodExit(8);
                    return 8;
                }
                log.LogMethodExit(ValidLicenseType);
            }
            //  End - Modification on 10-Dec-2020 for License Type Functinality Implementation

            if (TrxLine.WaiverSetId != -1 || TrxLine.IsWaiverRequired == "Y")
                CreateWaiverSetLineData(TrxLine, TrxLine.WaiverSetId);

            updateAmounts(true, sqlTrx);
            outTrxLine = TrxLine;
            log.LogVariableState("message ", message);
            log.LogMethodExit(0);
            return 0;
        }

        private bool ValidateCustomerLicense(Card inCard, TransactionLine TrxLine, DataRow Product, ref string message, SqlTransaction sqlTrx = null)
        {
            log.LogMethodEntry(inCard, TrxLine, Product);

            String validLicenseType = "N";
            int LineId = TrxLines.Count - 1;
            bool success = false;
            bool validLicenseFoundOrAdded = false;

            TransactionLine newChildLine = new TransactionLine();

            Card licenseCard = TrxLine.card != null ? TrxLine.card : inCard;

            DateTime entitlementConsumptionDate = EntitlementReferenceDate == DateTime.MinValue ? Utilities.getServerTime() : EntitlementReferenceDate;
            if (TrxLine.LineAtb != null)
                entitlementConsumptionDate = TrxLine.LineAtb.AttractionBookingDTO.ScheduleFromDate;

            int customerId = customerDTO != null ? customerDTO.Id : -1;

            AccountDTO accountDTO = null;
            if (licenseCard != null && licenseCard.card_id > -1)
            {
                accountDTO = (new AccountBL(Utilities.ExecutionContext, licenseCard.card_id, true, true, sqlTrx)).AccountDTO;
                if (licenseCard.customer_id > -1)
                    customerId = licenseCard.customer_id;
            }

            string requiredLicenseType = CreditPlusTypeConverter.ToString(TrxLine.LicenseType);
            validLicenseType = CheckLicenseForCustomerAndCard(accountDTO, TrxLine.LicenseType, entitlementConsumptionDate, customerId, sqlTrx);

            if (string.IsNullOrEmpty(validLicenseType))
            {
                validLicenseFoundOrAdded = true;
            }
            else
            {
                validLicenseFoundOrAdded = false;
                String[] paramsString = new string[2];
                paramsString[0] = licenseCard.CardNumber;
                paramsString[1] = licenseCard.customerDTO != null ? licenseCard.customerDTO.FirstName : "";

                if ((validLicenseType.Equals("N") || validLicenseType.Equals("E")) &&
                    !Product["Product_Name"].ToString().Equals(requiredLicenseType, StringComparison.InvariantCultureIgnoreCase))
                    message = MessageContainerList.GetMessage(Utilities.ExecutionContext, "Card &1 of &2 does not have valid license.", paramsString);
            }
            return validLicenseFoundOrAdded;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="selectedAccountDTO"></param>
        /// <param name="LicenseType"></param>
        /// <param name="entitlementConsumptionDate"></param>
        /// <param name="customerId"></param>
        /// <param name="sqlTrx"></param>
        /// <returns>
        /// "" = Blank - valid license exists
        /// "E" = Expired - A license exists but has expired
        /// "N" = No License - No Licenses of this type are loaded on card
        /// </returns>
        public string CheckLicenseForCustomerAndCard(AccountDTO selectedAccountDTO, String LicenseType, DateTime entitlementConsumptionDate, int customerId, SqlTransaction sqlTrx = null)
        {
            log.LogMethodEntry(selectedAccountDTO, LicenseType, entitlementConsumptionDate);

            String validLicenseType = "N";

            if (String.IsNullOrEmpty(LicenseType))
                return string.Empty;

            if (entitlementConsumptionDate == DateTime.MinValue)
                entitlementConsumptionDate = Utilities.getServerTime();

            List<ProductsContainerDTO> productsContainerDTOList = ProductsContainerList.GetActiveProductsContainerDTOList(Utilities.ExecutionContext.GetSiteId(), ManualProductType.SELLABLE.ToString());
            string requiredLicenseType = CreditPlusTypeConverter.ToString(LicenseType);
            ProductsContainerDTO productsContainerDTO = null;
            ProductsDTO licenseProduct = null;
            if (productsContainerDTOList != null && productsContainerDTOList.Any())
            {
                productsContainerDTO = productsContainerDTOList.FirstOrDefault(x => x.ProductName == requiredLicenseType);
            }

            if (productsContainerDTO == null)
            {
                String message = "Error - Product not found in Container DTO " + requiredLicenseType;
                log.LogMethodExit(false, message);
                throw new Exception(message);
            }
            else
            {
                licenseProduct = (new Products(Utilities.ExecutionContext, productsContainerDTO.ProductId, true, true, null)).GetProductsDTO;
            }

            List<AccountDTO> accountDTOList = new List<AccountDTO>();

            if (customerId != -1)
            {
                AccountListBL accountListBL = new AccountListBL(Utilities.ExecutionContext);
                List<KeyValuePair<AccountDTO.SearchByParameters, string>> searchParameters = new List<KeyValuePair<AccountDTO.SearchByParameters, string>>();
                searchParameters.Add(new KeyValuePair<AccountDTO.SearchByParameters, string>(AccountDTO.SearchByParameters.CUSTOMER_ID, customerId.ToString()));
                searchParameters.Add(new KeyValuePair<AccountDTO.SearchByParameters, string>(AccountDTO.SearchByParameters.VALID_FLAG, "Y"));
                List<AccountDTO> tempList = accountListBL.GetAccountDTOList(searchParameters, true, true, sqlTrx);
                if (tempList != null && tempList.Any())
                    accountDTOList.AddRange(tempList);
            }

            if (selectedAccountDTO != null && accountDTOList.FirstOrDefault(x => x.AccountId == selectedAccountDTO.AccountId) == null)
            {
                accountDTOList.Add(selectedAccountDTO);
            }

            if (accountDTOList != null && accountDTOList.Any())
            {
                List<AccountCreditPlusDTO> allAccountCreditPlusList = new List<AccountCreditPlusDTO>();
                foreach (AccountDTO accountDTO in accountDTOList)
                {
                    if (accountDTO.ValidFlag)
                    {
                        if (accountDTO.AccountCreditPlusDTOList != null)
                        {
                            List<AccountCreditPlusDTO> accountCreditPlusDTOList = accountDTO.AccountCreditPlusDTOList.ToList();
                            allAccountCreditPlusList.AddRange(accountCreditPlusDTOList);
                        }
                    }
                }

                if (allAccountCreditPlusList != null && allAccountCreditPlusList.Any())
                {
                    List<AccountCreditPlusDTO> accountCreditPlusList = allAccountCreditPlusList.Where(x =>
                                x.CreditPlusType == CreditPlusTypeConverter.FromString(LicenseType)
                                && x.ExtendOnReload == false).ToList();

                    if (accountCreditPlusList != null && accountCreditPlusList.Any())
                    {
                        accountCreditPlusList = accountCreditPlusList.Where(x =>
                                    x.CreditPlusType == CreditPlusTypeConverter.FromString(LicenseType)
                                    && x.ExtendOnReload == false && x.PeriodFrom != null && x.PeriodFrom <= entitlementConsumptionDate &&
                                    x.PeriodTo != null && x.PeriodTo >= entitlementConsumptionDate).ToList();
                        if (accountCreditPlusList != null && accountCreditPlusList.Any())
                            validLicenseType = "";
                        else
                            validLicenseType = "E";
                    }
                }
            }
            return validLicenseType;
        }

        private int GetComboChildProductOrCategoryQty(int comboProductId, int childProductId, int childCategoryId, decimal lineQty)
        {
            log.LogMethodEntry(comboProductId, childProductId, childCategoryId, lineQty);
            int neededQty = 0;
            List<Tuple<int, int, int, int>> matchingEntryList = childComboQtyList.Where(tup => tup.Item1 == comboProductId && tup.Item2 == childProductId && tup.Item3 == childCategoryId).ToList();
            if (matchingEntryList != null && matchingEntryList.Any())
            {
                neededQty = (matchingEntryList[0].Item4 * (int)lineQty);
            }
            else
            {
                int childComboQty = (int)Utilities.executeScalar(@"select isnull(sum(quantity), 0)
                                                                                    from comboProduct cp left outer join products p
                                                                                        on cp.ChildProductId = p.product_Id
                                                                                    where cp.Product_Id = @comboProductId
                                                                                      and ISNULL(cp.IsActive, 1) = 1
                                                                                      and (ChildProductId = @productId or cp.CategoryId = @categoryId or p.categoryId = @categoryId)",
                                                    new SqlParameter("@comboProductId", comboProductId),// TrxLines[i].ProductID),
                                                    new SqlParameter("@productId", childProductId),// TrxLine.ProductID), 
                                                    new SqlParameter("@categoryId", childCategoryId));// TrxLine.CategoryId));

                neededQty = (int)lineQty * childComboQty;
                Tuple<int, int, int, int> newEntry = new Tuple<int, int, int, int>(comboProductId, childProductId, childCategoryId, childComboQty);
                childComboQtyList.Add(newEntry);
            }
            log.LogMethodExit(neededQty);
            return neededQty;
        }

        private bool ValidInventoryProduct(string inventoryProductCode, SqlCommand invCmd)
        {
            log.LogMethodEntry();
            bool validInvProduct = false;
            if (inventoryProductStatusDictionary.ContainsKey(inventoryProductCode))
            {
                validInvProduct = inventoryProductStatusDictionary[inventoryProductCode];
            }
            else
            {
                validInvProduct = Inventory.checkValidInvProduct(inventoryProductCode, invCmd);
                inventoryProductStatusDictionary.Add(inventoryProductCode, validInvProduct);
            }
            log.LogMethodExit(validInvProduct);
            return validInvProduct;
        }

        /// <summary>
        /// clears existing transaction discounts and dicount couponsDiscountCouponsUsedDTOList
        /// </summary>
        public void ClearTransactionDiscounts()
        {
            log.LogMethodEntry();
            foreach (Transaction.TransactionLine line in TrxLines)
            {
                line.DiscountQualifierList.Clear();
                if (line.TransactionDiscountsDTOList != null && line.TransactionDiscountsDTOList.Count > 0)
                {
                    line.TransactionDiscountsDTOList.Clear();
                }
            }
            log.LogMethodExit(null);
        }

        public void DeleteTransactionDiscounts(SqlTransaction sqlTransaction = null)
        {
            log.LogMethodEntry();
            foreach (Transaction.TransactionLine line in TrxLines)
            {
                if (line.TransactionDiscountsDTOList != null && line.TransactionDiscountsDTOList.Count > 0)
                {
                    foreach (var transactionDiscountsDTO in line.TransactionDiscountsDTOList)
                    {
                        transactionDiscountsDTO.TransactionDiscountId = -1;
                        if (transactionDiscountsDTO.DiscountCouponsUsedDTO != null)
                        {
                            transactionDiscountsDTO.DiscountCouponsUsedDTO.Id = -1;
                        }
                    }
                }
            }
            Utilities.executeNonQuery(@"delete from TrxDiscounts where TrxId = @TrxId",
                                               sqlTransaction,
                                               new SqlParameter("@TrxId", Trx_id));
            Utilities.executeNonQuery(@"UPDATE DiscountCoupons SET UsedCount = (Case when UsedCount is null or UsedCount < 1 then 1 else UsedCount end ) - (select count (distinct CouponNumber) from DiscountCouponsUsed dcu where dcu.CouponSetId = DiscountCoupons.CouponSetId and dcu.TrxId = @TrxId) 
                                                 where Exists (select distinct CouponSetId from DiscountCouponsUsed dcu where DiscountCoupons.CouponSetId = dcu.CouponSetId and  dcu.TrxId = @TrxId)",
                                               sqlTransaction,
                                               new SqlParameter("@TrxId", Trx_id));
            Utilities.executeNonQuery(@"delete from DiscountCouponsUsed where TrxId = @TrxId and DiscountCouponHeaderId is not null",
                                               sqlTransaction,
                                               new SqlParameter("@TrxId", Trx_id));
            couponSetIdHashSet.Clear();
            log.LogMethodExit(null);
        }

        /// <summary>
        /// Finds all the applicable automatic and card discounts.
        /// Sorts the discount based on priority.
        /// Returns the sorted list.
        /// </summary>
        /// <returns></returns>
        private List<DiscountContainerDTO> GetApplicableAutomaticDiscounts(SqlTransaction sqlTrx = null)
        {
            log.LogMethodEntry();

            List<DiscountContainerDTO> applicableDiscountContainerDTOList = new List<DiscountContainerDTO>();

            foreach (DiscountContainerDTO discountContainerDTO in DiscountContainerList.GetAutomaticDiscountsBLList(Utilities.ExecutionContext))
            {
                if (manuallyRemovedDiscountIdList == null ||
                    manuallyRemovedDiscountIdList.Contains(discountContainerDTO.DiscountId) == false)
                {
                    applicableDiscountContainerDTOList.Add(discountContainerDTO);
                }
            }

            List<int> cardIdList = new List<int>();
            foreach (var line in TrxLines)
            {
                if (line.LineValid && line.card != null && line.card.card_id != -1)
                {
                    cardIdList.Add(line.card.card_id);
                }
            }
            if (PrimaryCard != null && PrimaryCard.card_id != -1)
            {
                cardIdList.Add(PrimaryCard.card_id);
            }
            if (cardIdList.Count > 0)
            {
                AccountDiscountListBL accountDiscountListBL = new AccountDiscountListBL(Utilities.ExecutionContext);
                List<KeyValuePair<AccountDiscountDTO.SearchByParameters, string>> searchParamertes = new List<KeyValuePair<AccountDiscountDTO.SearchByParameters, string>>();
                searchParamertes.Add(new KeyValuePair<AccountDiscountDTO.SearchByParameters, string>(AccountDiscountDTO.SearchByParameters.ACCOUNT_ID_LIST, string.Join(",", cardIdList)));
                searchParamertes.Add(new KeyValuePair<AccountDiscountDTO.SearchByParameters, string>(AccountDiscountDTO.SearchByParameters.EXPIRY_DATE_GREATER_THAN, Utilities.getServerTime().ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture)));
                searchParamertes.Add(new KeyValuePair<AccountDiscountDTO.SearchByParameters, string>(AccountDiscountDTO.SearchByParameters.IS_ACTIVE, "1"));
                searchParamertes.Add(new KeyValuePair<AccountDiscountDTO.SearchByParameters, string>(AccountDiscountDTO.SearchByParameters.VALIDITYSTATUS, "Y"));
                List<AccountDiscountDTO> accountDiscountDTOList = accountDiscountListBL.GetAccountDiscountDTOList(searchParamertes, sqlTrx);
                if (accountDiscountDTOList != null && accountDiscountDTOList.Any())
                {
                    HashSet<int> applicableDiscountIdHashSet = new HashSet<int>();
                    foreach (AccountDiscountDTO accountDiscountDTO in accountDiscountDTOList)
                    {
                        if (manuallyRemovedDiscountIdList == null ||
                            manuallyRemovedDiscountIdList.Contains(accountDiscountDTO.DiscountId) == false)
                        {
                            applicableDiscountIdHashSet.Add(accountDiscountDTO.DiscountId);
                        }
                    }

                    foreach (int discountId in applicableDiscountIdHashSet)
                    {
                        DiscountContainerDTO discountContainerDTO =
                            DiscountContainerList.GetDiscountContainerDTOOrDefault(Utilities.ExecutionContext, discountId);
                        if (discountContainerDTO == null)
                        {
                            continue;
                        }
                        applicableDiscountContainerDTOList.Add(discountContainerDTO);
                    }
                }
            }
            applicableDiscountContainerDTOList.Sort(new DiscountsComparer());
            log.LogMethodExit(applicableDiscountContainerDTOList);
            return applicableDiscountContainerDTOList;
        }

        public void CalculateDiscounts(SqlTransaction sqlTrx = null)
        {
            log.LogMethodEntry();

            ClearTransactionDiscounts();
            //Apply coupons and manual discounts
            if (discountApplicationHistoryDTOList != null && discountApplicationHistoryDTOList.Count > 0)
            {
                foreach (var discountApplicationHistoryDTO in discountApplicationHistoryDTOList)
                {
                    if (string.IsNullOrWhiteSpace(discountApplicationHistoryDTO.CouponNumber) == false)
                    {
                        ApplyCouponImpl(discountApplicationHistoryDTO.CouponNumber, discountApplicationHistoryDTO.Remarks, discountApplicationHistoryDTO.ApprovedBy, discountApplicationHistoryDTO.VariableDiscountAmount);
                    }
                    else
                    {
                        DiscountContainerDTO discountContainerDTO = DiscountContainerList.GetDiscountContainerDTO(Utilities.ExecutionContext, discountApplicationHistoryDTO.DiscountId);
                        if (discountContainerDTO != null &&
                           discountContainerDTO.AutomaticApply != "Y" &&
                           discountContainerDTO.CouponMandatory != "Y")
                        {
                            ApplyDiscountImpl(discountContainerDTO, discountApplicationHistoryDTO.Remarks, discountApplicationHistoryDTO.ApprovedBy,
                                (discountContainerDTO.VariableDiscounts == "Y") ? discountApplicationHistoryDTO.VariableDiscountAmount : null, discountApplicationHistoryDTO.TransactionLineBL);
                        }
                    }
                }
            }

            //Apply Automatic and Card Discounts
            List<DiscountContainerDTO> applicableAutomaticDiscountContainerList = GetApplicableAutomaticDiscounts(sqlTrx);
            if (applicableAutomaticDiscountContainerList != null && applicableAutomaticDiscountContainerList.Count > 0)
            {
                foreach (var discountContainerDTO in applicableAutomaticDiscountContainerList)
                {
                    ApplyDiscountImpl(discountContainerDTO);
                }
            }
            log.LogMethodExit(null);
        }

        public void UpdateDiscountsSummary()
        {
            log.LogMethodEntry();

            if (discountsSummaryDTOList != null)
            {
                foreach (var discountsSummaryDTO in discountsSummaryDTOList)
                {
                    discountsSummaryDTO.Count = 0;
                    discountsSummaryDTO.DiscountAmount = 0;
                    discountsSummaryDTO.TotalLineAmount = 0;
                    discountsSummaryDTO.DiscountPercentage = 0;
                    discountsSummaryDTO.TotalNoOfLines = 0;
                }
            }
            else
            {
                discountsSummaryDTODictionary = new Dictionary<int, DiscountsSummaryDTO>();
                discountsSummaryDTOList = new List<DiscountsSummaryDTO>();
            }
            foreach (var line in TrxLines)
            {
                if (line.LineValid &&
                    line.TransactionDiscountsDTOList != null &&
                    line.TransactionDiscountsDTOList.Count > 0)
                {
                    foreach (var transactionDiscountsDTO in line.TransactionDiscountsDTOList)
                    {
                        DiscountsSummaryDTO discountsSummaryDTO;
                        if (discountsSummaryDTODictionary.ContainsKey(transactionDiscountsDTO.DiscountId))
                        {
                            discountsSummaryDTO = discountsSummaryDTODictionary[transactionDiscountsDTO.DiscountId];
                            discountsSummaryDTO.DiscountAmount += (decimal)transactionDiscountsDTO.DiscountAmount;
                            discountsSummaryDTO.TotalLineAmount += (decimal)line.LineAmount;
                            discountsSummaryDTO.TotalNoOfLines += 1;
                        }
                        else
                        {
                            DiscountContainerDTO discountContainerDTO = DiscountContainerList.GetDiscountContainerDTO(Utilities.ExecutionContext, transactionDiscountsDTO.DiscountId);
                            discountsSummaryDTO = new DiscountsSummaryDTO();
                            discountsSummaryDTO.DisplayChar = GetDiscountsDisplayCharacter(discountsSummaryDTOList.Count);
                            discountsSummaryDTO.DiscountId = transactionDiscountsDTO.DiscountId;
                            discountsSummaryDTO.DiscountAmount = (decimal)transactionDiscountsDTO.DiscountAmount;
                            discountsSummaryDTO.DiscountName = discountContainerDTO == null ? "" : discountContainerDTO.DiscountName;
                            discountsSummaryDTO.Remarks = transactionDiscountsDTO.Remarks;
                            discountsSummaryDTO.ApprovedBy = transactionDiscountsDTO.ApprovedBy;
                            discountsSummaryDTO.TotalNoOfLines = 1;
                            discountsSummaryDTO.TotalLineAmount = (decimal)line.LineAmount;
                            discountsSummaryDTOList.Add(discountsSummaryDTO);
                            discountsSummaryDTODictionary[transactionDiscountsDTO.DiscountId] = discountsSummaryDTO;
                        }
                        int i = 0;
                        foreach (var item in discountsSummaryDTOList.OrderBy(x => x.DiscountId))
                        {
                            item.DisplayChar = GetDiscountsDisplayCharacter(i);
                            i++;
                        }
                        if (discountsSummaryDTO.TotalLineAmount != 0)
                        {
                            discountsSummaryDTO.DiscountPercentage = discountsSummaryDTO.DiscountAmount / discountsSummaryDTO.TotalLineAmount * 100;
                        }
                        if (transactionDiscountsDTO.DiscountCouponsUsedDTO != null)
                        {
                            discountsSummaryDTO.CouponNumbers.Add(transactionDiscountsDTO.DiscountCouponsUsedDTO.CouponNumber);
                        }
                    }
                }
            }
            if (discountsSummaryDTOList != null)
            {
                List<DiscountsSummaryDTO> tobeRemovedDiscountsSummaryDTOList = null;
                foreach (var discountsSummaryDTO in discountsSummaryDTOList)
                {
                    discountsSummaryDTO.Count = GetDiscountApplicationCount(discountsSummaryDTO.DiscountId);
                    if (discountsSummaryDTO.TotalLineAmount != 0)
                    {
                        discountsSummaryDTO.DiscountPercentage = (discountsSummaryDTO.DiscountAmount / (decimal)discountsSummaryDTO.TotalLineAmount) * (decimal)100;
                    }
                    else
                    {
                        discountsSummaryDTO.DiscountPercentage = 0;
                        DiscountContainerDTO discountContainerDTO = DiscountContainerList.GetDiscountContainerDTOOrDefault(Utilities.ExecutionContext, discountsSummaryDTO.DiscountId);
                        if (discountContainerDTO != null && discountContainerDTO.AutomaticApply == "Y")
                        {
                            if (tobeRemovedDiscountsSummaryDTOList == null)
                            {
                                tobeRemovedDiscountsSummaryDTOList = new List<DiscountsSummaryDTO>();
                            }
                            tobeRemovedDiscountsSummaryDTOList.Add(discountsSummaryDTO);
                        }
                    }
                }
                if (tobeRemovedDiscountsSummaryDTOList != null)
                {
                    foreach (var discountsSummaryDTO in tobeRemovedDiscountsSummaryDTOList)
                    {
                        discountsSummaryDTODictionary.Remove(discountsSummaryDTO.DiscountId);
                        discountsSummaryDTOList.Remove(discountsSummaryDTO);
                    }
                }
            }

            log.LogMethodExit(null);
        }

        private bool ValidateNotificationTag(TransactionLine line, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(line, sqlTrx);
            string message = string.Empty;
            List<KeyValuePair<NotificationTagsDTO.SearchByParameters, string>> tagsSearchParameters = new List<KeyValuePair<NotificationTagsDTO.SearchByParameters, string>>();
            tagsSearchParameters.Add(new KeyValuePair<NotificationTagsDTO.SearchByParameters, string>(NotificationTagsDTO.SearchByParameters.SITE_ID, (Utilities.ParafaitEnv.IsCorporate ? Utilities.ParafaitEnv.SiteId : -1).ToString()));
            tagsSearchParameters.Add(new KeyValuePair<NotificationTagsDTO.SearchByParameters, string>(NotificationTagsDTO.SearchByParameters.IS_ACTIVE, 1.ToString()));
            tagsSearchParameters.Add(new KeyValuePair<NotificationTagsDTO.SearchByParameters, string>(NotificationTagsDTO.SearchByParameters.TAGNUMBER, line.CardNumber));
            NotificationTagsListBL notificationTagsListBL = new NotificationTagsListBL(Utilities.ExecutionContext);
            List<NotificationTagsDTO> notificationTagsDTOList = notificationTagsListBL.GetAllNotificationTagsList(tagsSearchParameters, false, true, sqlTrx);
            //Check Tag Status in Inventory
            if (notificationTagsDTOList.Count == 0
                || notificationTagsDTOList[0].TagNotificationStatus != TagNotificationStatusConverter.ToString(TagNotificationStatus.IN_USE))
            {
                message = MessageContainerList.GetMessage(Utilities.ExecutionContext, 2959);
                log.LogVariableState("Radian Tag Status", "Radian Tag cannot be issued. Radian Tag is not in Inventory or has an incorrect status.");
                throw new Exception(message);
            }
            //Check Tag Communication status
            DateTime startDate = ServerDateTime.Now.Date;
            int businessStartTime;
            if (int.TryParse(ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "BUSINESS_DAY_START_TIME"), out businessStartTime) == false)
            {
                businessStartTime = 6;
            }
            startDate = startDate.AddHours(businessStartTime);
            if (startDate.Hour < businessStartTime)
            {
                startDate = startDate.AddDays(-1);
            }
            List<KeyValuePair<NotificationTagStatusDTO.SearchByParameters, string>> tagStatusSearchParameters = new List<KeyValuePair<NotificationTagStatusDTO.SearchByParameters, string>>();
            tagStatusSearchParameters.Add(new KeyValuePair<NotificationTagStatusDTO.SearchByParameters, string>(NotificationTagStatusDTO.SearchByParameters.SITE_ID, (Utilities.ParafaitEnv.IsCorporate ? Utilities.ParafaitEnv.SiteId : -1).ToString()));
            tagStatusSearchParameters.Add(new KeyValuePair<NotificationTagStatusDTO.SearchByParameters, string>(NotificationTagStatusDTO.SearchByParameters.IS_ACTIVE, 1.ToString()));
            tagStatusSearchParameters.Add(new KeyValuePair<NotificationTagStatusDTO.SearchByParameters, string>(NotificationTagStatusDTO.SearchByParameters.NOTIFICATIONTAGID, notificationTagsDTOList[0].NotificationTagId.ToString()));
            tagStatusSearchParameters.Add(new KeyValuePair<NotificationTagStatusDTO.SearchByParameters, string>(NotificationTagStatusDTO.SearchByParameters.TIMESTAMP, (startDate).ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture)));
            NotificationTagStatusListBL notificationTagStatusListBL = new NotificationTagStatusListBL(Utilities.ExecutionContext);
            List<NotificationTagStatusDTO> notificationTagStatusDTOList = notificationTagStatusListBL.GetAllNotificationTagStatusDTOList(tagStatusSearchParameters, sqlTrx);
            if (notificationTagStatusDTOList.Count == 0)
            {
                message = MessageContainerList.GetMessage(Utilities.ExecutionContext, 2960);
                log.LogVariableState("Radian Tag Status", "Radian Tag communication status could not be retrieved or has low battery. Tag cannot be issued.");
                throw new Exception(message);
            }
            notificationTagStatusDTOList.OrderByDescending(x => x.TimeStamp).ToList();
            int thresholdBatteryLevel;
            if (int.TryParse(ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "BATTERY_STATUS_THRESHOLD_FOR_SALE"), out thresholdBatteryLevel) == false)
            {
                thresholdBatteryLevel = 30;
            }
            if (notificationTagStatusDTOList[0].BatteryStatusPercentage < thresholdBatteryLevel)
            {
                message = MessageContainerList.GetMessage(Utilities.ExecutionContext, 2960);
                log.LogVariableState("Radian Tag Status", "Radian Tag communication status could not be retrieved or has low battery. Tag cannot be issued.");
                throw new Exception(message);
            }
            //Check if Tag is already issued and is in active state.
            if (line.card != null && line.card.card_id > -1)
            {
                List<KeyValuePair<NotificationTagIssuedDTO.SearchByParameters, string>> tagIssuedSearchParameters = new List<KeyValuePair<NotificationTagIssuedDTO.SearchByParameters, string>>();
                tagIssuedSearchParameters.Add(new KeyValuePair<NotificationTagIssuedDTO.SearchByParameters, string>(NotificationTagIssuedDTO.SearchByParameters.SITE_ID, (Utilities.ParafaitEnv.IsCorporate ? Utilities.ParafaitEnv.SiteId : -1).ToString()));
                tagIssuedSearchParameters.Add(new KeyValuePair<NotificationTagIssuedDTO.SearchByParameters, string>(NotificationTagIssuedDTO.SearchByParameters.CARDID, line.card.card_id.ToString()));
                tagIssuedSearchParameters.Add(new KeyValuePair<NotificationTagIssuedDTO.SearchByParameters, string>(NotificationTagIssuedDTO.SearchByParameters.ISRETURNED, 0.ToString()));
                tagIssuedSearchParameters.Add(new KeyValuePair<NotificationTagIssuedDTO.SearchByParameters, string>(NotificationTagIssuedDTO.SearchByParameters.EXPIRY_DATE_NULL_AFTER, Utilities.getServerTime().ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture)));
                NotificationTagIssuedListBL notificationTagIssuedListBL = new NotificationTagIssuedListBL(Utilities.ExecutionContext);
                List<NotificationTagIssuedDTO> NotificationTagIssuedListDTO = notificationTagIssuedListBL.GetAllNotificationTagIssuedDTOList(tagIssuedSearchParameters);
                if (NotificationTagIssuedListDTO != null && NotificationTagIssuedListDTO.Count > 0)
                {
                    message = MessageContainerList.GetMessage(Utilities.ExecutionContext, 2961, "Tag is already issued and active.");
                    log.LogVariableState("Radian Tag Issued", "Tag is already issued and is in active state. Tag cannot be re-issued.");
                    throw new Exception(message);
                }
            }
            log.LogMethodExit(true);
            return true;
        }

        /// <summary>
        /// Applies the discount on the transaction.
        /// </summary>
        /// <param name="discountContainerDTO">Transaction </param>
        /// <param name="remarks">Optional Discount Application Remarks</param>
        /// <param name="approvedBy">Optional Discounts approved by</param>
        /// <param name="variableAmount">Optional variable discounts amount provided by the user</param>
        /// <param name="transactionLineBL">Optional transaction line</param>

        private bool ApplyDiscountImpl(DiscountContainerDTO discountContainerDTO, string remarks = null, int approvedBy = -1,
                    decimal? variableAmount = null, Transaction.TransactionLine transactionLineBL = null)
        {
            log.LogMethodEntry(remarks, approvedBy,
                          variableAmount, transactionLineBL);
            if (discountContainerDTO.DiscountType != "T")
            {
                log.LogMethodExit(false);
                return false;
            }
            bool returnValue;
            returnValue = DiscountContainerList.IsDiscountAvailable(Utilities.ExecutionContext, discountContainerDTO.DiscountId, EntitlementReferenceDate == DateTime.MinValue? ServerDateTime.Now : EntitlementReferenceDate) &&
                          DiscountContainerList.CheckMinimumSaleAmount(Utilities.ExecutionContext, discountContainerDTO.DiscountId, Convert.ToDecimal(Transaction_Amount)) &&
                          DiscountContainerList.CheckMinimumCreditsPlayed(Utilities.ExecutionContext, discountContainerDTO.DiscountId, GetMinimumCreditsPlayed());
            if (returnValue == false)
            {
                log.LogMethodExit(returnValue);
                return returnValue;
            }
            returnValue = false;
            List<Transaction.TransactionLine> transactionLineBLList = TransactionLineList;
            List<Transaction.TransactionLine> filteredTransactionLineBLList = new List<Transaction.TransactionLine>();
            foreach (var line in transactionLineBLList)
            {
                if ((transactionLineBL == null || transactionLineBL == line) &&
                    line.CanBeDiscounted(Utilities.ExecutionContext, discountContainerDTO))//added for line level discounts
                {
                    filteredTransactionLineBLList.Add(line);
                }
            }
            if (filteredTransactionLineBLList.Count == 0)
            {
                log.LogMethodExit(false);
                return false;
            }
            List<DiscountedLineCollection> discountedLineCollections = new List<DiscountedLineCollection>()
            {
                new DiscountedLineCollection(Utilities.ExecutionContext, discountContainerDTO)
            };
            var orderedTransactionLineBLList = filteredTransactionLineBLList.OrderBy(x => x.LineAmount);
            foreach (Transaction.TransactionLine line in orderedTransactionLineBLList)
            {
                log.Info("Trying to add line productId : " + line.ProductID + " categoryId : " + line.CategoryId + " Amount :" + line.LineAmount);
                var currentLine = line;
                var returnLine = line;
                foreach (DiscountedLineCollection discountedLineCollection in discountedLineCollections)
                {
                    while (true)
                    {
                        returnLine = currentLine;
                        returnLine = discountedLineCollection.Add(currentLine);
                        if (returnLine != null && returnLine != currentLine)
                        {
                            foreach (DiscountedLineCollection coll in discountedLineCollections)
                            {
                                log.Info(coll.ToString());
                            }
                            currentLine = returnLine;
                            continue;
                        }
                        break;
                    }

                    if (returnLine == null)
                    {
                        break;
                    }
                }
                if (returnLine != null && discountContainerDTO.DiscountPurchaseCriteriaCount > 0)
                {
                    DiscountedLineCollection discountedLineCollection = new DiscountedLineCollection(Utilities.ExecutionContext, discountContainerDTO);
                    discountedLineCollection.Add(returnLine);
                    discountedLineCollections.Add(discountedLineCollection);
                }

                foreach (DiscountedLineCollection discountedLineCollection in discountedLineCollections)
                {
                    log.Info(discountedLineCollection.ToString());
                }
            }
            decimal discountAmount = 0;
            if (discountContainerDTO.VariableDiscounts == "Y" &&
                variableAmount != null && variableAmount > 0)
            {
                discountAmount = (decimal)variableAmount;
            }
            else if (discountContainerDTO.DiscountAmount > 0)
            {
                discountAmount = (decimal)discountContainerDTO.DiscountAmount;
            }
            log.Info("Final Discount DiscountedLineCollection");
            int applicationLimitCounter = 0;
            foreach (DiscountedLineCollection discountedLineCollection in discountedLineCollections)
            {
                if (discountedLineCollection.IsComplete() &&
                    (discountContainerDTO.ApplicationLimit.HasValue == false ||
                     discountContainerDTO.ApplicationLimit.Value <= 0 ||
                     applicationLimitCounter < discountContainerDTO.ApplicationLimit))
                {
                    log.Info(discountedLineCollection.ToString());
                    returnValue = true;
                    discountedLineCollection.Apply(discountAmount, remarks, approvedBy, transactionLineBL != null ? DiscountApplicability.LINE : DiscountApplicability.TRANSACTION);
                    applicationLimitCounter++;
                }
            }
            log.LogMethodExit(returnValue);
            return returnValue;
        }



        /// <summary>
        /// Applies the discount coupon on the transaction.
        /// </summary>
        private void ApplyCouponImpl(string couponNumber, string remarks = null, int approvedBy = -1,
            decimal? variableAmount = null, SqlTransaction sqlTransaction = null)
        {
            log.LogMethodEntry(couponNumber, remarks, approvedBy, variableAmount, sqlTransaction);
            DiscountCouponsBL discountCouponsBL = new DiscountCouponsBL(Utilities.ExecutionContext, couponNumber);
            discountCouponsBL.ValidateCouponApplication(EntitlementReferenceDate == DateTime.MinValue? ServerDateTime.Now : EntitlementReferenceDate, Trx_id, sqlTransaction);
            DiscountContainerDTO discountContainerDTO =
                DiscountContainerList.GetDiscountContainerDTO(Utilities.ExecutionContext, discountCouponsBL.DiscountCouponsDTO.DiscountId);
            ApplyDiscountImpl(discountContainerDTO, remarks, approvedBy,
                discountContainerDTO.VariableDiscounts == "Y" ? variableAmount : null);
            foreach (var line in TrxLines)
            {
                //If the discount associated with the coupon applied to the transaction line.
                //Create Discount Coupon used data.
                if (line.TransactionDiscountsDTOList != null)
                {
                    foreach (var transactionDiscountsDTO in line.TransactionDiscountsDTOList)
                    {
                        if (transactionDiscountsDTO.DiscountId == discountCouponsBL.DiscountCouponsDTO.DiscountId &&
                            transactionDiscountsDTO.DiscountCouponsUsedDTO == null)
                        {
                            DiscountCouponsUsedDTO discountCouponsUsedDTO = new DiscountCouponsUsedDTO
                            {
                                CouponNumber = couponNumber,
                                DiscountCouponHeaderId =
                                    discountCouponsBL.DiscountCouponsDTO.DiscountCouponHeaderId,
                                LineId = line.DBLineId,
                                CouponSetId = discountCouponsBL.DiscountCouponsDTO.CouponSetId,
                                TransactionId = Trx_id,
                            };
                            transactionDiscountsDTO.DiscountCouponsUsedDTO = discountCouponsUsedDTO;
                        }
                    }
                }
            }
            log.LogMethodExit();
        }

        public string GetDiscountsDisplayCharacter(int count)
        {
            log.LogMethodEntry(count);

            string returnValue = "*";
            switch (count % 5)
            {
                case 0:
                    returnValue = "*";
                    break;
                case 1:
                    returnValue = "^";
                    break;
                case 2:
                    returnValue = "#";
                    break;
                case 3:
                    returnValue = "@";
                    break;
                case 4:
                    returnValue = "$";
                    break;
            }

            log.LogMethodExit(returnValue);
            return returnValue;
        }

        /// <summary>
        /// Applies the discount on the transaction. Depricated please use the other overloaded method.
        /// </summary>
        /// <param name="discountContainerDTO">discount dto</param>
        /// <param name="remarks">remarks</param>
        /// <param name="approvedBy">approved manager id</param>
        /// <param name="variableAmount">variable amount</param>
        /// <param name="transactionLineBL">transaction line</param>
        /// <param name="saveOrder">save order after applying the discount</param>
        public bool ApplyDiscount(DiscountContainerDTO discountContainerDTO, string remarks = null, int approvedBy = -1, decimal? variableAmount = null, Transaction.TransactionLine transactionLineBL = null, bool saveOrder = true)
        {
            log.LogMethodEntry(discountContainerDTO, remarks, approvedBy, variableAmount, transactionLineBL);
            bool result = ApplyDiscountImpl(discountContainerDTO, remarks, approvedBy, variableAmount, transactionLineBL);
            log.LogMethodExit(result);
            return result;
        }

        private int GetDiscountApplicationCount(int discountId)
        {
            log.LogMethodEntry(discountId);
            int result = 0;
            foreach (TransactionLine line in TrxLines)
            {
                if (line.LineValid == false)
                {
                    continue;
                }

                int lineApplicationCount = line.GetDiscountApplicationCount(discountId);
                if (lineApplicationCount > result)
                {
                    result = lineApplicationCount;
                }
            }
            log.LogMethodExit(result);
            return result;
        }

        /// <summary>
        /// Applies the discount on the transaction
        /// </summary>
        /// <param name="discountId"></param>
        /// <param name="remarks"></param>
        /// <param name="approvedBy"></param>
        /// <param name="variableAmount"></param>
        /// <param name="transactionLineBL"></param>
        /// <param name="saveOrder"></param>
        public bool ApplyDiscount(int discountId, string remarks = null, int approvedBy = -1, decimal? variableAmount = null, Transaction.TransactionLine transactionLineBL = null, bool saveOrder = true)
        {
            log.LogMethodEntry(discountId, remarks, approvedBy, variableAmount, transactionLineBL);
            if (discountApplicationHistoryDTOList == null)
            {
                discountApplicationHistoryDTOList = new List<DiscountApplicationHistoryDTO>();
            }
            DiscountContainerDTO discountContainerDTO = DiscountContainerList.GetDiscountContainerDTO(Utilities.ExecutionContext, discountId);
            if (discountContainerDTO.ApplicationLimit.HasValue &&
                discountContainerDTO.ApplicationLimit.Value > 0)
            {
                foreach (var item in discountApplicationHistoryDTOList)
                {
                    if (item.DiscountId == discountId && item.TransactionLineBL == transactionLineBL)
                    {
                        log.LogMethodExit(false, "Discount already applied. This discount can be appied only once.");
                        return false;
                    }
                }
            }

            int beforeApplicationCount = 0;
            int afterApplicationCount = 0;

            DiscountApplicationHistoryDTO discountApplicationHistoryDTO = new DiscountApplicationHistoryDTO();
            discountApplicationHistoryDTO.DiscountId = discountId;
            discountApplicationHistoryDTO.VariableDiscountAmount = variableAmount;
            discountApplicationHistoryDTO.Remarks = remarks;
            discountApplicationHistoryDTO.ApprovedBy = approvedBy;
            discountApplicationHistoryDTO.TransactionLineBL = transactionLineBL;
            discountApplicationHistoryDTOList.Add(discountApplicationHistoryDTO);
            try
            {
                beforeApplicationCount = GetDiscountApplicationCount(discountId);
                updateAmounts(true, null, saveOrder);
                afterApplicationCount = GetDiscountApplicationCount(discountId);
            }
            catch (Exception ex)
            {
                log.Error("Unable to Update the amount", ex);
                cancelDiscountLine(discountId);

                log.LogMethodExit(null, "Throwing Exception " + ex);
                throw;
            }

            return beforeApplicationCount < afterApplicationCount;
        }

        /// <summary>
        /// Applies the discount coupon on the transaction
        /// </summary>
        /// <param name="couponNumber"></param>
        /// <param name="remarks"></param>
        /// <param name="approvedBy"></param>
        /// <param name="variableAmount"></param>
        public bool ApplyCoupon(string couponNumber, string remarks = null, int approvedBy = -1, decimal? variableAmount = null)
        {
            log.LogMethodEntry(couponNumber, remarks, approvedBy, variableAmount);
            if (string.IsNullOrWhiteSpace(couponNumber))
            {
                log.LogMethodExit(null, "Throwing CouponMandatoryException - Coupon number mandatory");
                throw new CouponMandatoryException("Coupon number mandatory");
            }
            DiscountCouponsBL discountCouponsBL = new DiscountCouponsBL(Utilities.ExecutionContext, couponNumber);
            discountCouponsBL.ValidateCouponApplication();
            bool found = false;
            if (discountApplicationHistoryDTOList == null)
            {
                discountApplicationHistoryDTOList = new List<DiscountApplicationHistoryDTO>();
            }
            else
            {
                foreach (var discountApplicationHistoryDTO in discountApplicationHistoryDTOList)
                {
                    if (discountApplicationHistoryDTO.CouponNumber == couponNumber)
                    {
                        found = true;
                        break;
                    }
                }
            }
            if (found == false)
            {
                DiscountApplicationHistoryDTO discountApplicationHistoryDTO = new DiscountApplicationHistoryDTO();
                discountApplicationHistoryDTO.DiscountId = discountCouponsBL.DiscountCouponsDTO.DiscountId;
                discountApplicationHistoryDTO.VariableDiscountAmount = variableAmount;
                discountApplicationHistoryDTO.ApprovedBy = approvedBy;
                discountApplicationHistoryDTO.Remarks = remarks;
                discountApplicationHistoryDTO.CouponNumber = couponNumber;
                discountApplicationHistoryDTOList.Add(discountApplicationHistoryDTO);
                try
                {
                    updateAmounts();
                }
                catch (Exception ex)
                {
                    log.Error("Unable to update the Amount", ex);
                    cancelDiscountLine(discountCouponsBL.DiscountCouponsDTO.DiscountId);
                    discountApplicationHistoryDTOList.RemoveAll(x => x.CouponNumber == couponNumber);

                    log.LogMethodExit(null, "Throwing Exception " + ex);
                    throw;
                }
            }

            bool couponApplied = discountsSummaryDTOList.Any(x => x.CouponNumbers.Contains(couponNumber));
            log.LogMethodExit(couponApplied);
            return couponApplied;
        }

        public int CreateComboProduct(int ProductId, double Price, decimal Quantity, ref string message, TransactionLine ComboParentLine,
                                       List<ComboCardProduct> CardProducts, List<KeyValuePair<int, int>> CategoryProducts)
        {
            log.LogMethodEntry(ProductId, Price, Quantity, message, ComboParentLine, CardProducts, CategoryProducts);

            log.LogVariableState("message ", message);

            int returnValueNew = CreateComboProduct(ProductId, Price, Quantity, ref message, ComboParentLine, CardProducts, CategoryProducts, true);
            log.LogMethodExit(returnValueNew);
            return returnValueNew;
        }

        public int CreateComboProduct(int ProductId, double Price, decimal Quantity, ref string message, TransactionLine ComboParentLine,
                                      List<ComboCardProduct> CardProducts, List<KeyValuePair<int, int>> CategoryProducts,
                                      bool CreateChildLines, bool isGroupMeal = false, int comboProductId = -1,
                                      TransactionLine parentTrxLine = null, List<KeyValuePair<int, PurchasedProducts>> purchasedProductList = null,
                                      List<AttractionBooking> atbList = null, CheckInDTO checkInDTO = null,
                                      List<ComboCheckInDetailDTO> customCheckInDetailDTOList = null,
                                      List<ComboManualProduct> comboManualProductsList = null)
        {
            decimal comboQuantity = 1;
            log.LogMethodEntry(ProductId, Price, Quantity, message, ComboParentLine, CardProducts, CategoryProducts, CreateChildLines,
                              comboProductId, parentTrxLine, purchasedProductList, atbList, checkInDTO,
                              comboManualProductsList);

            if (ComboParentLine == null)
            {
                ComboParentLine = new TransactionLine();
            }

            if (isGroupMeal)
            {
                comboQuantity = Quantity;
                Quantity = 1;
            }
            //Begin Modification - on 07-Dec-2016 for creadting combo product individual lines
            List<TransactionLine> parentTrxLines = new List<TransactionLine>();
            int totalCount = (int)Quantity;
            int currentCount = 1;
            string processMsg = MessageContainerList.GetMessage(Utilities.ExecutionContext, "of");
            for (int i = 1; i <= Quantity; i++)
            {
                if (0 != createTransactionLine(null, ProductId, Price, 1, ref message, ComboParentLine, false, null, comboProductId))
                {
                    log.LogVariableState("message ", message);
                    log.LogMethodExit(-1);
                    return -1;
                }
                if (parentTrxLine != null)
                {
                    ComboParentLine.ParentLine = parentTrxLine;
                }
                parentTrxLines.Add(ComboParentLine);
                if (Quantity > 1)
                {
                    if (i != Quantity)
                        ComboParentLine = new TransactionLine();
                }
                string finalMsg = MessageContainerList.GetMessage(Utilities.ExecutionContext, 4478, currentCount, totalCount);
                //&1 of &2 for combo product
                SendMessageToStatusMsgQueue(finalMsg, totalCount, currentCount);
                currentCount++;
            }

            //Begin: Added the below condition to apply product price which are part of the combo product when combo price is - 1 on 13-March-2017//
            if (Quantity > 0 && parentTrxLines.Count > 0)
            {
                foreach (Transaction.TransactionLine trxln in parentTrxLines)
                {
                    int cmbLineId = TrxLines.IndexOf(trxln);
                    if (TrxLines[cmbLineId].Price == -1)
                    {
                        applyProductPrice = true;
                        TrxLines[cmbLineId].Price = 0;
                    }
                }
            }
            //End: Apply Individual product price within the combo 13-March-2017

            bool success = true;
            int comboLineId = TrxLines.IndexOf(ComboParentLine);

            if (CategoryProducts != null && CategoryProducts.Count > 0)
            {
                int totalCatCount = (parentTrxLines != null ? parentTrxLines.Count : 0);
                int currentCatCount = 1;
                string finalMsg = MessageContainerList.GetMessage(Utilities.ExecutionContext, 4479);
                //Adding category products for Combo product
                foreach (Transaction.TransactionLine comboParentLineItem in parentTrxLines)
                {
                    int suc = 0;
                    foreach (KeyValuePair<int, int> product in CategoryProducts)
                    {
                        Transaction.TransactionLine newTrxLine = new Transaction.TransactionLine();
                        newTrxLine.ComboChildLine = true;
                        //Begin Modification -Jan-20-2016 - Added to handle card products within category for combo//
                        DataRow categoryProduct = getProductDetails(product.Key);
                        int categoryProductQuantity = Convert.ToInt32(product.Value);
                        //Begin:Added the below condition to apply product price which are part of the combo product when combo price is - 1 on 06-Oct-2015 
                        //if (applyProductPrice)
                        //{
                        if ((categoryProduct["product_type"].ToString() == "NEW" ||
                           categoryProduct["product_type"].ToString() == "CARDSALE" ||
                           categoryProduct["product_type"].ToString() == "RECHARGE" ||
                           categoryProduct["product_type"].ToString() == "GAMETIME"))
                        {
                            if (categoryProduct["AutoGenerateCardNumber"].ToString() == "Y")
                            {
                                while (categoryProductQuantity-- > 0)
                                {
                                    newTrxLine = new Transaction.TransactionLine();
                                    newTrxLine.ComboChildLine = true;
                                    RandomTagNumber randomTagNumber = new RandomTagNumber(Utilities.ExecutionContext);

                                    Products childProd = new Products(product.Key);
                                    ProductsDTO childProductsDTO = childProd.GetProductsDTO;
                                    Products parentProd = new Products(ComboParentLine.ProductID);
                                    ProductsDTO parentProductsDTO = parentProd.GetProductsDTO;
                                    string cardNumber = null;
                                    if (parentProductsDTO.LoadToSingleCard == true)
                                    {
                                        cardNumber = this.GetConsolidateCardFromTransaction(parentProductsDTO);
                                        if (cardNumber == null)
                                        {
                                            cardNumber = randomTagNumber.Value;
                                        }
                                    }
                                    else if (childProductsDTO.LoadToSingleCard == true)
                                    {
                                        cardNumber = this.GetConsolidateCardFromTransaction(childProductsDTO, parentProductsDTO.ProductId);
                                        if (cardNumber == null)
                                        {
                                            cardNumber = randomTagNumber.Value;
                                        }
                                    }
                                    else
                                    {
                                        cardNumber = randomTagNumber.Value;
                                    }
                                    Card CurrentCard = new Card(cardNumber, Utilities.ParafaitEnv.LoginID, Utilities);
                                    suc = createTransactionLine(CurrentCard, product.Key, applyProductPrice ? -1 : 0, 1, ref message, newTrxLine);
                                    if (suc != 0)
                                    {
                                        cancelTransactionLine(comboLineId);
                                        log.LogVariableState("message ", message);
                                        log.LogMethodExit(-1);
                                        return -1;
                                    }
                                    else
                                    {
                                        newTrxLine.ParentLine = comboParentLineItem;
                                        newTrxLine.UserPrice = false;
                                        if (!applyProductPrice)
                                        {
                                            newTrxLine.AllowPriceOverride = false;
                                            newTrxLine.Price = 0;
                                        }
                                    }

                                }
                            }
                            else
                            {
                                message = MessageContainerList.GetMessage(Utilities.ExecutionContext, 2258);//Incorrect product setup for Combo category (Card type products should be setup as auto generate card numbers)
                                log.LogVariableState("message ", message);
                                log.LogMethodExit(-1);
                                return -1;
                            }
                        }
                        else
                        {
                            //    suc = createTransactionLine(null, product.Key, applyProductPrice ? -1 : 0, product.Value, ref message, newTrxLine);
                            while (categoryProductQuantity-- > 0)
                            {
                                newTrxLine = new Transaction.TransactionLine();
                                newTrxLine.ComboChildLine = true;
                                //RandomTagNumber randomTagNumber = new RandomTagNumber(Utilities.ExecutionContext);
                                //Card CurrentCard = new Card(randomTagNumber.Value, Utilities.ParafaitEnv.LoginID, Utilities);
                                suc = createTransactionLine(null, product.Key, applyProductPrice ? -1 : 0, 1, ref message, newTrxLine);
                                if (suc != 0)
                                {
                                    cancelTransactionLine(comboLineId);
                                    log.LogVariableState("message ", message);
                                    log.LogMethodExit(-1);
                                    return -1;
                                }
                                //Added to assign parent line to child trxLine when combo price is -1
                                else if (applyProductPrice && newTrxLine.ParentLine == null)
                                {
                                    newTrxLine.ParentLine = comboParentLineItem;
                                }

                                if (newTrxLine.ParentLine == null)
                                {
                                    newTrxLine.ParentLine = comboParentLineItem;
                                }
                                if (applyProductPrice == false)
                                {
                                    newTrxLine.AllowPriceOverride = false;
                                }
                                newTrxLine.UserPrice = false;
                                //end
                            }
                        }

                        //End: Apply Individual product price within the combo 06-Oct-2015
                        if (suc != 0)
                        {
                            cancelTransactionLine(comboLineId);
                            log.LogVariableState("comboLineId", comboLineId);
                            log.LogVariableState("message ", message);
                            log.LogMethodExit(-1);
                            return -1;
                        }
                        //else
                        //{
                        //    newTrxLine.ParentLine = comboParentLineItem;
                        //    newTrxLine.AllowPriceOverride = false;
                        //    newTrxLine.UserPrice = false;
                        //}
                    }
                    SendMessageToStatusMsgQueue(finalMsg, totalCatCount, currentCatCount);
                    currentCatCount++;
                }
            }

            if (CreateChildLines)
            {
                if (comboManualProductsList != null && comboManualProductsList.Any())
                {

                    CreateComboManualProductLines(parentTrxLines, comboManualProductsList, comboLineId);
                }
                else
                {
                    DataTable dtChilds;
                    if (comboManualChildDictionary.ContainsKey(ProductId))
                    {
                        dtChilds = comboManualChildDictionary[ProductId];
                    }

                    else
                    {
                        dtChilds = Utilities.executeDataTable(@"select ChildProductId, cp.Quantity, pt.product_type, cp.Price 
                                                                         from ComboProduct cp, products p, product_type pt
                                                                         where cp.Product_id = @productId
                                                                         and p.product_id = ChildProductId
                                                                         and cp.Quantity > 0
                                                                         and ISNULL(cp.IsActive, 1) = 1
                                                                         and pt.product_type = 'MANUAL'
                                                                         and p.product_type_id = pt.product_type_id
                                                                         ORDER BY  isnull(cp.SortOrder, 1000)
                                                                         ",
                                                                                 new SqlParameter("@productId", ProductId));
                        comboManualChildDictionary.Add(ProductId, dtChilds);
                    }

                    log.LogVariableState("@productId", ProductId);
                    int totalManualChildCount = (dtChilds != null ? dtChilds.Rows.Count : 0);
                    int currentManualChildCount = 1;
                    string finalMsg = MessageContainerList.GetMessage(Utilities.ExecutionContext, 4480);
                    //Adding manual products for Combo product
                    foreach (DataRow dr in dtChilds.Rows)
                    {
                        if (parentTrxLines != null)
                        {
                            for (int k = 0; k < parentTrxLines.Count; k++)
                            {
                                int lclChildProduct = Convert.ToInt32(dr["ChildProductId"]);
                                PurchasedProducts productModiferInfo = null;
                                if (purchasedProductList != null && purchasedProductList.Any())
                                {
                                    List<KeyValuePair<int, PurchasedProducts>> productModifierList = purchasedProductList.Where(keyItem => keyItem.Key == lclChildProduct).ToList();
                                    if (productModifierList != null && productModifierList.Count > 0)
                                    {
                                        productModiferInfo = productModifierList[0].Value;
                                    }
                                }
                                if (dr["product_type"].ToString().Equals("MANUAL"))
                                {
                                    decimal lclQty = 1 * Convert.ToInt32(dr["Quantity"]);
                                    decimal lclComboQuantity = comboQuantity;
                                    decimal totalQuantity = 0;
                                    while (lclQty-- > 0)
                                    {
                                        if (isGroupMeal)
                                            totalQuantity = Math.Round(1 / comboQuantity, 5);
                                        else
                                            lclComboQuantity = comboQuantity;
                                        while (lclComboQuantity-- > 0)
                                        {
                                            if (isGroupMeal)
                                            {
                                                totalQuantity = Math.Round(1 / comboQuantity, 5);
                                                if (lclComboQuantity == (comboQuantity - 1))
                                                    totalQuantity = Math.Max(0, (1 - (totalQuantity * (comboQuantity - 1))));
                                            }
                                            TransactionLine newChildLine = new TransactionLine();
                                            newChildLine.ComboChildLine = true;
                                            bool goWithProductPrice = applyProductPrice;
                                            if (applyProductPrice)
                                            {
                                                if (!DBNull.Value.Equals(dr["Price"]) && Convert.ToInt32(dr["Price"]) != 0)// Convert.ToInt32(dr["Price"]) != ' ')
                                                {
                                                    success = (0 == createTransactionLine(null, lclChildProduct, Convert.ToDouble(dr["Price"]), (isGroupMeal ? totalQuantity : 1), ref message, newChildLine, true, null, -1, productModiferInfo));
                                                    goWithProductPrice = false;
                                                }
                                                else
                                                {
                                                    success = (0 == createTransactionLine(null, lclChildProduct, -1, (isGroupMeal ? totalQuantity : 1), ref message, newChildLine, true, null, -1, productModiferInfo));
                                                    goWithProductPrice = true;
                                                }
                                            }
                                            else
                                            {
                                                //success = (0 == createTransactionLine(null, lclChildProduct, 0, Quantity * Convert.ToInt32(dr["Quantity"]), ref message, newChildLine));
                                                success = (0 == createTransactionLine(null, lclChildProduct, 0, (isGroupMeal ? totalQuantity : 1), ref message, newChildLine, true, null, -1, productModiferInfo));
                                            }
                                            //End: Apply Individual product price within the combo 06-Oct-2015
                                            if (success)
                                            {
                                                newChildLine.ParentLine = parentTrxLines[k];
                                                if (goWithProductPrice == false)
                                                {
                                                    newChildLine.AllowPriceOverride = false;
                                                }
                                                newChildLine.AllocatedProductPrice = (!DBNull.Value.Equals(dr["Price"])) ? Convert.ToDouble(dr["Price"]) : 0;
                                                newChildLine.UserPrice = false;
                                                if (isGroupMeal)
                                                {
                                                    newChildLine.AllowCancel = false;
                                                    IsGroupMeal = true;
                                                    if (String.IsNullOrEmpty(Remarks))
                                                        Remarks = comboQuantity.ToString();
                                                }
                                            }
                                            else
                                            {
                                                cancelTransactionLine(comboLineId);
                                                log.LogVariableState("message ", message);
                                                log.LogMethodExit(-1);
                                                return -1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        SendMessageToStatusMsgQueue(finalMsg, totalManualChildCount, currentManualChildCount);
                        currentManualChildCount++;
                    }
                }
            }

            if (CardProducts != null)
            {
                int totalCardChildCount = CardProducts.Count;
                int currentCardChildCount = 1;
                string finalMsg = MessageContainerList.GetMessage(Utilities.ExecutionContext, 4481);
                // "Adding Card products for Combo product";
                foreach (ComboCardProduct ccp in CardProducts)
                {
                    if (parentTrxLines != null)
                    {
                        int cardIndex = 0;
                        for (int k = 0; k < parentTrxLines.Count; k++)
                        {

                            int qty = (int)(1 * ccp.Quantity);
                            while (qty-- > 0)
                            {
                                if (ccp.CardNumbers == null || ccp.CardNumbers.Count <= cardIndex)
                                {
                                    message = "Please provide required number of Cards";
                                    cancelTransactionLine(comboLineId);

                                    log.LogVariableState("message ", message);
                                    log.LogMethodExit(-1);
                                    return -1;
                                }

                                TransactionLine newChildLine = new TransactionLine();
                                newChildLine.ComboChildLine = true;
                                bool goWithProductPrice = applyProductPrice;
                                //Begin:Added the below condition to apply product price which are part of the combo product when combo prcie is - 1 on October 6, 2015 
                                if (applyProductPrice)
                                {
                                    if (!DBNull.Value.Equals(ccp.Price) && Convert.ToInt32(ccp.Price) != 0)
                                    {
                                        success = (0 == createTransactionLine(new Card(ccp.CardNumbers[cardIndex], ParafaitEnv.LoginID, Utilities), ccp.ChildProductId, Convert.ToDouble(ccp.Price), 1, ref message, newChildLine, true, null, -1, null, ccp.SubscriptionHeaderDTO));
                                        goWithProductPrice = false;
                                    }
                                    else
                                    {
                                        success = (0 == createTransactionLine(new Card(ccp.CardNumbers[cardIndex], ParafaitEnv.LoginID, Utilities), ccp.ChildProductId, -1, 1, ref message, newChildLine, true, null, -1, null, ccp.SubscriptionHeaderDTO));
                                        goWithProductPrice = true;
                                    }
                                }
                                else
                                {
                                    success = (0 == createTransactionLine(new Card(ccp.CardNumbers[cardIndex], ParafaitEnv.LoginID, Utilities), ccp.ChildProductId, 0, 1, ref message, newChildLine, true, null, -1, null, ccp.SubscriptionHeaderDTO));
                                }
                                //End: Apply Individual product price within the combo 06-Oct-2015
                                if (success)
                                {
                                    newChildLine.ParentLine = parentTrxLines[k];
                                    if (goWithProductPrice == false)
                                    {
                                        newChildLine.AllowPriceOverride = false;
                                    }
                                    newChildLine.UserPrice = false;
                                    newChildLine.AllocatedProductPrice = (!DBNull.Value.Equals(ccp.Price)) ? Convert.ToDouble(ccp.Price) : 0;
                                    //Begin:Added the below condition to apply product price which are part of the combo product when combo prcie is - 1 on 06-Oct-2015 
                                    if (!applyProductPrice)
                                        newChildLine.Price = 0;
                                    //End: Apply Individual product price within the combo 06-Oct-2015
                                    cardIndex++;
                                }
                                else
                                {
                                    cancelTransactionLine(comboLineId);

                                    log.LogVariableState("comboLineId", comboLineId);
                                    log.LogVariableState("message ", message);
                                    log.LogMethodExit(-1);
                                    return -1;
                                }
                            }
                        }
                    }
                    SendMessageToStatusMsgQueue(finalMsg, totalCardChildCount, currentCardChildCount);
                    currentCardChildCount++;
                }
            }
            CreateComboAttractionLines(ProductId, atbList, parentTrxLines, applyProductPrice, Price);
            if (customCheckInDetailDTOList != null && customCheckInDetailDTOList.Any())
            {
                CreateComboCheckInLines(ProductId, checkInDTO, customCheckInDetailDTOList, parentTrxLines);
            }
            applyProductPrice = false;
            updateAmounts();

            log.LogVariableState("message ", message);
            log.LogMethodExit(0);
            return 0;
        }

        private void CreateComboManualProductLines(List<TransactionLine> parentTrxLines, List<ComboManualProduct> comboManualProductsList, int comboLineId)
        {
            log.LogMethodEntry(parentTrxLines, comboManualProductsList, comboLineId);
            string message = string.Empty;
            int checkInComboProductId = comboManualProductsList.First().ComboProductId;
            ComboProductList comboProductList = new ComboProductList(Utilities.ExecutionContext);
            List<KeyValuePair<ComboProductDTO.SearchByParameters, string>> searchParameters = new List<KeyValuePair<ComboProductDTO.SearchByParameters, string>>();
            searchParameters.Add(new KeyValuePair<ComboProductDTO.SearchByParameters, string>(ComboProductDTO.SearchByParameters.PRODUCT_ID, checkInComboProductId.ToString()));
            searchParameters.Add(new KeyValuePair<ComboProductDTO.SearchByParameters, string>(ComboProductDTO.SearchByParameters.SITE_ID, Utilities.ExecutionContext.GetSiteId().ToString()));
            searchParameters.Add(new KeyValuePair<ComboProductDTO.SearchByParameters, string>(ComboProductDTO.SearchByParameters.IS_ACTIVE, "1"));
            List<ComboProductDTO> comboProductDTOList = comboProductList.GetComboProductDTOList(searchParameters);
            if (comboProductDTOList != null && comboProductDTOList.Any()
           && comboProductDTOList.Exists(combo => combo.ChildProductType == "MANUAL"))
            {
                comboProductDTOList = comboProductDTOList.Where(x => x.ChildProductType == "MANUAL").ToList();
                foreach (ComboManualProduct comboManualProduct in comboManualProductsList)
                {
                    bool success = false;
                    ProductsContainerDTO manualProductContainerDTO = ProductsContainerList.GetProductsContainerDTO(Utilities.ExecutionContext, comboManualProduct.ChildProductId);
                    if (parentTrxLines != null)
                    {
                        for (int k = 0; k < parentTrxLines.Count; k++)
                        {
                            int manualProductQuantity = 1; // default set as 1
                            int lclChildProduct = comboManualProduct.ChildProductId;
                            var childManualProduct = comboManualProductsList.Where(x => x.ChildProductId == lclChildProduct).FirstOrDefault();
                            if (childManualProduct != null && childManualProduct.Quantity > 0)
                            {
                                manualProductQuantity = childManualProduct.Quantity;
                            }
                            else if (manualProductContainerDTO != null && manualProductContainerDTO.MinimumQuantity > 0)
                            {
                                manualProductQuantity = childManualProduct.Quantity;
                            }
                            else
                            {
                                manualProductQuantity = comboManualProduct.Quantity;
                            }
                            while (manualProductQuantity-- > 0)
                            {
                                TransactionLine newChildLine = new TransactionLine();
                                newChildLine.ComboChildLine = true;
                                bool goWithProductPrice = applyProductPrice;
                                if (applyProductPrice)
                                {
                                    if (childManualProduct.Price > 0)
                                    {
                                        success = (0 == createTransactionLine(null, lclChildProduct, Convert.ToDouble(childManualProduct.Price), 1, ref message, newChildLine, true, null, -1));
                                        goWithProductPrice = false;
                                    }
                                    else
                                    {
                                        success = (0 == createTransactionLine(null, lclChildProduct, -1, 1, ref message, newChildLine, true, null, -1));
                                        goWithProductPrice = true;
                                    }
                                }
                                else
                                {
                                    success = (0 == createTransactionLine(null, lclChildProduct, 0, 1, ref message, newChildLine, true, null, -1));
                                }
                                if (success)
                                {
                                    newChildLine.ParentLine = parentTrxLines[k];
                                    ComboProductDTO cpDTO = comboProductDTOList.Where(cp => cp.ChildProductId == comboManualProduct.ChildProductId).FirstOrDefault();
                                    if (cpDTO != null)
                                    {
                                        newChildLine.ComboproductId = cpDTO.ComboProductId;
                                    }
                                    if (goWithProductPrice == false)
                                    {
                                        newChildLine.AllowPriceOverride = false;
                                    }
                                    newChildLine.AllocatedProductPrice = (childManualProduct.Price > 0 ? Convert.ToDouble(childManualProduct.Price) : 0);
                                    newChildLine.UserPrice = false;
                                }
                                else
                                {
                                    cancelTransactionLine(comboLineId);
                                    log.LogVariableState("message ", message);
                                    log.LogMethodExit(-1);
                                }
                            }
                        }
                    }
                }
            }
            log.LogMethodExit();
        }



        private void CreateComboCheckInLines(int comboProductId, CheckInDTO checkInDTO, List<ComboCheckInDetailDTO> customCheckInDTOList, List<Transaction.TransactionLine> parentTrxLineList)
        {
            log.LogMethodEntry(comboProductId, checkInDTO, parentTrxLineList, applyProductPrice);
            ComboProductList comboProductList = new ComboProductList(Utilities.ExecutionContext);
            List<KeyValuePair<ComboProductDTO.SearchByParameters, string>> searchParameters = new List<KeyValuePair<ComboProductDTO.SearchByParameters, string>>();
            searchParameters.Add(new KeyValuePair<ComboProductDTO.SearchByParameters, string>(ComboProductDTO.SearchByParameters.PRODUCT_ID, comboProductId.ToString()));
            searchParameters.Add(new KeyValuePair<ComboProductDTO.SearchByParameters, string>(ComboProductDTO.SearchByParameters.SITE_ID, Utilities.ExecutionContext.GetSiteId().ToString()));
            searchParameters.Add(new KeyValuePair<ComboProductDTO.SearchByParameters, string>(ComboProductDTO.SearchByParameters.IS_ACTIVE, "1"));
            List<ComboProductDTO> comboProductDTOList = comboProductList.GetComboProductDTOList(searchParameters);
            if (comboProductDTOList != null && comboProductDTOList.Any()
                       && comboProductDTOList.Exists(combo => combo.ChildProductType == "CHECK-IN"))
            {
                CheckInBL checkInBL = new CheckInBL(Utilities.ExecutionContext, checkInDTO);
                var filteredCheckInProductsList = comboProductDTOList.Where(combo => combo.ChildProductType == "CHECK-IN").ToList();
                foreach (ComboProductDTO comboProductDTO in filteredCheckInProductsList)
                {
                    ProductsDTO productsDTO = new Products(Utilities.ExecutionContext, comboProductDTO.ChildProductId, false, false).GetProductsDTO;
                    // Need to check the 
                    decimal effectivePrice = checkInBL.GetCheckInPrice(productsDTO, productsDTO.AvailableUnits, 0);
                    decimal calcEffectivePrice = effectivePrice == -1 ? 0 : effectivePrice;
                    if (checkInDTO != null && customCheckInDTOList != null && customCheckInDTOList.Any())
                    {
                        var list = customCheckInDTOList.Where(x => x.CheckInProductId == comboProductDTO.ChildProductId).FirstOrDefault();
                        if (list != null)
                        {
                            List<CheckInDetailDTO> checkInDetailDTOList = list.CheckInDetailDTOList;
                            bool createLinesWithCheckInDetails = list.CreateLinesWithCheckInDetails;

                            if (checkInDetailDTOList != null && checkInDetailDTOList.Any())
                            {
                                for (int i = 0; i < checkInDetailDTOList.Count; i++)
                                {
                                    string message = string.Empty;
                                    Card lineCard = null;
                                    CheckInDetailDTO checkInDetailDTO = checkInDetailDTOList[i];

                                    Transaction.TransactionLine checkInParentLine = null;
                                    if (customCheckInDTOList.Count == 1)
                                    {
                                        lineCard = PrimaryCard;
                                    }
                                    if (!string.IsNullOrEmpty(checkInDetailDTO.AccountNumber))
                                    {
                                        lineCard = new Card(checkInDetailDTO.AccountNumber, Utilities.ParafaitEnv.LoginID, Utilities);
                                    }
                                    if (TrxLines.Exists(x => x.LineCheckInDTO != null))
                                    {
                                        checkInParentLine = TrxLines.Where(x => x.LineCheckInDTO != null && x.LineCheckInDetailDTO != null).FirstOrDefault();
                                    }
                                    if (createLinesWithCheckInDetails == false)
                                    {
                                        checkInDetailDTO = null;
                                    }
                                    if (i == 0 && TrxLines.Exists(x => x.LineCheckInDTO != null) == false)
                                    {
                                        //CheckInDTO only in first line. Other lines have only CheckInDetailDTO. Link all lines using parent line id (of first line)
                                        if (0 == createTransactionLine(lineCard, comboProductDTO.ChildProductId, checkInDTO, checkInDetailDTO, (double)calcEffectivePrice, 1, ref message, null))
                                        {
                                            if (parentTrxLineList != null && parentTrxLineList.Any())
                                            {
                                                checkInParentLine = TrxLines[TrxLines.Count - 1];
                                                TrxLines[TrxLines.Count - 1].ParentLine = parentTrxLineList.FirstOrDefault();
                                                TrxLines[TrxLines.Count - 1].ComboChildLine = true;
                                                TrxLines[TrxLines.Count - 1].ComboproductId = comboProductDTO.ComboProductId;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        createTransactionLine(lineCard, comboProductDTO.ChildProductId, null, checkInDetailDTO, (double)calcEffectivePrice, 1, ref message, null);
                                        TrxLines[TrxLines.Count - 1].ParentLine = parentTrxLineList.FirstOrDefault();
                                        //TrxLines[TrxLines.Count - 1].ParentLine = checkInParentLine;
                                        TrxLines[TrxLines.Count - 1].ProductName = productsDTO.ProductName;
                                        TrxLines[TrxLines.Count - 1].ComboChildLine = true;
                                        TrxLines[TrxLines.Count - 1].ComboproductId = comboProductDTO.ComboProductId;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            log.LogMethodExit();
        }


        private void CreateComboAttractionLines(int comboProductId, List<AttractionBooking> atbList, List<Transaction.TransactionLine> parentTrxLineList, bool applyProductPrice, double comboPrice)
        {
            log.LogMethodEntry(comboProductId, atbList, parentTrxLineList, applyProductPrice, comboPrice);
            int lineId = -1;
            string Message = "";
            if (atbList != null && atbList.Any())
            {
                List<ComboProductDTO> comboProductDTOList = GetComboProductDTOList(comboProductId);
                List<ComboProductDTO> attractionProductChildList = null;
                if (comboProductDTOList != null && comboProductDTOList.Count > 0)
                {
                    attractionProductChildList = comboProductDTOList.Where(comboP => comboP.ChildProductType == ProductTypeValues.ATTRACTION
                                                                                         && comboP.Quantity != null && (int)comboP.Quantity > 0).ToList();

                    List<ComboProductDTO> tempListCategoryProducts = comboProductDTOList.Where(x => x.CategoryId != -1).ToList();
                    if (tempListCategoryProducts != null && tempListCategoryProducts.Any())
                    {
                        foreach (ComboProductDTO tempProd in tempListCategoryProducts)
                        {
                            List<ProductsDTO> comboCategoryProductDTOList = GetAttractionComboCategoryProductList(tempProd.CategoryId);
                            if (comboCategoryProductDTOList != null && comboCategoryProductDTOList.Any())
                            {
                                comboCategoryProductDTOList = comboCategoryProductDTOList.Where(x => atbList.Any(y => y.AttractionBookingDTO.AttractionProductId == x.ProductId)).ToList();
                                foreach (ProductsDTO comboChildProduct in comboCategoryProductDTOList)
                                {
                                    ComboProductDTO tempProduct = new ComboProductDTO(
                                                    tempProd.ComboProductId,
                                                    tempProd.ProductId,
                                                    comboChildProduct.ProductId,
                                                    tempProd.Quantity,
                                                    tempProd.CategoryId,
                                                    "",
                                                    comboChildProduct.TaxInclusivePrice.ToString() == "Y" ? true : false,
                                                    false,
                                                    -1,
                                                    -1,// set price to -1, transaction will fetch the price
                                                    1,
                                                    comboChildProduct.SiteId,
                                                    "",
                                                    true,
                                                    -1,
                                                    "",
                                                    ServerDateTime.Now,
                                                    "",
                                                    ServerDateTime.Now,
                                                    comboChildProduct.ProductType,
                                                 comboChildProduct.ProductName,
                                                    comboChildProduct.AutoGenerateCardNumber,
                                                        true,
                                                    string.Empty,
                                                    tempProd.MaximumQuantity
                                                    );
                                    attractionProductChildList.Add(tempProduct);
                                }
                            }

                        }
                    }
                }

                int totalAttractionChildCount = (parentTrxLineList != null ? parentTrxLineList.Count : 0);
                int currentAttractionChildCount = 1;
                string finalMsg = MessageContainerList.GetMessage(Utilities.ExecutionContext, 4482);
                //"Adding Attraction products for Combo product";
                for (int i = 0; i < parentTrxLineList.Count; i++)
                {
                    foreach (ComboProductDTO comboProductDTOItem in attractionProductChildList)
                    {
                        int balQuantity = (int)comboProductDTOItem.Quantity;
                        foreach (AttractionBooking atbItem in atbList)
                        {
                            if (atbItem.AttractionBookingDTO.AttractionProductId == comboProductDTOItem.ChildProductId
                                && atbItem.AttractionBookingDTO.Identifier == comboProductDTOItem.ComboProductId &&
                                atbItem.AttractionBookingDTO.BookedUnits > 0 && balQuantity > 0)
                            {
                                // if this is an attraction product of type card sale and card list is empty, then move to next atb
                                if (atbItem.cardList != null && !atbItem.cardList.Any())
                                {
                                    continue;
                                }

                                int qtyToBook = Math.Min(balQuantity, atbItem.AttractionBookingDTO.BookedUnits);
                                balQuantity -= qtyToBook;
                                int comboLineId = this.TrxLines.IndexOf(parentTrxLineList[i]);
                                double price = 0;
                                lineId = this.TrxLines.Count - 1;
                                //if (comboPrice == 0)
                                //{
                                //    price = 0;
                                //}
                                //else if (parentTrxLineList[i].Price == 0 || applyProductPrice == true)
                                //{
                                //    if (comboProductDTOItem.Price != null && comboProductDTOItem.Price != 0)
                                //    {
                                //        price = (double)comboProductDTOItem.Price;
                                //    }
                                //    else
                                //    {
                                //        price = -1;
                                //    }
                                //}
                                if (comboPrice == 0)
                                {
                                    price = 0;
                                }
                                else if (applyProductPrice)
                                {
                                    if (comboProductDTOItem.Price != null && comboProductDTOItem.Price != 0)
                                    {
                                        price = (double)comboProductDTOItem.Price;
                                    }
                                    else
                                    {
                                        price = -1;
                                    }
                                }
                                else
                                {
                                    price = 0;
                                }
                                if (this.CreateAttractionProduct(atbItem.AttractionBookingDTO.AttractionProductId, price, qtyToBook, comboLineId, atbItem, atbItem.cardList, ref Message) != 0)
                                {
                                    while (lineId < this.TrxLines.Count)
                                    {
                                        if (this.TrxLines[lineId].DBLineId <= 0)
                                            this.TrxLines[lineId].LineValid = false;
                                        lineId++;
                                    }
                                    this.updateAmounts();

                                    log.LogMethodExit(Message);
                                    throw new ApplicationException(Message);
                                }
                                else
                                {
                                    //atbItem.AttractionBookingDTO.BookedUnits -= qtyToBook;
                                    if (atbItem.cardList != null)
                                        atbItem.cardList.RemoveRange(0, qtyToBook);

                                    while (++lineId < this.TrxLines.Count)
                                    {
                                        this.TrxLines[lineId].UserPrice = false;
                                        this.TrxLines[lineId].ComboChildLine = true;
                                        this.TrxLines[lineId].AllowEdit = false;
                                        //this.TrxLines[lineId].AllowCancel = false; 
                                        //Nitin - commenting on 26-5-20 as trx is not saved when a attr is purchased, so this is not required any more
                                    }
                                }
                            }

                            //if (atbItem != null && atbItem.AttractionBookingDTO.BookedUnits <= 0)
                            //{ atbItem.Expire(); }
                        }
                    }
                    SendMessageToStatusMsgQueue(finalMsg, totalAttractionChildCount, currentAttractionChildCount);
                    currentAttractionChildCount++;
                }
            }
            log.LogMethodExit();
        }


        private List<ProductsDTO> GetAttractionComboCategoryProductList(int categoryId)
        {
            log.LogMethodEntry(categoryId);
            List<ProductsDTO> comboCategoryProductDTOList = null;
            if (attractionCategroyProductDictionary.ContainsKey(categoryId))
            {
                comboCategoryProductDTOList = attractionCategroyProductDictionary[categoryId];
            }
            else
            {
                ProductsList comboCategoryProductList = new ProductsList(Utilities.ExecutionContext);
                List<KeyValuePair<ProductsDTO.SearchByProductParameters, string>> catSearchParameters = new List<KeyValuePair<ProductsDTO.SearchByProductParameters, string>>();
                catSearchParameters.Add(new KeyValuePair<ProductsDTO.SearchByProductParameters, string>(ProductsDTO.SearchByProductParameters.CATEGORY_ID, categoryId.ToString()));
                catSearchParameters.Add(new KeyValuePair<ProductsDTO.SearchByProductParameters, string>(ProductsDTO.SearchByProductParameters.SITEID, Utilities.ExecutionContext.GetSiteId().ToString()));
                catSearchParameters.Add(new KeyValuePair<ProductsDTO.SearchByProductParameters, string>(ProductsDTO.SearchByProductParameters.PRODUCT_TYPE_NAME, ProductTypeValues.ATTRACTION));
                catSearchParameters.Add(new KeyValuePair<ProductsDTO.SearchByProductParameters, string>(ProductsDTO.SearchByProductParameters.ISACTIVE, "Y"));
                comboCategoryProductDTOList = comboCategoryProductList.GetProductsDTOList(catSearchParameters);
                if (comboCategoryProductDTOList != null)
                    attractionCategroyProductDictionary.Add(categoryId, new List<ProductsDTO>(comboCategoryProductDTOList));
                else
                    comboCategoryProductDTOList = new List<ProductsDTO>();
            }
            log.LogMethodExit(comboCategoryProductDTOList);
            return comboCategoryProductDTOList;
        }

        private List<ComboProductDTO> GetComboProductDTOList(int comboProductId)
        {
            log.LogMethodEntry(comboProductId);
            List<ComboProductDTO> comboProductDTOList = null;
            if (comboProductSetupDataDictionary.ContainsKey(comboProductId))
            {
                comboProductDTOList = new List<ComboProductDTO>(comboProductSetupDataDictionary[comboProductId]);
            }
            else
            {
                ComboProductList comboProductList = new ComboProductList(Utilities.ExecutionContext);
                List<KeyValuePair<ComboProductDTO.SearchByParameters, string>> searchParameters = new List<KeyValuePair<ComboProductDTO.SearchByParameters, string>>();
                searchParameters.Add(new KeyValuePair<ComboProductDTO.SearchByParameters, string>(ComboProductDTO.SearchByParameters.PRODUCT_ID, comboProductId.ToString()));
                searchParameters.Add(new KeyValuePair<ComboProductDTO.SearchByParameters, string>(ComboProductDTO.SearchByParameters.SITE_ID, Utilities.ExecutionContext.GetSiteId().ToString()));
                searchParameters.Add(new KeyValuePair<ComboProductDTO.SearchByParameters, string>(ComboProductDTO.SearchByParameters.IS_ACTIVE, "1"));
                comboProductDTOList = comboProductList.GetComboProductDTOList(searchParameters);
                comboProductSetupDataDictionary.Add(comboProductId, new List<ComboProductDTO>(comboProductDTOList));
            }
            log.LogMethodExit(comboProductDTOList);
            return comboProductDTOList;
        }
        public bool CreateProductModifiers(TransactionLine ParentTrxLine, bool ShowFormAuto = true, PurchasedProducts productModiferInfo = null)
        {
            log.LogMethodEntry(ParentTrxLine, ShowFormAuto);
            bool returnValue = true;
            if (Utilities.ParafaitEnv.IsClientServer && productModiferInfo == null)
            {
                PurchasedProducts purchasedProducts = null;
                Products products = new Products(ParentTrxLine.ProductID);
                purchasedProducts = products.GetPurchasedProducts(TrxLines.IndexOf(ParentTrxLine));
                purchasedProducts = BuildProductModifiers(ParentTrxLine, purchasedProducts);

                FrmProductModifier frmProductModifier = new FrmProductModifier(ParentTrxLine.ProductID, ParentTrxLine.ProductName, Utilities, purchasedProducts, ShowFormAuto);

                if ((ParentTrxLine.ParentLine != null && ParentTrxLine.ProductType == "Combo Product") ||
                    (frmProductModifier.ModifierExists && (ParentTrxLine.ParentLine == null ? false : (ParentTrxLine.ParentLine.ProductType == "Combo Product"))) ||
                    (frmProductModifier.ModifierExists && ParentTrxLine.HasModifier) ||
                    (ParentTrxLine.ParentLine == null && ParentTrxLine.ProductType != "Combo Product") ||
                        ParentTrxLine.HasModifier)
                {
                    ParentTrxLine.HasModifier = true;

                    if (frmProductModifier.AutoShowInPOS || ShowFormAuto == false)
                    {
                        frmProductModifier.ShowDialog();

                        frmProductModifier.transactionModifier.ModifierSetDTO = LoadSelectedModifiers(frmProductModifier.transactionModifier.ModifierSetDTO, ParentTrxLine);
                        transactionModifier = frmProductModifier.transactionModifier;
                    }
                    else
                    {
                        log.LogMethodExit(returnValue);
                        return returnValue;
                    }
                }
                else if (ParentTrxLine.ParentLine != null && ParentTrxLine.ProductType == "Item Sale"
                    && ParentTrxLine.ParentLine.ProductType == "Combo Product"
                    && frmProductModifier.ModifierExists)
                {
                    ParentTrxLine.HasModifier = true;
                }

                if (frmProductModifier.DialogResult == System.Windows.Forms.DialogResult.Cancel)
                {
                    log.LogMethodExit(false);
                    return false;
                }
                else if (frmProductModifier.DialogResult == System.Windows.Forms.DialogResult.OK)
                {
                    if (transactionModifier.purchasedProducts != null &&
                    transactionModifier.ModifierSetDTO != null)
                    {
                        foreach (PurchasedModifierSet modifierSet in transactionModifier.ModifierSetDTO)
                        {
                            if (modifierSet != null && modifierSet.PurchasedProductsList != null && modifierSet.PurchasedProductsList.Count > 0)
                            {
                                ParentTrxLine.HasModifier = true;

                                if (modifierSet.FreeQuantity > 0 && modifierSet.PurchasedProductsList != null)
                                {
                                    UpdateFreeQuantityProductPrice(modifierSet);
                                }

                                foreach (PurchasedProducts localProductDTO in modifierSet.PurchasedProductsList)
                                {
                                    if (!CreateTransactionModifierLine(localProductDTO, modifierSet, ParentTrxLine))
                                    {
                                        //Modified 02/2019 for BearCat - 86-68 - return false
                                        log.LogMethodExit(false);
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                }

                if (frmProductModifier.DialogResult == System.Windows.Forms.DialogResult.None)
                {
                    if (purchasedProduct.PurchasedModifierSetDTOList != null)
                    {
                        foreach (PurchasedModifierSet modifierSet in purchasedProduct.PurchasedModifierSetDTOList)
                        {
                            if (modifierSet != null && modifierSet.PurchasedProductsList != null && modifierSet.PurchasedProductsList.Count > 0)
                            {
                                ParentTrxLine.HasModifier = true;

                                if (modifierSet.FreeQuantity > 0 && modifierSet.PurchasedProductsList != null)
                                {
                                    UpdateFreeQuantityProductPrice(modifierSet);
                                }

                                foreach (PurchasedProducts localProductDTO in modifierSet.PurchasedProductsList)
                                {
                                    if (!CreateTransactionModifierLine(localProductDTO, modifierSet, ParentTrxLine))
                                    {
                                        //Modified 02/2019 for BearCat - 86-68 - return false
                                        log.LogMethodExit(false);
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else if (productModiferInfo != null || (productModiferInfo == null && purchasedProduct != null))
            {
                if (productModiferInfo == null)
                {
                    productModiferInfo = purchasedProduct;
                }
                returnValue = CreateModiferChildTrxLines(productModiferInfo, ParentTrxLine);
            }
            log.LogMethodExit(returnValue);
            return returnValue;
        }

        private bool CreateModiferChildTrxLines(PurchasedProducts productModiferInfo, Transaction.TransactionLine parentTrxLine)
        {
            log.LogMethodEntry(productModiferInfo, parentTrxLine);
            bool returnValue = true;
            if (productModiferInfo.PurchasedModifierSetDTOList != null)
            {
                int totalModifierCount = productModiferInfo.PurchasedModifierSetDTOList.Count;
                int currentModifierCount = 1;
                string finalMsg = MessageContainerList.GetMessage(Utilities.ExecutionContext, 4483,
                                                          (string.IsNullOrWhiteSpace(productModiferInfo.ProductName) ? "" : productModiferInfo.ProductName));
                //Adding Modifier products for &1
                foreach (PurchasedModifierSet modifierSet in productModiferInfo.PurchasedModifierSetDTOList)
                {
                    if (modifierSet != null && modifierSet.PurchasedProductsList != null && modifierSet.PurchasedProductsList.Count > 0)
                    {
                        parentTrxLine.HasModifier = true;

                        if (modifierSet.FreeQuantity > 0 && modifierSet.PurchasedProductsList != null)
                        {
                            UpdateFreeQuantityProductPrice(modifierSet);
                        }

                        foreach (PurchasedProducts localProductDTO in modifierSet.PurchasedProductsList)
                        {
                            if (!CreateTransactionModifierLine(localProductDTO, modifierSet, parentTrxLine))
                            {
                                log.LogMethodExit(false);
                                return false;
                            }
                        }
                    }
                    SendMessageToStatusMsgQueue(finalMsg, totalModifierCount, currentModifierCount);
                    currentModifierCount++;
                }
            }
            log.LogMethodExit(true);
            return true;
        }

        /// <summary>
        /// Modification for 2.40 
        /// Updates the product price for free quantity 
        /// </summary>
        /// <param name="purchasedModifierSet"></param>
        private void UpdateFreeQuantityProductPrice(PurchasedModifierSet purchasedModifierSet)
        {
            int count = 0;

            foreach (PurchasedProducts purchasedProducts in purchasedModifierSet.PurchasedProductsList)
            {
                if (count < purchasedModifierSet.FreeQuantity)
                {
                    purchasedProducts.Price = 0;
                    count++;
                }
                else
                    break;
            }
        }

        /// <summary>
        /// Modification for 2.40 
        /// Creates the transaction Line for each product of the modifier
        /// Modified 02/2019 for BearCat - 86-68 - return bool on success of creating transaction line
        /// </summary>
        /// <param name="localProductDTO"></param>
        /// <param name="modifierSet"></param>
        /// <param name="ParentTrxLine"></param>
        bool CreateTransactionModifierLine(PurchasedProducts localProductDTO, ModifierSetDTO modifierSet, TransactionLine ParentTrxLine)
        {
            purchasedProduct = localProductDTO;
            isModifierPriceApplied = false; //check the is price applied to the modifier
            bool productPriceIsOverriden = false;
            if (purchasedProduct.ParentModifierProduct != null)
            {
                productPriceIsOverriden = true;
                isModifierPriceApplied = true;
                ParentModifierProductId = purchasedProduct.ParentModifierProduct.ProductId;
                ParentModifierName = purchasedProduct.ParentModifierProduct.ProductName;
                ParentModifierProductPrice = Convert.ToDecimal(purchasedProduct.ParentModifierProduct.Price);
                ParentModifierSetId = Convert.ToInt32(modifierSet.ParentModifierSetId);
            }

            string message = "";
            TransactionLine newModifierLine = new TransactionLine();
            newModifierLine.ParentLine = ParentTrxLine;
            bool success = (0 == createTransactionLine(null, localProductDTO.ProductId, (double)localProductDTO.Price, 1, ref message, newModifierLine));
            if (success)
            {
                newModifierLine.ModifierSetId = modifierSet.ModifierSetId;
                //newModifierLine.Price = (double)modifierData.Price;//Commented to get the price from the transaction engine with tax calculation on Dec-9-2015//
                if (productPriceIsOverriden || TransactionUtils.CanStopProductPriceOverRide(newModifierLine))
                {
                    newModifierLine.AllowPriceOverride = false;
                }
                newModifierLine.UserPrice = false;
                newModifierLine.AllowEdit = false;
                ParentTrxLine.AllowEdit = false;
                return true;
            }
            else
            {
                // modified for BearCat 86-68
                ParentTrxLine.Remarks = message;
                return false;
            }
        }

        /// <summary>
        /// Modification for 2.40 
        /// Creates the purchasedProduct with modifierset 
        /// and adds the corresponding products of the modifierset
        /// </summary>
        /// <param name="ParentTrxLine"></param>
        /// <param name="purchasedProducts"></param>
        /// <returns></returns>
        private PurchasedProducts BuildProductModifiers(TransactionLine ParentTrxLine, PurchasedProducts purchasedProducts)
        {
            List<TransactionLine> transactionLines = TrxLines.Where(x => x.LineValid
                                                                         && x.ParentLine != null
                                                                         && x.ParentLine == ParentTrxLine).ToList();
            if (transactionLines != null && transactionLines.Count > 0)
            {
                foreach (TransactionLine transactionLine in transactionLines)
                {
                    Products products = new Products(transactionLine.ProductID);
                    PurchasedProducts purchasedModifierProduct = products.GetPurchasedProducts(TrxLines.IndexOf(transactionLine));

                    ModifierSetBL modifierSetBL = new ModifierSetBL(Convert.ToInt32(transactionLine.ModifierSetId), Utilities.ExecutionContext);
                    PurchasedModifierSet purchasedModifierSet = purchasedProducts.PurchasedModifierSetDTOList.Where(x => x.ModifierSetId == modifierSetBL.GetModifierSetDTO.ModifierSetId).FirstOrDefault();
                    if (purchasedModifierSet != null)
                    {
                        if (purchasedModifierSet.PurchasedProductsList == null)
                            purchasedModifierSet.PurchasedProductsList = new List<PurchasedProducts>();
                        if (transactionLine.ParentModifierProductId > 0)
                        {
                            Products parentModifierProduct = new Products(transactionLine.ParentModifierProductId);
                            PurchasedProducts parentPurchasedProduct = parentModifierProduct.GetPurchasedProducts();
                            purchasedModifierProduct.ParentModifierProduct = parentPurchasedProduct;
                        }
                        purchasedModifierSet.PurchasedProductsList.Add(purchasedModifierProduct);
                        BuildProductModifiers(transactionLine, purchasedModifierProduct);
                    }
                }
            }
            return purchasedProducts;
        }

        /// <summary>
        /// Modification for 2.40 
        /// Updates the modifierSetList after edit of transaction 
        /// </summary>
        /// <param name="purchasedModifierSetList"></param>
        /// <param name="ParentTrxLine"></param>
        /// <returns></returns>
        public List<PurchasedModifierSet> LoadSelectedModifiers(List<PurchasedModifierSet> purchasedModifierSetList, TransactionLine ParentTrxLine = null)
        {
            if (purchasedModifierSetList != null && purchasedModifierSetList.Count > 0)
            {
                foreach (PurchasedModifierSet purchasedModifierSet in purchasedModifierSetList)
                {
                    if (purchasedModifierSet.PurchasedProductsList != null)
                    {
                        foreach (PurchasedProducts purchasedProduct in purchasedModifierSet.PurchasedProductsList.ToList())
                        {
                            if (purchasedProduct.IsSelected == true && purchasedProduct.TrxLineId != -1)
                            {
                                purchasedModifierSet.PurchasedProductsList.Remove(purchasedProduct);
                                LoadSelectedModifiers(purchasedProduct.PurchasedModifierSetDTOList);
                            }
                            else if (purchasedProduct.IsSelected == false && purchasedProduct.TrxLineId != -1)
                            {
                                cancelLine(purchasedProduct.TrxLineId);
                                purchasedModifierSet.PurchasedProductsList.Remove(purchasedProduct);
                            }
                            else if (purchasedProduct.IsSelected == false && purchasedProduct.TrxLineId == -1)
                                purchasedModifierSet.PurchasedProductsList.Remove(purchasedProduct);
                            if (purchasedProduct.PurchasedModifierSetDTOList != null && purchasedProduct.PurchasedModifierSetDTOList.Count > 0)
                            {
                                LoadSelectedModifiers(purchasedProduct.PurchasedModifierSetDTOList);
                            }
                        }
                    }
                }
            }
            return purchasedModifierSetList;
        }

        //Added on 24-june-2016 for applying Capillary Discount
        /*public bool CreateManualDiscount(int discountId, string couponNumber, int couponSetId, ref string message, string cDiscountType, double cDiscountValue)
        {
            discounts.CapillaryDiscountValue = cDiscountValue;

            if(cDiscountType == "PERC")
            {
                discounts.IsCapillaryPercentage = true;
            }

            bool flag = createDiscount(discountId, couponNumber, couponSetId, ref message);
            discounts.CapillaryDiscountValue = -1;
            discounts.IsCapillaryPercentage = false;
            return flag;
        }*/

        /*public bool createDiscount(int discountId, string couponNumber, int couponSetId, ref string message)
        {
            bool ret = discounts.CheckForManualSaleDiscounts(this, discountId, couponNumber, couponSetId, ref message);
            applyDiscountToLines();

            return ret;
        }*/

        /*public bool createDiscount(int discountId, ref string message)
        {
            return createDiscount(discountId, "", -1, ref message);
        }*/

        public void applyCard(ref string message)
        {
            log.LogMethodEntry();

            updateAmounts();
            ValidatePromotions(ref message);

            log.LogMethodExit(null);
        }

        public void ValidatePromotions(ref string message)
        {
            log.LogMethodEntry(message);
            if (PrimaryCard != null && this.PrimaryCard.CardStatus != "NEW")
            {
                if (CanRedeemCardCreditPlusConsumptions(this.PrimaryCard) == false)
                {
                    message = Utilities.MessageUtils.getMessage(1535);
                    log.LogMethodExit(null, "Card CreditPlus Consumptions can't be redeemed in the current transaction. Can't evaluate a valid order group");
                    return;
                }

                int SavelineCount = TrxLines.Count;
                for (int i = 0; i < SavelineCount; i++)
                {
                    //if (TrxLines[i].DBLineId == 0 && TrxLines[i].AllowEdit && TrxLines[i].LineValid && (TrxLines[i].ProductTypeCode == "MANUAL" /* || TrxLines[i].ProductTypeCode == "COMBO"*/))
                    //{
                    //    cancelLine(i);
                    //    message = "";
                    //    createTransactionLine(TrxLines[i].card, TrxLines[i].ProductID, -1, TrxLines[i].quantity, ref message);
                    //}

                    string prodType = TrxLines[i].ProductTypeCode;
                    if (TrxLines[i].quantity == 1
                        && TrxLines[i].LineValid
                        && TrxLines[i].CreditPlusConsumptionId == -1
                        && (prodType == "MANUAL"
                            || prodType == "ATTRACTION"
                            || prodType == "CARDSALE" //additional support
                            || prodType == "COMBO"
                            || prodType == "CHECK-IN"
                            || prodType == "CHECK-OUT"))
                    {
                        int CreditPlusConsumptionId = -1;
                        bool AllProducts = false;
                        CreditPlus creditPlus = new CreditPlus(Utilities);
                        int cardCreditPlusConsumptionOrderTypeId = -1;
                        double price = creditPlus.getPromotionPriceForProduct(this.PrimaryCard.card_id, TrxLines[i].ProductID, POSTypeId, this, ref CreditPlusConsumptionId, ref AllProducts, ref cardCreditPlusConsumptionOrderTypeId);

                        if (price != -1)
                        {
                            if (TrxLines[i].TaxInclusivePrice == "Y")
                            {
                                TrxLines[i].Price = Convert.ToDouble(price) / (1.0 + Convert.ToDouble(TrxLines[i].tax_percentage) / 100.0);
                            }
                            else
                            {
                                TrxLines[i].Price = price;
                            }
                            TrxLines[i].CreditPlusConsumptionId = CreditPlusConsumptionId;
                            if (cardCreditPlusConsumptionOrderTypeId != -1)
                            {
                                TrxLines[i].OrderTypeId = cardCreditPlusConsumptionOrderTypeId;
                            }
                        }
                    }
                }
                UpdateOrderTypeGroupId();
                updateAmounts();
            }

            log.LogMethodExit();
        }

        private bool CanRedeemCardCreditPlusConsumptions(Card card)
        {
            log.LogMethodEntry(card);
            bool result = false;
            Dictionary<int, int> transactionLineOrderTypeIdMap = new Dictionary<int, int>();

            if (orderTypeGroupBLList == null)
            {
                PopulateOrderTypeGroupBLList();
            }
            if (orderTypeGroupBLList.Count == 0)
            {
                return true;
            }
            int SavelineCount = TrxLines.Count;
            for (int i = 0; i < SavelineCount; i++)
            {
                transactionLineOrderTypeIdMap.Add(i, TrxLines[i].CreditPlusConsumptionId);
            }
            try
            {
                HashSet<int> updatedOrderTypeIdSet = new HashSet<int>();
                for (int i = 0; i < SavelineCount; i++)
                {
                    string prodType = TrxLines[i].ProductTypeCode;
                    if (TrxLines[i].quantity == 1
                        && TrxLines[i].LineValid
                        && TrxLines[i].CreditPlusConsumptionId == -1
                        && (prodType == "MANUAL"
                            || prodType == "ATTRACTION"
                            || prodType == "COMBO"
                            || prodType == "CARDSALE" //additional support
                            || prodType == "CHECK-IN"
                            || prodType == "CHECK-OUT"))
                    {
                        int CreditPlusConsumptionId = -1;
                        bool AllProducts = false;
                        CreditPlus creditPlus = new CreditPlus(Utilities);
                        int cardCreditPlusConsumptionOrderTypeId = -1;
                        double price = creditPlus.getPromotionPriceForProduct(card.card_id, TrxLines[i].ProductID, POSTypeId, this, ref CreditPlusConsumptionId, ref AllProducts, ref cardCreditPlusConsumptionOrderTypeId);
                        if (price != -1)
                        {
                            TrxLines[i].CreditPlusConsumptionId = CreditPlusConsumptionId;
                            if (TrxLines[i].ParentLine == null)
                            {
                                if (cardCreditPlusConsumptionOrderTypeId != -1)
                                {
                                    updatedOrderTypeIdSet.Add(cardCreditPlusConsumptionOrderTypeId);
                                }
                                else
                                {
                                    updatedOrderTypeIdSet.Add(TrxLines[i].OrderTypeId);
                                }
                            }
                        }
                        else if (TrxLines[i].ParentLine == null)
                        {
                            updatedOrderTypeIdSet.Add(TrxLines[i].OrderTypeId);
                        }
                    }
                    else if (TrxLines[i].LineValid && TrxLines[i].ParentLine == null)
                    {
                        updatedOrderTypeIdSet.Add(TrxLines[i].OrderTypeId);
                    }
                }
                if (updatedOrderTypeIdSet.Count == 0 || updatedOrderTypeIdSet.SetEquals(new HashSet<int>() { -1 }))
                {
                    result = true;
                }
                else
                {
                    OrderTypeGroupDTO orderTypeGroupDTO = GetOrderTypeGroup(updatedOrderTypeIdSet);
                    if (orderTypeGroupDTO != null)
                    {
                        result = true;
                    }
                }
            }
            finally
            {
                for (int i = 0; i < SavelineCount; i++)
                {
                    if (transactionLineOrderTypeIdMap.ContainsKey(i))
                    {
                        TrxLines[i].CreditPlusConsumptionId = transactionLineOrderTypeIdMap[i];
                    }
                }
            }

            log.LogMethodExit(result);
            return result;
        }

        private void UpdateOrderTypeGroupId()
        {
            log.LogMethodEntry();
            orderTypeIdSet = new HashSet<int>();
            foreach (var line in TrxLines)
            {
                if (line.LineValid && line.ParentLine == null)
                {
                    orderTypeIdSet.Add(line.OrderTypeId);
                }
            }
            if (orderTypeIdSet.SetEquals(new HashSet<int>() { -1 }))
            {
                OrderTypeGroupId = -1;
            }
            else
            {
                OrderTypeGroupDTO orderTypeGroupDTO = GetOrderTypeGroup(orderTypeIdSet);
                if (orderTypeGroupDTO != null)
                {
                    OrderTypeGroupId = orderTypeGroupDTO.Id;
                }
            }
            log.LogMethodExit();
        }

        //Added on 03-Feb-2016 to apply voucher against the transaction
        public bool ApplyVoucher(Card Voucher, ref string message)
        {
            log.LogMethodEntry(Voucher);

            bool applied = false;
            if (Voucher != null && Voucher.CardStatus != "NEW")
            {
                if (CanRedeemCardCreditPlusConsumptions(Voucher) == false)
                {
                    message = Utilities.MessageUtils.getMessage(1535);
                    log.LogMethodExit(false, "Card CreditPlus Consumptions can't be redeemed in the current transaction. Can't evaluate a valid order group");
                    return false;
                }
                CreditPlus creditPlus = new CreditPlus(Utilities);
                foreach (TransactionLine tl in TrxLines)
                {
                    if (tl.LineValid && tl.CreditPlusConsumptionId == -1)
                    {
                        int CreditPlusConsumptionId = -1;
                        bool AllProducts = false;
                        int cardCreditPlusConsumptionOrderTypeId = -1;
                        double price = creditPlus.getPromotionPriceForProduct(Voucher.card_id, tl.ProductID, POSTypeId, this, ref CreditPlusConsumptionId, ref AllProducts, ref cardCreditPlusConsumptionOrderTypeId);
                        if (price != -1)
                        {
                            if (tl.TaxInclusivePrice == "Y")
                            {
                                tl.Price = Convert.ToDouble(price) / (1.0 + Convert.ToDouble(tl.tax_percentage) / 100.0);
                            }
                            else
                            {
                                tl.Price = price;
                            }
                            tl.CreditPlusConsumptionId = CreditPlusConsumptionId;
                            applied = true;
                            if (cardCreditPlusConsumptionOrderTypeId != -1)
                            {
                                tl.OrderTypeId = cardCreditPlusConsumptionOrderTypeId;
                            }
                        }
                    }
                }
                UpdateOrderTypeGroupId();
                updateAmounts(true);
            }

            log.LogMethodExit(applied);
            return applied;
        }

        public DataRow getProductDetails(int productId)
        {
            log.LogMethodEntry(productId);
            DataRow dtProductRow = null;
            DataTable dtProductCopy;
            DataRow productRowCopy = null;
            if (productDictionary != null && productDictionary.ContainsKey(productId))
            {
                dtProductRow = productDictionary[productId];
            }
            else
            {
                DataTable DT = TransactionUtils.getProductDetails(productId, PrimaryCard);
                productDictionary.Add(productId, DT.Rows[0]);
                dtProductRow = productDictionary[productId];
            }
            dtProductCopy = new DataTable(dtProductRow.Table.TableName);
            dtProductCopy = dtProductRow.Table.Clone();
            dtProductCopy.ImportRow(dtProductRow);
            productRowCopy = dtProductCopy.Rows[0];

            if (Utilities.ParafaitEnv.specialPricingId != -1)
            {
                object o = Utilities.executeScalar(@"select isnull(psp.price, isnull(sp.percentage/100 * pr.price, 0)) 
                                                      from products pr left outer join productSpecialPricing psp 
                                                      on pr.product_id = psp.productId 
                                                      and psp.pricingId = @pricingId, specialPricing sp 
                                                      where pr.product_id = @product_id 
                                                      and sp.pricingId = @pricingId",
                                                new SqlParameter("@product_id", productId),
                                                new SqlParameter("@pricingId", Utilities.ParafaitEnv.specialPricingId));

                log.LogVariableState("@product_id", productId);
                log.LogVariableState("@pricingId", Utilities.ParafaitEnv.specialPricingId);

                if (o != null)
                {
                    decimal price = Convert.ToDecimal(o);
                    productRowCopy["price"] = price;
                }
            }
            else
            {
                string prodType = productRowCopy["product_type"].ToString();
                if ((prodType == "MANUAL"
                    || prodType == "ATTRACTION"
                    || prodType == "COMBO"
                    || prodType == "CARDSALE" //additional support
                    || prodType == "CHECK-IN"
                    || prodType == "CHECK-OUT")
                   && this.PrimaryCard != null
                   && this.PrimaryCard.CardStatus != "NEW")
                {
                    int CreditPlusConsumptionId = -1;
                    bool AllProducts = false;
                    int orderTypeId = -1;
                    CreditPlus creditPlus = new CreditPlus(Utilities);
                    double price = creditPlus.getPromotionPriceForProduct(this.PrimaryCard.card_id, productId, POSTypeId, this, ref CreditPlusConsumptionId, ref AllProducts, ref orderTypeId);
                    if (price != -1)
                    {
                        bool found = false;
                        //if (!AllProducts)
                        //{
                        //    for (int i = 0; i < TrxLines.Count; i++)
                        //    {
                        //        if (TrxLines[i].LineValid && TrxLines[i].CreditPlusConsumptionId == CreditPlusConsumptionId)
                        //        {
                        //            found = true;
                        //            break;
                        //        }
                        //    }
                        //}
                        if (!found)
                        {
                            productRowCopy["price"] = price;
                            productRowCopy["CreditPlusConsumptionId"] = CreditPlusConsumptionId;
                            if (orderTypeId != -1)
                            {
                                productRowCopy["OrderTypeId"] = orderTypeId;
                            }
                        }
                    }
                }
            }

            if (productRowCopy["tax_id"] != DBNull.Value && TrxProfileId >= 0)
            {
                if (productRowCopy["TaxInclusivePrice"].ToString() == "Y")
                {
                    productRowCopy["Price"] = Convert.ToDouble(productRowCopy["Price"]) / (1.0 + Convert.ToDouble(productRowCopy["tax_percentage"]) / 100.0);
                }
                productRowCopy["tax_percentage"] = Convert.ToDecimal(productRowCopy["tax_percentage"]) - getProfileTaxExemptPercentage(dtProductRow["tax_id"]);
            }

            log.LogMethodExit(productRowCopy);
            return productRowCopy;
        }

        decimal getProfileTaxExemptPercentage(object TaxId)
        {
            log.LogMethodEntry(TaxId);

            DataTable dt = Utilities.executeDataTable(@"select TR.TaxId, TR.TaxStructureId, ST.ParentStructureId
                                                        from TrxProfileTaxRules  TR
                                                             LEFT OUTER JOIN TaxStructure St on TR.TaxStructureId = St.TaxStructureId
                                                       where TrxProfileId = @TrxProfileId 
                                                         and Exempt = 'Y'
                                                         and (TR.TaxId = @TaxId
                                                           or TR.TaxStructureId in (select TaxStructureId from TaxStructure where TaxId = @TaxId))",
                                            new SqlParameter("@TrxProfileId", TrxProfileId),
                                            new SqlParameter("@TaxId", TaxId));

            log.LogVariableState("@TrxProfileId", TrxProfileId);
            log.LogVariableState("@TaxId", TaxId);

            decimal percentage = 0;
            foreach (DataRow dr in dt.Rows)
            {
                if (dr["TaxStructureId"] != DBNull.Value)
                {
                    object o = DBNull.Value;
                    if (dr["ParentStructureId"] != DBNull.Value)
                    {
                        o = Utilities.executeScalar(@"WITH n(TaxStructureId, ParentStructureId, Percentage, effPercentage, level) AS 
                                                            (SELECT TaxStructureId, ParentStructureId, Percentage, convert(decimal(10, 4), Percentage) effPercentage, 1 as level
                                                            FROM TaxStructure
                                                            WHERE taxstructureId = @TaxStructureId
                                                            UNION ALL
                                                            SELECT nplus1.TaxStructureId, nplus1.ParentStructureId, nplus1.Percentage, Convert(decimal(10, 4), 
	                                                                nplus1.Percentage*n.effPercentage), n.level + 1
                                                            FROM TaxStructure as nplus1, n
                                                            WHERE n.ParentStructureId = nplus1.TaxStructureId
	                                                          and n.ParentStructureId != isnull(nplus1.ParentStructureId,-1))    
                                                            SELECT (effPercentage / (power(100, level-1)))
                                                             FROM n
                                                             WHERE level = (SELECT MAX(level) FROM n)",
                                                         new SqlParameter("@TaxStructureId", dr["TaxStructureId"]));

                        log.LogVariableState("@TaxStructureId", dr["TaxStructureId"]);
                    }
                    else
                    {
                        o = Utilities.executeScalar(@"WITH n(TaxStructureId, ParentStructureId, StructureName, Percentage, effPercentage, level) AS 
			                                                (SELECT TaxStructureId, ParentStructureId, StructureName, Percentage, convert(decimal(10, 4), Percentage) effPercentage, 1 as level
				                                            FROM TaxStructure
				                                            WHERE taxstructureId = @TaxStructureId 
					                                            UNION ALL
				                                            SELECT nplus1.TaxStructureId, nplus1.ParentStructureId, nplus1.StructureName, nplus1.Percentage, Convert(decimal(10, 4), n.effPercentage*nplus1.Percentage), n.level + 1
				                                            FROM TaxStructure as nplus1, n
				                                            WHERE n.TaxStructureId = nplus1.ParentStructureId)    
			                                                select SUM(effPercentage / (power(100, level-1))) tax_percentage
			                                                  FROM n",
                                                         new SqlParameter("@TaxStructureId", dr["TaxStructureId"]));

                        log.LogVariableState("@TaxStructureId", dr["TaxStructureId"]);

                    }
                    if (o != DBNull.Value)
                        percentage += Convert.ToDecimal(o);
                }
                else if (dr["TaxId"] != DBNull.Value)
                {
                    object o = Utilities.executeScalar(@"SELECT tax_Percentage from tax where tax_id = @taxId", new SqlParameter("@taxId", dr["taxId"]));
                    if (o != DBNull.Value)
                        percentage += Convert.ToDecimal(o);
                }
            }

            log.LogMethodExit(percentage);
            return percentage;
        }





        /// <summary>
        /// Using Profile id check if Verification is required.
        /// This will be applicable for SC/PWD scenario
        /// </summary>
        /// <param name="trxProfileId"></param>
        /// <returns>If Verification required return true</returns>
        public bool TrxProfileVerificationRequired(object trxProfileId)
        {
            log.LogMethodEntry(trxProfileId);
            bool isVerificationRequired = false;
            object trxProfileVerify = Utilities.executeScalar(@"SELECT ISNULL(VerificationRequired,'N') VerificationRequired 
                                                                     FROM TrxProfiles WHERE TrxProfileId = @TrxProfileId",
                                                                     new SqlParameter("@TrxProfileId", trxProfileId));
            if (trxProfileVerify == null)
            {
                isVerificationRequired = false;
                return isVerificationRequired;
            }
            isVerificationRequired = (trxProfileVerify.ToString() == "Y");
            log.LogMethodExit(isVerificationRequired);
            return isVerificationRequired;
        }

        double getSpecialPrice(int Product_ID, double price)
        {
            log.LogMethodEntry(Product_ID, price);

            if (Utilities.ParafaitEnv.specialPricingId != -1)
            {
                object o = Utilities.executeScalar("select isnull(psp.price, isnull(sp.percentage/100 * @price, 0)) " +
                                                  "from products pr left outer join productSpecialPricing psp " +
                                                  "on pr.product_id = psp.productId " +
                                                  "and psp.pricingId = @pricingId, specialPricing sp " +
                                                  "where pr.product_id = @product_id " +
                                                  "and sp.pricingId = @pricingId",
                                                new SqlParameter("@pricingId", Utilities.ParafaitEnv.specialPricingId),
                                                new SqlParameter("@product_id", Product_ID),
                                                new SqlParameter("@price", price));

                log.LogVariableState("@pricingId", Utilities.ParafaitEnv.specialPricingId);
                log.LogVariableState("@product_id", Product_ID);
                log.LogVariableState("@price", price);

                if (o != null)
                {
                    double oprice = Convert.ToDouble(o);

                    log.LogMethodExit(oprice);
                    return oprice;
                }
                else
                {
                    log.LogMethodExit(price);
                    return price;
                }
            }
            else
            {
                log.LogMethodExit(price);
                return price;
            }
        }

        /// <summary>
        /// CancelTransactionLine
        /// </summary> 
        /// <returns></returns>
        public bool CancelTransactionLine(int LineId, SqlTransaction sqlTrx = null, bool saveTrx = true)
        {
            log.LogMethodEntry(LineId, sqlTrx, saveTrx);
            ParafaitDBTransaction dBTransaction = null;
            bool retVal = false;
            try
            {
                if (sqlTrx == null)
                {
                    dBTransaction = new ParafaitDBTransaction();
                    dBTransaction.BeginTransaction();
                    sqlTrx = dBTransaction.SQLTrx;
                }
                retVal = cancelTransactionLine(LineId, sqlTrx, saveTrx);
                log.Info(retVal);
                if (retVal)
                {
                    log.Info("cancelTransactionLine: failed");
                    if (dBTransaction != null)
                    {
                        dBTransaction.EndTransaction();
                        sqlTrx = null;
                        dBTransaction.Dispose();
                    }
                }
                else
                {
                    log.Info("cancelTransactionLine: success");
                    if (dBTransaction != null)
                    {
                        dBTransaction.RollBack();
                        dBTransaction.Dispose();
                    }
                }
            }
            catch (Exception ex)
            {
                log.Error(ex);
                retVal = false;
                if (dBTransaction != null)
                {
                    dBTransaction.RollBack();
                    dBTransaction.Dispose();
                }
            }
            log.LogMethodExit(retVal);
            return retVal;
        }
        private bool cancelTransactionLine(int LineId, SqlTransaction sqlTrx = null, bool saveTrx = true)
        {
            log.LogMethodEntry(LineId, sqlTrx, saveTrx);

            if (TrxLines[LineId].CardNumber != null)
            {
                if (TrxLines[LineId].card.CardStatus == "NEW")
                {
                    if (TrxLines[LineId].ProductTypeCode == "NEW"
                            || TrxLines[LineId].ProductTypeCode == "CARDDEPOSIT"
                            || TrxLines[LineId].ProductTypeCode == "CHECK-IN"
                            || TrxLines[LineId].ProductTypeCode == "CARDSALE")
                        cancelCard(LineId, sqlTrx); // new card and new / check-in product means cards should be cancelled
                    else
                    {
                        cancelLine(LineId, sqlTrx);
                        updateAmounts(true, sqlTrx);
                        if (isSavedTransaction(sqlTrx) && saveTrx)
                        {
                            string message = string.Empty;
                            SaveOrder(ref message, sqlTrx);
                        }
                    }

                    log.LogMethodExit(true);
                    return true;
                }
                else if (TrxLines[LineId].DBLineId <= 0 || (TrxLines[LineId].CardNumber != null &&
                                                            TrxLines[LineId].CardNumber.Substring(0, 1).ToLower().Equals("t")))
                {
                    cancelLine(LineId, sqlTrx);
                    updateAmounts(true, sqlTrx);
                    if (isSavedTransaction(sqlTrx) && saveTrx)
                    {
                        string message = string.Empty;
                        SaveOrder(ref message, sqlTrx);
                    }
                    this.GameCardReadTime = Utilities.getServerTime();
                    log.LogMethodExit(true);
                    return true;
                }
                else //Added for allowing cancel line when Card booking on - 18-Oct-2016
                {
                    //using (SqlConnection cnn = Utilities.createConnection())
                    //{
                    //using (SqlCommand cardCmd = new SqlCommand("", cnn))
                    //{
                    ParafaitDBTransaction dBTransaction = null;
                    try
                    {
                        if (sqlTrx == null)
                        {
                            dBTransaction = new ParafaitDBTransaction();
                            dBTransaction.BeginTransaction();
                            sqlTrx = dBTransaction.SQLTrx;
                        }
                        //SqlTransaction sqlTrxLocal = cnn.BeginTransaction();
                        //cardCmd.Connection = cnn;
                        //cardCmd.Transaction = sqlTrxLocal;
                        //cardCmd.Parameters.Clear();
                        string Message = "";
                        bool CardReversal = true;

                        DateTime trxDatevalue = (this.TrxDate == DateTime.MinValue ?
                               (this.TransactionDate == DateTime.MinValue ? Utilities.getServerTime() : this.TransactionDate)
                               : this.TrxDate);

                        //Check for Reservation cases and get last update time from Bookings to check if card is modified after that
                        if (Trx_id > 0)
                        {
                            TransactionDataHandler transactionDataHandler = new TransactionDataHandler(sqlTrx);
                            DateTime? bookingLastUpdatedDatevalue = transactionDataHandler.GetLastUpdateTimeOfLinkedReservations(Trx_id, Utilities.ExecutionContext.GetSiteId());
                            if (bookingLastUpdatedDatevalue != null && bookingLastUpdatedDatevalue > trxDatevalue)
                            {
                                trxDatevalue = (DateTime)bookingLastUpdatedDatevalue;
                            }
                        }
                        //End modification 2.80.0
                        AccountBL accountBL = new AccountBL(Utilities.ExecutionContext, TrxLines[LineId].card.card_id, false, false, sqlTrx);
                        if (accountBL.IsAccountUpdatedByOtherTransactions(trxDatevalue, sqlTrx))
                        {
                            //log.LogMethodExit(false);
                            //return false;
                            throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 360, accountBL.AccountDTO.TagNumber));
                            //Card &1 has been updated by other processes. Retry..
                        }

                        if (!TransactionUtils.ReverseCard(Trx_id, Convert.ToInt32(TrxLines[LineId].DBLineId),
                                                        Convert.ToString(Utilities.ParafaitEnv.LoginID), CardReversal, ref Message, -1, sqlTrx, sqlTrx.Connection))
                        {
                            //log.LogMethodExit(false);
                            //return false;
                            throw new ValidationException(Message);
                        }
                        //sqlTrxLocal.Commit();
                        if (dBTransaction != null)
                        {
                            dBTransaction.EndTransaction();
                            sqlTrx = null;
                            dBTransaction.Dispose();
                        }
                        //}
                        // }
                    }
                    catch (Exception ex)
                    {
                        log.Error(ex);
                        if (dBTransaction != null)
                        {
                            dBTransaction.RollBack();
                            dBTransaction.Dispose();
                            sqlTrx = null;
                        }
                        log.LogMethodExit(false);
                        return false;
                    }
                    if (TrxLines[LineId].ParentLine != null)
                        cancelCard(LineId, sqlTrx);
                    else
                        cancelLine(LineId, sqlTrx);
                    log.LogMethodExit(true);
                    updateAmounts(true, sqlTrx);
                    if (isSavedTransaction(sqlTrx) && saveTrx)
                    {
                        string message = string.Empty;
                        SaveOrder(ref message, sqlTrx);
                    }
                    return true;
                    //return false;
                }
            }
            else
            {
                cancelLine(LineId, sqlTrx);
                updateAmounts(true, sqlTrx);
                if (isSavedTransaction(sqlTrx) && saveTrx)
                {
                    string message = string.Empty;
                    SaveOrder(ref message, sqlTrx);
                }
                log.LogMethodExit(true);
                return true;
            }
        }

        /// <summary>
        /// Cancel Line
        /// </summary>
        /// <param name="LineId">Line being cancelled</param>
        /// <param name="SQLTrx">SQL Transaction</param>
        public void cancelLine(int LineId, SqlTransaction SQLTrx = null)
        {
            log.LogMethodEntry(LineId, SQLTrx);

            //14-Mar-2016 :: Cancel Rental/Locker line along with corresponding Deposit
            try
            {
                DateTime trxDatevalue = (this.TrxDate == DateTime.MinValue ?
                                   (this.TransactionDate == DateTime.MinValue ? Utilities.getServerTime() : this.TransactionDate)
                                   : this.TrxDate);
                if (Trx_id > 0)
                {
                    TransactionDataHandler transactionDataHandler = new TransactionDataHandler(SQLTrx);
                    DateTime? bookingLastUpdatedDatevalue = transactionDataHandler.GetLastUpdateTimeOfLinkedReservations(Trx_id, Utilities.ExecutionContext.GetSiteId());
                    if (bookingLastUpdatedDatevalue != null && bookingLastUpdatedDatevalue > trxDatevalue)
                    {
                        trxDatevalue = (DateTime)bookingLastUpdatedDatevalue;
                    }
                }
                //End modification 2.80.0

                if (TrxLines[LineId].card != null && TrxLines[LineId].card.card_id > -1)
                {
                    if (Utilities.executeScalar(@"select top 1 1 
                                from cards c
                                where c.card_id = @cardId
                                   and (c.refund_flag = 'Y'
                                    or exists (select 1
                                                from gameplay gp
                                                where gp.card_id = c.card_id
                                                and gp.play_date > @trxDate
                                                and not exists (select 1 
	                                                            from trx_header th, trx_lines tlin, 
						                                            products pp, TransactionLineGamePlayMapping tlg
					                                            where th.TrxId = tlin.TrxId
					                                            and th.Status not in ('CANCELLED','SYSTEMABANDONED')
					                                            and tlin.product_id = pp.product_id
					                                            and pp.product_name = 'Load Bonus Task'
					                                            and tlin.CancelledTime is null
						                                        and tlin.TrxId = tlg.TrxId
						                                        and tlin.LineId = tlg.LineId
						                                        and tlg.IsActive = 1
						                                        and tlg.GamePlayId = gp.gameplay_id
						                                                ))
								    or exists (select 1
									             from redemption R, Redemption_cards rc
												WHERE r.redemption_id = rc.redemption_id
												  and rc.card_id = c.card_id
                                                  and ISNULL(rc.ticket_count,0) != 0
												  and r.redeemed_date > @trxDate)
                                    or exists (select 1
                                                from tasks t, task_type tp
                                                where t.task_type_id = tp.task_type_id
                                                and (ISNULL(t.TrxId, -2) != @trxId)
												and (t.card_id = c.card_id
														OR (T.transfer_to_card_id IS NOT NULL 
														    AND T.transfer_to_card_id = C.card_id)
														OR (T.consolidate_card1 IS NOT NULL 
														    AND T.consolidate_card1 = C.card_id)
														OR (T.consolidate_card2 IS NOT NULL 
														    AND T.consolidate_card2 = C.card_id)
														OR (T.consolidate_card3 IS NOT NULL 
														   AND T.consolidate_card3 = C.card_id)
														OR (T.consolidate_card4 IS NOT NULL 
														    AND T.consolidate_card4 = C.card_id)
														OR (T.consolidate_card5 IS NOT NULL 
														    AND T.consolidate_card5 = C.card_id)
													)
                                                and not exists (select 1 
                                                            FROM transactionlinegameplaymapping tlg
                                                            WHERE tlg.trxid = t.trxid
                                                              AND tp.task_type = 'LOADBONUS')
                                                and t.task_date > @trxDate))",
                                                SQLTrx,
                                    new SqlParameter("@cardId", TrxLines[LineId].card.card_id),
                                    new SqlParameter("@trxDate", trxDatevalue),
                                    new SqlParameter("@trxId", this.Trx_id > 0 ? this.Trx_id: -1)) != null)
                    {
                        log.LogVariableState("@cardId", TrxLines[LineId].card.card_id);
                        log.LogVariableState("@trxDate", trxDatevalue);
                        log.LogVariableState("@trxId", this.Trx_id);
                        throw new Exception(Utilities.MessageUtils.getMessage(334));
                    }
                }

                if (TrxLines[LineId].TransactionReservationScheduleDTOList != null
                    && TrxLines[LineId].TransactionReservationScheduleDTOList.Any()
                    && TrxLines[LineId].DBLineId == 0)
                {
                    TrxLines[LineId].ExpireTrxReservationSchedule(Utilities.ExecutionContext, SQLTrx);
                }
                if (TrxLines[LineId].SubscriptionHeaderDTO != null
                    && TrxLines[LineId].DBLineId == 0)
                {
                    TrxLines[LineId].SubscriptionHeaderDTO = null;
                }

                if (TrxLines[LineId].ProductTypeCode == ProductTypeValues.GENERICSALE && TrxLines[LineId].ProductName.Equals("Legacy Card Transfer"))
                {
                    log.LogMethodExit();
                    throw new Exception(Utilities.MessageUtils.getMessage(4100));
                }
                if (TrxLines[LineId].ProductTypeCode == ProductTypeValues.RENTAL || TrxLines[LineId].ProductTypeCode == ProductTypeValues.LOCKER)
                {
                    TrxLines[LineId].LineValid = false;
                    if ((LineId - 1) >= 0 && (TrxLines[LineId - 1].ProductTypeCode == ProductTypeValues.DEPOSIT
                                              || TrxLines[LineId - 1].ProductTypeCode == ProductTypeValues.LOCKERDEPOSIT))
                    {
                        TrxLines[LineId - 1].LineValid = false;
                        deleteLineFromDB(TrxLines[LineId - 1], SQLTrx);
                    }
                    deleteLineFromDB(TrxLines[LineId], SQLTrx);

                    log.LogMethodExit(null);
                    return;
                }
                if (TrxLines[LineId].ProductTypeCode == ProductTypeValues.DEPOSIT || TrxLines[LineId].ProductTypeCode == ProductTypeValues.LOCKERDEPOSIT)
                {
                    TrxLines[LineId].LineValid = false;
                    if ((LineId + 1) <= TrxLines.Count && (TrxLines[LineId + 1].ProductTypeCode == ProductTypeValues.RENTAL
                                                           || TrxLines[LineId + 1].ProductTypeCode == ProductTypeValues.LOCKER))
                    {
                        TrxLines[LineId + 1].LineValid = false;
                        deleteLineFromDB(TrxLines[LineId + 1], SQLTrx);
                    }
                    deleteLineFromDB(TrxLines[LineId], SQLTrx);

                    log.LogMethodExit(null);
                    return;
                }

                if ((TrxLines[LineId].ProductTypeCode == ProductTypeValues.NEW || TrxLines[LineId].ProductTypeCode == ProductTypeValues.CARDSALE
                               || TrxLines[LineId].ProductTypeCode == ProductTypeValues.GAMETIME) && (LineId - 1) >= 0 && (TrxLines[LineId - 1].ProductTypeCode == ProductTypeValues.CARDDEPOSIT))
                {
                    TrxLines[LineId].card.invalidateCard(SQLTrx);
                    TrxLines[LineId].LineValid = false;
                    TrxLines[LineId - 1].LineValid = false;
                    deleteLineFromDB(TrxLines[LineId - 1], SQLTrx);
                    deleteLineFromDB(TrxLines[LineId], SQLTrx);
                    log.LogMethodExit(null);
                    return;
                }
                if ((TrxLines[LineId].ProductTypeCode == ProductTypeValues.CARDDEPOSIT) && (LineId + 1) < TrxLines.Count && (TrxLines[LineId + 1].ProductTypeCode == ProductTypeValues.NEW
                    || TrxLines[LineId + 1].ProductTypeCode == ProductTypeValues.CARDSALE || TrxLines[LineId + 1].ProductTypeCode == ProductTypeValues.GAMETIME))
                {
                    TrxLines[LineId + 1].card.invalidateCard(SQLTrx);
                    TrxLines[LineId].LineValid = false;
                    TrxLines[LineId + 1].LineValid = false;
                    deleteLineFromDB(TrxLines[LineId], SQLTrx);
                    deleteLineFromDB(TrxLines[LineId + 1], SQLTrx);
                    log.LogMethodExit(null);
                    return;
                }

                if (TrxLines[LineId].ProductTypeCode == ProductTypeValues.ATTRACTION
                    && TrxLines[LineId].LineAtb != null
                    && TrxLines[LineId].LineAtb.AttractionBookingDTO != null
                    && TrxLines[LineId].LineAtb.AttractionBookingDTO.TrxId == -1)
                {
                    TrxLines[LineId].LineAtb.Expire(SQLTrx, true);
                }
            }
            catch (Exception ex)
            {
                log.Error("Error when cancelling Rental/Locker line along with corresponding Deposit", ex);
                throw ex;
            }

            cancelKOT(LineId, SQLTrx);

            //14-Mar-2016 :: Cancel Rental line along with corresponding Deposit
            TrxLines[LineId].LineValid = false;
            bool isReservationTransation = IsReservationTransaction(SQLTrx);
            for (int i = 0; i < TrxLines.Count; i++)
            {
                if (TrxLines[LineId].Equals(TrxLines[i].ParentLine))
                {
                    if (TrxLines[i].CardNumber != null)
                    {
                        //using (SqlConnection cnn = Utilities.createConnection())
                        {
                            //SqlTransaction sqlTrx;
                            //using (SqlCommand cardCmd = new SqlCommand("", cnn))
                            //{
                            ////SqlCommand cardCmd;
                            //if (SQLTrx == null)
                            //{
                            //    sqlTrx = cnn.BeginTransaction();
                            //    cardCmd = Utilities.getCommand(sqlTrx);
                            //}
                            //else
                            //{
                            //    cardCmd = Utilities.getCommand(SQLTrx);
                            //    sqlTrx = SQLTrx;
                            //}

                            //SqlTransaction sqlTrx = cnn.BeginTransaction();
                            //cardCmd.Connection = cnn;
                            //cardCmd.Transaction = sqlTrx;
                            //cardCmd.Parameters.Clear();
                            ParafaitDBTransaction dBTransaction = null;
                            if (SQLTrx == null)
                            {
                                dBTransaction = new ParafaitDBTransaction();
                                dBTransaction.BeginTransaction();
                                SQLTrx = dBTransaction.SQLTrx;
                            }
                            string Message = "";
                            if (isReservationTransation == false)
                            {
                                DateTime trxDate = Convert.ToDateTime(Utilities.executeScalar(@"select dateadd(ss, 10, trxdate) trxdate
                                                                                             from trx_header where trxid = @trxId",
                                                                                      SQLTrx, new SqlParameter("@trxId", Trx_id)));
                                DateTime currentTime = Utilities.getServerTime().AddSeconds(10);
                                if (trxDate < currentTime)
                                {
                                    trxDate = currentTime;
                                }
                                if (TrxLines[i].card.card_id > -1)
                                {
                                    AccountBL accountBL = new AccountBL(Utilities.ExecutionContext, TrxLines[i].card.card_id, false, false, SQLTrx);
                                    if (accountBL.IsAccountUpdatedByOtherTransactions(trxDate, SQLTrx))
                                    {
                                        log.LogMethodExit(null);
                                        return;
                                    }
                                }
                            }
                            if (!TransactionUtils.ReverseCard(Trx_id, Convert.ToInt32(TrxLines[i].DBLineId),
                                                            Convert.ToString(Utilities.ParafaitEnv.LoginID), true, ref Message, -1, SQLTrx, SQLTrx.Connection))
                            {
                                if (dBTransaction != null)
                                {
                                    dBTransaction.RollBack();
                                    dBTransaction.Dispose();
                                    SQLTrx = null;
                                }
                                log.LogMethodExit(null);
                                return;
                            }
                            if (dBTransaction != null)
                            {
                                dBTransaction.EndTransaction();
                                SQLTrx = null;
                                dBTransaction.Dispose();
                            }
                            //}
                        }
                        cancelCard(i, SQLTrx);
                        if (TrxLines[i].ProductTypeCode == ProductTypeValues.ATTRACTION
                            && TrxLines[i].LineAtb != null
                            && TrxLines[i].LineAtb.AttractionBookingDTO != null
                            && TrxLines[i].LineAtb.AttractionBookingDTO.TrxId == -1)
                        {
                            TrxLines[i].LineAtb.Expire(SQLTrx, true);
                        }
                        if (TrxLines[LineId].TransactionReservationScheduleDTOList != null
                            && TrxLines[LineId].DBLineId == 0)
                        {
                            TrxLines[LineId].ExpireTrxReservationSchedule(Utilities.ExecutionContext, SQLTrx);
                        }
                    }
                    else
                    {
                        cancelLine(i, SQLTrx);
                    }
                }
            }
            deleteLineFromDB(TrxLines[LineId], SQLTrx);
            CalculateOrderTypeGroup();
            log.LogMethodExit(null);
        }

        public void CalculateOrderTypeGroup()
        {
            orderTypeIdSet = null;
            OrderTypeGroupId = -1;
            if (TrxLines != null || TrxLines.Count > 0)
            {
                orderTypeIdSet = new HashSet<int>();
                foreach (var line in TrxLines)
                {
                    if (line.LineValid)
                    {
                        orderTypeIdSet.Add(line.OrderTypeId);
                    }
                }
                if (orderTypeIdSet.SetEquals(new HashSet<int>() { -1 }))
                {
                    OrderTypeGroupId = -1;
                }
                else
                {
                    OrderTypeGroupDTO orderTypeGroupDTO = GetOrderTypeGroup(orderTypeIdSet);
                    if (orderTypeGroupDTO != null)
                    {
                        OrderTypeGroupId = orderTypeGroupDTO.Id;
                    }
                }
            }
        }

        /// <summary>
        /// CancelKOT performs KOT print to reflect cancelled item in Kitchen
        /// </summary>
        /// <param name="lineId">Line Id index which is cancelled</param>
        /// <param name="SQLTrx"></param>
        void cancelKOT(int lineId, SqlTransaction SQLTrx)
        {
            log.LogMethodEntry(lineId, SQLTrx);

            if (TrxLines[lineId].LineValid
                && TrxLines[lineId].CancelledLine == false
                && TrxLines[lineId].KOTPrintCount != DBNull.Value
                && Convert.ToInt32(TrxLines[lineId].KOTPrintCount) > 0)
            {
                foreach (TransactionLine line in TrxLines)
                {
                    if (line.LineValid)
                        line.PrintKOT = false;
                }

                TrxLines[lineId].PrintKOT = true;
                TrxLines[lineId].ReceiptPrinted = false;//made false to be picked up for Printing
                TrxLines[lineId].CancelledLine = true;

                foreach (TransactionLine tl in TrxLines)
                {
                    if (TrxLines[lineId].Equals(tl.ParentLine))
                    {
                        tl.PrintKOT = true;
                        tl.ReceiptPrinted = false;//made false to be picked up for Printing
                        tl.CancelledLine = true;
                    }
                }

                PrintTransaction pt = new PrintTransaction(POSPrinterDTOList);
                string message = "";
                if (!pt.PrintKOT(this, ref message))
                {
                    log.LogMethodExit("Throwing ApplicationException - " + message);
                    throw new ApplicationException(message);
                }
            }

            log.LogMethodExit(null);
        }

        //Begin Modification : 01-Dec-2016 added new method for printing ordered transaction KOT
        public void cancelOrderedKOT(SqlTransaction SQLTrx, List<POSPrinterDTO> posPrinterDTOList)
        {
            log.LogMethodEntry(SQLTrx);

            foreach (TransactionLine line in TrxLines)
            {
                if (line.LineValid)
                    line.PrintKOT = false;
            }

            for (int i = 0; i < TrxLines.Count; i++)
            {
                if (TrxLines[i].LineValid
                    && TrxLines[i].CancelledLine == false
                    && TrxLines[i].KOTPrintCount != DBNull.Value
                    && Convert.ToInt32(TrxLines[i].KOTPrintCount) > 0)
                {
                    TrxLines[i].PrintKOT = true;
                    TrxLines[i].ReceiptPrinted = false;//made false to be picked up for Printing
                    TrxLines[i].CancelledLine = true;
                }

                foreach (TransactionLine tl in TrxLines)
                {
                    if (TrxLines[i].Equals(tl.ParentLine))
                    {
                        tl.PrintKOT = true;
                        tl.ReceiptPrinted = false;//made false to be picked up for Printing
                        tl.CancelledLine = true;
                    }
                }
            }

            PrintTransaction pt = new PrintTransaction(posPrinterDTOList);
            string message = "";
            if (!pt.PrintKOT(this, ref message))
            {
                log.LogMethodExit("Throwing ApplicationException" + message);
                throw new ApplicationException(message);
            }
            log.LogMethodExit(null);
        }
        //end Modification


        public bool cancelDiscountLine(int discountId)
        {
            log.LogMethodEntry(discountId);

            if (discountId != -1)
            {
                if (TrxLines != null && TrxLines.Count > 0)
                {
                    foreach (var line in TrxLines)
                    {
                        if (line.LineValid)
                        {
                            line.RemoveDiscount(discountId);
                        }
                    }
                }
                if (discountsSummaryDTODictionary != null && discountsSummaryDTODictionary.ContainsKey(discountId))
                {
                    DiscountsSummaryDTO discountsSummaryDTO = discountsSummaryDTODictionary[discountId];
                    discountsSummaryDTOList.Remove(discountsSummaryDTO);
                    discountsSummaryDTODictionary.Remove(discountId);
                }
                if (discountApplicationHistoryDTOList != null && discountApplicationHistoryDTOList.Count > 0)
                {
                    discountApplicationHistoryDTOList.RemoveAll(x => x.DiscountId == discountId);
                }
                if (manuallyRemovedDiscountIdList == null)
                {
                    manuallyRemovedDiscountIdList = new HashSet<int>();
                }
                manuallyRemovedDiscountIdList.Add(discountId);
                updateAmounts();

            }
            log.LogMethodExit(true);
            return true;
        }

        public bool CancelDiscountLine(int discountId, int lineId)
        {
            log.LogMethodEntry(discountId, lineId);
            if (TrxLines == null ||
                TrxLines.Count < lineId ||
                TrxLines[lineId] == null ||
                TrxLines[lineId].LineValid == false ||
                discountId < 0 ||
                lineId < 0)
            {
                log.LogMethodExit("validation failed");
                return false;
            }

            Transaction.TransactionLine trxLine = TrxLines[lineId];
            trxLine.RemoveDiscount(discountId);
            if (discountApplicationHistoryDTOList != null && discountApplicationHistoryDTOList.Count > 0)
            {
                discountApplicationHistoryDTOList.RemoveAll(x => x.DiscountId == discountId && x.TransactionLineBL != null && x.TransactionLineBL == trxLine);
            }
            if (manuallyRemovedDiscountIdList == null)
            {
                manuallyRemovedDiscountIdList = new HashSet<int>();
            }
            manuallyRemovedDiscountIdList.Add(discountId);
            updateAmounts();
            log.LogMethodExit(true);
            return true;
        }
        public int cancelCard(int LineId, SqlTransaction sqlTrx = null)
        {
            log.LogMethodEntry(LineId, sqlTrx);

            if (TrxLines[LineId].CardNumber != null)
            {
                string cardNumber = TrxLines[LineId].CardNumber;
                for (int i = 0; i < TrxLines.Count; i++)
                {
                    if (cardNumber == TrxLines[i].CardNumber)
                    {
                        TrxLines[i].LineValid = false;
                        deleteLineFromDB(TrxLines[i], sqlTrx);
                    }
                }
                updateAmounts(true, sqlTrx);

                log.LogMethodExit(0);
                return 0;
            }
            else
            {
                log.LogMethodExit(1);
                return 1;
            }
        }

        /// <summary>
        /// Updates the original line id of a transaction line
        /// </summary>
        /// <param name="line"></param>
        /// <param name="inSQLTrx"></param>
        public void UpdateOriginalLineId(TransactionLine line, SqlTransaction inSQLTrx = null)
        {
            log.LogMethodEntry(line, inSQLTrx);
            if (line.DBLineId > 0)
            {
                SqlTransaction SQLTrx;
                SqlConnection cnn = null;
                if (inSQLTrx == null)
                {
                    SQLTrx = Utilities.createConnection().BeginTransaction();
                    cnn = SQLTrx.Connection;
                }
                else
                    SQLTrx = inSQLTrx;

                try
                {
                    SqlCommand Invcmd = Utilities.getCommand(SQLTrx);
                    Utilities.executeNonQuery(@"Update trx_lines 
                                                set OriginalLineId = @OriginalLineId
                                                Where TrxId = @TrxId AND LineId = @LineId",
                        SQLTrx,
                        new SqlParameter("@TrxId", Trx_id),
                        new SqlParameter("@OriginalLineId", line.OriginalLineID < 0 ? DBNull.Value : (object)line.OriginalLineID),
                        new SqlParameter("@LineId", line.DBLineId));
                }
                catch (Exception ex)
                {
                    log.Error("Error occurred when updating original line id", ex);

                    SQLTrx.Rollback();
                    if (inSQLTrx == null)
                        cnn.Close();

                    log.LogMethodExit(null, "Throwing Exception");
                    throw;
                }
            }

            log.LogMethodExit();
        }

        public void deleteLineFromDB(TransactionLine line, SqlTransaction inSQLTrx = null)
        {
            log.LogMethodEntry(line, inSQLTrx);

            if (line.DBLineId > 0)
            {
                SqlTransaction SQLTrx;
                SqlConnection cnn = null;
                if (inSQLTrx == null)
                {
                    SQLTrx = Utilities.createConnection().BeginTransaction();
                    cnn = SQLTrx.Connection;
                }
                else
                    SQLTrx = inSQLTrx;

                try
                {
                    SqlCommand Invcmd = Utilities.getCommand(SQLTrx);
                    Utilities.executeNonQuery(@"delete from TrxDiscounts where TrxId = @TrxId and LineId = @LineId; ",
                                                SQLTrx,
                                               new SqlParameter("@TrxId", Trx_id),
                                               new SqlParameter("@LineId", line.DBLineId)
                                               );

                    Utilities.executeNonQuery(@"delete from TrxTaxLines where TrxId = @TrxId and LineId = @LineId; ",
                                                SQLTrx,
                                               new SqlParameter("@TrxId", Trx_id),
                                               new SqlParameter("@LineId", line.DBLineId)
                                               );

                    Utilities.executeNonQuery(@"delete from LockerAllocation where TrxId = @TrxId and TrxLineId = @LineId;",
                                                SQLTrx,
                                               new SqlParameter("@TrxId", Trx_id),
                                               new SqlParameter("@LineId", line.DBLineId)
                                               );

                    Utilities.executeNonQuery(@"DELETE FROM TrxSplitLines 
                                                 WHERE SplitId IN (SELECT SplitId FROM TrxSplitPayments WHERE TrxId = @TrxId) AND LineId = @LineId;",
                                                SQLTrx,
                                               new SqlParameter("@TrxId", Trx_id),
                                               new SqlParameter("@LineId", line.DBLineId)
                                               );

                    Utilities.executeNonQuery(@"update cardCreditPlusConsumption
                                               set ConsumptionBalance = ConsumptionBalance + 1,
                                                   LastUpdatedDate = getdate()
                                             where PkId = (SELECT TOP 1 CreditPlusConsumptionId from trx_lines 
                                                            where TrxId = @TrxId and LineId = @LineId);",
                                                SQLTrx,
                                               new SqlParameter("@TrxId", Trx_id),
                                               new SqlParameter("@LineId", line.DBLineId));

                    Utilities.executeNonQuery(@"update trx_lines set Price = 0, Amount = 0, UserPrice = 0, 
                                                                credits = 0, bonus = 0, courtesy = 0, time = 0, tickets = 0,
                                                                LastUpdateDate = getdate(),
                                                                LastUpdatedBy = @user,
                                                                cancelledTime = getdate(), 
                                                                cancelledBy = @user, Remarks = @Remarks, 
                                                                cancelCode = @CancelCode,
                                                                ApprovedBy = @ApprovedBy
                                            where TrxId = @TrxId and LineId = @LineId;",
                                                SQLTrx,
                                               new SqlParameter("@TrxId", Trx_id),
                                               new SqlParameter("@user", Utilities.ParafaitEnv.LoginID),
                                               new SqlParameter("@LineId", line.DBLineId),
                                               new SqlParameter("@Remarks", string.IsNullOrEmpty(line.Remarks) ? "" : line.Remarks),
                                               new SqlParameter("@CancelCode", string.IsNullOrEmpty(line.cancelCode) ? "" : line.cancelCode),
                                               new SqlParameter("@ApprovedBy", Utilities.ParafaitEnv.ApproverId == "-1" ? "" : Utilities.ParafaitEnv.ApproverId)
                                               );

                    Utilities.executeNonQuery(@" update TrxUserVerificationDetails set IsActive = 'N', LastUpdateDate = getdate(),
                                                                                  LastUpdatedBy = @user
                                             where TrxId = @TrxId and LineId = @LineId; ",
                                                SQLTrx,
                                               new SqlParameter("@TrxId", Trx_id),
                                               new SqlParameter("@user", Utilities.ParafaitEnv.LoginID),
                                               new SqlParameter("@LineId", line.DBLineId)
                                               );
                    //Utilities.executeNonQuery(@"Delete from CardCreditPlusConsumption where CardCreditPlusId  
                    //                        in (select CardCreditPlusId from cardCreditplus where trxId = @TrxId  and LineId = @LineId);   ",
                    Utilities.executeNonQuery(@"Delete from CardCreditPlusConsumption 
                                                 where EXISTS (select 1
                                                                 from cardCreditplus 
			                                                    where trxId = @TrxId 
			                                                      and LineId = @LineId 
				                                                  and CardCreditPlusConsumption.CardCreditPlusId = cardCreditplus.CardCreditPlusId );  ",
                                               SQLTrx,
                                               new SqlParameter("@TrxId", Trx_id),
                                               new SqlParameter("@LineId", line.DBLineId));

                    Utilities.executeNonQuery(@"delete from cardCreditplus where TrxId = @TrxId and LineId = @LineId;",
                                                SQLTrx,
                                               new SqlParameter("@TrxId", Trx_id),
                                               new SqlParameter("@LineId", line.DBLineId));
                    Utilities.executeNonQuery(@" Update NotificationTagIssued set IsReturned = 1, ReturnDate = getdate(),
                                                               LastUpdateDate = getdate(), LastUpdatedBy = @user         
                                             where TrxId = @TrxId and LineId = @LineId;",
                                                SQLTrx,
                                               new SqlParameter("@TrxId", Trx_id),
                                               new SqlParameter("@user", Utilities.ParafaitEnv.LoginID),
                                               new SqlParameter("@LineId", line.DBLineId));

                    Utilities.executeNonQuery(@"delete from AttractionBookingSeats 
                                    where BookingId in (select BookingId 
                                                         from AttractionBookings
                                                        where TrxId = @TrxId
                                                        and lineId = @LineId)",
                                                SQLTrx,
                                                new SqlParameter("@TrxId", Trx_id),
                                                new SqlParameter("@LineId", line.DBLineId));

                    TransactionUtils.reverseAttractionBookings(Trx_id, line.DBLineId, SQLTrx);
                    //Utilities.executeNonQuery(@"update AttractionBookings
                    //                               set ExpiryDate = getdate(),
                    //                                   lastUpdateDate = getdate(), LastUpdatedBy = @user
                    //                             where TrxId = @TrxId
                    //                               and lineId = @LineId",
                    //                     SQLTrx,
                    //                     new SqlParameter("@TrxId", Trx_id),
                    //                     new SqlParameter("@LineId", line.DBLineId),
                    //                     new SqlParameter("@user", Utilities.ParafaitEnv.LoginID));

                    Utilities.executeNonQuery(@"update WaiversSigned 
                                                   set isActive = 0, lastUpdatedDate = getdate(), LastUpdatedBy = @user
                                                 where TrxId = @TrxId
                                                  and lineId = @LineId",
                                       SQLTrx,
                                       new SqlParameter("@TrxId", Trx_id),
                                       new SqlParameter("@LineId", line.DBLineId),
                                       new SqlParameter("@user", Utilities.ParafaitEnv.LoginID));



                    if (line.TransactionReservationScheduleDTOList != null)
                    {
                        line.ExpireTrxReservationSchedule(Utilities.ExecutionContext, SQLTrx);
                    }

                    if (line.SubscriptionHeaderDTO != null)
                    {
                        line.ClearSubscriptionEntity(Utilities, SQLTrx);
                    }

                    log.LogVariableState("@TrxId", Trx_id);
                    log.LogVariableState("@user", Utilities.ParafaitEnv.LoginID);
                    log.LogVariableState("@LineId", line.DBLineId);

                    Invcmd.CommandText = "select 1 from trx_header where TrxId = @trxId";
                    Invcmd.Parameters.Clear();
                    Invcmd.Parameters.AddWithValue("@trxid", Trx_id);

                    log.LogVariableState("@trxid", Trx_id);

                    object trxn = Invcmd.ExecuteScalar(); // inv prod code may not exist
                    if (trxn != null && trxn.Equals(1))
                    {
                        if (!string.IsNullOrEmpty(line.InventoryProductCode))
                            Inventory.updateStock(line.InventoryProductCode, Invcmd, line.quantity * -1, POSMachineId, Utilities.ParafaitEnv.LoginID, Trx_id, line.DBLineId, line.Price, line.tax_percentage, line.TaxInclusivePrice, Utilities.ExecutionContext.GetSiteId(), -1, -1);
                    }
                    else
                    {
                        log.Info("TransactionId " + Trx_id + " record is not exists in the db.");
                    }
                    //Modified 02/2019 for BearCat - 86-68
                    if (ParafaitDefaultContainerList.GetParafaitDefault<bool>(Utilities.ExecutionContext, "ALLOW_PRODUCTS_TOBE_MARKED_UNAVAILABLE") &&
                        (line.ProductTypeCode == "MANUAL" || line.ProductTypeCode == "COMBO"))
                    {
                        ProductsAvailabilityListBL unavailableProductsList = new ProductsAvailabilityListBL(Utilities.ExecutionContext);
                        ProductsAvailabilityDTO unavailableProduct = unavailableProductsList.SearchUnavailableProductByProductId(line.ProductID, SQLTrx);
                        if (unavailableProduct.Id > 0)
                        {
                            unavailableProduct.AvailableQty = unavailableProduct.AvailableQty - (line.quantity * -1);
                            ProductsAvailabilityBL productsAvailabilityBL = new ProductsAvailabilityBL(Utilities.ExecutionContext, unavailableProduct, SQLTrx);
                            productsAvailabilityBL.Save(unavailableProduct.ApprovedBy);
                        }
                    }

                    if (inSQLTrx == null)
                    {
                        SQLTrx.Commit();
                        cnn.Close();
                    }
                }
                catch (Exception ex)
                {
                    log.Error("Error occurred when deleting the values", ex);

                    SQLTrx.Rollback();
                    if (inSQLTrx == null)
                        cnn.Close();

                    log.LogMethodExit(null, "Throwing Exception");
                    throw ex;
                }
            }

            log.LogMethodExit(null);
        }
        // added by iqbal mar 11 2016
        public bool isSavedTransaction(SqlTransaction sqlTrx = null)
        {
            log.LogMethodEntry(sqlTrx);
            if (Trx_id <= 0)
            {
                log.LogMethodExit(false);
                return false;
            }

            if (Utilities.executeScalar("select top 1 1 from trx_header where trxId = @trxId", sqlTrx,
                                         new SqlParameter("@trxId", Trx_id)) != null)
            {
                log.LogMethodExit(true);
                return true;
            }
            else
            {
                log.LogMethodExit(false);
                return false;
            }
        }

        public TransactionDTO TransactionDTO
        {
            get
            {
                try
                {
                    transactionDTO.TransactionId = Trx_id;
                    transactionDTO.TransactionNumber = this.Trx_No;
                    transactionDTO.TransactionAmount = (decimal)Transaction_Amount;
                    transactionDTO.TransactionNetAmount = Convert.ToDecimal(Net_Transaction_Amount.ToString());
                    transactionDTO.TaxAmount = Convert.ToDecimal(Tax_Amount);
                    transactionDTO.TransactionDiscountAmount = Convert.ToDecimal(Discount_Amount.ToString());
                    transactionDTO.TransactionDate = this.TrxDate;
                    transactionDTO.CustomerId = customerDTO != null ? this.customerDTO.Id : -1;
                    transactionDTO.CustomerIdentifier = this.customerIdentifier;
                    transactionDTO.ExternalSystemReference = this.externalSystemReference;
                    if (this.Order != null && this.Order.OrderHeaderDTO != null)
                        transactionDTO.OrderId = this.Order.OrderHeaderDTO.OrderId;
                    transactionDTO.OriginalSystemReference = this.originalSystemReference;
                    transactionDTO.OriginalTransactionId = this.OriginalTrxId;
                    transactionDTO.TransactionOTP = this.transactionOTP;
                    transactionDTO.PosMachine = this.POSMachine;
                    transactionDTO.PrimaryCard = this.PrimaryCard != null ? this.PrimaryCard.CardNumber : "";
                    transactionDTO.Status = this.Status.ToString();
                    transactionDTO.SiteId = this.Utilities.ExecutionContext.GetSiteId();
                    transactionDTO.Guid = this.TrxGuid;
                    transactionDTO.TransactionLinesDTOList.Clear();
                    transactionDTO.Remarks = this.Remarks;
                    foreach (Parafait.Transaction.Transaction.TransactionLine TrxLine in TrxLines)
                    {
                        TrxLine.TransactionLineDTO.TransactionId = Trx_id;
                        TrxLine.TransactionLineDTO.SiteId = transactionDTO.SiteId;
                        transactionDTO.TransactionLinesDTOList.Add(TrxLine.TransactionLineDTO);
                        if (String.IsNullOrEmpty(transactionDTO.PrimaryCard))
                            transactionDTO.PrimaryCard = TrxLine.card != null ? TrxLine.card.CardNumber : "";
                    }

                    if (discountApplicationHistoryDTOList != null && discountApplicationHistoryDTOList.Any())
                    {
                        List<DiscountApplicationHistoryDTO> newDiscountApplicationHistoryDTOList = new List<DiscountApplicationHistoryDTO>();
                        foreach (DiscountApplicationHistoryDTO currTransactionDiscount in discountApplicationHistoryDTOList)
                        {
                            TransactionLine discountedLine = null;
                            if (currTransactionDiscount.TransactionLineBL != null)
                            {
                                discountedLine = currTransactionDiscount.TransactionLineBL;
                                if (String.IsNullOrEmpty(discountedLine.guid))
                                    discountedLine.guid = (new Guid()).ToString();
                            }

                            DiscountApplicationHistoryDTO discountApplicationHistoryDTO = new DiscountApplicationHistoryDTO();
                            discountApplicationHistoryDTO.DiscountId = currTransactionDiscount.DiscountId;
                            discountApplicationHistoryDTO.CouponNumber = currTransactionDiscount.CouponNumber == null ? "" : currTransactionDiscount.CouponNumber;
                            discountApplicationHistoryDTO.VariableDiscountAmount = currTransactionDiscount.VariableDiscountAmount;
                            discountApplicationHistoryDTO.ApprovedBy = currTransactionDiscount.ApprovedBy;
                            discountApplicationHistoryDTO.Remarks = currTransactionDiscount.Remarks;
                            discountApplicationHistoryDTO.IsCancelled = currTransactionDiscount.IsCancelled;
                            if (discountedLine != null)
                            {
                                discountApplicationHistoryDTO.TransactionLineGuid = discountedLine.guid;
                            }
                            newDiscountApplicationHistoryDTOList.Add(discountApplicationHistoryDTO);
                        }
                        transactionDTO.DiscountApplicationHistoryDTOList = newDiscountApplicationHistoryDTOList;
                    }
                    transactionDTO.DiscountsSummaryDTOList = this.DiscountsSummaryDTOList;
                    transactionDTO.TrxPaymentsDTOList = this.TransactionPaymentsDTOList;
                    transactionDTO.TransctionOrderDispensingDTO = this.TransctionOrderDispensingDTO;
                }
                catch (Exception ex)
                {
                    log.Debug("Assign to trx dto failed " + ex.Message);
                }
                return transactionDTO;
            }
        }


        public List<Transaction.TransactionLine> TransactionLineList
        {
            get
            {
                List<Transaction.TransactionLine> transactionLineList = new List<Transaction.TransactionLine>();
                foreach (var item in TrxLines)
                {
                    if (item.LineValid)
                    {
                        transactionLineList.Add(item);
                    }
                }
                return transactionLineList;
            }
        }

        public CardCoreDTO CardCoreDTO
        {
            get
            {
                CardCoreDTO cardCoreDTO = null;
                if (PrimaryCard != null)
                {
                    cardCoreDTO = new CardCoreDTO(PrimaryCard.card_id, PrimaryCard.CardNumber,
                        PrimaryCard.issue_date, PrimaryCard.face_value, PrimaryCard.refund_flag,
                        PrimaryCard.refund_amount, PrimaryCard.refund_date, PrimaryCard.valid_flag,
                        PrimaryCard.ticket_count, PrimaryCard.notes, PrimaryCard.last_update_time.ToString(),
                        Convert.ToDecimal(PrimaryCard.credits), Convert.ToDecimal(PrimaryCard.courtesy),
                        Convert.ToDecimal(PrimaryCard.bonus), Convert.ToDecimal(PrimaryCard.time),
                        PrimaryCard.customer_id, Convert.ToDecimal(PrimaryCard.credits_played),
                        PrimaryCard.ticket_allowed, PrimaryCard.real_ticket_mode, PrimaryCard.vip_customer,
                        PrimaryCard.siteId, PrimaryCard.start_time, PrimaryCard.last_played_time,
                        PrimaryCard.technician_card, PrimaryCard.tech_games, 'N', Convert.ToInt32(PrimaryCard.loyalty_points),
                        // null, PrimaryCard.CardTypeId, null, -1, DateTime.MinValue, false, PrimaryCard.ExpiryDate,
                        null, -1, null, -1, DateTime.MinValue, false, PrimaryCard.ExpiryDate,
                        -1, DateTime.MinValue, -1, PrimaryCard.primaryCard);
                }
                return cardCoreDTO;
            }
        }

        public int SaveOrder(ref string message, SqlTransaction SQLTrx = null)
        {
            log.LogMethodEntry(message, SQLTrx);

            if (Order == null)
            {
                OrderHeaderDTO orderHeaderDTO = new OrderHeaderDTO();
                if (this.customerDTO != null)
                {
                    orderHeaderDTO.CustomerName = this.customerDTO.FirstName + " " + this.customerDTO.LastName;
                }
                orderHeaderDTO.POSMachineId = Utilities.ExecutionContext.GetMachineId();
                orderHeaderDTO.UserId = Utilities.ExecutionContext.GetUserPKId();
                if (this.PrimaryCard != null)
                {
                    orderHeaderDTO.CardId = PrimaryCard.card_id;
                }
                OrderHeaderBL orderHeaderBL = new OrderHeaderBL(Utilities.ExecutionContext, orderHeaderDTO);
                orderHeaderBL.Save(SQLTrx);
                this.Order = orderHeaderBL;
            }

            int returnValue = _SaveTransacation(SQLTrx, false, ref message);

            log.LogVariableState("message ", message);
            log.LogMethodExit(returnValue);
            return returnValue;
        }

        public int SaveTransacation(ref string message)
        {
            log.LogMethodEntry(message);

            log.LogVariableState("message", message);

            int returnValueNew = SaveTransacation(null, ref message);
            log.LogMethodExit(returnValueNew);
            return returnValueNew;
        }

        public int SaveTransacation(SqlTransaction SQLTrx, ref string message)
        {
            log.LogMethodEntry(SQLTrx, message);

            int returnValueNew = _SaveTransacation(SQLTrx, true, ref message);
            if (Trx_id > 0)
            {
                ApprovalAction approval = GetApproval(ApprovalAction.GetApprovalActionType(ApprovalAction.ApprovalActionType.SAVE));
                InsertTrxLogs(Trx_id, -1, Utilities.ParafaitEnv.LoginID, "SAVE", "Order Saved", SQLTrx, approval.ApproverId, approval.ApprovalTime);
                ApprovalAction itemRefund = GetApproval(ApprovalAction.GetApprovalActionType(ApprovalAction.ApprovalActionType.ITEM_REFUND));
                if (itemRefund != null && string.IsNullOrEmpty(itemRefund.ApproverId) == false)
                {
                    InsertTrxLogs(Trx_id, -1, Utilities.ParafaitEnv.LoginID, ApprovalAction.GetApprovalActionType(ApprovalAction.ApprovalActionType.ITEM_REFUND), "Manager approval for variable refund", SQLTrx, itemRefund.ApproverId, itemRefund.ApprovalTime);
                }
            }
            log.LogVariableState("message ", message);
            log.LogMethodExit(returnValueNew);
            return returnValueNew;
        }

        private int _SaveTransacation(SqlTransaction SQLTrx, bool closeTransaction, ref string message)
        {
            log.LogMethodEntry(SQLTrx, closeTransaction, message);

            SqlCommand Trxcmd;
            SqlCommand Invcmd;

            //Start: Added on 26-apr-2016 for parent Modifiers Details
            SqlCommand ParentTrxcmd;
            SqlCommand parentUpdateTrxmd;
            //End: Added on 26-apr-2016 for parent Modifiers Details

            for (int i = 0; i < TrxLines.Count; i++)
            {
                HashSet<string> coupons = new HashSet<string>();

                if (TrxLines[i].LineValid &&
                    TrxLines[i].IssuedDiscountCouponsDTOList != null &&
                    TrxLines[i].IssuedDiscountCouponsDTOList.Count > 0)
                {
                    foreach (var discountCouponsDTO in TrxLines[i].IssuedDiscountCouponsDTOList)
                    {
                        if (coupons.Contains(discountCouponsDTO.FromNumber))
                        {
                            message = MessageContainerList.GetMessage(Utilities.ExecutionContext, 3026);
                            return 1;
                        }
                        else
                        {
                            coupons.Add(discountCouponsDTO.FromNumber);
                        }
                    }
                }
            }
            SqlTransaction TrxTransacation;
            SqlConnection TrxCnn = null;
            TransactionUtils transactionUtils = new TransactionUtils(Utilities);//Modification on 17-May-2016 for adding PosPlus 
            Dictionary<string, int> transactionOrderTypes = LoadTransactionOrderType();
            if (closeTransaction)
            {
                double excessVoucherValue = 0;
                object objExcessVoucher = Utilities.executeScalar(@"SELECT SUM(ISNULL(COUPONVALUE,0) - ISNULL(AMOUNT,0)) ExcessValue
                                                                      FROM TRXPAYMENTS
                                                                     WHERE CouponValue > 0
                                                                       AND IsTaxable = 'Y'
                                                                       AND TRXID = @trxId",
                                                                   SQLTrx, new SqlParameter("@trxId", Trx_id));
                if (objExcessVoucher != null && objExcessVoucher != DBNull.Value)
                {
                    excessVoucherValue = Convert.ToDouble(objExcessVoucher);
                    if (0 != createTransactionLine(null, Utilities.ParafaitEnv.ExcessVoucherValueProductId, excessVoucherValue, 1, ref message))
                        return 1;
                }

            }
            if (SQLTrx == null)
            {
                TrxCnn = Utilities.createConnection();
                TrxTransacation = TrxCnn.BeginTransaction();
            }
            else
            {
                TrxTransacation = SQLTrx;
            }

            Trxcmd = Utilities.getCommand(TrxTransacation);
            Invcmd = Utilities.getCommand(TrxTransacation);

            //Start: Added on 26-apr-2016 for parent Modifiers Details
            ParentTrxcmd = Utilities.getCommand(TrxTransacation);
            parentUpdateTrxmd = Utilities.getCommand(TrxTransacation);
            //End: Added on 26-apr-2016 for parent Modifiers Details
            //To clear the old transaction discounts
            DeleteTransactionDiscounts(TrxTransacation);
            //To clean paymentDTO if paymentDTO was created and transaction rolled back in previous instance
            if (TransactionPaymentsDTOList != null)
            {
                TransactionPaymentsListBL trxPaymentsListBL = new TransactionPaymentsListBL(Utilities.ExecutionContext, TransactionPaymentsDTOList);
                trxPaymentsListBL.CleanupPaymentList(TrxTransacation);
                TransactionPaymentsDTOList = trxPaymentsListBL.TransactionPaymentsDTOList;
            }
            if (Trx_id > 0)
            {
                if (TrxUpdatedByOthers(Trx_id, DBReadTime, TrxTransacation))
                {
                    message = "Transaction modified by other processes. Refresh and retry.";
                    if (SQLTrx == null) //SQLTransaction handled locally
                        TrxTransacation.Rollback();
                    if (TrxCnn != null)
                        TrxCnn.Close();

                    log.LogVariableState("message", message);
                    log.LogMethodExit(1);
                    return 1;
                }
                //object lastUpdateTime = Utilities.executeScalar("select LastUpdateTime from trx_header where trxId = @trxId", new SqlParameter("trxId", Trx_id));
                //if (lastUpdateTime != null && lastUpdateTime != DBNull.Value)
                //{
                //    if ((DateTime)lastUpdateTime > DBReadTime)
                //    {
                //        message = "Transaction modified by other processes. Refresh and retry.";
                //        TrxTransacation.Rollback();
                //        if (TrxCnn != null)
                //            TrxCnn.Close();

                //        log.LogVariableState("message", message);
                //        log.LogMethodExit(1);
                //        return 1;
                //    }
                //}
            }

            //14-mar-2016
            if (customerDTO != null && customerDTO.LastUpdateDate > GameCardReadTime
                && (TrxLines.Exists(x => x.card != null && x.card.customerDTO != null && x.card.customerDTO == customerDTO)
                    || (TransactionPaymentsDTOList.Count > 0 && TransactionPaymentsDTOList.Exists(p => p.CardId > 0))
                   )
               )
                GameCardReadTime = Utilities.getServerTime();

            if (TrxDate == DateTime.MinValue)
                TrxDate = Utilities.getServerTime();

            if (EntitlementReferenceDate == DateTime.MinValue)
                EntitlementReferenceDate = TrxDate;

            DataTable dtTrxLineId = Utilities.executeDataTable(@"select lineId from trx_lines where TrxId = @TrxId",
                                                            TrxTransacation, new SqlParameter("@TrxId", Trx_id));

            for (int i = 0; i < TrxLines.Count; i++)
            {
                TrxLines[i].LineProcessed = false;
                if (TrxLines[i].LineValid)
                {
                    if (TrxLines[i].DBLineId > 0 && Trx_id > 0)
                    {
                        if (dtTrxLineId == null || dtTrxLineId.Rows.Count == 0 ||
                             (dtTrxLineId != null && dtTrxLineId.Select(" lineId = " + TrxLines[i].DBLineId.ToString()).Length == 0))
                        {
                            TrxLines[i].DBLineId = 0;
                        }
                    }
                    else
                        TrxLines[i].DBLineId = 0;
                }
            }

            string cardtrxLimit = Utilities.getParafaitDefaults("GAMECARD_TRANSACTION_CREDIT_LIMIT");
            string cardCreditLimit = Utilities.getParafaitDefaults("GAMECARD_CREDIT_LIMIT");
            for (int i = 0; i < TrxLines.Count; i++)
            {
                if (TrxLines[i].DBLineId == 0 && TrxLines[i].LineValid && TrxLines[i].CardNumber != null && !TrxLines[i].LineProcessed)
                {
                    TrxLines[i].card.addCredits = 0;
                    TrxLines[i].card.addCourtesy = 0;
                    TrxLines[i].card.addBonus = 0;
                    TrxLines[i].card.addTime = 0;
                    TrxLines[i].card.addCreditPlusCardBalance = 0;
                    TrxLines[i].card.addTicketCount = 0;
                    TrxLines[i].card.TotalRechargeAmount = 0;

                    for (int j = i; j < TrxLines.Count; j++)
                    {
                        if (TrxLines[j].DBLineId == 0 && TrxLines[i].CardNumber == TrxLines[j].CardNumber && TrxLines[j].LineValid)
                        {
                            TrxLines[i].card.addCredits = TrxLines[i].card.addCredits + TrxLines[j].Credits;
                            TrxLines[i].card.addCourtesy = TrxLines[i].card.addCourtesy + TrxLines[j].Courtesy;
                            TrxLines[i].card.addBonus = TrxLines[i].card.addBonus + TrxLines[j].Bonus;
                            TrxLines[i].card.addTime = TrxLines[i].card.addTime + TrxLines[j].Time;
                            TrxLines[i].card.TotalRechargeAmount = TrxLines[i].card.TotalRechargeAmount + TrxLines[j].LineAmount;
                            if (TrxLines[i].card.vip_customer == 'N')
                            {
                                TrxLines[i].card.vip_customer = TrxLines[j].vip_card[0];
                            }

                            // set ticket allowed on new card issue
                            if (TrxLines[i].card.CardStatus == "NEW"
                                && (TrxLines[j].ProductTypeCode == "NEW" || TrxLines[j].ProductTypeCode == "CARDSALE"))
                            {
                                TrxLines[i].card.ticket_allowed = TrxLines[j].ticket_allowed[0];
                            }

                            if (TrxLines[i].card.ticket_allowed == 'Y')
                                TrxLines[i].card.addTicketCount = TrxLines[i].card.addTicketCount + TrxLines[j].Tickets;

                            //if (TrxLines[j].CardTypeId != -1)
                            //    TrxLines[i].card.CardTypeId = TrxLines[j].CardTypeId;
                            double cardCreditPlusBalanceValue = GetProductCardCreditPlusBalance(TrxLines[j].ProductID, TrxTransacation);
                            TrxLines[i].card.addCreditPlusCardBalance += cardCreditPlusBalanceValue;
                            if (TrxLines[i].card.isMifare)
                            {
                                TrxLines[i].card.AddEntitlements(TrxLines[j].ProductID);
                            }

                            #region Check Guest Card Credit Limit 
                            if (TrxLines[i].card.technician_card != 'Y')
                            {
                                //Check transaction limit
                                double cardTrxCredit = TrxLines[i].card.addCredits + TrxLines[i].card.addCreditPlusCardBalance + TrxLines[i].VariableCreditPlusCredits;
                                if (!string.IsNullOrEmpty(cardtrxLimit))
                                {
                                    if (Convert.ToInt32(cardtrxLimit) > 0)
                                    {
                                        if (TrxLines[i].card.addCredits != 0 || TrxLines[i].card.addCreditPlusCardBalance != 0 || TrxLines[i].VariableCreditPlusCredits != 0)
                                        {
                                            if ((cardTrxCredit) > Convert.ToInt32(cardtrxLimit))
                                            {
                                                message = Utilities.MessageUtils.getMessage(1166);
                                                return 2;
                                            }
                                        }
                                    }
                                }
                                //check card credit limit
                                double cardTotalCredit = TrxLines[i].card.credits + TrxLines[i].card.CreditPlusCredits + TrxLines[i].card.CreditPlusCardBalance + TrxLines[i].card.addCredits + TrxLines[i].card.addCreditPlusCardBalance + TrxLines[i].VariableCreditPlusCredits;
                                if (!string.IsNullOrEmpty(cardCreditLimit))
                                {
                                    if (Convert.ToInt32(cardCreditLimit) > 0)
                                    {
                                        if (TrxLines[i].card.addCredits != 0 || TrxLines[i].card.addCreditPlusCardBalance != 0 || TrxLines[i].VariableCreditPlusCredits != 0)
                                        {
                                            if ((cardTotalCredit) > Convert.ToInt32(cardCreditLimit))
                                            {
                                                message = Utilities.MessageUtils.getMessage(1168);
                                                return 1;
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion

                            TrxLines[j].LineProcessed = true;
                        }
                    }

                    // card id is -1 or card id does not exist in db (this happens when previous save was unsuccessful. ard object will have a card Id which was rolled back
                    if (TrxLines[i].card.card_id == -1
                        || (TrxLines[i].card.CardStatus == "NEW"
                            && Utilities.executeScalar(@"select top 1 1 
                                                        from cards 
                                                        where card_id = @cardId",
                                                        TrxTransacation,
                                                        new SqlParameter("@cardId", TrxLines[i].card.card_id)) == null))
                    {
                        TrxLines[i].card.face_value = TrxLines[i].face_value;
                        try
                        {
                            TrxLines[i].card.createCard(TrxTransacation);
                        }
                        catch (Exception ex)
                        {
                            log.Error("Error occurred while creating the new card", ex);
                            TrxLines[i].card.CardStatus = "NEW";
                            message = ex.Message;
                            if (SQLTrx == null) //SQLTransaction handled locally
                                TrxTransacation.Rollback();
                            if (TrxCnn != null)
                                TrxCnn.Close();

                            log.LogMethodExit(1);
                            return 1;
                        }
                    }
                    else // recharge card
                    {
                        try
                        {
                            AccountBL accountBL = new AccountBL(Utilities.ExecutionContext, TrxLines[i].card.card_id, false, false, TrxTransacation);
                            if (accountBL.IsAccountUpdatedByOtherTransactions(GameCardReadTime, TrxTransacation))
                            {
                                message = Utilities.MessageUtils.getMessage(354);
                                if (SQLTrx == null) //SQLTransaction handled locally
                                    TrxTransacation.Rollback();
                                if (TrxCnn != null)
                                    TrxCnn.Close();

                                log.LogMethodExit(1);
                                return 1;
                            }

                            TrxLines[i].card.rechargeCard(TrxTransacation);

                            // if any of recharged cards same as payment card, update its read time to current time so that later validation does not fail
                            if (TransactionPaymentsDTOList.Exists(x => x.paymentModeDTO != null && x.paymentModeDTO.IsDebitCard
                                                                  && x.CardId == TrxLines[i].card.card_id))
                                GameCardReadTime = Utilities.getServerTime();
                        }
                        catch (Exception ex)
                        {
                            log.Error("Error occurred while recharging the card", ex);
                            message = ex.Message;
                            if (SQLTrx == null) //SQLTransaction handled locally
                                TrxTransacation.Rollback();
                            if (TrxCnn != null)
                                TrxCnn.Close();

                            log.LogMethodExit(1);
                            return 1;
                        }
                    }

                    for (int j = i; j < TrxLines.Count; j++)
                    {
                        if (TrxLines[j].DBLineId == 0 && TrxLines[i].CardNumber == TrxLines[j].CardNumber && TrxLines[j].LineValid)
                        {
                            TrxLines[j].card = TrxLines[i].card;
                        }
                    }
                    if (PrimaryCard == null)
                    {
                        PrimaryCard = TrxLines[i].card;
                        if (PrimaryCard.customerDTO == null && this.customerDTO != null && this.customerDTO.Id > -1)
                        {
                            PrimaryCard.customerDTO = this.customerDTO;
                            PrimaryCard.customer_id = this.customerDTO.Id;
                            PrimaryCard.updateCustomer(TrxTransacation);
                        }
                    }
                }
                try { AssignPurchasedMembershipCheck(TrxLines[i], TrxTransacation); }
                catch (Exception ex)
                {
                    if (SQLTrx == null) //SQLTransaction handled locally
                        TrxTransacation.Rollback();
                    if (TrxCnn != null)
                        TrxCnn.Close();
                    message = ex.Message;
                    log.LogMethodExit(1);
                    return 1;
                }
            }

            // Split Product
            Dictionary<string, TransactionLine> mapSplitProductCards = new Dictionary<string, TransactionLine>();

            //// added 14-mar-2016
            //foreach (TransactionLine tlParent in TrxLines)
            //{
            //    if (!tlParent.LineValid || tlParent.card == null)
            //        continue;

            //    List<TransactionLine> childLines = new List<TransactionLine>();
            //    foreach (TransactionLine tlChild in TrxLines)
            //    {
            //        if (tlParent != tlChild && tlChild.LineValid && tlChild.card != null && tlParent == tlChild.ParentLine)
            //        {
            //            childLines.Add(tlChild);
            //        }
            //    }

            //    if (childLines.Count > 0)
            //    {
            //        TaskProcs tp = new TaskProcs(Utilities);
            //        int credits = (int)(tlParent.Credits / (1 + childLines.Count));
            //        int bonus = (int)(tlParent.Bonus / (1 + childLines.Count));
            //        int courtesy = (int)(tlParent.Courtesy / (1 + childLines.Count));
            //        int tickets = (int)(tlParent.Tickets / (1 + childLines.Count));

            //        List<int> childCardIds = new List<int>();
            //        foreach (TransactionLine tl in childLines)
            //        {
            //            if (!tp.BalanceTransfer(tlParent.card.card_id, tl.card.card_id, credits, bonus, courtesy, tickets, tl.ProductName, ref message, TrxTransacation))
            //            {
            //                TrxTransacation.Rollback();
            //                if (TrxCnn != null)
            //                    TrxCnn.Close();

            //                log.LogVariableState("message ", message);
            //                log.LogMethodExit(1);
            //                return 1;
            //            }

            //            childCardIds.Add(tl.card.card_id);
            //        }

            //        int[] childcardIdArray = childCardIds.ToArray();

            //        tp.LinkChildCard(tlParent.card.card_id, TrxTransacation, childcardIdArray);
            //    }
            //}
            ////end add
            if (Order != null)
            {
                string finalMsg1 = MessageContainerList.GetMessage(Utilities.ExecutionContext, "Saving order entry.");
                SendMessageToStatusMsgQueue(finalMsg1, 1, 0);
                Order.Save(TrxTransacation);
                SendMessageToStatusMsgQueue(finalMsg1, 1, 1);
            }

            SetServiceCharges(TrxTransacation);
            SetAutoGratuityAmount(TrxTransacation);

            string trxUpdCommandText, trxInsCommandText;

            trxUpdCommandText = @"update trx_header set 
                                TrxAmount = @TrxAmount, TrxDiscountPercentage = @TrxDiscountPercentage, TaxAmount = @TaxAmount, 
                                TrxNetAmount = @TrxNetAmount, pos_machine = @pos_machine, 
                                Status = @Status, PaymentReference = @PaymentReference,
                                OrderTypeGroupId = @OrderTypeGroupId,PrimaryCardId = @PrimaryCardId, Remarks = @Remarks,
                                OrderId = @OrderId, TrxProfileId = @TrxProfileId, LastUpdateTime = getdate(), LastUpdatedBy = @loginId,
                                Original_System_Reference = isnull(Original_System_Reference, @originalSystemReference),
                                CustomerId = @customerId,
                                SaveStartTime = case when @SaveStartTime IS NULL
                                                     then SaveStartTime
                                                     else @SaveStartTime
                                                 end,
                                SaveEndTime = case when @SaveEndTime IS NULL
                                                     then SaveEndTime
                                                     else @SaveEndTime
                                                 end,
                                PrintStartTime = case when @PrintStartTime IS NULL
                                                     then PrintStartTime
                                                     else @PrintStartTime
                                                 end,
                                PrintEndTime = case when @PrintEndTime IS NULL
                                                     then PrintEndTime
                                                     else @PrintEndTime
                                                 end
                            where TrxId = @TrxId";

            //14-mar-2016 @trxDate
            trxInsCommandText = @"Insert into trx_header ( 
                                TrxDate, TrxAmount, TrxDiscountPercentage, TaxAmount, 
                                TrxNetAmount, pos_machine, user_id,
                                CashAmount, CreditCardAmount, GameCardAmount, 
                                PaymentReference,
                                PrimaryCardId, POSTypeId, Remarks, POSMachineId, OtherPaymentModeAmount,
                                Status, OrderId, TrxProfileId,
                                LastUpdateTime, LastUpdatedBy, site_id, CustomerId,
                                OriginalTrxId, CreatedBy, OrderTypeGroupId, 
                                External_System_Reference, CreationDate, CustomerIdentifier, GuestContactEmail, GuestContactEmailHash,
                                GuestContactNumber, GuestContactNumberHash, SaveStartTime, SaveEndTime, PrintStartTime, PrintEndTime, TrxInitiatedTime) 
                            values (
                                @trxDate, @TrxAmount, @TrxDiscountPercentage, @TaxAmount, 
                                @TrxNetAmount, @pos_machine, @user_id, 
                                0, 0, 0, 
                                @PaymentReference,
                                @PrimaryCardId, @POSTypeId, @Remarks, @POSMachineId, 0, 
                                @Status, @OrderId, @TrxProfileId,
                                getdate(), @loginId, @siteId, @customerId, 
                                @OriginalTrxId, @user_id, @OrderTypeGroupId, 
                                @externalSystemReference, getdate(), @CustomerIdentifier,
                                ENCRYPTBYPASSPHRASE(@passPhrase, @GuestContactEmail),
                                hashbytes('SHA2_256',convert(nvarchar(max), upper(@GuestContactEmailHash))),
                                ENCRYPTBYPASSPHRASE(@passPhrase, @GuestContactNumber),
                                hashbytes('SHA2_256',convert(nvarchar(max), upper(@GuestContactNumberHash))),
                                @SaveStartTime, @SaveEndTime, @PrintStartTime, @PrintEndTime, @TrxInitiatedTime); 
                            select @@identity, getdate();";

            bool insertTrx = true;
            if (Trx_id > 0)
            {
                if (Utilities.executeScalar("select top 1 1 from trx_header where trxId = @trxId",
                                             TrxTransacation,
                                             new SqlParameter("@trxId", Trx_id)) != null)
                    insertTrx = false;

                log.LogVariableState("@trxId", Trx_id);
            }

            Trxcmd.Parameters.Clear();
            Trxcmd.Parameters.AddWithValue("@TrxAmount", Transaction_Amount + PaymentCreditCardSurchargeAmount);
            if (Transaction_Amount + PaymentCreditCardSurchargeAmount == 0)
                Trxcmd.Parameters.AddWithValue("@TrxDiscountPercentage", 0);
            else
                Trxcmd.Parameters.AddWithValue("@TrxDiscountPercentage", 100.0 * (1.0 - (Transaction_Amount - Discount_Amount + PaymentCreditCardSurchargeAmount) / (Transaction_Amount + PaymentCreditCardSurchargeAmount)));
            Trxcmd.Parameters.AddWithValue("@Taxamount", Tax_Amount);
            Trxcmd.Parameters.AddWithValue("@TrxNetAmount", Net_Transaction_Amount + PaymentCreditCardSurchargeAmount);
            Trxcmd.Parameters.AddWithValue("@pos_machine", POSMachine);
            Trxcmd.Parameters.AddWithValue("@user_id", Utilities.ParafaitEnv.User_Id);
            Trxcmd.Parameters.AddWithValue("@loginId", Utilities.ParafaitEnv.LoginID);
            Trxcmd.Parameters.AddWithValue("@PaymentReference", string.IsNullOrEmpty(PaymentReference) ? DBNull.Value : (object)PaymentReference);
            Trxcmd.Parameters.AddWithValue("@Remarks", Remarks);
            Trxcmd.Parameters.AddWithValue("@Status", Status.ToString());
            Trxcmd.Parameters.AddWithValue("@OrderId", Order == null || Order.OrderHeaderDTO.OrderId == -1 ? DBNull.Value : (object)Order.OrderHeaderDTO.OrderId);
            Trxcmd.Parameters.AddWithValue("@TrxProfileId", TrxProfileId == -1 ? DBNull.Value : (object)TrxProfileId);
            Trxcmd.Parameters.AddWithValue("@OriginalTrxId", OriginalTrxId == -1 ? DBNull.Value : (object)OriginalTrxId);//Added 22-Jun-2016
            Trxcmd.Parameters.AddWithValue("@OrderTypeGroupId", OrderTypeGroupId == -1 ? DBNull.Value : (object)OrderTypeGroupId);
            Trxcmd.Parameters.AddWithValue("@externalSystemReference", string.IsNullOrEmpty(externalSystemReference) ? DBNull.Value : (object)externalSystemReference);
            Trxcmd.Parameters.AddWithValue("@SaveStartTime", SaveStartTime == null ? (object)DBNull.Value : SaveStartTime);
            Trxcmd.Parameters.AddWithValue("@SaveEndTime", SaveEndTime == null ? (object)DBNull.Value : SaveEndTime);
            Trxcmd.Parameters.AddWithValue("@PrintStartTime", PrintStartTime == null ? (object)DBNull.Value : PrintStartTime);
            Trxcmd.Parameters.AddWithValue("@PrintEndTime", PrintEndTime == null ? (object)DBNull.Value : PrintEndTime);
            Trxcmd.Parameters.AddWithValue("@TrxInitiatedTime", TrxInitiatedTime == null ? (object)DBNull.Value : TrxInitiatedTime);

            log.LogVariableState("@TrxDiscountPercentage", 100.0 * (1.0 - (Transaction_Amount - Discount_Amount + PaymentCreditCardSurchargeAmount) / (Transaction_Amount + PaymentCreditCardSurchargeAmount)));
            log.LogVariableState("@Taxamount", Tax_Amount);
            log.LogVariableState("@TrxNetAmount", Net_Transaction_Amount + PaymentCreditCardSurchargeAmount);
            log.LogVariableState("@pos_machine", POSMachine);
            log.LogVariableState("@user_id", Utilities.ParafaitEnv.User_Id);
            log.LogVariableState("@loginId", Utilities.ParafaitEnv.LoginID);
            log.LogVariableState("@PaymentReference", string.IsNullOrEmpty(PaymentReference) ? DBNull.Value : (object)PaymentReference);
            log.LogVariableState("@Remarks", Remarks);
            log.LogVariableState("@Status", Status.ToString());
            log.LogVariableState("@OrderId", Order == null || Order.OrderHeaderDTO.OrderId == -1 ? DBNull.Value : (object)Order.OrderHeaderDTO.OrderId);
            log.LogVariableState("@TrxProfileId", TrxProfileId == -1 ? DBNull.Value : (object)TrxProfileId);
            log.LogVariableState("@OriginalTrxId", OriginalTrxId == -1 ? DBNull.Value : (object)OriginalTrxId);//Added 22-Jun-2016
            log.LogVariableState("@OrderTypeGroupId", OrderTypeGroupId == -1 ? DBNull.Value : (object)OrderTypeGroupId);
            log.LogVariableState("@externalSystemReference", string.IsNullOrEmpty(externalSystemReference) ? DBNull.Value : (object)externalSystemReference);

            if (Utilities.ParafaitEnv.POSMachineId == -1)
            {
                Trxcmd.Parameters.AddWithValue("@POSMachineId", DBNull.Value);
                log.LogVariableState("@POSMachineId", DBNull.Value);
            }
            else
            {
                Trxcmd.Parameters.AddWithValue("@POSMachineId", POSMachineId);
                log.LogVariableState("@POSMachineId", POSMachineId);
            }

            if (Utilities.ParafaitEnv.POSTypeId != -1)
            {
                Trxcmd.Parameters.AddWithValue("@POSTypeId", POSTypeId);
                log.LogVariableState("@POSTypeId", POSTypeId);
            }
            else
            {
                Trxcmd.Parameters.AddWithValue("@POSTypeId", DBNull.Value);
                log.LogVariableState("@POSTypeId", DBNull.Value);
            }

            if (PrimaryCard != null && PrimaryCard.card_id != -1)
            {
                Trxcmd.Parameters.AddWithValue("@PrimaryCardId", PrimaryCard.card_id);
                log.LogVariableState("@PrimaryCardId", PrimaryCard.card_id);
            }
            else
            {
                Trxcmd.Parameters.AddWithValue("@PrimaryCardId", DBNull.Value);
                log.LogVariableState("@PrimaryCardId", DBNull.Value);
            }

            if (!string.IsNullOrEmpty(customerIdentifier))
            {
                String guestEmail = null;
                String guestPhone = null;

                string encryptedCustomerIdentifier = Encryption.Encrypt(customerIdentifier);
                if (customerIdentifier.Contains("|"))
                {
                    String[] emailPhone = customerIdentifier.Split('|');
                    for(int i = 0; i < emailPhone.Length; i++)
                    {
                        if(!string.IsNullOrWhiteSpace(emailPhone[i]))
                        {
                            if (Regex.IsMatch(emailPhone[i], @"^(\+\d{1,3}[- ]?)?[0-9]+$"))
                            {
                                guestPhone = emailPhone[i];
                            }
                            else
                            {
                                guestEmail = emailPhone[i];
                            }
                        }
                    }
                    log.Debug("Guest Email" + guestEmail);
                    log.Debug("Guest Phone" + guestEmail);
                }
                else
                {
                    if (Regex.IsMatch(customerIdentifier, @"^[0-9]+$"))
                    {
                        guestPhone = customerIdentifier;
                    }
                    else
                    {
                        guestEmail = customerIdentifier;
                    }
                }

                if (!string.IsNullOrWhiteSpace(guestEmail))
                {
                    Trxcmd.Parameters.AddWithValue("@GuestContactEmail", guestEmail);
                    Trxcmd.Parameters.AddWithValue("@GuestContactEmailHash", guestEmail);
                    log.LogVariableState("@GuestContactEmail", guestEmail);
                }
                else
                {
                    Trxcmd.Parameters.AddWithValue("@GuestContactEmail", (object)DBNull.Value);
                    Trxcmd.Parameters.AddWithValue("@GuestContactEmailHash", (object)DBNull.Value);
                    log.LogVariableState("@GuestContactEmail", (object)DBNull.Value);
                }

                if (!string.IsNullOrWhiteSpace(guestPhone))
                {
                    Trxcmd.Parameters.AddWithValue("@GuestContactNumber", guestPhone);
                    Trxcmd.Parameters.AddWithValue("@GuestContactNumberHash", guestPhone);
                    log.LogVariableState("@GuestContactNumber", guestPhone);
                }
                else
                {
                    Trxcmd.Parameters.AddWithValue("@GuestContactNumber", (object)DBNull.Value);
                    Trxcmd.Parameters.AddWithValue("@GuestContactNumberHash", (object)DBNull.Value);
                    log.LogVariableState("@GuestContactNumber", (object)DBNull.Value);
                }
                Trxcmd.Parameters.AddWithValue("@CustomerIdentifier", encryptedCustomerIdentifier);
                log.LogVariableState("@CustomerIdentifier", DBNull.Value);
            }
            else
            {
                Trxcmd.Parameters.AddWithValue("@GuestContactEmail", DBNull.Value);
                log.LogVariableState("@GuestContactEmail", DBNull.Value);
                Trxcmd.Parameters.AddWithValue("@GuestContactEmailHash", DBNull.Value);
                log.LogVariableState("@GuestContactEmailHash", DBNull.Value);
                Trxcmd.Parameters.AddWithValue("@GuestContactNumber", DBNull.Value);
                log.LogVariableState("@GuestContactNumber", DBNull.Value);
                Trxcmd.Parameters.AddWithValue("@GuestContactNumberHash", DBNull.Value);
                log.LogVariableState("@GuestContactNumberHash", DBNull.Value);
                Trxcmd.Parameters.AddWithValue("@CustomerIdentifier", DBNull.Value);
                log.LogVariableState("@CustomerIdentifier", DBNull.Value);
            }

            Trxcmd.Parameters.AddWithValue("@passPhrase", Semnox.Core.Utilities.ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "CUSTOMER_ENCRYPTION_PASS_PHRASE"));

            //Begin:Added to associate the customer with the transaction on Dec-16-2015//
            if (PrimaryCard != null && PrimaryCard.customer_id != -1)
            {
                Trxcmd.Parameters.AddWithValue("@customerId", PrimaryCard.customer_id);
                log.LogVariableState("@customerId", PrimaryCard.customer_id);
            }
            else if (customerDTO != null && customerDTO.Id != -1)
            {
                Trxcmd.Parameters.AddWithValue("@customerId", customerDTO.Id);
                log.LogVariableState("@customerId", customerDTO.Id);
            }
            else
            {
                Trxcmd.Parameters.AddWithValue("@customerId", DBNull.Value);
                log.LogVariableState("@customerId", DBNull.Value);
            }
            //End:Added to associate the customer with the transaction on Dec-16-2015//

            if (Utilities.ParafaitEnv.IsCorporate == false || Utilities.ParafaitEnv.SiteId <= 0)
                site_id = DBNull.Value;
            else
                site_id = Utilities.ParafaitEnv.SiteId;

            Trxcmd.Parameters.AddWithValue("@siteId", site_id);
            log.LogVariableState("@siteId", site_id);

            // 14-Mar-2016
            //if (TrxDate == DateTime.MinValue)
            //    Trxcmd.Parameters.AddWithValue("@trxDate", DBNull.Value);
            //else
            Trxcmd.Parameters.AddWithValue("@trxDate", TrxDate);
            Trxcmd.Parameters["@trxDate"].SqlDbType = SqlDbType.DateTime;

            log.LogVariableState("@trxDate", TrxDate);


            try
            {
                if (insertTrx == false)
                {
                    Trxcmd.Parameters.AddWithValue("@TrxId", Trx_id);
                    //Begin:Added to update originalSystemReference with trxId on Nov-19-2015//
                    Trxcmd.Parameters.AddWithValue("@originalSystemReference", Utilities.ParafaitEnv.IsCorporate ? (object)Trx_id : DBNull.Value);
                    //End:Added to update originalSystemReference with trxId on Nov-19-2015//
                    Trxcmd.CommandText = trxUpdCommandText;
                    if (Trxcmd.ExecuteNonQuery() == 0)
                        insertTrx = true;
                }

                if (insertTrx)
                {
                    Trxcmd.CommandText = trxInsCommandText;
                    SqlDataAdapter da = new SqlDataAdapter(Trxcmd);
                    DataTable dtTrx = new DataTable();
                    da.Fill(dtTrx);
                    Trx_id = Convert.ToInt32(dtTrx.Rows[0][0]);
                    var trxGuidObj = Utilities.executeScalar("select guid from trx_Header where TrxId = @trxId", TrxTransacation, new SqlParameter("@trxId", Trx_id));
                    if (trxGuidObj != null)
                    {
                        trxGuid = trxGuidObj.ToString();
                    }
                    //Begin:Added to update originalSystemReference with trxId on Nov-19-2015//
                    try
                    {
                        if (Utilities.ParafaitEnv.IsCorporate)
                        {
                            originalSystemReference = Trx_id.ToString();
                            bool alreadExists = false;
                            do
                            {
                                transactionOTP = Utilities.GenerateRandomNumber(8, Utilities.RandomNumberType.Numeric);
                                alreadExists = AlreadyUsedOTP(transactionOTP, TrxTransacation);
                            }
                            while (alreadExists == true);

                            Trxcmd.CommandText = @"update trx_header set Original_System_Reference = @originalSystemReference, TransactionOTP = @transactionOTP where TrxId = @trxId";
                            Trxcmd.Parameters.AddWithValue("@originalSystemReference", originalSystemReference);
                            Trxcmd.Parameters.AddWithValue("@transactionOTP", transactionOTP);
                            Trxcmd.Parameters.AddWithValue("@trxId", Trx_id);
                            Trxcmd.ExecuteNonQuery();
                        }
                    }
                    catch (Exception ex)
                    {
                        log.Error("Not able to  update originalSystemReference and TransactionOTP with trxId", ex);
                    }
                    //End:Added to update originalSystemReference with trxId on Nov-19-2015//
                    TransactionDate = Convert.ToDateTime(dtTrx.Rows[0][1]);
                    da.Dispose();
                    dtTrx.Dispose();
                }
                DBReadTime = Utilities.getServerTime();
                if (insertTrx)
                {
                    if (ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "USE_FISCAL_PRINTER").Equals("Y"))
                    {
                        if (ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "FISCAL_PRINTER").Equals("ELTRADE"))
                        {
                            FiscalPrinter fiscalPrinter = new FiscalPrinter(Utilities);
                            fiscalPrinter = FiscalPrinterFactory.GetInstance().GetFiscalPrinter("ELTRADE");
                            this.externalSystemReference = fiscalPrinter.GetFiscalReference(Trx_id.ToString());
                            Trxcmd.Parameters.Clear();
                            if (string.IsNullOrEmpty(externalSystemReference))
                            {
                                TrxTransacation.Rollback();
                                if (TrxCnn != null)
                                { TrxCnn.Close(); }
                                log.LogMethodExit(1);
                                return 1;
                            }
                            Trxcmd.CommandText = @"update trx_header set External_System_Reference = @externalSystemReference where TrxId = @trxId";
                            Trxcmd.Parameters.AddWithValue("@externalSystemReference", externalSystemReference);
                            Trxcmd.Parameters.AddWithValue("@trxId", Trx_id);
                            Trxcmd.ExecuteNonQuery();
                        }
                    }
                }
                int line_number = 0;
                //for (int i = 0; i < TrxLines.Count; i++)
                //{
                //    if (TrxLines[i].LineValid)
                //        line_number = Math.Max(TrxLines[i].DBLineId, line_number);
                //}

                line_number = (int)Utilities.executeScalar("select isnull(max(lineId), 0) from trx_lines where TrxId = @trxId", TrxTransacation, new SqlParameter("@trxId", Trx_id));
                bool reservationTransaction = IsReservationTransaction(TrxTransacation);
                bool allowProductsToBeMarkedUnavailable = ParafaitDefaultContainerList.GetParafaitDefault<bool>(Utilities.ExecutionContext, "ALLOW_PRODUCTS_TOBE_MARKED_UNAVAILABLE");
                string lockerSelectionModeValue = Utilities.getParafaitDefaults("LOCKER_SELECTION_MODE");
                string onlineServiceUrl = Utilities.getParafaitDefaults("ONLINE_LOCKER_SERVICE_URL");
                int totalCount = TrxLines.Count;
                int currentCount = 1;
                for (int i = 0; i < TrxLines.Count; i++)
                {
                    if (TrxLines[i].LineValid)
                    {
                        if (TrxLines[i].Remarks != null)
                            TrxLines[i].Remarks.Trim();
                        object remarks = string.IsNullOrEmpty(TrxLines[i].Remarks) ? DBNull.Value : (object)TrxLines[i].Remarks.Trim();

                        ////Added on - 18-May-2016 for waiver implementation
                        //if (this.IsWaiverSigned)
                        //{
                        //    if (TrxLines[i].IsWaiverRequired == "Y")
                        //    {
                        //        TrxLines[i].IsWaiverRequired = "N";
                        //    }
                        //}
                        ////end

                        if (TrxLines[i].DBLineId > 0)
                        {
                            Trxcmd.CommandText = @"update trx_lines 
                                                    set Remarks = @Remarks, 
                                                        ReceiptPrinted = @ReceiptPrinted, 
                                                        UserPrice = @UserPrice, 
                                                        KOTPrintCount = @KOTPrintCount,
                                                        Price = @price,
                                                        Amount = @amount,
                                                        Quantity = @quantity,
                                                        IsWaiverSignRequired = @IsSignRequired,
                                                        tax_percentage = @tax_percentage,
                                                        LastUpdateDate = getdate(),
                                                        LastUpdatedBy = @loginId,
                                                        ProductDescription = @description,
                                                        AllocatedProductPrice = @allocatedProductPrice,
                                                        TrxProfileId=@trxProfileId,
                                                        OrderTypeId=@OrderTypeId,
                                                        ModifierSetId = @ModifierSetId,
                                                        comboProductId = @ComboproductId,
                                                        credits = @credits,
                                                        courtesy = @courtesy,
                                                        time = @time,
                                                        bonus = @bonus,
                                                        tickets = @tickets,
                                                        loyalty_points = @loyalyPoints,
                                                        ApprovedBy=@ApprovedBy
                                                where TrxId = @TrxId and LineId = @LineId";

                            Trxcmd.Parameters.Clear();
                            //Start: Modification for updating product description on 14-apr-2016
                            if (TrxLines[i].ParentModifierProductId > 0 && TrxLines[i].ProductTypeCode == "MANUAL")
                            {
                                Trxcmd.Parameters.AddWithValue("@description", TrxLines[i].ProductName);
                                log.LogVariableState("@description", TrxLines[i].ProductName);
                            }
                            else
                            {
                                Trxcmd.Parameters.AddWithValue("@description", DBNull.Value);
                                log.LogVariableState("@description", DBNull.Value);
                            }
                            //End: Modification for updating product description on 14-apr-2016


                            //Start:Modification for updating the AllocatedProductPrice on 12-sep-2017
                            if (TrxLines[i].ParentLine != null && TrxLines[i].ParentLine.ProductTypeCode == "COMBO" && TrxLines[i].ParentLine.Price == 0)
                            {
                                Trxcmd.Parameters.AddWithValue("@allocatedProductPrice", TrxLines[i].Price);
                                log.LogVariableState("@allocatedProductPrice", TrxLines[i].Price);
                            }
                            else
                            {
                                if (TrxLines[i].AllocatedProductPrice == 0)
                                    Trxcmd.Parameters.AddWithValue("@allocatedProductPrice", DBNull.Value);
                                else
                                    Trxcmd.Parameters.AddWithValue("@allocatedProductPrice", TrxLines[i].AllocatedProductPrice);
                                log.LogVariableState("@allocatedProductPrice", DBNull.Value);
                            }
                            //End:Modification for updating the AllocatedProductPrice on 12-sep-2017

                            Trxcmd.Parameters.AddWithValue("@LineId", TrxLines[i].DBLineId);
                            Trxcmd.Parameters.AddWithValue("@TrxId", Trx_id);

                            Trxcmd.Parameters.AddWithValue("@Remarks", remarks);
                            Trxcmd.Parameters.AddWithValue("@ReceiptPrinted", TrxLines[i].ReceiptPrinted);
                            Trxcmd.Parameters.AddWithValue("@UserPrice", TrxLines[i].UserPrice);
                            Trxcmd.Parameters.AddWithValue("@KOTPrintCount", TrxLines[i].KOTPrintCount);
                            Trxcmd.Parameters.AddWithValue("@price", TrxLines[i].Price);
                            Trxcmd.Parameters.AddWithValue("@quantity", TrxLines[i].quantity);
                            Trxcmd.Parameters.AddWithValue("@amount", TrxLines[i].LineAmount);
                            Trxcmd.Parameters.AddWithValue("@credits", TrxLines[i].Credits);
                            Trxcmd.Parameters.AddWithValue("@courtesy", TrxLines[i].Courtesy);
                            Trxcmd.Parameters.AddWithValue("@time", TrxLines[i].Time);
                            Trxcmd.Parameters.AddWithValue("@bonus", TrxLines[i].Bonus);
                            Trxcmd.Parameters.AddWithValue("@tickets", TrxLines[i].Tickets);
                            Trxcmd.Parameters.AddWithValue("@loyalyPoints", TrxLines[i].LoyaltyPoints);
                            Trxcmd.Parameters.AddWithValue("@ApprovedBy", TrxLines[i].ApprovedBy);

                            if (TrxLines[i].OrderTypeId < 0)
                            {
                                Trxcmd.Parameters.AddWithValue("@OrderTypeId", DBNull.Value);
                            }
                            else
                            {
                                Trxcmd.Parameters.AddWithValue("@OrderTypeId", TrxLines[i].OrderTypeId);
                            }
                            if (TrxLines[i].ModifierSetId == null ||
                                TrxLines[i].ModifierSetId == DBNull.Value ||
                                Convert.ToInt32(TrxLines[i].ModifierSetId) < 0)
                            {
                                Trxcmd.Parameters.AddWithValue("@ModifierSetId", DBNull.Value);
                            }
                            else
                            {
                                Trxcmd.Parameters.AddWithValue("@ModifierSetId", TrxLines[i].ModifierSetId);
                            }
                            Trxcmd.Parameters.AddWithValue("@IsSignRequired", TrxLines[i].IsWaiverRequired);// added on 18-May-2016 for waiver implementataion
                            Trxcmd.Parameters.AddWithValue("@tax_percentage", TrxLines[i].tax_percentage);// added on 18-May-2016 for waiver implementataion
                            Trxcmd.Parameters.AddWithValue("@trxProfileId", TrxLines[i].TrxProfileId == -1 ? ((TrxProfileId == -1) ? DBNull.Value : (object)TrxProfileId) : (object)TrxLines[i].TrxProfileId);
                            Trxcmd.Parameters.AddWithValue("@loginId", Utilities.ParafaitEnv.LoginID);
                            if (TrxLines[i].ComboproductId < 0)
                            {
                                Trxcmd.Parameters.AddWithValue("@ComboproductId", DBNull.Value);
                            }
                            else
                            {
                                Trxcmd.Parameters.AddWithValue("@ComboproductId", TrxLines[i].ComboproductId);
                            }

                            Trxcmd.ExecuteNonQuery();
                            if (TrxLines[i].TransactionDiscountsDTOList != null &&
                           TrxLines[i].TransactionDiscountsDTOList.Count > 0)
                                saveDiscountLines(i, TrxLines[i].DBLineId, TrxTransacation, ref message);


                            log.LogVariableState("@Remarks", remarks);
                            log.LogVariableState("@ReceiptPrinted", TrxLines[i].ReceiptPrinted);
                            log.LogVariableState("@UserPrice", TrxLines[i].UserPrice);
                            log.LogVariableState("@KOTPrintCount", TrxLines[i].KOTPrintCount);
                            log.LogVariableState("@price", TrxLines[i].Price);
                            log.LogVariableState("@quantity", TrxLines[i].quantity);
                            log.LogVariableState("@amount", TrxLines[i].LineAmount);
                            log.LogVariableState("@IsSignRequired", TrxLines[i].IsWaiverRequired);// added on 18-May-2016 for waiver implementataion
                            log.LogVariableState("@tax_percentage", TrxLines[i].tax_percentage);// added on 18-May-2016 for waiver implementataion
                            log.LogVariableState("@trxProfileId", TrxLines[i].TrxProfileId == -1 ? ((TrxProfileId == -1) ? DBNull.Value : (object)TrxProfileId) : (object)TrxLines[i].TrxProfileId);
                            log.LogVariableState("@ComboproductId", TrxLines[i].ComboproductId);
                            log.LogVariableState("@ApprovedBy", TrxLines[i].ApprovedBy);


                            //Start - Updating Trx User Verification information
                            if (TrxLines[i].userVerificationId != null && !String.IsNullOrEmpty(TrxLines[i].userVerificationId))
                            {

                                parentUpdateTrxmd.CommandText = @"IF EXISTS (SELECT 1 
                                                                               FROM TrxUserVerificationDetails 
                                                                              WHERE  TrxId = @transactionId and LineId = @lineId)        
                                                                        BEGIN 
                                                                             UPDATE TrxUserVerificationDetails 
                                                                                SET VerificationId = @verificationId,
                                                                                    VerificationName = @verificationName, 
                                                                                    VerificationRemarks = @verificationRemarks, 
                                                                                    IsActive = 'Y',
                                                                                    LastUpdatedBy = @lastUpdatedBy, 
                                                                                    LastUpdateDate = getdate()
                                                                              WHERE TrxId = @transactionId and LineId = @lineId
                                                                        END                             
                                                                     ELSE
                                                                        BEGIN
                                                                            insert into TrxUserVerificationDetails 
                                                                                 (TrxId, LineId, VerificationId, VerificationName, 
                                                                                  VerificationRemarks, IsActive, GUID, site_id, 
                                                                                  CreatedBy, CreationDate, LastUpdatedBy, LastUpdateDate) 
                                                                             values (@transactionId, @lineId, @verificationId, @verificationName, 
                                                                                     @verificationRemarks, 'Y', 
                                                                                     newid(), @site_id, @lastUpdatedBy, getdate(), 
                                                                                     @lastUpdatedBy, getdate())
                                                                        END";

                                parentUpdateTrxmd.Parameters.Clear();
                                parentUpdateTrxmd.Parameters.AddWithValue("@transactionId", Trx_id);
                                parentUpdateTrxmd.Parameters.AddWithValue("@lineId", TrxLines[i].DBLineId);
                                parentUpdateTrxmd.Parameters.AddWithValue("@verificationId", TrxLines[i].userVerificationId);
                                parentUpdateTrxmd.Parameters.AddWithValue("@verificationName", string.IsNullOrEmpty(TrxLines[i].userVerificationName) ? DBNull.Value : (object)TrxLines[i].userVerificationName);
                                parentUpdateTrxmd.Parameters.AddWithValue("@verificationRemarks", string.IsNullOrEmpty(TrxLines[i].userVerificationRemarks) ? DBNull.Value : (object)TrxLines[i].userVerificationRemarks);
                                parentUpdateTrxmd.Parameters.AddWithValue("@site_id", site_id);
                                parentUpdateTrxmd.Parameters.AddWithValue("@lastUpdatedBy", Utilities.ParafaitEnv.LoginID);
                                parentUpdateTrxmd.ExecuteNonQuery();

                                log.LogVariableState("@transactionId", Trx_id);
                                log.LogVariableState("@lineId", TrxLines[i].DBLineId);
                                log.LogVariableState("@verificationId", TrxLines[i].userVerificationId);
                                log.LogVariableState("@verificationName", string.IsNullOrEmpty(TrxLines[i].userVerificationName) ? DBNull.Value : (object)TrxLines[i].userVerificationName);
                                log.LogVariableState("@verificationRemarks", string.IsNullOrEmpty(TrxLines[i].userVerificationRemarks) ? DBNull.Value : (object)TrxLines[i].userVerificationRemarks);
                                log.LogVariableState("@createdBy", Utilities.ParafaitEnv.LoginID);
                                log.LogVariableState("@lastUpdatedBy", Utilities.ParafaitEnv.LoginID);
                            }
                            //End - Updating Trx User Verification information

                            //Start - Modification Added on 14-3-2016 for updating Parent ModifierProdcut Details

                            if (TrxLines[i].ParentModifierProductId > 0 && TrxLines[i].ProductTypeCode == "MANUAL")
                            {
                                parentUpdateTrxmd.CommandText = @"Update TrxParentModifierDetails set ParentModifierId = @parentModifierId, ParentProductId = @parentProductId, 
                                                  ParentProductName = @parentProductName, ParentPrice = @parentPrice, 
                                                  LastUpdatedBy = @lastUpdatedBy, LastUpdatedTime = @lastUpdatedTime 
                                                  where TrxId = @transactionId and LineId = @lineId";
                                parentUpdateTrxmd.Parameters.Clear();
                                parentUpdateTrxmd.Parameters.AddWithValue("@transactionId", Trx_id);
                                parentUpdateTrxmd.Parameters.AddWithValue("@lineId", TrxLines[i].DBLineId);
                                parentUpdateTrxmd.Parameters.AddWithValue("@parentModifierId", TrxLines[i].ParentModifierSetId);
                                parentUpdateTrxmd.Parameters.AddWithValue("@parentProductId", TrxLines[i].ParentModifierProductId);
                                parentUpdateTrxmd.Parameters.AddWithValue("@parentProductName", TrxLines[i].ParentModifierName);
                                parentUpdateTrxmd.Parameters.AddWithValue("@parentPrice", TrxLines[i].ParentModifierPrice);
                                parentUpdateTrxmd.Parameters.AddWithValue("@lastUpdatedBy", Utilities.ParafaitEnv.Username);
                                parentUpdateTrxmd.Parameters.AddWithValue("@lastUpdatedTime", ServerDateTime.Now);
                                parentUpdateTrxmd.ExecuteNonQuery();

                                log.LogVariableState("@transactionId", Trx_id);
                                log.LogVariableState("@lineId", TrxLines[i].DBLineId);
                                log.LogVariableState("@parentModifierId", TrxLines[i].ParentModifierSetId);
                                log.LogVariableState("@parentProductId", TrxLines[i].ParentModifierProductId);
                                log.LogVariableState("@parentProductName", TrxLines[i].ParentModifierName);
                                log.LogVariableState("@parentPrice", TrxLines[i].ParentModifierPrice);
                                log.LogVariableState("@lastUpdatedBy", Utilities.ParafaitEnv.Username);
                                log.LogVariableState("@lastUpdatedTime", ServerDateTime.Now);
                            }
                            //End - Modification Added on 14-3-2016 for updating Parent ModifierProdcut Details
                            if (TrxLines[i].ProductTypeCode == "RENTAL")
                            {

                                if (TrxLines[i].TransactionReservationScheduleDTOList != null)
                                {
                                    try
                                    {
                                        TrxLines[i].SaveTransactionReservationSchedule(Utilities.ExecutionContext, (int)Trx_id, TrxTransacation);
                                    }
                                    catch (Exception ex)
                                    {
                                        log.Error(ex);
                                        TrxTransacation.Rollback();
                                        if (TrxCnn != null)
                                        { TrxCnn.Close(); }
                                        log.LogMethodExit(1);
                                        return 1;
                                    }
                                }
                            }
                            int trxLineNo = (TrxLines[i].DBLineId > 0 ? TrxLines[i].DBLineId : (i + 1));
                            SaveSubscriptionDetails(TrxLines[i], trxLineNo, closeTransaction, TrxTransacation);
                            if (TrxLines[i].ProductTypeCode == "CHECK-IN")
                            {
                                UpdateCheckInLine(TrxLines[i], trxLineNo, TrxTransacation);
                                //UpdateNotificationTagIssuedLine(TrxLines[i], line_number, TrxTransacation);
                            }
                        }
                        else
                        {
                            Trxcmd.CommandText = @"insert into trx_lines (LineId, TrxId, product_id, price, quantity, amount, card_number,
                                                        card_id, credits, courtesy, bonus, time, tickets, loyalty_points, tax_id, tax_percentage, Remarks,
                                                        Promotion_id, ParentLineId, ReceiptPrinted, UserPrice, CreditPlusConsumptionId,
                                                        site_id, ProductDescription, IsWaiverSignRequired, GameplayId, OriginalLineID, KOTPrintCount, AllocatedProductPrice,TrxProfileId,
                                                        createdBy, creationDate, LastUpdatedBy, LastUpdateDate, OrderTypeId,ModifierSetId, comboProductId,ApprovedBy)
                                            values (@LineId, @TrxId, @product_id, @price, @quantity, @amount, @card_number, 
                                                    @card_id, @credits, @courtesy, @bonus, @time, @tickets, @loyalty_points,@tax_id, @tax_percentage, @Remarks, 
                                                    @PromotionId, @ParentLineId, @ReceiptPrinted, @UserPrice, @CreditPlusConsumptionId,
                                                    @site_id, @description, @IsSignRequired, @GameplayId, @OriginalLineID, @KOTPrintCount, @allocatedProductPrice, @trxProfileId,
                                                    @loginId, getdate(), @loginId, getdate(), @OrderTypeId, @ModifierSetId, @ComboproductId,@ApprovedBy)";

                            Trxcmd.Parameters.Clear();
                            if (TrxLines[i].ParentModifierProductId > 0 && TrxLines[i].ProductTypeCode == "MANUAL")
                            {
                                Trxcmd.Parameters.AddWithValue("@description", TrxLines[i].ProductName);
                                log.LogVariableState("@description", TrxLines[i].ProductName);
                            }
                            else
                            {
                                Trxcmd.Parameters.AddWithValue("@description", DBNull.Value);
                                log.LogVariableState("@description", DBNull.Value);
                            }
                            if (TrxLines[i].ParentLine != null && TrxLines[i].ParentLine.ProductTypeCode == "COMBO" && TrxLines[i].ParentLine.Price == 0)
                            {
                                Trxcmd.Parameters.AddWithValue("@allocatedProductPrice", TrxLines[i].Price);
                                log.LogVariableState("@allocatedProductPrice", TrxLines[i].Price);
                            }
                            else
                            {
                                if (TrxLines[i].AllocatedProductPrice == 0)
                                    Trxcmd.Parameters.AddWithValue("@allocatedProductPrice", DBNull.Value);
                                else
                                    Trxcmd.Parameters.AddWithValue("@allocatedProductPrice", TrxLines[i].AllocatedProductPrice);
                                log.LogVariableState("@allocatedProductPrice", DBNull.Value);
                            }
                            if (TrxLines[i].OrderTypeId != -1)
                            {
                                Trxcmd.Parameters.AddWithValue("@OrderTypeId", TrxLines[i].OrderTypeId);
                            }
                            else
                            {
                                Trxcmd.Parameters.AddWithValue("@OrderTypeId", DBNull.Value);
                            }

                            Trxcmd.Parameters.AddWithValue("@LineId", ++line_number);
                            Trxcmd.Parameters.AddWithValue("@TrxId", Trx_id);
                            Trxcmd.Parameters.AddWithValue("@product_id", TrxLines[i].ProductID);
                            Trxcmd.Parameters.AddWithValue("@price", TrxLines[i].Price);
                            Trxcmd.Parameters.AddWithValue("@quantity", TrxLines[i].quantity);
                            Trxcmd.Parameters.AddWithValue("@amount", TrxLines[i].LineAmount);
                            Trxcmd.Parameters.AddWithValue("@OriginalLineID", TrxLines[i].OriginalLineID == -1 ? DBNull.Value : (object)TrxLines[i].OriginalLineID);//Added 22-Jun-2016);
                            Trxcmd.Parameters.AddWithValue("@ApprovedBy", TrxLines[i].ApprovedBy);

                            log.LogVariableState("@LineId", line_number);
                            log.LogVariableState("@TrxId", Trx_id);
                            log.LogVariableState("@product_id", TrxLines[i].ProductID);
                            log.LogVariableState("@price", TrxLines[i].Price);
                            log.LogVariableState("@quantity", TrxLines[i].quantity);
                            log.LogVariableState("@amount", TrxLines[i].LineAmount);
                            log.LogVariableState("@OriginalLineID", TrxLines[i].OriginalLineID == -1 ? DBNull.Value : (object)TrxLines[i].OriginalLineID);
                            log.LogVariableState("@ApprovedBy", TrxLines[i].ApprovedBy);

                            if (!DBNull.Value.Equals(TrxLines[i].KOTPrintCount))
                            {
                                if (Convert.ToInt32(TrxLines[i].KOTPrintCount) > 0)
                                {
                                    Trxcmd.Parameters.AddWithValue("@KOTPrintCount", TrxLines[i].KOTPrintCount);
                                    log.LogVariableState("@KOTPrintCount", TrxLines[i].KOTPrintCount);
                                }
                                else
                                {
                                    Trxcmd.Parameters.AddWithValue("@KOTPrintCount", DBNull.Value);
                                    log.LogVariableState("@KOTPrintCount", DBNull.Value);
                                }
                            }
                            else
                            {
                                Trxcmd.Parameters.AddWithValue("@KOTPrintCount", DBNull.Value);
                                log.LogVariableState("@KOTPrintCount", DBNull.Value);
                            }
                            if (string.IsNullOrEmpty(TrxLines[i].CardNumber))
                            {
                                Trxcmd.Parameters.AddWithValue("@card_number", DBNull.Value);
                                Trxcmd.Parameters.AddWithValue("@card_id", DBNull.Value);

                                log.LogVariableState("@card_number", DBNull.Value);
                                log.LogVariableState("@card_id", DBNull.Value);
                            }
                            else
                            {
                                Trxcmd.Parameters.AddWithValue("@card_number", TrxLines[i].CardNumber);
                                Trxcmd.Parameters.AddWithValue("@card_id", TrxLines[i].card.card_id);

                                log.LogVariableState("@card_number", TrxLines[i].CardNumber);
                                log.LogVariableState("@card_id", TrxLines[i].card.card_id);
                            }
                            Trxcmd.Parameters.AddWithValue("@credits", TrxLines[i].Credits);
                            Trxcmd.Parameters.AddWithValue("@courtesy", TrxLines[i].Courtesy);
                            Trxcmd.Parameters.AddWithValue("@bonus", TrxLines[i].Bonus);
                            Trxcmd.Parameters.AddWithValue("@time", TrxLines[i].Time);
                            Trxcmd.Parameters.AddWithValue("@tickets", TrxLines[i].Tickets);
                            if (TrxLines[i].LoyaltyPoints != 0)
                            {
                                Trxcmd.Parameters.AddWithValue("@loyalty_points", TrxLines[i].LoyaltyPoints);
                            }
                            else
                            {
                                Trxcmd.Parameters.AddWithValue("@loyalty_points", DBNull.Value);
                            }
                            log.LogVariableState("@credits", TrxLines[i].Credits);
                            log.LogVariableState("@courtesy", TrxLines[i].Courtesy);
                            log.LogVariableState("@bonus", TrxLines[i].Bonus);
                            log.LogVariableState("@time", TrxLines[i].Time);
                            log.LogVariableState("@tickets", TrxLines[i].Tickets);

                            if (TrxLines[i].tax_id == -1)
                            {
                                Trxcmd.Parameters.AddWithValue("@tax_id", DBNull.Value);
                                log.LogVariableState("@tax_id", DBNull.Value);
                            }
                            else
                            {
                                Trxcmd.Parameters.AddWithValue("@tax_id", TrxLines[i].tax_id);
                                log.LogVariableState("@tax_id", TrxLines[i].tax_id);
                            }

                            if (TrxLines[i].PromotionId == -1)
                            {
                                Trxcmd.Parameters.AddWithValue("@PromotionId", DBNull.Value);
                                log.LogVariableState("@PromotionId", DBNull.Value);
                            }
                            else
                            {
                                Trxcmd.Parameters.AddWithValue("@PromotionId", TrxLines[i].PromotionId);
                                log.LogVariableState("@PromotionId", TrxLines[i].PromotionId);
                            }

                            Trxcmd.Parameters.AddWithValue("@Remarks", remarks);
                            Trxcmd.Parameters.AddWithValue("@tax_percentage", TrxLines[i].tax_percentage);

                            Trxcmd.Parameters.AddWithValue("@IsSignRequired", TrxLines[i].IsWaiverRequired); // added on 18-May-2016 for waiver implementation

                            log.LogVariableState("@Remarks", remarks);
                            log.LogVariableState("@tax_percentage", TrxLines[i].tax_percentage);

                            log.LogVariableState("@IsSignRequired", TrxLines[i].IsWaiverRequired);

                            if (TrxLines[i].ParentLine != null)
                            {
                                Trxcmd.Parameters.AddWithValue("@ParentLineId", (TrxLines[i] == TrxLines[i].ParentLine ? line_number : TrxLines[i].ParentLine.DBLineId));
                                log.LogVariableState("@ParentLineId", (TrxLines[i] == TrxLines[i].ParentLine ? line_number : TrxLines[i].ParentLine.DBLineId));
                            }
                            else
                            {
                                Trxcmd.Parameters.AddWithValue("@ParentLineId", DBNull.Value);
                                log.LogVariableState("@ParentLineId", DBNull.Value);
                            }
                            Trxcmd.Parameters.AddWithValue("@trxProfileId", TrxLines[i].TrxProfileId == -1 ? ((TrxProfileId == -1) ? DBNull.Value : (object)TrxProfileId) : (object)TrxLines[i].TrxProfileId);
                            Trxcmd.Parameters.AddWithValue("@ReceiptPrinted", false);
                            Trxcmd.Parameters.AddWithValue("@UserPrice", TrxLines[i].UserPrice);
                            Trxcmd.Parameters.AddWithValue("@CreditPlusConsumptionId", TrxLines[i].CreditPlusConsumptionId > 0 ? (object)TrxLines[i].CreditPlusConsumptionId : DBNull.Value);
                            Trxcmd.Parameters.AddWithValue("@site_id", site_id);
                            Trxcmd.Parameters.AddWithValue("@loginId", Utilities.ParafaitEnv.LoginID);

                            log.LogVariableState("@trxProfileId", TrxLines[i].TrxProfileId == -1 ? ((TrxProfileId == -1) ? DBNull.Value : (object)TrxProfileId) : (object)TrxLines[i].TrxProfileId);
                            log.LogVariableState("@ReceiptPrinted", false);
                            log.LogVariableState("@UserPrice", TrxLines[i].UserPrice);
                            log.LogVariableState("@CreditPlusConsumptionId", TrxLines[i].CreditPlusConsumptionId > 0 ? (object)TrxLines[i].CreditPlusConsumptionId : DBNull.Value);
                            log.LogVariableState("@site_id", site_id);

                            if (TrxLines[i].ModifierSetId == null ||
                                TrxLines[i].ModifierSetId == DBNull.Value ||
                                Convert.ToInt32(TrxLines[i].ModifierSetId) < 0)
                            {
                                Trxcmd.Parameters.AddWithValue("@ModifierSetId", DBNull.Value);
                            }
                            else
                            {
                                Trxcmd.Parameters.AddWithValue("@ModifierSetId", TrxLines[i].ModifierSetId);
                            }

                            if (TrxLines[i].ComboproductId < 0)
                            {
                                Trxcmd.Parameters.AddWithValue("@ComboproductId", DBNull.Value);
                            }
                            else
                            {
                                Trxcmd.Parameters.AddWithValue("@ComboproductId", TrxLines[i].ComboproductId);
                            }
                            // added iqbal Jun 2 2016
                            if (TrxLines[i].GameplayId == -1)
                            {
                                Trxcmd.Parameters.AddWithValue("@GameplayId", DBNull.Value);
                                log.LogVariableState("@GameplayId", DBNull.Value);
                            }
                            else
                            {
                                Trxcmd.Parameters.AddWithValue("@GameplayId", TrxLines[i].GameplayId);
                                log.LogVariableState("@GameplayId", TrxLines[i].GameplayId);
                            }

                            Trxcmd.ExecuteNonQuery();

                            ApprovalAction approval = TrxLines[i].GetApproval(ApprovalAction.GetApprovalActionType(ApprovalAction.ApprovalActionType.ADD));

                            InsertTrxLogs(Trx_id, line_number, Utilities.ParafaitEnv.LoginID, "ADD", "Product Added", TrxTransacation, approval.ApproverId, approval.ApprovalTime);

                            ApprovalAction itemRefund = TrxLines[i].GetApproval(ApprovalAction.GetApprovalActionType(ApprovalAction.ApprovalActionType.ITEM_REFUND));
                            if (itemRefund != null && string.IsNullOrEmpty(itemRefund.ApproverId) == false)
                            {
                                InsertTrxLogs(Trx_id, line_number, Utilities.ParafaitEnv.LoginID, ApprovalAction.GetApprovalActionType(ApprovalAction.ApprovalActionType.ITEM_REFUND), "Manager approval for variable refund", TrxTransacation, itemRefund.ApproverId, itemRefund.ApprovalTime);
                            }

                            if (TrxProfileId > 0)
                                InsertTrxLogs(Trx_id, line_number, Utilities.ParafaitEnv.LoginID, "ADD", "Trx Profile Id Added", TrxTransacation);

                            //Start - Updating Trx User Verification information
                            if (TrxLines[i].userVerificationId != null && !String.IsNullOrEmpty(TrxLines[i].userVerificationId))
                            {

                                ParentTrxcmd.CommandText = @"insert into TrxUserVerificationDetails (TrxId, LineId, VerificationId, VerificationName, VerificationRemarks, IsActive, GUID, site_id, CreatedBy, CreationDate, LastUpdatedBy, LastUpdateDate) 
                                                       values (@transactionId, @lineId, @verificationId, @verificationName, @verificationRemarks, 'Y', newid(), @site_id, @createdBy, getdate(), @lastUpdatedBy, getdate())";

                                ParentTrxcmd.Parameters.Clear();
                                ParentTrxcmd.Parameters.AddWithValue("@transactionId", Trx_id);
                                ParentTrxcmd.Parameters.AddWithValue("@lineId", line_number);
                                ParentTrxcmd.Parameters.AddWithValue("@verificationId", TrxLines[i].userVerificationId);
                                ParentTrxcmd.Parameters.AddWithValue("@verificationName", string.IsNullOrEmpty(TrxLines[i].userVerificationName) ? DBNull.Value : (object)TrxLines[i].userVerificationName);
                                ParentTrxcmd.Parameters.AddWithValue("@verificationRemarks", string.IsNullOrEmpty(TrxLines[i].userVerificationRemarks) ? DBNull.Value : (object)TrxLines[i].userVerificationRemarks);
                                ParentTrxcmd.Parameters.AddWithValue("@site_id", site_id);
                                ParentTrxcmd.Parameters.AddWithValue("@createdBy", Utilities.ParafaitEnv.LoginID);
                                ParentTrxcmd.Parameters.AddWithValue("@lastUpdatedBy", Utilities.ParafaitEnv.LoginID);

                                ParentTrxcmd.ExecuteNonQuery();

                                log.LogVariableState("@transactionId", Trx_id);
                                log.LogVariableState("@lineId", line_number);
                                log.LogVariableState("@verificationId", TrxLines[i].userVerificationId);
                                log.LogVariableState("@verificationName", string.IsNullOrEmpty(TrxLines[i].userVerificationName) ? DBNull.Value : (object)TrxLines[i].userVerificationName);
                                log.LogVariableState("@verificationRemarks", string.IsNullOrEmpty(TrxLines[i].userVerificationRemarks) ? DBNull.Value : (object)TrxLines[i].userVerificationRemarks);
                                log.LogVariableState("@createdBy", Utilities.ParafaitEnv.LoginID);
                                log.LogVariableState("@lastUpdatedBy", Utilities.ParafaitEnv.LoginID);
                            }
                            //End - Updating Trx User Verification information

                            //Start - Modification Added on 14-3-2016 for updating Parent ModifierProduct Details
                            if (TrxLines[i].ParentModifierProductId > 0 && TrxLines[i].ProductTypeCode == "MANUAL")
                            {

                                ParentTrxcmd.CommandText = @"insert into TrxParentModifierDetails (TrxId, LineId, ParentModifierId, ParentProductId, ParentProductName, ParentPrice, LastUpdatedBy,LastUpdatedTime) 
                                                       values (@transactionId, @lineId, @parentModifierId, @parentProductId, @parentProductName, @parentPrice, @lastUpdatedBy, @lastUpdatedTime)";

                                ParentTrxcmd.Parameters.Clear();
                                ParentTrxcmd.Parameters.AddWithValue("@transactionId", Trx_id);
                                ParentTrxcmd.Parameters.AddWithValue("@lineId", line_number);
                                ParentTrxcmd.Parameters.AddWithValue("@parentModifierId", TrxLines[i].ParentModifierSetId);
                                ParentTrxcmd.Parameters.AddWithValue("@parentProductId", TrxLines[i].ParentModifierProductId);
                                ParentTrxcmd.Parameters.AddWithValue("@parentProductName", TrxLines[i].ParentModifierName);

                                log.LogVariableState("@transactionId", Trx_id);
                                log.LogVariableState("@lineId", line_number);
                                log.LogVariableState("@parentModifierId", TrxLines[i].ParentModifierSetId);
                                log.LogVariableState("@parentProductId", TrxLines[i].ParentModifierProductId);
                                log.LogVariableState("@parentProductName", TrxLines[i].ParentModifierName);

                                if (TrxLines[i].Price > 0)
                                {
                                    ParentTrxcmd.Parameters.AddWithValue("@parentPrice", TrxLines[i].ParentModifierPrice);
                                    log.LogVariableState("@parentPrice", TrxLines[i].ParentModifierPrice);
                                }
                                else
                                {
                                    ParentTrxcmd.Parameters.AddWithValue("@parentPrice", 0);
                                    log.LogVariableState("@parentPrice", 0);
                                }
                                ParentTrxcmd.Parameters.AddWithValue("@lastUpdatedBy", Utilities.ParafaitEnv.Username);
                                ParentTrxcmd.Parameters.AddWithValue("@lastUpdatedTime", ServerDateTime.Now);
                                ParentTrxcmd.ExecuteNonQuery();

                                log.LogVariableState("@lastUpdatedBy", Utilities.ParafaitEnv.Username);
                                log.LogVariableState("@lastUpdatedTime", ServerDateTime.Now);

                            }
                            //End - Modification Added on 14-3-2016 for updating Parent ModifierProduct Details

                            SaveSubscriptionDetails(TrxLines[i], line_number, closeTransaction, TrxTransacation);

                            if (!string.IsNullOrEmpty(TrxLines[i].CardNumber))
                            {
                                // modified 02/2019: BearCat Split product entitlement - moved from beginning to end of the transaction processing
                                // create a list of cards to be processed for split card
                                // for new cards, parent card and child card relation is derived from trxline.parentline relation
                                // for recharge, trxlines will not have a parent and it will not be considered for split
                                if (TrxLines[i].ParentLine != null && TrxLines[i].ParentLine.card != null && (TrxLines[i].ProductTypeCode == "CARDDEPOSIT" || TrxLines[i].ProductTypeCode == "VARIABLECARD"))
                                {
                                    if (!mapSplitProductCards.ContainsKey(TrxLines[i].ParentLine.CardNumber))
                                        mapSplitProductCards.Add(TrxLines[i].ParentLine.CardNumber, TrxLines[i].ParentLine);

                                    if (!mapSplitProductCards.ContainsKey(TrxLines[i].CardNumber))
                                        mapSplitProductCards.Add(TrxLines[i].CardNumber, TrxLines[i]);
                                }
                                int subscriptionLineCount = (TrxLines[i].SubscriptionHeaderDTO != null
                                                             && TrxLines[i].SubscriptionHeaderDTO.SubscriptionBillingScheduleDTOList != null
                                                             && TrxLines[i].SubscriptionHeaderDTO.SubscriptionBillingScheduleDTOList.Any() ? TrxLines[i].SubscriptionHeaderDTO.SubscriptionBillingScheduleDTOList.Count : 1);
                                for (int j = 0; j < subscriptionLineCount; j++)
                                {
                                    SubscriptionBillingScheduleDTO subscriptionBillingScheduleDTO = (TrxLines[i].SubscriptionHeaderDTO != null && TrxLines[i].SubscriptionHeaderDTO.SubscriptionBillingScheduleDTOList != null
                                                                                                         && TrxLines[i].SubscriptionHeaderDTO.SubscriptionBillingScheduleDTOList.Any()
                                                                                                       ? TrxLines[i].SubscriptionHeaderDTO.SubscriptionBillingScheduleDTOList[j] : null);
                                    CreateCardGames(TrxTransacation, TrxLines[i].card.card_id, TrxLines[i].ProductID, Trx_id, line_number, TrxLines[i], subscriptionBillingScheduleDTO, reservationTransaction);
                                    CreateCardCreditPlus(TrxTransacation, TrxLines[i].card.card_id, TrxLines[i].ProductID, Trx_id, line_number, TrxLines[i], subscriptionBillingScheduleDTO, reservationTransaction);
                                    CreateCardDiscounts(TrxTransacation, Trx_id, line_number, TrxLines[i].card.card_id, TrxLines[i].ProductID, TrxLines[i], subscriptionBillingScheduleDTO, reservationTransaction);
                                }
                                ////Logic to handle grace period entitlements for subscription
                                //if (TrxLines[i].SubscriptionHeaderDTO != null && TrxLines[i].SubscriptionHeaderDTO.AutoRenew == false
                                //    && TrxLines[i].SubscriptionHeaderDTO.RenewalGracePeriodCycle != null)
                                //{
                                //    SubscriptionBillingScheduleDTO subscriptionBillingScheduleDTO = new SubscriptionBillingScheduleDTO();
                                //    subscriptionBillingScheduleDTO.SubscriptionBillingScheduleId = -1;
                                //    subscriptionBillingScheduleDTO.TransactionId = this.Trx_id;
                                //    subscriptionBillingScheduleDTO.TransactionLineId = line_number;
                                //    int gracePeriod = (int)TrxLines[i].SubscriptionHeaderDTO.RenewalGracePeriodCycle;
                                //    subscriptionBillingScheduleDTO.BillFromDate = TrxLines[i].SubscriptionHeaderDTO.SubscriptionEndDate.AddDays(1);
                                //    subscriptionBillingScheduleDTO.BillToDate = (TrxLines[i].SubscriptionHeaderDTO.UnitOfSubscriptionCycle == UnitOfSubscriptionCycle.YEARS
                                //                                                           ? subscriptionBillingScheduleDTO.BillFromDate.AddYears(gracePeriod)
                                //                                                           : TrxLines[i].SubscriptionHeaderDTO.UnitOfSubscriptionCycle == UnitOfSubscriptionCycle.MONTHS
                                //                                                               ? subscriptionBillingScheduleDTO.BillFromDate.AddMonths(gracePeriod)
                                //                                                               : subscriptionBillingScheduleDTO.BillFromDate.AddDays(gracePeriod));
                                //    CreateCardGames(TrxTransacation, TrxLines[i].card.card_id, TrxLines[i].ProductID, Trx_id, line_number, TrxLines[i], subscriptionBillingScheduleDTO);
                                //    CreateCardCreditPlus(TrxTransacation, TrxLines[i].card.card_id, TrxLines[i].ProductID, Trx_id, line_number, TrxLines[i], subscriptionBillingScheduleDTO);
                                //    CreateCardDiscounts(TrxTransacation, Trx_id, line_number, TrxLines[i].card.card_id, TrxLines[i].ProductID, TrxLines[i], subscriptionBillingScheduleDTO);

                                //}

                                if (TrxLines[i].ProductTypeCode == "VARIABLECARD" && TrxLines[i].VariableCreditPlusCredits != 0)
                                {
                                    if (Utilities.executeScalar(@"select CreditPlus
                                                    from ProductCreditPlus 
                                                   where product_Id = @productId", TrxTransacation,
                                                    new SqlParameter("@productId", TrxLines[i].ProductID)) == null)
                                    {//Add credit plus line for Variable card if Product Credit Plus is not defined.
                                        log.Debug("Variable Amount to be loaded as Credit Plus: " + TrxLines[i].VariableCreditPlusCredits.ToString());
                                        Loyalty loyalty = new Loyalty(Utilities);
                                        loyalty.CreateGenericCreditPlusLine(TrxLines[i].card.card_id, CreditPlusTypeConverter.ToString(CreditPlusType.CARD_BALANCE), TrxLines[i].VariableCreditPlusCredits, true, 0, "N", Utilities.ParafaitEnv.LoginID, "Variable Card Credit Plus", TrxTransacation, EntitlementReferenceDate, Trx_id, line_number, true);
                                        //TrxLines[i].VariableCreditPlusCredits = 0;
                                    }
                                }
                                InsertTrxLogs(Trx_id, line_number, Utilities.ParafaitEnv.LoginID, "CARD", "Card Entitlement Updated" + TrxLines[i].CardNumber, TrxTransacation);
                            }

                            if (TrxLines[i].ProductTypeCode == "MANUAL" || TrxLines[i].ProductTypeCode == "RENTAL" || TrxLines[i].ProductTypeCode == "RENTAL_RETURN")
                            {
                                //begin: Added a variable quantity to negate the qunatity in Case the product Type is Rental Return on Dec-9-2015//
                                decimal quantity = 0;
                                string inventoryProductCode = "";
                                if (TrxLines[i].ProductTypeCode == "RENTAL_RETURN")
                                {
                                    DataRow rentalProduct;
                                    quantity = -1 * (TrxLines[i].quantity);
                                    rentalProduct = getProductDetails(TrxLines[i].RentalProductId);
                                    inventoryProductCode = rentalProduct["InventoryProductCode"].ToString();
                                    while (TrxLines[i].quantity-- > 0)
                                    {
                                        ReturnRentalAllocation(TrxLines[i].OrigRentalTrxId, TrxLines[i].RentalProductId, Trx_id, TrxTransacation);
                                    }
                                }
                                else
                                {
                                    quantity = TrxLines[i].quantity;
                                    inventoryProductCode = TrxLines[i].InventoryProductCode;
                                    //Modification 10-Mar-2016 - Rental Allocation
                                    if (TrxLines[i].ProductTypeCode == "RENTAL")
                                    {
                                        CreateRentalAllocation(TrxLines[i].ProductID, Trx_id, line_number, TrxLines[i].RentalDeposit, TrxTransacation);
                                        if (TrxLines[i].TransactionReservationScheduleDTOList != null)
                                        {
                                            try
                                            {
                                                if (TrxLines[i].DBLineId == 0)
                                                {
                                                    TrxLines[i].DBLineId = line_number;
                                                }
                                                TrxLines[i].SaveTransactionReservationSchedule(Utilities.ExecutionContext, (int)Trx_id, TrxTransacation);
                                            }
                                            catch (Exception ex)
                                            {
                                                log.Error(ex);
                                                TrxTransacation.Rollback();
                                                if (TrxCnn != null)
                                                { TrxCnn.Close(); }
                                                log.LogMethodExit(1);
                                                return 1;
                                            }
                                        }
                                    }
                                    //Modification 10-Mar-2016 - Rental Allocation
                                }
                                //End :Added a variable quantity to negate the qunatity in Case the product Type is Rental Return on Dec-9-2015//
                                if (inventoryProductCode != "")
                                {
                                    if (Order == null || (Order != null && Order.OrderHeaderDTO == null)
                                        || (transactionOrderTypes == null)
                                        || (Order != null
                                             && Order.OrderHeaderDTO != null
                                             && Order.OrderHeaderDTO.TransactionOrderTypeId == -1)
                                        || (Order != null
                                             && Order.OrderHeaderDTO != null
                                             && Order.OrderHeaderDTO.TransactionOrderTypeId != -1
                                             && transactionOrderTypes != null
                                             && Order.OrderHeaderDTO.TransactionOrderTypeId != transactionOrderTypes["Item Refund"]
                                            )
                                       )
                                    {
                                        if (ParafaitEnv.ALLOW_TRANSACTION_ON_ZERO_STOCK != "Y")
                                        {
                                            decimal stock = Inventory.getStock(inventoryProductCode, Invcmd, POSMachine, Utilities.ExecutionContext.GetSiteId());
                                            if (stock - TrxLines[i].quantity < 0)
                                            {
                                                message = TrxLines[i].ProductName + " (" + inventoryProductCode + ") Stock is " + stock.ToString();
                                                if (SQLTrx == null) //SQLTransaction handled locally
                                                    TrxTransacation.Rollback();
                                                if (TrxCnn != null)
                                                    TrxCnn.Close();

                                                log.LogMethodExit(1);
                                                return 1;
                                            }
                                        }
                                        Inventory.updateStock(inventoryProductCode, Invcmd, quantity, POSMachineId, Utilities.ParafaitEnv.LoginID, Trx_id, line_number, TrxLines[i].Price, TrxLines[i].tax_percentage, TrxLines[i].TaxInclusivePrice, Utilities.ExecutionContext.GetSiteId(), -1, -1);
                                    }
                                }

                                //Modified 02/2019 for BearCat - 86-68
                                if (allowProductsToBeMarkedUnavailable &&
                                    (TrxLines[i].ProductTypeCode == "MANUAL" || TrxLines[i].ProductTypeCode == "COMBO") && TrxLines[i].LineValid && !TrxLines[i].LineProcessed)
                                {
                                    Decimal orderedQty = TrxLines[i].quantity;
                                    ProductsAvailabilityListBL unavailableProductsList = new ProductsAvailabilityListBL(Utilities.ExecutionContext);
                                    ProductsAvailabilityDTO unavailableProduct = unavailableProductsList.SearchUnavailableProductByProductId(TrxLines[i].ProductID, TrxTransacation);
                                    if (!unavailableProduct.IsAvailable && (unavailableProduct.AvailableQty - orderedQty < 0) && unavailableProduct.UnavailableTill > Utilities.getServerTime())
                                    {
                                        message = Utilities.MessageUtils.getMessage(2049, Decimal.ToInt32(unavailableProduct.AvailableQty), unavailableProduct.ProductName);
                                        if (SQLTrx == null) //SQLTransaction handled locally
                                            TrxTransacation.Rollback();
                                        if (TrxCnn != null)
                                            TrxCnn.Close();

                                        log.LogMethodExit(1);
                                        return 1;
                                    }
                                    else if (!unavailableProduct.IsAvailable && unavailableProduct.UnavailableTill > Utilities.getServerTime())
                                    {
                                        try
                                        {
                                            unavailableProduct.AvailableQty = unavailableProduct.AvailableQty - TrxLines[i].quantity;
                                            ProductsAvailabilityBL productsAvailabilityBL = new ProductsAvailabilityBL(Utilities.ExecutionContext, unavailableProduct, TrxTransacation);
                                            productsAvailabilityBL.Save(unavailableProduct.ApprovedBy);
                                            message = "";
                                        }
                                        catch (Exception)
                                        {
                                            message = Utilities.MessageUtils.getMessage(2049, unavailableProduct.AvailableQty, unavailableProduct.ProductName);
                                            if (SQLTrx == null) //SQLTransaction handled locally
                                                TrxTransacation.Rollback();
                                            if (TrxCnn != null)
                                                TrxCnn.Close();

                                            log.LogMethodExit(1);
                                            return 1;
                                        }
                                    }
                                }
                            }
                            else if (TrxLines[i].ProductTypeCode == "ATTRACTION")
                            {
                                if (TrxLines[i].LineAtb != null)
                                {
                                    TrxLines[i].LineAtb.AttractionBookingDTO.TrxId = (int)Trx_id;
                                    TrxLines[i].LineAtb.AttractionBookingDTO.LineId = line_number;
                                    TrxLines[i].LineAtb.AttractionBookingDTO.ExpiryDate = DateTime.MinValue;
                                    //TrxLines[i].LineAtb.cardList
                                    //GG if (!TrxLines[i].LineAtb.Save((int)(TrxLines[i].card != null ? TrxLines[i].card.card_id : ((PrimaryCard == null ? -1 : PrimaryCard.card_id))), TrxTransacation, ref message))
                                    //{
                                    //    TrxTransacation.Rollback();
                                    //    if (TrxCnn != null)
                                    //        TrxCnn.Close();

                                    //    log.LogMethodExit(1);
                                    //    return 1;
                                    //GG }
                                    try
                                    {
                                        TrxLines[i].LineAtb.Save((int)(TrxLines[i].card != null ? TrxLines[i].card.card_id : ((PrimaryCard == null ? -1 : PrimaryCard.card_id))), TrxTransacation);
                                    }
                                    catch (Exception ex)
                                    {
                                        log.Error(ex);
                                        if (SQLTrx == null) //SQLTransaction handled locally
                                        {
                                            TrxTransacation.Rollback();
                                        }
                                        if (TrxCnn != null)
                                            TrxCnn.Close();

                                        message = ex.Message;
                                        log.LogMethodExit(1);
                                        return 1;
                                    }
                                }
                            }
                            else if (TrxLines[i].ProductTypeCode == "CHECK-IN")
                            {
                                ProductsContainerDTO productsContainerDTO = ProductsContainerList.GetProductsContainerDTO(Utilities.ExecutionContext, TrxLines[i].ProductID);
                                if (productsContainerDTO.PauseType == ProductsContainerDTO.PauseUnPauseType.UNPAUSE && TrxLines[i].LineCheckOutDetailDTO != null)
                                {
                                    //CheckInPauseLogListBL checkInPauseLogList = new CheckInPauseLogListBL(Utilities.ExecutionContext);
                                    //List<KeyValuePair<CheckInPauseLogDTO.SearchByCheckInPauseLogParameters, string>> searchCheckInPauseLogParams = new List<KeyValuePair<CheckInPauseLogDTO.SearchByCheckInPauseLogParameters, string>>();
                                    //searchCheckInPauseLogParams.Add(new KeyValuePair<CheckInPauseLogDTO.SearchByCheckInPauseLogParameters, string>(CheckInPauseLogDTO.SearchByCheckInPauseLogParameters.CHECK_IN_DETAIL_ID, TrxLines[i].LineCheckOutDetailDTO.CheckInDetailId.ToString()));
                                    //searchCheckInPauseLogParams.Add(new KeyValuePair<CheckInPauseLogDTO.SearchByCheckInPauseLogParameters, string>(CheckInPauseLogDTO.SearchByCheckInPauseLogParameters.PAUSE_END_TIME_IS_NULL, "null"));
                                    //List<CheckInPauseLogDTO> listCheckInPauseLogDTO = checkInPauseLogList.GetCheckInPauseLogDTOList(searchCheckInPauseLogParams);
                                    //if (listCheckInPauseLogDTO != null && listCheckInPauseLogDTO.Count > 0)
                                    //{
                                    //    DateTime serverDateTime = Utilities.getServerTime();
                                    //    foreach (CheckInPauseLogDTO checkInPauseLogDTO in listCheckInPauseLogDTO)
                                    //    {
                                    //        checkInPauseLogDTO.PauseEndTime = serverDateTime;
                                    //        checkInPauseLogDTO.TotalPauseTime = Convert.ToInt32((serverDateTime - checkInPauseLogDTO.PauseStartTime).TotalMinutes);
                                    //        checkInPauseLogDTO.UnPausedBy = Utilities.ParafaitEnv.Username;
                                    //        CheckInPauseLogBL checkInPauseLogBL = new CheckInPauseLogBL(Utilities.ExecutionContext, checkInPauseLogDTO);
                                    //        checkInPauseLogBL.Save(TrxTransacation);
                                    //    }
                                    //}

                                    //Unpause then back to checked In 
                                    TrxLines[i].LineCheckOutDetailDTO.Status = CheckInStatus.CHECKEDIN;

                                    CheckInBL checkInBL = new CheckInBL(Utilities.ExecutionContext, TrxLines[i].LineCheckOutDetailDTO.CheckInId, true, true, TrxTransacation);
                                    ITransactionUseCases transactionUseCases = TransactionUseCaseFactory.GetTransactionUseCases(Utilities.ExecutionContext);
                                    transactionUseCases.UpdateCheckInStatus(checkInBL.CheckInDTO.CheckInId, new List<CheckInDetailDTO> { TrxLines[i].LineCheckOutDetailDTO });
                                }
                                else
                                {
                                    if (TrxLines[i].LineCheckInDTO != null)
                                    {
                                        TrxLines[i].LineCheckInDTO.CheckInTrxId = Trx_id;
                                        if (TrxLines[i].LineCheckInDTO.CardId <= 0 && !string.IsNullOrEmpty(TrxLines[i].LineCheckInDTO.AccountNumber))
                                        {
                                            Card checkInCard = new Card(TrxLines[i].LineCheckInDTO.AccountNumber, Utilities.ParafaitEnv.LoginID, Utilities, TrxTransacation);
                                            if (checkInCard.card_id >= 0)
                                                TrxLines[i].LineCheckInDTO.CardId = checkInCard.card_id;
                                        }
                                        CheckInBL saveCheckInBL = new CheckInBL(Utilities.ExecutionContext, TrxLines[i].LineCheckInDTO);
                                        try
                                        {
                                            // Logic to update status here 
                                            saveCheckInBL.Save(TrxTransacation);
                                        }
                                        catch (Exception ex)
                                        {
                                            message = ex.Message;
                                            if (SQLTrx == null) //SQLTransaction handled locally
                                                TrxTransacation.Rollback();
                                            if (TrxCnn != null)
                                                TrxCnn.Close();

                                            log.LogMethodExit(1);
                                            return 1;
                                        }
                                    }
                                    if (TrxLines[i].LineCheckInDetailDTO != null)
                                    {
                                        if (TrxLines[i].LineCheckInDetailDTO.CardId <= 0 && !string.IsNullOrEmpty(TrxLines[i].LineCheckInDetailDTO.AccountNumber))
                                        {
                                            Card checkInDetailCard = new Card(TrxLines[i].LineCheckInDetailDTO.AccountNumber, Utilities.ParafaitEnv.LoginID, Utilities, TrxTransacation);
                                            if (Utilities.ParafaitEnv.CHECKIN_DETAILS_RFID_TAG == "0")
                                            {
                                                if (TrxLines[i].face_value == 0)
                                                    checkInDetailCard.face_value = Utilities.ParafaitEnv.CardFaceValue;
                                                else
                                                    checkInDetailCard.face_value = TrxLines[i].face_value;
                                            }
                                            else
                                            {
                                                try
                                                {
                                                    checkInDetailCard.face_value = (float)Convert.ToDecimal(Utilities.ParafaitEnv.WRIST_BAND_FACE_VALUE);
                                                }
                                                catch (Exception ex)
                                                {
                                                    log.Error("Unable to get the check in wristband face value! ", ex);
                                                    checkInDetailCard.face_value = 0;
                                                }
                                            }
                                            if (checkInDetailCard.card_id < 0)
                                                checkInDetailCard.createCard(TrxTransacation);
                                            TrxLines[i].LineCheckInDetailDTO.CardId = checkInDetailCard.card_id;
                                        }
                                        int checkInAllowedTimeMinutes = 0;
                                        if (TrxLines[i].LineCheckInDTO != null)
                                        {
                                            TrxLines[i].LineCheckInDetailDTO.CheckInId = TrxLines[i].LineCheckInDTO.CheckInId;
                                            checkInAllowedTimeMinutes = TrxLines[i].LineCheckInDTO.AllowedTimeInMinutes;
                                        }
                                        else if (TrxLines[i].ParentLine != null)
                                        {
                                            // Incase of check in combo the parent line will be combo product and LineCheckInDTO is null
                                            if (TrxLines[i].ParentLine.LineCheckInDTO == null)
                                            {
                                                CheckInDTO checkInDTO = TrxLines.Where(x => x.LineCheckInDTO != null && x.LineValid).FirstOrDefault().LineCheckInDTO;
                                                TrxLines[i].LineCheckInDetailDTO.CheckInId = checkInDTO.CheckInId;
                                                TrxLines[i].LineCheckInDTO = checkInDTO;
                                                checkInAllowedTimeMinutes = checkInDTO.AllowedTimeInMinutes;
                                            }
                                            else
                                            {
                                                TrxLines[i].LineCheckInDetailDTO.CheckInId = TrxLines[i].ParentLine.LineCheckInDTO.CheckInId;
                                                checkInAllowedTimeMinutes = TrxLines[i].ParentLine.LineCheckInDTO.AllowedTimeInMinutes;
                                            }
                                        }
                                        else //Corresponding CheckInDTO not found. Return with error
                                        {
                                            message = "Error while saving check-in information";
                                            if (SQLTrx == null) //SQLTransaction handled locally
                                                TrxTransacation.Rollback();
                                            if (TrxCnn != null)
                                                TrxCnn.Close();
                                            log.LogMethodExit(1);
                                            return 1;
                                        }
                                        ProductsDTO productDTO = new Products(Utilities.ExecutionContext, TrxLines[i].ProductID, false, false, TrxTransacation).GetProductsDTO;
                                        if (productDTO.AutoCheckOut == "Y")
                                        {
                                            TrxLines[i].LineCheckInDetailDTO.CheckOutTime = Utilities.getServerTime().AddMinutes(checkInAllowedTimeMinutes < 0 ? 0 : checkInAllowedTimeMinutes);
                                            TrxLines[i].LineCheckInDetailDTO.CheckOutTrxId = Trx_id;
                                            TrxLines[i].LineCheckInDetailDTO.TrxLineId = line_number;
                                        }
                                        TrxLines[i].LineCheckInDetailDTO.CheckInTrxId = Trx_id;
                                        TrxLines[i].LineCheckInDetailDTO.CheckInTrxLineId = line_number;
                                        try
                                        {
                                            string checkInOptions = ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "CHECK_IN_OPTIONS_IN_POS");
                                            switch (checkInOptions)
                                            {
                                                case "AUTO":
                                                    {
                                                        TrxLines[i].LineCheckInDetailDTO.Status = CheckInStatus.CHECKEDIN;
                                                        TrxLines[i].LineCheckInDetailDTO.CheckInTime = ServerDateTime.Now;
                                                    }
                                                    break;
                                            }
                                            CheckInDetailBL checkInDetailBL = new CheckInDetailBL(Utilities.ExecutionContext, TrxLines[i].LineCheckInDetailDTO);
                                            checkInDetailBL.Save(TrxTransacation);
                                        }
                                        catch (ValidationException validEx)
                                        {
                                            if (SQLTrx == null) //SQLTransaction handled locally
                                                TrxTransacation.Rollback();
                                            if (TrxCnn != null)
                                                TrxCnn.Close();
                                            message = validEx.GetAllValidationErrorMessages();
                                            log.LogMethodExit(1);
                                            return 1;
                                        }
                                    }
                                }
                            }
                            else if (TrxLines[i].ProductTypeCode == "CHECK-OUT")
                            {
                                ProductsContainerDTO productsContainerDTO = ProductsContainerList.GetProductsContainerDTO(Utilities.ExecutionContext, TrxLines[i].ProductID);
                                if (productsContainerDTO.PauseType == ProductsContainerDTO.PauseUnPauseType.PAUSE && TrxLines[i].LineCheckOutDetailDTO != null)//sathya, attach pause log to checkoutdetaildto
                                {
                                    //CheckInPauseLogDTO checkInPauseLogDTO = new CheckInPauseLogDTO(); //sathya, dont create default constructor
                                    //checkInPauseLogDTO.CheckInDetailId = TrxLines[i].LineCheckOutDetailDTO.CheckInDetailId;
                                    //checkInPauseLogDTO.PauseStartTime = Utilities.getServerTime();
                                    //checkInPauseLogDTO.PausedBy = Utilities.ParafaitEnv.Username;
                                    //checkInPauseLogDTO.POSMachine = Utilities.ParafaitEnv.POSMachine;

                                    //CheckInPauseLogBL checkInPauseLogBL = new CheckInPauseLogBL(Utilities.ExecutionContext, checkInPauseLogDTO);
                                    //checkInPauseLogBL.Save(TrxTransacation);
                                    TrxLines[i].LineCheckOutDetailDTO.Status = CheckInStatus.PAUSED;
                                    CheckInBL checkInBL = new CheckInBL(Utilities.ExecutionContext, TrxLines[i].LineCheckOutDetailDTO.CheckInId, true, true, TrxTransacation);
                                    ITransactionUseCases transactionUseCases = TransactionUseCaseFactory.GetTransactionUseCases(Utilities.ExecutionContext);
                                    transactionUseCases.UpdateCheckInStatus(checkInBL.CheckInDTO.CheckInId, new List<CheckInDetailDTO> { TrxLines[i].LineCheckOutDetailDTO });
                                }
                                else
                                {
                                    if (TrxLines[i].LineCheckOutDetailDTO != null)
                                    {
                                        if (TrxLines[i].LineCheckInDTO != null)
                                            TrxLines[i].LineCheckOutDetailDTO.CheckInId = TrxLines[i].LineCheckInDTO.CheckInId;
                                        else if (TrxLines[i].ParentLine != null)
                                            TrxLines[i].LineCheckOutDetailDTO.CheckInId = TrxLines[i].ParentLine.LineCheckInDTO.CheckInId;
                                        else //Corresponding CheckInDTO not found. Return with error
                                        {
                                            message = "Error while saving check-out information";
                                            if (SQLTrx == null) //SQLTransaction handled locally
                                                TrxTransacation.Rollback();
                                            if (TrxCnn != null)
                                                TrxCnn.Close();
                                            log.LogMethodExit(1);
                                            return 1;
                                        }
                                        TrxLines[i].LineCheckOutDetailDTO.CheckOutTrxId = Trx_id;
                                        TrxLines[i].LineCheckOutDetailDTO.TrxLineId = line_number;
                                        try
                                        {
                                            CheckInBL checkInBL = new CheckInBL(Utilities.ExecutionContext, TrxLines[i].LineCheckInDTO);
                                            List<CheckInDetailDTO> checkInDetailDTOList = new List<CheckInDetailDTO>();
                                            checkInDetailDTOList.Add(TrxLines[i].LineCheckOutDetailDTO);
                                            checkInBL.PerformCheckOut(checkInDetailDTOList, TrxTransacation);
                                        }
                                        catch (ValidationException validEx)
                                        {
                                            if (SQLTrx == null) //SQLTransaction handled locally
                                                TrxTransacation.Rollback();
                                            if (TrxCnn != null)
                                                TrxCnn.Close();
                                            message = validEx.GetAllValidationErrorMessages();
                                            log.LogMethodExit(1);
                                            return 1;
                                        }
                                    }
                                }
                            }
                            else if (TrxLines[i].ProductTypeCode == "LOCKER")
                            {
                                if (TrxLines.Where(x => (bool)(x.ProductTypeCode.Equals("LOCKER") && x.CardNumber.Equals(TrxLines[i].CardNumber) && x.LineValid)).ToList().Count > 1)
                                {
                                    message = Utilities.MessageUtils.getMessage(1583);//"Issuing multiple locker to same card is not allowed."
                                    if (SQLTrx == null) //SQLTransaction handled locally
                                        TrxTransacation.Rollback();
                                    if (TrxCnn != null)
                                        TrxCnn.Close();

                                    log.LogMethodExit(1);
                                    return 1;
                                }
                                ParafaitLockCardHandler locker;
                                //string lockerMake = Utilities.getParafaitDefaults("LOCKER_LOCK_MAKE");
                                if (TrxLines[i].LockerMake.Equals(ParafaitLockCardHandlerDTO.LockerMake.COCY.ToString()))
                                    locker = new CocyLockCardHandler(TrxLines[i].card.ReaderDevice, TrxLines[i].card.Utilities.ExecutionContext, Convert.ToByte(TrxLines[i].card.Utilities.ParafaitEnv.MifareCustomerKey));
                                else if (TrxLines[i].LockerMake.Equals(ParafaitLockCardHandlerDTO.LockerMake.INNOVATE.ToString()))
                                    locker = new InnovateLockCardHandler(TrxLines[i].card.ReaderDevice, TrxLines[i].card.Utilities.ExecutionContext, Convert.ToByte(TrxLines[i].card.Utilities.ParafaitEnv.MifareCustomerKey), TrxLines[i].card.CardNumber);
                                else if (TrxLines[i].LockerMake.Equals(ParafaitLockCardHandlerDTO.LockerMake.PASSTECH.ToString()))
                                    locker = new PassTechLockCardHandler(TrxLines[i].card.ReaderDevice, TrxLines[i].card.Utilities.ExecutionContext);
                                else if (TrxLines[i].LockerMake.Equals(ParafaitLockCardHandlerDTO.LockerMake.METRA_ELS.ToString()) || TrxLines[i].LockerMake.Equals(ParafaitLockCardHandlerDTO.LockerMake.METRA_ELS_NET.ToString()))
                                    locker = new MetraLockCardHandler(TrxLines[i].card.ReaderDevice, TrxLines[i].card.Utilities.ExecutionContext, TrxLines[i].card.CardNumber, null, null, TrxLines[i].LockerMake, TrxLines[i].LockerMode);
                                else if (TrxLines[i].LockerMake.Equals(ParafaitLockCardHandlerDTO.LockerMake.HECERE.ToString()))
                                    locker = new HecereLockCardHandler(TrxLines[i].card.ReaderDevice, TrxLines[i].card.Utilities.ExecutionContext, TrxLines[i].card.CardNumber);
                                else
                                    locker = new ParafaitLockCardHandler(TrxLines[i].card.ReaderDevice, TrxLines[i].card.Utilities.ExecutionContext);
                                //DateTime issueDate = Utilities.getServerTime();
                                LockerAllocationDTO lockerAllocationDTO = locker.GetLockerAllocationCardDetails(TrxLines[i].card.card_id);
                                if (lockerAllocationDTO != null)
                                {
                                    Locker lockerBl = new Locker(lockerAllocationDTO.LockerId);
                                    LockerDTO lockerDTO = lockerBl.getLockerDTO;
                                    if (lockerDTO != null && lockerDTO.LockerAllocated != null && lockerDTO.LockerAllocated.Id >= 0)
                                    {
                                        lockerAllocationDTO.Refunded = true;
                                        if (lockerAllocationDTO.ValidToTime == DateTime.MinValue)
                                        {
                                            lockerAllocationDTO.ValidToTime = Utilities.getServerTime();
                                        }
                                        LockerAllocation lockersAllocation = new LockerAllocation(lockerAllocationDTO);
                                        lockersAllocation.Save(TrxTransacation);
                                        //Extension locker id to be reset as earlier locker allocation record is refunded
                                        if (TrxLines[i].lockerAllocationDTO.Id > -1)
                                        {
                                            TrxLines[i].lockerAllocationDTO.Id = -1;
                                        }
                                    }
                                }
                                DateTime issueDate = (TrxLines[i].SubscriptionHeaderDTO != null ? TrxLines[i].SubscriptionHeaderDTO.SubscriptionStartDate : DateTime.MinValue);
                                LockerAllocation lockerAllocation = new LockerAllocation(TrxLines[i].lockerAllocationDTO.Id);
                                if (lockerAllocation.GetLockerAllocationDTO == null || (lockerAllocation.GetLockerAllocationDTO != null && lockerAllocation.GetLockerAllocationDTO.Id == -1))
                                {
                                    TrxLines[i].lockerAllocationDTO.Id = -1;
                                }
                                TrxLines[i].lockerAllocationDTO.TrxId = Trx_id;
                                TrxLines[i].lockerAllocationDTO.TrxLineId = line_number;
                                TrxLines[i].lockerAllocationDTO.CardId = TrxLines[i].card.card_id;
                                TrxLines[i].lockerAllocationDTO.CardNumber = TrxLines[i].card.CardNumber;
                                if (string.IsNullOrEmpty(TrxLines[i].LockerMode))
                                {
                                    TrxLines[i].LockerMode = lockerSelectionModeValue;
                                }
                                try
                                {
                                    locker.CreateLockerCard(TrxLines[i].lockerAllocationDTO, TrxLines[i].LockerMode, TrxTransacation, TrxLines[i].lockerAllocationDTO.ZoneCode, TrxLines[i].LockerMake, issueDate);
                                }
                                catch (Exception ex)
                                {
                                    if (SQLTrx == null) //SQLTransaction handled locally
                                        TrxTransacation.Rollback();
                                    if (TrxCnn != null)
                                        TrxCnn.Close();
                                    message += ex.Message;
                                    log.LogVariableState("message ", ex);
                                    log.LogMethodExit(1);
                                    return 1;
                                }
                                try
                                {
                                    if (!string.IsNullOrEmpty(onlineServiceUrl))
                                    {
                                        List<String> cardList = new List<string>();
                                        cardList.Add(TrxLines[i].lockerAllocationDTO.CardNumber);
                                        LockerBlockedCards lockerBlockedCards = new LockerBlockedCards(TrxLines[i].lockerAllocationDTO.CardNumber);
                                        if (lockerBlockedCards.lockerBlockedCardsDTO != null)
                                            locker.SendOnlineCommand(onlineServiceUrl, RequestType.UNBLOCK_CARD, null, cardList, ZoneCode, TrxLines[i].LockerMake);
                                    }
                                }
                                catch { }
                                InsertTrxLogs(Trx_id, line_number, Utilities.ParafaitEnv.LoginID, "LOCKER", "Locker Issued. Locker Number - " + TrxLines[i].LockerNumber.ToString(), TrxTransacation);
                            }
                            else if (TrxLines[i].ProductTypeCode == "LOCKER_RETURN")
                            {
                                ParafaitLockCardHandler locker;
                                Locker lockerBL = new Locker(TrxLines[i].lockerAllocationDTO.LockerId);
                                //string lockerMake = Utilities.getParafaitDefaults("LOCKER_LOCK_MAKE");
                                if (TrxLines[i].LockerMake.Equals(ParafaitLockCardHandlerDTO.LockerMake.COCY.ToString()))
                                    locker = new CocyLockCardHandler(TrxLines[i].card.ReaderDevice, TrxLines[i].card.Utilities.ExecutionContext, Convert.ToByte(TrxLines[i].card.Utilities.ParafaitEnv.MifareCustomerKey));
                                else if (TrxLines[i].LockerMake.Equals(ParafaitLockCardHandlerDTO.LockerMake.INNOVATE.ToString()))
                                    locker = new InnovateLockCardHandler(TrxLines[i].card.ReaderDevice, TrxLines[i].card.Utilities.ExecutionContext, Convert.ToByte(TrxLines[i].card.Utilities.ParafaitEnv.MifareCustomerKey), TrxLines[i].card.CardNumber);
                                else if (TrxLines[i].LockerMake.Equals(ParafaitLockCardHandlerDTO.LockerMake.PASSTECH.ToString()))
                                    locker = new PassTechLockCardHandler(TrxLines[i].card.ReaderDevice, TrxLines[i].card.Utilities.ExecutionContext);
                                else if (TrxLines[i].LockerMake.Equals(ParafaitLockCardHandlerDTO.LockerMake.HECERE.ToString()))
                                    locker = new HecereLockCardHandler(TrxLines[i].card.ReaderDevice, TrxLines[i].card.Utilities.ExecutionContext, TrxLines[i].card.CardNumber);
                                else if (TrxLines[i].LockerMake.Equals(ParafaitLockCardHandlerDTO.LockerMake.METRA_ELS.ToString()) || TrxLines[i].LockerMake.Equals(ParafaitLockCardHandlerDTO.LockerMake.METRA_ELS_NET.ToString()))
                                {
                                    string mode = string.Empty;
                                    LockerZonesList lockerZonesList = new LockerZonesList(TrxLines[i].card.Utilities.ExecutionContext);
                                    List<KeyValuePair<LockerZonesDTO.SearchByParameters, string>> lockerZoneSearchParams = new List<KeyValuePair<LockerZonesDTO.SearchByParameters, string>>();
                                    lockerZoneSearchParams.Add(new KeyValuePair<LockerZonesDTO.SearchByParameters, string>(LockerZonesDTO.SearchByParameters.SITE_ID, TrxLines[i].card.Utilities.ExecutionContext.GetSiteId().ToString()));
                                    lockerZoneSearchParams.Add(new KeyValuePair<LockerZonesDTO.SearchByParameters, string>(LockerZonesDTO.SearchByParameters.ZONE_CODE, TrxLines[i].lockerAllocationDTO.ZoneCode));
                                    lockerZoneSearchParams.Add(new KeyValuePair<LockerZonesDTO.SearchByParameters, string>(LockerZonesDTO.SearchByParameters.ACTIVE_FLAG, "1"));
                                    List<LockerZonesDTO> zonesList = lockerZonesList.GetLockerZonesList(lockerZoneSearchParams);
                                    if (zonesList != null && zonesList.Any())
                                    {
                                        mode = zonesList[0].LockerMode;
                                    }
                                    if (!string.IsNullOrEmpty(mode))
                                    {
                                        locker = new MetraLockCardHandler(TrxLines[i].card.ReaderDevice, TrxLines[i].card.Utilities.ExecutionContext, TrxLines[i].card.CardNumber, lockerBL.getLockerDTO != null ? lockerBL.getLockerDTO.Identifier.ToString() : "-1", TrxLines[i].lockerAllocationDTO.ZoneCode, TrxLines[i].LockerMake, mode);
                                    }
                                    else
                                    {
                                        message = Utilities.MessageUtils.getMessage(4014);
                                        if (SQLTrx == null) //SQLTransaction handled locally
                                            TrxTransacation.Rollback();
                                        if (TrxCnn != null)
                                            TrxCnn.Close();
                                        log.Error(message);
                                        log.LogMethodExit(message);
                                        return 1;
                                    }//Locker lockerBL = new Locker(TrxLines[i].lockerAllocationDTO.LockerId);
                                     //LockerDTO lockerDTO = lockerBL.GetLockerDetailsOnCardId(TrxLines[i].lockerAllocationDTO.CardId);
                                    LockerDTO lockerDTO = lockerBL.getLockerDTO;
                                    if (lockerDTO != null)
                                    {
                                        UpdateLockerStatus(SQLTrx, i, lockerDTO);
                                    }
                                }
                                else
                                    locker = new ParafaitLockCardHandler(TrxLines[i].card.ReaderDevice, TrxLines[i].card.Utilities.ExecutionContext);
                                LockerAllocationDTO lockerAllocationDTO = locker.GetLockerAllocationCardDetails(TrxLines[i].card.card_id);
                                if (lockerAllocationDTO == null)
                                {
                                    LockerAllocationList lockerAllocationList = new LockerAllocationList();
                                    List<KeyValuePair<LockerAllocationDTO.SearchByLockerAllocationParameters, string>> lockerAllocationSearchParams = new List<KeyValuePair<LockerAllocationDTO.SearchByLockerAllocationParameters, string>>();
                                    lockerAllocationSearchParams.Add(new KeyValuePair<LockerAllocationDTO.SearchByLockerAllocationParameters, string>(LockerAllocationDTO.SearchByLockerAllocationParameters.REFUNDED, "0"));
                                    lockerAllocationSearchParams.Add(new KeyValuePair<LockerAllocationDTO.SearchByLockerAllocationParameters, string>(LockerAllocationDTO.SearchByLockerAllocationParameters.CARD_ID, TrxLines[i].card.card_id.ToString()));
                                    List<LockerAllocationDTO> lockerAllocationDTOList = lockerAllocationList.GetAllLockerAllocations(lockerAllocationSearchParams);
                                    if (lockerAllocationDTOList != null && lockerAllocationDTOList.Count > 0)
                                    {
                                        List<LockerAllocationDTO> allocationDTOs = lockerAllocationDTOList.Where(x => (bool)((x.ValidToTime.CompareTo(ServerDateTime.Now)) == -1)).ToList<LockerAllocationDTO>();
                                        lockerAllocationDTO = allocationDTOs[0];
                                        locker.SetAllocation(allocationDTOs[0]);
                                    }
                                    if (lockerAllocationDTO == null)
                                    {
                                        if (SQLTrx == null) //SQLTransaction handled locally
                                            TrxTransacation.Rollback();
                                        if (TrxCnn != null)
                                            TrxCnn.Close();
                                        message = "No locker allocated " + ((TrxLines[i].card == null) ? "" : "for the card:" + TrxLines[i].card.CardNumber);
                                        return 1;
                                    }
                                }
                                locker.ReturnLocker(TrxTransacation);
                                InsertTrxLogs(Trx_id, line_number, Utilities.ParafaitEnv.LoginID, "LOCKER", "Locker Returned", TrxTransacation);

                            }
                            if (TrxLines[i].NotificationTagIssuedDTO != null)
                            {
                                try
                                {
                                    SaveNotificationTagIssued(TrxLines[i], line_number, TrxTransacation);
                                }
                                catch (Exception ex)
                                {
                                    message = Utilities.MessageUtils.getMessage(2961, ex.Message);
                                    if (SQLTrx == null) //SQLTransaction handled locally
                                        TrxTransacation.Rollback();
                                    if (TrxCnn != null)
                                        TrxCnn.Close();
                                    log.Error(ex);
                                    log.LogMethodExit(message);
                                    return 1;
                                }
                            }
                            TrxLines[i].DBLineId = line_number;
                        }
                    }
                    string finalMsg2 = MessageContainerList.GetMessage(Utilities.ExecutionContext, 4484, currentCount, totalCount);
                    //"Saving transaction line &1 of &2;
                    SendMessageToStatusMsgQueue(finalMsg2, totalCount, currentCount);
                    currentCount++;
                }
                // added 14-mar-2016 - 
                // modified 02/2019: BearCat Split product entitlement - moved from beginning to end of the transaction processing
                foreach (TransactionLine tlParent in mapSplitProductCards.Values)
                {
                    if (!tlParent.LineValid || tlParent.card == null || tlParent.ParentLine != null)
                        continue;

                    List<int> childCardIds = new List<int>();
                    foreach (TransactionLine tlChild in mapSplitProductCards.Values)
                    {
                        if (tlParent != tlChild && tlChild.LineValid && tlChild.card != null && tlParent == tlChild.ParentLine && tlChild.card.card_id != tlParent.card.card_id)
                        {
                            childCardIds.Add(tlChild.card.card_id);
                        }
                    }

                    if (childCardIds.Count > 0)
                    {
                        try
                        {
                            TaskProcs tp = new TaskProcs(Utilities);
                            if (!tp.BalanceTransferWithCreditPlus(tlParent.card.card_id, childCardIds, (int)tlParent.Credits, (int)tlParent.Bonus,
                                (int)tlParent.Courtesy, (int)tlParent.Tickets, "Transfer Entitlement from Parent card (" + tlParent.CardNumber + ")", ref message, Trx_id, tlParent.DBLineId, TrxTransacation))
                            {
                                if (SQLTrx == null) //SQLTransaction handled locally
                                    TrxTransacation.Rollback();
                                if (TrxCnn != null)
                                    TrxCnn.Close();

                                log.LogVariableState("message ", message);
                                log.LogMethodExit(1);
                                return 1;
                            }

                            foreach (TransactionLine tlChild in mapSplitProductCards.Values)
                            {
                                if (tlParent != tlChild && tlChild.LineValid && tlChild.card != null && tlParent == tlChild.ParentLine)
                                {
                                    InsertTrxLogs(Trx_id, tlParent.DBLineId, Utilities.ParafaitEnv.LoginID, "CARD", "Card Entitlements transferred from " + tlParent.CardNumber + " to " + tlChild.card.CardNumber, TrxTransacation);
                                }
                            }

                            int[] childcardIdArray = childCardIds.ToArray();
                            tp.LinkChildCard(tlParent.card.card_id, TrxTransacation, childcardIdArray);
                        }
                        catch (Exception ex)
                        {
                            if (SQLTrx == null) //SQLTransaction handled locally
                                TrxTransacation.Rollback();
                            if (TrxCnn != null)
                                TrxCnn.Close();

                            log.LogVariableState("message ", ex.Message);
                            log.LogMethodExit(1);
                            return 1;
                        }
                    }
                }
                ConvertCreditsForTimeForEligibleTrxLines(TrxTransacation);
                //end add
                //if (line_number == 0)
                //{
                //    if (SQLTrx == null) //SQLTransaction handled locally
                //        TrxTransacation.Rollback(); // no valid lines to save. trx is invalid.
                //    if (TrxCnn != null)
                //        TrxCnn.Close();
                //    message = Utilities.MessageUtils.getMessage(371);

                //    log.LogVariableState("message ", message);
                //    log.LogMethodExit(0);
                //    return 0;
                //}
                //else
                {
                    if (!CreateCreditCardSurcharge(PaymentCreditCardSurchargeAmount, TrxTransacation, ref message))
                    {
                        if (SQLTrx == null) //SQLTransaction handled locally
                            TrxTransacation.Rollback();
                        if (TrxCnn != null)
                            TrxCnn.Close();

                        log.LogVariableState("message ", message);
                        log.LogMethodExit(1);
                        return 1;
                    }
                    for (int i = 0; i < TrxLines.Count; i++)
                    {
                        if (TrxLines[i].LineValid &&
                            TrxLines[i].TransactionDiscountsDTOList != null &&
                            TrxLines[i].TransactionDiscountsDTOList.Count > 0)
                        {
                            saveDiscountLines(i, TrxLines[i].DBLineId, TrxTransacation, ref message);
                            ApprovalAction approval = TrxLines[i].GetApproval(ApprovalAction.GetApprovalActionType(ApprovalAction.ApprovalActionType.ADD_DISCOUNT));
                            DiscountContainerDTO logDiscountContainerDTO = DiscountContainerList.GetDiscountContainerDTO(Utilities.ExecutionContext, TrxLines[i].TransactionDiscountsDTOList[0].DiscountId);
                            string logDiscountName = string.Empty;
                            if (logDiscountContainerDTO != null)
                                logDiscountName = string.Concat(": ", logDiscountContainerDTO.DiscountName);
                            InsertTrxLogs(Trx_id, TrxLines[i].DBLineId, Utilities.ParafaitEnv.LoginID, "ADD", string.Concat("Discount Added", logDiscountName), TrxTransacation, approval.ApproverId, approval.ApprovalTime);
                        }
                    }
                    List<DiscountCouponsDTO> issuedDiscountCouponsDTOList = new List<DiscountCouponsDTO>();
                    for (int i = 0; i < TrxLines.Count; i++)
                    {
                        if (TrxLines[i].LineValid &&
                            TrxLines[i].IssuedDiscountCouponsDTOList != null &&
                            TrxLines[i].IssuedDiscountCouponsDTOList.Count > 0)
                        {
                            foreach (var discountCouponsDTO in TrxLines[i].IssuedDiscountCouponsDTOList)
                            {
                                discountCouponsDTO.TransactionId = Trx_id;
                                discountCouponsDTO.LineId = TrxLines[i].DBLineId;
                                if (discountCouponsDTO.CouponSetId == -1)
                                {
                                    issuedDiscountCouponsDTOList.Add(discountCouponsDTO);
                                }
                                //DiscountCouponsBL discountCouponsBL = new DiscountCouponsBL(Utilities.ExecutionContext, discountCouponsDTO);
                                //discountCouponsBL.Save(TrxTransacation);
                            }

                        }
                    }
                    if (issuedDiscountCouponsDTOList.Any())
                    {
                        DiscountCouponsListBL discountCouponsListBL = new DiscountCouponsListBL(Utilities.ExecutionContext, issuedDiscountCouponsDTOList);
                        discountCouponsListBL.Save(TrxTransacation);
                    }

                    List<TransactionLine> waiverLines = TrxLines.Where(tl => tl.WaiverSignedDTOList != null && tl.WaiverSignedDTOList.Any()).ToList();
                    totalCount = (waiverLines != null ? waiverLines.Count : 0);
                    currentCount = 1;

                    // Save Waivers Signed
                    for (int i = 0; i < TrxLines.Count; i++)
                    {
                        if (TrxLines[i].LineValid &&
                            TrxLines[i].WaiverSignedDTOList != null &&
                            TrxLines[i].WaiverSignedDTOList.Count > 0)
                        {
                            if (SaveWaiverSignedData(Trx_id, TrxLines[i], TrxTransacation) == false)// && closeTransaction)
                            {
                                //throw error for non website transactions only
                                if (closeTransaction && Utilities.ParafaitEnv.IsCorporate == false)
                                {
                                    message = Utilities.MessageUtils.getMessage(1507);
                                    log.LogVariableState("message ", message);
                                    log.LogMethodExit(1);
                                    if (SQLTrx == null) //SQLTransaction handled locally
                                        TrxTransacation.Rollback();
                                    if (TrxCnn != null)
                                        TrxCnn.Close();
                                    return 1;
                                }
                            }
                            string finalMsg3 = MessageContainerList.GetMessage(Utilities.ExecutionContext, 4485, currentCount, totalCount);
                            //"Saving waiver mapping details &1 of &2;
                            SendMessageToStatusMsgQueue(finalMsg3, totalCount, currentCount);
                            currentCount++;
                        }
                    }

                    // Ends Waivers Signed

                    SaveTransactionAttendees(TrxTransacation);

                    Trxcmd.Parameters.Add("@SplitTaxTrxId", SqlDbType.Int);
                    Trxcmd.Parameters.Add("@SplitTaxLineId", SqlDbType.Int);
                    Trxcmd.Parameters["@SplitTaxTrxId"].Value = -1;
                    Trxcmd.Parameters["@SplitTaxLineId"].Value = -1;

                    log.LogVariableState("@SplitTaxLineId", SqlDbType.Int);

                    for (int i = 0; i < TrxLines.Count; i++)
                    {
                        if (TrxLines[i].LineValid && TrxLines[i].productSplitTaxExists &&
                            TrxLines[i].TransactionDiscountsDTOList != null &&
                            TrxLines[i].TransactionDiscountsDTOList.Count == 1)
                        {
                            Trxcmd.CommandText = "delete from TrxTaxLines where trxId = @SplitTaxTrxId and LineId = @SplitTaxLineId";
                            Trxcmd.Parameters["@SplitTaxTrxId"].Value = Trx_id;
                            Trxcmd.Parameters["@SplitTaxLineId"].Value = TrxLines[i].DBLineId;
                            Trxcmd.ExecuteNonQuery();
                        }
                    }

                    Trxcmd.CommandText = "exec CreateTrxTaxLines @TrxId";

                    if (Trxcmd.Parameters != null && Trxcmd.Parameters.Contains("@TrxId") == false && Trx_id > 0)
                    {
                        Trxcmd.Parameters.AddWithValue("@TrxId", Trx_id);
                    }
                    Trxcmd.ExecuteNonQuery();

                    if (Utilities.ParafaitEnv.specialPricingId != -1)
                    {
                        if (Utilities.executeScalar(@"select top 1 1 
                                                        from tasks t, task_type ty 
                                                        where t.task_type_id = ty.task_type_id 
                                                        and t.value_loaded = @pricingId 
                                                        and t.Attribute1 = @trxId
                                                        and ty.task_type = 'SPECIALPRICING'",
                            new SqlParameter("@pricingId", Utilities.ParafaitEnv.specialPricingId),
                            new SqlParameter("@trxId", Trx_id)) == null)
                        {
                            TaskProcs taskProcs = new TaskProcs(Utilities);
                            taskProcs.createTask(-1, TaskProcs.SPECIALPRICING, Utilities.ParafaitEnv.specialPricingId, -1, -1, -1, -1, Trx_id, -1, Utilities.ParafaitEnv.specialPricingRemarks, TrxTransacation);

                            log.LogVariableState("@pricingId", Utilities.ParafaitEnv.specialPricingId);
                            log.LogVariableState("@trxId", Trx_id);
                        }
                    }

                    //Start update 10-Jun-2016
                    //Added to create a task for return/exchange transaction
                    if (Utilities.ParafaitEnv.SalesReturnType != null && Utilities.ParafaitEnv.SalesReturnType != "")
                    {
                        if (Utilities.executeScalar(@"select top 1 1 
                                                        from tasks t, task_type ty 
                                                        where t.task_type_id = ty.task_type_id 
                                                        and t.Attribute1 = @type
                                                        and t.Attribute2 = @trxId
                                                        and ty.task_type = 'SALESRETURNEXCHANGE'",
                            new SqlParameter("@type", Convert.ToInt32(Utilities.ParafaitEnv.SalesReturnType[0])),
                            new SqlParameter("@trxId", Trx_id)) == null)
                        {
                            TaskProcs taskProcs = new TaskProcs(Utilities);
                            taskProcs.createTask(-1, TaskProcs.SALESRETURNEXCHANGE, -1, -1, -1, -1, -1, Convert.ToInt32(Utilities.ParafaitEnv.SalesReturnType[0]), Trx_id, Utilities.ParafaitEnv.SalesReturnType + " of  " + OriginalTrxId + " Transaction.", TrxTransacation, -1, -1, -1, -1, Trx_id);

                            log.LogVariableState("@type", Convert.ToInt32(Utilities.ParafaitEnv.SalesReturnType[0]));
                            log.LogVariableState("@trxId", Trx_id);
                        }
                    }

                    //Begin Modification-Jan-07-2016-Added to commit the transaction if Transaction Number has reached the Maximum Limit//
                    //if (insertTrx == true)
                    int todaysFirstTrxId = (new Semnox.Core.GenericUtilities.CommonFuncs(Utilities)).getTodaysFirstTrxId(TrxTransacation);
                    if (closeTransaction && Status != TrxStatus.PENDING)
                    {
                        TrxPOSPrinterOverrideRulesDTO trxPOSPrinterOverrideRulesDTO = null;
                        if (trxPOSPrinterOverrideRulesDTOList != null && trxPOSPrinterOverrideRulesDTOList.Any())
                        {
                            SaveTrxPOSPrinterOverrideRulesDTOList(TrxTransacation);
                            trxPOSPrinterOverrideRulesDTO = trxPOSPrinterOverrideRulesDTOList.Find(ruleDTO => ruleDTO.OptionItemCode == POSPrinterOverrideOptionItemCode.SEQUENCE);
                        }
                        if (trxPOSPrinterOverrideRulesDTO != null)
                        {
                            TrxPOSPrinterOverrideRulesListBL trxPOSPrinterOverrideRulesListBL = new TrxPOSPrinterOverrideRulesListBL(Utilities.ExecutionContext);
                            string seqId = (trxPOSPrinterOverrideRulesListBL.GetSequenceId(trxPOSPrinterOverrideRulesDTO, TrxTransacation)).ToString();
                            SequencesDTO sequencesDTO = new SequencesBL(Utilities.ExecutionContext, Convert.ToInt32(seqId)).GetSequencesDTO;
                            SequencesBL sequencesBL = new SequencesBL(Utilities.ExecutionContext, sequencesDTO);
                            if (Utilities.ExecutionContext != null)
                            {
                                string nextSequenceNumber = sequencesBL.GetNextSequenceNo(TrxTransacation);
                                Trx_No = nextSequenceNumber;
                            }
                        }
                        else
                        {
                            if (ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "RESET_TRXNO_AT_POS_LEVEL") == "Y")
                            {
                                POSMachines posMachine = new POSMachines(Utilities.ExecutionContext, Utilities.ParafaitEnv.POSMachineId, false, false, TrxTransacation);
                                int lastTrxNo = posMachine.GetLastTrxNo(TrxTransacation) + 1;
                                Trx_No = lastTrxNo.ToString();
                            }
                            else
                            {
                                List<KeyValuePair<InvoiceSequenceMappingDTO.SearchByParameters, string>> searchParameters = new List<KeyValuePair<InvoiceSequenceMappingDTO.SearchByParameters, string>>();
                                List<InvoiceSequenceMappingDTO> invoiceSequenceMappingDTOList = new List<InvoiceSequenceMappingDTO>();
                                InvoiceSequenceMappingListBL invoiceSequenceMappingListBL = new InvoiceSequenceMappingListBL(Utilities.ExecutionContext);
                                searchParameters.Add(new KeyValuePair<InvoiceSequenceMappingDTO.SearchByParameters, string>(InvoiceSequenceMappingDTO.SearchByParameters.EFFECTIVE_DATE_LESSER_THAN, ServerDateTime.Now.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture)));
                                searchParameters.Add(new KeyValuePair<InvoiceSequenceMappingDTO.SearchByParameters, string>(InvoiceSequenceMappingDTO.SearchByParameters.ISACTIVE, "1"));
                                searchParameters.Add(new KeyValuePair<InvoiceSequenceMappingDTO.SearchByParameters, string>(InvoiceSequenceMappingDTO.SearchByParameters.INVOICE_TYPE, "DEBIT"));
                                invoiceSequenceMappingDTOList = invoiceSequenceMappingListBL.GetAllInvoiceSequenceMappingList(searchParameters);
                                if (invoiceSequenceMappingDTOList != null)
                                {
                                    var newinvoiceSequenceMappingDTOList = invoiceSequenceMappingDTOList.OrderByDescending(x => x.EffectiveDate).ToList();
                                    InvoiceSequenceSetupBL invoiceSequenceSetupBL = new InvoiceSequenceSetupBL(Utilities.ExecutionContext, newinvoiceSequenceMappingDTOList[0].InvoiceSequenceSetupId, TrxTransacation);

                                    try
                                    {
                                        string TrxNo = invoiceSequenceSetupBL.GetSequenceNumber(TrxTransacation);
                                        if (TrxNo != null)  //If mapping exists
                                        {
                                            Trx_No = TrxNo;
                                        }
                                    }
                                    catch (SeriesExpiredException ex)
                                    {
                                        log.Error("Error occurred while generating new sequence number - Series Expired ", ex);

                                        if (SQLTrx == null) //SQLTransaction handled locally
                                            TrxTransacation.Rollback();
                                        if (TrxCnn != null)
                                            TrxCnn.Close();
                                        message = Utilities.MessageUtils.getMessage(1333);

                                        log.LogVariableState("message ", message);
                                        log.LogMethodExit(1);
                                        return 1;
                                    }
                                    catch (SeriesEndNumberExceededException ex)
                                    {
                                        log.Error("Error occurred while generating new sequence number - Series End number exceeded", ex);

                                        if (SQLTrx == null) //SQLTransaction handled locally
                                            TrxTransacation.Rollback();
                                        if (TrxCnn != null)
                                            TrxCnn.Close();
                                        message = Utilities.MessageUtils.getMessage(1334);

                                        log.LogMethodExit(1);
                                        return 1;
                                    }
                                }
                                else // Use regular series
                                {
                                    Trx_No = (new CommonFuncs(Utilities)).getNextTrxNo(Utilities.ParafaitEnv.POSMachineId, OrderTypeGroupId, TrxTransacation);
                                }
                            }
                        }
                        TokenNumber = ((Convert.ToInt32(Trx_id - todaysFirstTrxId) % Utilities.ParafaitEnv.MaxTokenNumber) + 1).ToString();
                        Trxcmd.CommandText = "update trx_header set trx_no = @trx_no, TokenNumber = @TokenNumber where trxId = @trxId";
                        Trxcmd.Parameters.AddWithValue("trx_no", Trx_No);
                        Trxcmd.Parameters.AddWithValue("TokenNumber", TokenNumber);
                        Trxcmd.ExecuteNonQuery();
                    }
                    else if (insertTrx == true)
                    {
                        Trx_No = (new CommonFuncs(Utilities)).getNextBillNo(Utilities.ParafaitEnv.POSMachineId, OrderTypeGroupId, TrxTransacation);

                        if (!string.IsNullOrEmpty(ParafaitEnv.MaxTransactionNumber))
                        {
                            string TransactionNumber = Regex.Match(Trx_No, @"\d+").Value; //Added on Jan-07-2016 -To exclude prefix/Suffix in the transaction Number
                            if (Convert.ToInt32(TransactionNumber) > Convert.ToInt32(ParafaitEnv.MaxTransactionNumber))
                            {
                                if (SQLTrx == null) //SQLTransaction handled locally
                                    TrxTransacation.Rollback();
                                if (TrxCnn != null)
                                    TrxCnn.Close();

                                message = Utilities.MessageUtils.getMessage(955);

                                log.LogVariableState("message ", message);
                                log.LogMethodExit(1);
                                return 1;
                            }
                        }



                        int DiffTrxId = Convert.ToInt32(Trx_id - todaysFirstTrxId);
                        TokenNumber = ((DiffTrxId % Utilities.ParafaitEnv.MaxTokenNumber) + 1).ToString();

                        Trxcmd.CommandText = "update trx_header set trx_no = @trx_no, TokenNumber = @TokenNumber where trxId = @trxId";
                        Trxcmd.Parameters.AddWithValue("trx_no", Trx_No);
                        Trxcmd.Parameters.AddWithValue("TokenNumber", TokenNumber);
                        Trxcmd.ExecuteNonQuery();
                    }

                    //End Modification-Jan-07-2016-Added to commit the transaction if Transaction Number has reached the Maximum Limit//

                    CreditPlus creditPlus = new CreditPlus(Utilities);
                    if (!creditPlus.deductCreditPlusConsumptionBalance(this, TrxTransacation))
                    {
                        if (SQLTrx == null) //SQLTransaction handled locally
                            TrxTransacation.Rollback();
                        if (TrxCnn != null)
                            TrxCnn.Close();

                        message = "Unable to deduct CreditPlus consumption balance";
                        log.LogVariableState("message ", message);
                        log.LogMethodExit(1);
                        return 1;
                    }

                    //2.80.0
                    //if (TransactionPaymentsDTOList.Where(x => x.paymentModeDTO != null && x.paymentModeDTO.IsCreditCard
                    //                                    && !x.paymentModeDTO.GatewayLookUp.Equals(PaymentGateways.None)).Count() > 0)
                    //{
                    //    if (SQLTrx == null) // transaction handled locally
                    //    {
                    //        TrxTransacation.Commit();
                    //        TrxCnn.Close();

                    //        TrxCnn = Utilities.createConnection();
                    //        TrxTransacation = TrxCnn.BeginTransaction();

                    //        Trxcmd.Connection = TrxCnn;
                    //        Trxcmd.Transaction = TrxTransacation;
                    //    }
                    //    //break;
                    //    //    }
                    //    //}
                    //}


                    if (!CreatePaymentInfo(TrxTransacation, ref message))
                    {
                        // if proc has failed but if any payment through credit card gateway is processed successfully, commit trx to keep the association
                        bool ccGWProcessedFound = false;
                        if (TransactionPaymentsDTOList.Where(x => x.paymentModeDTO != null && x.paymentModeDTO.IsCreditCard
                                                        && !x.paymentModeDTO.GatewayLookUp.Equals(PaymentGateways.None)
                                                        && x.GatewayPaymentProcessed).Count() > 0)
                        {
                            ccGWProcessedFound = true;
                        }

                        if (ccGWProcessedFound == false)
                        {
                            if (SQLTrx == null) //SQLTransaction handled locally
                                TrxTransacation.Rollback();
                        }
                        else
                            TrxTransacation.Commit();

                        if (TrxCnn != null)
                            TrxCnn.Close();

                        log.LogVariableState("message ", message);
                        log.LogMethodExit(1);
                        return 1;
                    }
                    UpdateCoupon(TrxTransacation);
                    string finalMsg4 = MessageContainerList.GetMessage(Utilities.ExecutionContext, "Saving transaction.");
                    SendMessageToStatusMsgQueue(finalMsg4, 100, 80);
                    if (closeTransaction)
                    {
                        string transactionStatusBeforeClose = "";
                        string transactionPaymentModeBeforeClose = "";
                        DataTable dtTrxStatusPayMode = Utilities.executeDataTable(@"select status, payment_mode from trx_header where trxId = @trxId",
                                                                  TrxTransacation,
                                                                  new SqlParameter("@trxId", Trx_id));
                        if (dtTrxStatusPayMode.Rows.Count > 0)
                        {
                            transactionStatusBeforeClose = dtTrxStatusPayMode.Rows[0]["status"].ToString();
                            transactionPaymentModeBeforeClose = dtTrxStatusPayMode.Rows[0]["payment_mode"].ToString();
                        }

                        if (CompleteTransaction(TrxTransacation, ref message) == false)
                        {
                            if (SQLTrx == null) //SQLTransaction handled locally
                                TrxTransacation.Rollback();
                            if (TrxCnn != null)
                                TrxCnn.Close();
                            if (string.IsNullOrEmpty(message))//Modification on 17-May-2016 for adding PosPlus 
                                message = Utilities.MessageUtils.getMessage(526);

                            log.LogVariableState("message ", message);
                            log.LogMethodExit(1);
                            return 1;
                        }
                        if (transactionStatusBeforeClose != TrxStatus.PENDING.ToString() && transactionPaymentModeBeforeClose.Trim().Length == 0)
                        {
                            LoyaltyRuleListBL loyaltyRuleListBL = new LoyaltyRuleListBL(Utilities.ExecutionContext);
                            List<KeyValuePair<LoyaltyRuleDTO.SearchByParameters, string>> searchParameters = new List<KeyValuePair<LoyaltyRuleDTO.SearchByParameters, string>>();
                            searchParameters.Add(new KeyValuePair<LoyaltyRuleDTO.SearchByParameters, string>(LoyaltyRuleDTO.SearchByParameters.ACTIVE_FLAG, "Y"));
                            searchParameters.Add(new KeyValuePair<LoyaltyRuleDTO.SearchByParameters, string>(LoyaltyRuleDTO.SearchByParameters.APPLY_IMMEDIATE, "Y"));
                            List<LoyaltyRuleDTO> loyaltyRuleDTOList = loyaltyRuleListBL.GetLoyaltyRuleDTOList(searchParameters, SQLTrx);
                            if (loyaltyRuleDTOList != null && loyaltyRuleDTOList.Count > 0)
                            {
                                Loyalty loyalty = new Loyalty(Utilities);
                                loyalty.LoyaltyOnPurchase(Trx_id, "Y", TrxTransacation);
                                loyalty.LoyaltyOnProductConsumption(Trx_id, TrxTransacation, POSMachine, "Y");
                            }
                        }

                    }

                    finalMsg4 = MessageContainerList.GetMessage(Utilities.ExecutionContext, "Saving Transaction.");
                    SendMessageToStatusMsgQueue(finalMsg4, 100, 90);
                    try
                    {   //Membership purchase
                        for (int i = 0; i < TrxLines.Count; i++)
                        {
                            if (TrxLines[i].LineValid && TrxLines[i].LineProcessed && TrxLines[i].MembershipId > -1 && TrxLines[i].MembershipRewardsId == -1)
                            {
                                TrxLines[i].card.getCardDetails(TrxLines[i].card.card_id, TrxTransacation);
                                AssignPurchasedMembership(TrxLines[i], TrxTransacation);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        if (SQLTrx == null) //SQLTransaction handled locally
                            TrxTransacation.Rollback();
                        if (TrxCnn != null)
                            TrxCnn.Close();
                        if (string.IsNullOrEmpty(message))
                            message = Utilities.MessageUtils.getMessage(1492);
                        log.Error(message, ex);
                        log.LogMethodExit(1);
                        return 1;
                    }
                    if (closeTransaction)
                    {
                        try
                        {
                            SendSubscriptionPurchaseMessage(MessagingClientDTO.MessagingChanelType.NONE, TrxTransacation);
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex);
                        }
                    }
                    if (SQLTrx == null) // commit if sql transaction was not managed externally
                    {
                        TrxTransacation.Commit();
                        TrxCnn.Close();

                        if (Utilities.ParafaitEnv.POSTTransactionProcessingExists)
                        {
                            System.Threading.ThreadStart thr = delegate
                            {
                                if (transactionUtils.IsPostTransactionProcessIsolated("POSPlus").Equals("Y"))//starts:Modification on 17-May-2016 for adding PosPlus 
                                {
                                    Utilities.executeNonQuery("exec SPPosttransactionprocessing @trxId", new SqlParameter("@trxId", Trx_id));
                                }//Ends:Modification on 17-May-2016 for adding PosPlus 
                            };
                            new System.Threading.Thread(thr).Start();
                        }
                    }
                }
            }
            catch (Exception e)
            {
                log.Error("Error in saveTransaction", e);

                if (e.GetType() == typeof(System.Data.SqlClient.SqlException))
                {
                    e = new Exception("SQL exception encountered. Check log files to get more details.");
                    //retMessage = "SqlException";
                }

                if (SQLTrx == null)
                    TrxTransacation.Rollback();
                if (TrxCnn != null)
                    TrxCnn.Close();
                message = e.Message;

                log.LogVariableState("message ", message);
                log.LogMethodExit(1);
                return 1;
            }
            if (this.TrxLines != null && this.TrxLines.Exists(tl => tl.LineValid && tl.card != null))
            {
                GameCardReadTime = ServerDateTime.Now;
            }
            Trxcmd.Dispose();
            Invcmd.Dispose();

            string finalMsg5 = MessageContainerList.GetMessage(Utilities.ExecutionContext, "Saving Transaction.");
            SendMessageToStatusMsgQueue(finalMsg5, 100, 100);
            if (closeTransaction == false)
            {
                message += Utilities.MessageUtils.getMessage(169, Trx_No);
            }
            else
            {
                message += Utilities.MessageUtils.getMessage(372, Trx_No, TokenNumber);
            }
            if (closeTransaction)
                Status = TrxStatus.CLOSED;
            log.LogVariableState("message ", message);
            log.LogMethodExit(0);
            return 0;
        }

        private void UpdateLockerStatus(SqlTransaction SQLTrx, int i, LockerDTO lockerDTO)
        {
            log.LogMethodEntry(SQLTrx, i, lockerDTO);
            try
            {
                Locker lockerBL = new Locker(TrxLines[i].card.Utilities.ExecutionContext, lockerDTO);
                lockerBL.getLockerDTO.LockerStatus = "O";
                lockerBL.getLockerDTO.StatusChangeDate = ServerDateTime.Now;
                LockerLog.POSLockerLogMessage(TrxLines[i].lockerAllocationDTO.LockerId, "Debug", "Locker Status updated:" + TrxLines[i].lockerAllocationDTO.CardNumber, "O");
                lockerBL.Save(SQLTrx);
            }
            catch (Exception ex)
            {
                log.Error(ex);
                log.LogMethodExit(ex.Message);
                throw ex;
            }
            log.LogMethodExit();
        }

        /// <summary>
        /// Method to save NotificationTagIssued for Radian bands after assigning 
        /// the properties. Handles Attraction, Check-in/out and Card
        /// </summary>
        /// <param name="transactionLine">Line object</param>
        /// <param name="lineId">Line number of the line</param>
        /// <param name="sqlTrx">SQL Transaction</param>
        private void SaveNotificationTagIssued(TransactionLine transactionLine, int lineId, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(transactionLine, lineId, sqlTrx);
            try
            {
                //Check Tag Communication status
                DateTime startDate = Utilities.getServerTime().Date;
                int businessStartTime;
                if (int.TryParse(ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "BUSINESS_DAY_START_TIME"), out businessStartTime) == false)
                {
                    businessStartTime = 6;
                }
                startDate = startDate.AddHours(businessStartTime);
                if (startDate.Hour < businessStartTime)
                {
                    startDate = startDate.AddDays(-1);
                }
                if (transactionLine.LineCheckOutDetailDTO == null)
                {
                    transactionLine.NotificationTagIssuedDTO.CardId = transactionLine.card.card_id;
                    transactionLine.NotificationTagIssuedDTO.IssueDate
                        = transactionLine.card.issue_date < startDate ? Utilities.getServerTime() : transactionLine.card.issue_date;
                    transactionLine.NotificationTagIssuedDTO.TransactionId = Trx_id;
                    transactionLine.NotificationTagIssuedDTO.LineId = lineId;
                }
                if (transactionLine.LineAtb != null
                    && transactionLine.LineAtb.AttractionBookingDTO != null)
                {
                    transactionLine.NotificationTagIssuedDTO.StartDate = transactionLine.LineAtb.AttractionBookingDTO.ScheduleFromDate;
                    transactionLine.NotificationTagIssuedDTO.ExpiryDate = transactionLine.LineAtb.AttractionBookingDTO.ScheduleToDate;
                }
                else if (transactionLine.LineCheckInDetailDTO != null)
                {
                    transactionLine.NotificationTagIssuedDTO.StartDate = ServerDateTime.Now; // Has value
                    transactionLine.NotificationTagIssuedDTO.ExpiryDate
                        = ((transactionLine.LineCheckInDetailDTO.CheckOutTime == null)
                                                               ? DateTime.MinValue
                                                               : (DateTime)transactionLine.LineCheckInDetailDTO.CheckOutTime);
                }
                else if (transactionLine.LineCheckInDTO != null
                         && transactionLine.LineCheckOutDetailDTO != null)
                {
                    transactionLine.NotificationTagIssuedDTO.ExpiryDate
                        = ((transactionLine.LineCheckOutDetailDTO.CheckOutTime == null)
                                                               ? Utilities.getServerTime()
                                                               : (DateTime)transactionLine.LineCheckOutDetailDTO.CheckOutTime);
                    if (transactionLine.LineCheckOutDetailDTO.CheckOutTime == null)
                    {
                        transactionLine.NotificationTagIssuedDTO.IsReturned = true;
                        transactionLine.NotificationTagIssuedDTO.ReturnDate = Utilities.getServerTime();
                    }
                }
                else //Card Entitlement
                {
                    AccountDTO accountDTO = new AccountBL(Utilities.ExecutionContext, transactionLine.card.card_id, true, true, sqlTrx).AccountDTO;
                    List<AccountCreditPlusDTO> accountCreditPlusDTOList
                        = accountDTO.AccountCreditPlusDTOList == null ? null
                                                             : accountDTO.AccountCreditPlusDTOList.Where(x => x.TransactionId == Trx_id && x.TransactionLineId == lineId).ToList();
                    List<AccountGameDTO> accountGameDTOList
                        = accountDTO.AccountGameDTOList == null ? null
                                              : accountDTO.AccountGameDTOList.Where(x => x.TransactionId == Trx_id && x.TransactionLineId == lineId).ToList();
                    if (accountCreditPlusDTOList != null)
                    {
                        accountCreditPlusDTOList.OrderBy(x => x.PeriodFrom).ToList();
                        transactionLine.NotificationTagIssuedDTO.StartDate
                            = accountCreditPlusDTOList[0].PeriodFrom == null ? transactionLine.card.issue_date
                                                                             : (DateTime)accountCreditPlusDTOList[0].PeriodFrom;
                        accountCreditPlusDTOList.OrderByDescending(x => x.PeriodTo).ToList();
                        transactionLine.NotificationTagIssuedDTO.ExpiryDate
                            = accountCreditPlusDTOList[0].PeriodTo == null ? DateTime.MinValue
                                                                           : (DateTime)accountCreditPlusDTOList[0].PeriodTo;
                    }
                    else if (accountGameDTOList != null)
                    {
                        accountGameDTOList.OrderBy(x => x.FromDate).ToList();
                        transactionLine.NotificationTagIssuedDTO.StartDate
                            = accountGameDTOList[0].FromDate == null ? transactionLine.card.issue_date
                                                                             : (DateTime)accountGameDTOList[0].FromDate;
                        accountGameDTOList.OrderByDescending(x => x.ExpiryDate).ToList();
                        transactionLine.NotificationTagIssuedDTO.ExpiryDate
                            = accountGameDTOList[0].ExpiryDate == null ? DateTime.MinValue
                                                                           : (DateTime)accountGameDTOList[0].ExpiryDate;
                    }
                }
                if (transactionLine.NotificationTagIssuedDTO.NotificationTagProfileId > -1)
                {
                    NotificationTagIssuedBL notificationTagIssuedBL = new NotificationTagIssuedBL(Utilities.ExecutionContext, transactionLine.NotificationTagIssuedDTO);
                    notificationTagIssuedBL.Save(sqlTrx);
                    InsertTrxLogs(Trx_id, lineId, Utilities.ParafaitEnv.LoginID, "RADIAN", "Radian data saved. Tag Number: " + transactionLine.CardNumber, sqlTrx);
                }
                else
                {
                    log.LogVariableState("RADIAN Issue save: ", transactionLine.NotificationTagIssuedDTO);
                    InsertTrxLogs(Trx_id, lineId, Utilities.ParafaitEnv.LoginID, "RADIAN", "Radian data not saved as profile id is not assigned. Tag Number: " + transactionLine.CardNumber, sqlTrx);
                }
                log.LogMethodExit(transactionLine.NotificationTagIssuedDTO);
            }
            catch (Exception ex)
            {
                log.Error(ex);
                log.LogMethodExit(ex.Message);
                throw ex;
            }
        }

        public bool AlreadyUsedOTP(string transactionOTP, SqlTransaction trxTransacation)
        {
            log.LogMethodEntry(transactionOTP, trxTransacation);
            bool alreadyUsedOTP = false;
            Object otpExists = Utilities.executeScalar(@"Select top 1 1 
                                                           from trx_header th WITH(INDEX(trx_date)) 
                                                          where th.Status not in ('CANCELLED','SYSTEMABANDONED') 
                                                            and th.TrxDate >= Cast(getdate()-30 as date) 
                                                            and th.TransactionOTP is not null
                                                            and th.TransactionOTP = @TransactionOTP", trxTransacation, new SqlParameter[] { new SqlParameter("@TransactionOTP", transactionOTP) });
            if (otpExists != null)
            {
                alreadyUsedOTP = true;
            }
            log.LogMethodExit(alreadyUsedOTP);
            return alreadyUsedOTP;
        }


        /// <summary>
        /// Method to get list of printable lines 
        /// and create total list of valid lines to print mapping
        /// </summary>
        /// <param name="sqlTransaction"></param>
        /// <returns>List<EligibleTrxLinesPrinterMapper></returns>
        public void GetPrintableTransactionLines(List<POSPrinterDTO> posPrinterDTOList, SqlTransaction sqlTransaction = null)
        {
            log.LogMethodEntry();
            List<EligibleTrxLinesPrinterMapper> eligibleTrxlinePrinterMapperList = new List<EligibleTrxLinesPrinterMapper>();
            List<ValidTrxLinePrinterListMapper> validTrxLinePrinterListMapperList = new List<ValidTrxLinePrinterListMapper>();

            List<TransactionLine> trxLinesList = new List<TransactionLine>();
            foreach (TransactionLine trxLine in TrxLines)
            {
                if (trxLine.DBLineId > 0 && trxLine.LineValid)
                {
                    List<POSPrinterDTO> posPrinterSpecificProductsDTOList = posPrinterDTOList.FindAll(x => x.PrinterDTO != null
                                                                                                      && x.PrinterDTO.PrintableProductIds != null
                                                                                                      && x.PrinterDTO.PrintableProductIds.Contains(trxLine.ProductID));
                    if (posPrinterSpecificProductsDTOList != null && posPrinterSpecificProductsDTOList.Count > 0)//Product is found in Printer Product List
                    {
                        foreach (POSPrinterDTO posPrinterSpecificProductDTO in posPrinterSpecificProductsDTOList)
                        {
                            if (!trxLine.ReceiptPrinted && !trxLine.KDSSent && trxLine.PrintKOT && eligibleTrxlinePrinterMapperList.Exists(x => x.POSPrinterDTO.Equals(posPrinterSpecificProductDTO)))
                            {//Printer exists. Add trxline to the List for respective printer
                                int index = eligibleTrxlinePrinterMapperList.FindIndex(x => x.POSPrinterDTO.Equals(posPrinterSpecificProductDTO));
                                eligibleTrxlinePrinterMapperList[index].TrxLines.Add(trxLine);
                            }
                            else if (!trxLine.ReceiptPrinted && !trxLine.KDSSent && trxLine.PrintKOT)//Printer doesnt exist in List, add printer and respective trx line
                            {
                                EligibleTrxLinesPrinterMapper eligibleTrxLinesPrinterSpecificProductMapper = new EligibleTrxLinesPrinterMapper();
                                eligibleTrxLinesPrinterSpecificProductMapper.POSPrinterDTO = posPrinterSpecificProductDTO;
                                eligibleTrxLinesPrinterSpecificProductMapper.TrxLines.Add(trxLine);
                                eligibleTrxlinePrinterMapperList.Add(eligibleTrxLinesPrinterSpecificProductMapper);
                            }
                            //Add to valid list for further comparison. This will contain Line and List of PrinterDTO
                            if (validTrxLinePrinterListMapperList.Exists(x => x.PrintableTrxLine.Equals(trxLine)))
                            {//Line exists. Add POSPrinterDTO to the List for respective trx line
                                int index = validTrxLinePrinterListMapperList.FindIndex(x => x.PrintableTrxLine.Equals(trxLine));
                                validTrxLinePrinterListMapperList[index].POSPrinterDTOList.Add(posPrinterSpecificProductDTO);
                            }
                            else //Line doesnt exist in List, add Line and respective POSPrinterDTO
                            {
                                ValidTrxLinePrinterListMapper validTrxLinePrinterListSpecificPrinterMapper = new ValidTrxLinePrinterListMapper();
                                validTrxLinePrinterListSpecificPrinterMapper.PrintableTrxLine = trxLine;
                                validTrxLinePrinterListSpecificPrinterMapper.POSPrinterDTOList.Add(posPrinterSpecificProductDTO);
                                validTrxLinePrinterListMapperList.Add(validTrxLinePrinterListSpecificPrinterMapper);
                            }
                        }
                    }
                    else if (trxLine.ParentLine != null && trxLine.ParentLine.LineValid)//Product not found but Parent Line exists
                    {
                        // Find Mapping list for Parent line to get list of POSPrinterDTO
                        if (validTrxLinePrinterListMapperList.Exists(x => x.PrintableTrxLine.Equals(trxLine.ParentLine)))
                        {
                            int index = validTrxLinePrinterListMapperList.FindIndex(x => x.PrintableTrxLine.Equals(trxLine.ParentLine));
                            List<POSPrinterDTO> posPrinterParentLineDTOList = new List<POSPrinterDTO>();
                            posPrinterParentLineDTOList = validTrxLinePrinterListMapperList[index].POSPrinterDTOList;
                            if (!validTrxLinePrinterListMapperList.Exists(x => x.PrintableTrxLine.Equals(trxLine)))
                            {//Add child line and Parent Printer list to Valid Mapper list for further processing
                                ValidTrxLinePrinterListMapper validTrxLinePrinterListSpecificPrinterMapper = new ValidTrxLinePrinterListMapper();
                                validTrxLinePrinterListSpecificPrinterMapper.PrintableTrxLine = trxLine;
                                validTrxLinePrinterListSpecificPrinterMapper.POSPrinterDTOList = posPrinterParentLineDTOList;
                                validTrxLinePrinterListMapperList.Add(validTrxLinePrinterListSpecificPrinterMapper);
                            }
                            //Add to Eligible Printing list for printing the item
                            if (!trxLine.ReceiptPrinted && !trxLine.KDSSent && trxLine.PrintKOT)
                            {
                                foreach (POSPrinterDTO posPrinterMissingLineDTO in posPrinterParentLineDTOList)
                                {//Add to eligible list for printing
                                    if (eligibleTrxlinePrinterMapperList.Exists(x => x.POSPrinterDTO.Equals(posPrinterMissingLineDTO)))
                                    {//Printer exists. Add trxline to the List for respective printer
                                        int missingIndex = eligibleTrxlinePrinterMapperList.FindIndex(x => x.POSPrinterDTO.Equals(posPrinterMissingLineDTO));
                                        if (posPrinterMissingLineDTO.PrinterDTO.PrinterType == PrinterDTO.PrinterTypes.KOTPrinter
                                            && !eligibleTrxlinePrinterMapperList[missingIndex].TrxLines.Exists(tl => tl.DBLineId == trxLine.ParentLine.DBLineId))
                                        {
                                            trxLine.ParentLine.PrintKOT = false;
                                            eligibleTrxlinePrinterMapperList[missingIndex].TrxLines.Add(trxLine.ParentLine);
                                        }
                                        eligibleTrxlinePrinterMapperList[missingIndex].TrxLines.Add(trxLine);
                                        eligibleTrxlinePrinterMapperList[missingIndex].TrxLines.OrderBy(x => x.DBLineId).ToList();
                                    }
                                    else
                                    {
                                        EligibleTrxLinesPrinterMapper eligibleTrxLinesPrinterSpecificProductMapper = new EligibleTrxLinesPrinterMapper();
                                        eligibleTrxLinesPrinterSpecificProductMapper.POSPrinterDTO = posPrinterMissingLineDTO;
                                        if (posPrinterMissingLineDTO.PrinterDTO.PrinterType == PrinterDTO.PrinterTypes.KOTPrinter
                                        && !eligibleTrxlinePrinterMapperList.Exists(x => x.POSPrinterDTO.Equals(posPrinterMissingLineDTO)
                                        && x.TrxLines.Exists(tl => tl.DBLineId == trxLine.ParentLine.DBLineId)))
                                        {//Add Parent as well to Modifier for KOT printing
                                            trxLine.ParentLine.PrintKOT = false;
                                            eligibleTrxLinesPrinterSpecificProductMapper.TrxLines.Add(trxLine.ParentLine);
                                        }
                                        eligibleTrxLinesPrinterSpecificProductMapper.TrxLines.Add(trxLine);
                                        eligibleTrxLinesPrinterSpecificProductMapper.TrxLines.OrderBy(x => x.DBLineId).ToList();
                                        eligibleTrxlinePrinterMapperList.Add(eligibleTrxLinesPrinterSpecificProductMapper);
                                    }
                                }
                            }
                        }
                        //else
                        //{//Line and ParentLine not found in the Printer list. Log in TrxLogs
                        //    InsertTrxLogs(Trx_id, trxLine.DBLineId, Utilities.ParafaitEnv.LoginID, "PRINT", "Line and Parent Line not mapped to printer", sqlTransaction);
                        //}
                    }
                }
            }
            // Logic to remove single COMBO line to Printer mapping from ELigible Print list.
            // This is required as Combo parent item might be mapped to all KOT Printers
            List<Transaction.EligibleTrxLinesPrinterMapper> eligibleComboLinePrinterMappingList = eligibleTrxlinePrinterMapperList.Where(x => x.POSPrinterDTO.PrinterDTO.PrinterType == PrinterDTO.PrinterTypes.KOTPrinter
                                                            && x.TrxLines.Exists(tl => tl.ProductTypeCode == "COMBO")).ToList();
            foreach (EligibleTrxLinesPrinterMapper eligibleComboLinePrinterMapper in eligibleComboLinePrinterMappingList)
            {
                List<Transaction.TransactionLine> comboLines = eligibleComboLinePrinterMapper.TrxLines.FindAll(tl => tl.ProductTypeCode == "COMBO");
                foreach (TransactionLine comboLine in comboLines)
                {
                    if (!eligibleComboLinePrinterMapper.TrxLines.Exists(x => x.ParentLine != null && x.ParentLine.Equals(comboLine)))
                        eligibleComboLinePrinterMapper.TrxLines.Remove(comboLine);
                }
                if (eligibleComboLinePrinterMapper.TrxLines.Count == 0)
                    eligibleTrxlinePrinterMapperList.Remove(eligibleComboLinePrinterMapper);
            }
            //Commented below code for Wristband and Card Printer. This is to enforce Display Group and Product selection feature
            //Handle Mapper list for Ticket, WB, Card and Receipt Printer
            // In case Ticket printer doesn't have product mapping, then entire transaction line is mapped to ticket printer
            //List<POSPrinterDTO> ticketPOSPrinterDTOList = posPrinterDTOList.FindAll(x => x.PrinterDTO.PrinterType == PrinterDTO.PrinterTypes.TicketPrinter);
            //foreach (POSPrinterDTO ticketPOSPrinterDTO in ticketPOSPrinterDTOList)
            //{
            //    if (eligibleTrxlinePrinterMapperList.Exists(x => x.POSPrinterDTO.Equals(ticketPOSPrinterDTO)))
            //        continue;
            //    else
            //    {
            //        EligibleTrxLinesPrinterMapper eligibleTrxLinesTicketPrinterMapper = new EligibleTrxLinesPrinterMapper();
            //        eligibleTrxLinesTicketPrinterMapper.POSPrinterDTO = ticketPOSPrinterDTO;
            //        eligibleTrxLinesTicketPrinterMapper.TrxLines.AddRange(TrxLines.FindAll(tl => tl.LineValid && !tl.ReceiptPrinted));
            //        eligibleTrxlinePrinterMapperList.Add(eligibleTrxLinesTicketPrinterMapper);
            //    }
            //}
            //if (ticketPOSPrinterDTOList.Count > 0)
            //{
            //    foreach (Transaction.TransactionLine ticketLine in TrxLines)
            //    {
            //        if (ticketLine.LineValid)
            //        {
            //            ValidTrxLinePrinterListMapper validTrxLineTicketPrinterListMapper = new ValidTrxLinePrinterListMapper();
            //            validTrxLineTicketPrinterListMapper.POSPrinterDTOList = ticketPOSPrinterDTOList;
            //            validTrxLineTicketPrinterListMapper.PrintableTrxLine = ticketLine;
            //            ValidTrxLinePrinterListMapperList.Add(validTrxLineTicketPrinterListMapper);
            //        }
            //    }
            //}
            //// In case RFID Card printer doesn't have product mapping, then entire transaction line is mapped to RFID Card printer
            //List<POSPrinterDTO> cardPOSPrinterDTOList = posPrinterDTOList.FindAll(x => x.PrinterDTO.PrinterType == PrinterDTO.PrinterTypes.CardPrinter);
            //foreach (POSPrinterDTO cardPOSPrinterDTO in cardPOSPrinterDTOList)
            //{
            //    if (eligibleTrxlinePrinterMapperList.Exists(x => x.POSPrinterDTO.Equals(cardPOSPrinterDTO)))
            //        continue;
            //    else
            //    {
            //        EligibleTrxLinesPrinterMapper eligibleTrxLinesCardPrinterMapper = new EligibleTrxLinesPrinterMapper();
            //        eligibleTrxLinesCardPrinterMapper.POSPrinterDTO = cardPOSPrinterDTO;
            //        eligibleTrxLinesCardPrinterMapper.TrxLines.AddRange(TrxLines.FindAll(tl => tl.LineValid && !tl.ReceiptPrinted));
            //        eligibleTrxlinePrinterMapperList.Add(eligibleTrxLinesCardPrinterMapper);
            //    }
            //}
            //if (cardPOSPrinterDTOList.Count > 0)
            //{
            //    foreach (Transaction.TransactionLine cardLine in TrxLines)
            //    {
            //        if (cardLine.LineValid)
            //        {
            //            ValidTrxLinePrinterListMapper validTrxLineCardPrinterListMapper = new ValidTrxLinePrinterListMapper();
            //            validTrxLineCardPrinterListMapper.POSPrinterDTOList = cardPOSPrinterDTOList;
            //            validTrxLineCardPrinterListMapper.PrintableTrxLine = cardLine;
            //            ValidTrxLinePrinterListMapperList.Add(validTrxLineCardPrinterListMapper);
            //        }
            //    }
            //}
            //// In case RFID Wristband printer doesn't have product mapping, then entire transaction line is mapped to RFID Wristband printer
            //List<POSPrinterDTO> wbPOSPrinterDTOList = posPrinterDTOList.FindAll(x => x.PrinterDTO.PrinterType == PrinterDTO.PrinterTypes.RFIDWBPrinter);
            //foreach (POSPrinterDTO wbPOSPrinterDTO in wbPOSPrinterDTOList)
            //{
            //    if (eligibleTrxlinePrinterMapperList.Exists(x => x.POSPrinterDTO.Equals(wbPOSPrinterDTO)))
            //        continue;
            //    else
            //    {
            //        EligibleTrxLinesPrinterMapper eligibleTrxLinesWBPrinterMapper = new EligibleTrxLinesPrinterMapper();
            //        eligibleTrxLinesWBPrinterMapper.POSPrinterDTO = wbPOSPrinterDTO;
            //        eligibleTrxLinesWBPrinterMapper.TrxLines.AddRange(TrxLines.FindAll(tl => tl.LineValid && !tl.ReceiptPrinted));
            //        eligibleTrxlinePrinterMapperList.Add(eligibleTrxLinesWBPrinterMapper);
            //    }
            //}
            //if (wbPOSPrinterDTOList.Count > 0)
            //{
            //    foreach (Transaction.TransactionLine wbLine in TrxLines)
            //    {
            //        if (wbLine.LineValid)
            //        {
            //            ValidTrxLinePrinterListMapper validTrxLineWBPrinterListMapper = new ValidTrxLinePrinterListMapper();
            //            validTrxLineWBPrinterListMapper.POSPrinterDTOList = wbPOSPrinterDTOList;
            //            validTrxLineWBPrinterListMapper.PrintableTrxLine = wbLine;
            //            ValidTrxLinePrinterListMapperList.Add(validTrxLineWBPrinterListMapper);
            //        }
            //    }
            //}
            //Receipt printer is added to Eligible list for printing. This is not required in ValidPrinter List
            //Receipt should always print all valid lines
            List<POSPrinterDTO> receiptPOSPrinterDTOList = posPrinterDTOList.FindAll(x => x.PrinterDTO.PrinterType == PrinterDTO.PrinterTypes.ReceiptPrinter);
            foreach (POSPrinterDTO receiptPOSPrinterDTO in receiptPOSPrinterDTOList)
            {
                if (eligibleTrxlinePrinterMapperList.Exists(x => x.POSPrinterDTO.Equals(receiptPOSPrinterDTO)))
                {
                    eligibleTrxlinePrinterMapperList.Find(tl => tl.POSPrinterDTO.Equals(receiptPOSPrinterDTO)).TrxLines.Clear();
                    eligibleTrxlinePrinterMapperList.Find(tl => tl.POSPrinterDTO.Equals(receiptPOSPrinterDTO)).TrxLines.AddRange(TrxLines.FindAll(tl => tl.LineValid));
                }
                else
                {
                    EligibleTrxLinesPrinterMapper eligibleTrxLinesReceiptPrinterMapper = new EligibleTrxLinesPrinterMapper();
                    eligibleTrxLinesReceiptPrinterMapper.POSPrinterDTO = receiptPOSPrinterDTO;
                    eligibleTrxLinesReceiptPrinterMapper.TrxLines.AddRange(TrxLines.FindAll(tl => tl.LineValid));
                    eligibleTrxlinePrinterMapperList.Add(eligibleTrxLinesReceiptPrinterMapper);
                }
            }
            EligibleTrxLinesPrinterMapperList = eligibleTrxlinePrinterMapperList;
            ValidTrxLinePrinterListMapperList = validTrxLinePrinterListMapperList;
            log.LogVariableState("Valid Trx Lines to Printer Mapping", ValidTrxLinePrinterListMapperList);
            log.LogVariableState("Eligible Trx Lines to Printer Mapping", EligibleTrxLinesPrinterMapperList);
            log.LogMethodExit(EligibleTrxLinesPrinterMapperList);
        }
        private void AssignPurchasedMembershipCheck(TransactionLine trxLine, SqlTransaction trxTransacation)
        {
            log.LogMethodEntry(trxLine, trxTransacation);
            try
            {
                if (trxLine.MembershipId > -1 && trxLine.MembershipRewardsId == -1)
                {
                    if (trxLine.card.customer_id == -1)
                    {
                        throw new Exception(Utilities.MessageUtils.getMessage(1491));
                    }

                    if (trxLine.card != null && trxLine.card.customerDTO != null && trxLine.card.customerDTO.MembershipId > -1)
                    {
                        ExecutionContext executionContext = GetExecutionContextForMembershipCheck();
                        Type type = Type.GetType("Semnox.Parafait.Customer.Membership.MembershipMasterList, Customer");
                        if (type != null)
                        {
                            //MembershipMasterList.LowerThanCurrentMembershipLevel(Utilities.ExecutionContext, trxLine.card.customerDTO.MembershipId, trxLine.MembershipId)
                            MethodInfo membershipMasterListMethod = type.GetMethod("LowerThanCurrentMembershipLevel");
                            bool returnValue = Convert.ToBoolean(membershipMasterListMethod.Invoke(null, new object[] { executionContext, trxLine.card.customerDTO.MembershipId, trxLine.MembershipId }));
                            if (returnValue)
                            {
                                throw new Exception("Purchased Membership is lower then current membership for the customer. Can not proceed assigning membership");
                            }
                        }
                    }
                }


            }
            catch (Exception ex)
            {
                log.Error(ex);
                throw new Exception(ex.Message);
            }
            log.LogMethodExit();
        }

        private void AssignPurchasedMembership(TransactionLine trxLine, SqlTransaction trxTransacation)
        {
            log.LogMethodEntry(trxLine, trxTransacation);
            try
            {
                if (trxLine.MembershipId > -1 && trxLine.MembershipRewardsId == -1)
                {
                    if (trxLine.card.customer_id == -1)
                    {
                        throw new Exception(Utilities.MessageUtils.getMessage(1491));
                    }
                    else
                    {
                        try
                        {
                            ExecutionContext executionContext = GetExecutionContextForMembershipCheck();
                            AccountBL accountBL = new AccountBL(executionContext, trxLine.card.card_id, true, true, trxTransacation);
                            CustomerBL customerBL = new CustomerBL(executionContext, trxLine.card.customerDTO, accountBL.AccountDTO, true, trxTransacation);
                            customerBL.SetPurchasedMembership(trxLine.MembershipId, trxTransacation);
                        }
                        catch (Exception ex)
                        {
                            log.Error("Error occurred while assigning membership", ex);
                            throw new Exception(Utilities.MessageUtils.getMessage(1492) + ex.Message);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                log.Error(Utilities.MessageUtils.getMessage(1492), ex);
                throw new Exception(ex.Message);
            }
            log.LogMethodExit();
        }
        public bool CompleteTransaction(SqlTransaction SQLTrx, ref string message)
        {
            log.LogMethodEntry(SQLTrx, message);

            SqlCommand Trxcmd = Utilities.getCommand(SQLTrx);
            Trxcmd.CommandText = @"select 1 from trx_header h 
                                    where TrxNetAmount = (select isnull(sum(Amount), 0)
						                                    from TrxPayments tp 
					                                    where tp.TrxId = h.TrxId)
                                    and TrxId = @trxId";
            Trxcmd.Parameters.AddWithValue("@trxId", Trx_id);
            log.LogVariableState("@trxId ", Trx_id);
            if (Trxcmd.ExecuteScalar() == null)
            {
                decimal NetAmount = Convert.ToDecimal(Utilities.executeScalar(@"select TrxNetamount from trx_header
                                                              where trxid = @trxid",
                                                              SQLTrx,
                                                              new SqlParameter("@trxid", Trx_id)));
                decimal PaidAmount = Convert.ToDecimal(Utilities.executeScalar(@"select isnull(sum(Amount), 0)
						                                    from TrxPayments tp 
					                                    where tp.TrxId  = @trxid",
                                                              SQLTrx,
                                                              new SqlParameter("@trxid", Trx_id)));
                if (NetAmount != PaidAmount)
                {
                    message = "Net Amount does not match total Trx Payments amount. Net Amount: " + NetAmount + ". , Paid Amount: " + PaidAmount + ".";
                    log.LogVariableState("message ", message);
                    log.LogMethodExit(false);
                    return false;
                }
            }

            Trxcmd.CommandText = @"update trx_header 
                                set status = 'CLOSED', CashAmount = pCashAmount, CreditCardAmount = pCreditCardAmount, 
                                    GameCardAmount = pGameCardAmount, OtherPaymentModeAmount = pOtherPaymentModeAmount,
                                    payment_mode = ISNULL((select case when pm.isCash = 'Y' then 1 
					                                    else case when pm.isCreditCard = 'Y' then 2 
						                                    else case when pm.isDebitCard = 'Y' then 3 
							                                    else 4 end end end
                                    from (select AVG(distinct tp.PaymentModeId) pmId
		                                    from TrxPayments tp, PaymentModes pm
		                                    where pm.PaymentModeId = tp.PaymentModeId
		                                    and pm.isRoundOff = 'N'
		                                    and tp.ParentPaymentId is null
		                                    and not exists (select 1 
						                                    from TrxPayments tp1
						                                    where tp1.TrxId = tp.TrxId
						                                    and tp.PaymentId = tp1.ParentPaymentId)
		                                    and trxid = @trxId
		                                    having count(distinct tp.PaymentModeId) = 1) v, paymentModes pm
                                    where pm.PaymentModeId = v.pmId), 5)
                                    from (select isnull(SUM(case when pm.isCash = 'Y' then amount else 0 end), 0) pCashAmount, 
			                                     isnull(SUM(case when pm.isDebitCard = 'Y' then amount else 0 end), 0) pGameCardAmount,
			                                     isnull(SUM(case when pm.isCreditCard = 'Y' then amount else 0 end), 0) pCreditCardAmount,
			                                     isnull(SUM(case when pm.isCash+pm.isCreditCard+pm.isDebitCard = 'NNN' then amount else 0 end), 0) pOtherPaymentModeAmount
		                                    from TrxPayments tp, PaymentModes pm
		                                    where tp.PaymentModeId = pm.PaymentModeId
		                                    and TrxId = @trxId) v
                                where trxId = @trxId";
            Trxcmd.ExecuteNonQuery();
            TransactionUtils transactionUtils = new TransactionUtils(Utilities);//starts:Modification on 17-May-2016 for adding PosPlus 
            if (transactionUtils.IsPostTransactionProcessIsolated("POSPlus").Equals("N"))
            {
                if (!transactionUtils.CallPostTransaction(SQLTrx, null, ref message, false, Transaction_Amount, Trx_id))
                {
                    log.LogVariableState("message ", message);
                    log.LogMethodExit(false);
                    return false;
                }
            }//Ends:Modification on 17-May-2016 for adding PosPlus 
            if (Order != null)
            {
                CompleteOrder(Order.OrderHeaderDTO.OrderId, SQLTrx);
            }
            ApprovalAction approval = GetApproval(ApprovalAction.GetApprovalActionType(ApprovalAction.ApprovalActionType.COMPLETE));
            InsertTrxLogs(Trx_id, -1, Utilities.ParafaitEnv.LoginID, "COMPLETE", "Transaction Completed", SQLTrx, approval.ApproverId, approval.ApprovalTime);

            //2.80.0 - Card Hold reset
            List<TransactionLine> TrxLinesListHavingCard = TrxLines.Where(x => x.card != null && x.LineValid).ToList();
            //Find transaction lines having card object. Once we get this, we need to check if lines are in Hold status
            //Once transaction starts having accountDTO instead of card object, check can be done directly
            if (TrxLinesListHavingCard != null && TrxLinesListHavingCard.Count > 0)
            {
                List<int> CardIdList = new List<int>();
                foreach (TransactionLine tl in TrxLinesListHavingCard)
                {
                    if (CardIdList.IndexOf(tl.card.card_id) < 0)
                        CardIdList.Add(tl.card.card_id);
                }
                AccountListBL accountListBL = new AccountListBL(Utilities.ExecutionContext);
                List<AccountDTO> accountDTOList = accountListBL.GetAccountDTOList(CardIdList, true, true, true, SQLTrx);
                //repeat process for every card in transaction
                //foreach (int cardId in CardIdList)
                for (int i = 0; i < accountDTOList.Count; i++)
                {
                    bool isCardOnHold = false;
                    AccountDTO accountDTO = accountDTOList[i];//new AccountBL(Utilities.ExecutionContext, cardId, true, true, SQLTrx).AccountDTO;
                                                              //Get related subscription billing cycle details
                    List<SubscriptionBillingScheduleDTO> subscriptionBillingScheduleDTOList = GetSubscriptionBillingScheduleDTOList(SQLTrx, accountDTO);
                    if (subscriptionBillingScheduleDTOList == null)
                    {
                        subscriptionBillingScheduleDTOList = new List<SubscriptionBillingScheduleDTO>();
                    }
                    if (accountDTO != null
                         && accountDTO.AccountCreditPlusDTOList != null
                         && accountDTO.AccountCreditPlusDTOList.Count > 0
                         && accountDTO.AccountCreditPlusDTOList.Exists(x => x.ValidityStatus == AccountDTO.AccountValidityStatus.Hold && x.TransactionId == Trx_id))
                    {
                        List<AccountCreditPlusDTO> accountCreditPlusHoldList = accountDTO.AccountCreditPlusDTOList.Where(x => x.ValidityStatus == AccountDTO.AccountValidityStatus.Hold
                                                                                                                         && x.TransactionId == Trx_id).ToList();
                        if (accountCreditPlusHoldList != null && accountCreditPlusHoldList.Any())
                        {
                            foreach (AccountCreditPlusDTO accountCPDTO in accountCreditPlusHoldList)
                            {
                                //Unbilled susbcription billing schedule related entitlements should not be released
                                if (accountCPDTO.SubscriptionBillingScheduleId == -1
                                    || subscriptionBillingScheduleDTOList.Exists(sbs => sbs.IsActive
                                                                         && sbs.SubscriptionBillingScheduleId == accountCPDTO.SubscriptionBillingScheduleId
                                                                         && sbs.TransactionId == -1) == false)
                                {
                                    isCardOnHold = true;
                                    accountCPDTO.ValidityStatus = AccountDTO.AccountValidityStatus.Valid;
                                }
                            }
                        }
                    }
                    if (accountDTO != null
                         && accountDTO.AccountGameDTOList != null
                         && accountDTO.AccountGameDTOList.Count > 0
                         && accountDTO.AccountGameDTOList.Exists(x => x.ValidityStatus == AccountDTO.AccountValidityStatus.Hold && x.TransactionId == Trx_id))
                    {
                        List<AccountGameDTO> accountGameHoldList = accountDTO.AccountGameDTOList.Where(x => x.ValidityStatus == AccountDTO.AccountValidityStatus.Hold && x.TransactionId == Trx_id).ToList();
                        if (accountGameHoldList != null && accountGameHoldList.Any())
                        {
                            foreach (AccountGameDTO accountGameDTO in accountGameHoldList)
                            {
                                //Unbilled susbcription billing schedule related entitlements should not be released
                                if (accountGameDTO.SubscriptionBillingScheduleId == -1
                                    || subscriptionBillingScheduleDTOList.Exists(sbs => sbs.IsActive
                                                                            && sbs.SubscriptionBillingScheduleId == accountGameDTO.SubscriptionBillingScheduleId
                                                                            && sbs.TransactionId == -1) == false)
                                {
                                    isCardOnHold = true;
                                    accountGameDTO.ValidityStatus = AccountDTO.AccountValidityStatus.Valid;
                                }
                            }
                        }
                    }
                    if (accountDTO != null
                         && accountDTO.AccountDiscountDTOList != null
                         && accountDTO.AccountDiscountDTOList.Count > 0
                         && accountDTO.AccountDiscountDTOList.Exists(x => x.ValidityStatus == AccountDTO.AccountValidityStatus.Hold && x.TransactionId == Trx_id))
                    {
                        List<AccountDiscountDTO> accountDiscountHoldList = accountDTO.AccountDiscountDTOList.Where(x => x.ValidityStatus == AccountDTO.AccountValidityStatus.Hold && x.TransactionId == Trx_id).ToList();
                        if (accountDiscountHoldList != null && accountDiscountHoldList.Any())
                        {
                            foreach (AccountDiscountDTO accountDiscountDTO in accountDiscountHoldList)
                            {
                                //Unbilled susbcription billing schedule related entitlements should not be released
                                if (accountDiscountDTO.SubscriptionBillingScheduleId == -1
                                || subscriptionBillingScheduleDTOList.Exists(sbs => sbs.IsActive
                                                                        && sbs.SubscriptionBillingScheduleId == accountDiscountDTO.SubscriptionBillingScheduleId
                                                                        && sbs.TransactionId == -1) == false)
                                {
                                    isCardOnHold = true;
                                    accountDiscountDTO.ValidityStatus = AccountDTO.AccountValidityStatus.Valid;
                                }
                            }
                        }

                    }
                    if (isCardOnHold)
                    {
                        AccountBL accountBL = new AccountBL(Utilities.ExecutionContext, accountDTO);
                        accountBL.Save(SQLTrx);
                        InsertTrxLogs(Trx_id, -1, Utilities.ParafaitEnv.LoginID, "Card HOLD", "Changed Hold Status of Card Entitlements to Active", SQLTrx);
                    }
                }
            }
            log.LogVariableState("message ", message);
            log.LogMethodExit(true);
            return true;
        }

        private List<SubscriptionBillingScheduleDTO> GetSubscriptionBillingScheduleDTOList(SqlTransaction SQLTrx, AccountDTO accountDTO)
        {
            log.LogMethodEntry((accountDTO != null ? accountDTO.AccountId : -1));
            List<SubscriptionBillingScheduleDTO> subscriptionBillingScheduleDTOList = new List<SubscriptionBillingScheduleDTO>();
            if (accountDTO != null)
            {
                if (this.TrxLines != null)
                {
                    List<TransactionLine> subscriptionTrxLines = this.TrxLines.Where(tl => tl.LineValid && tl.SubscriptionHeaderDTO != null && tl.SubscriptionHeaderDTO.SubscriptionBillingScheduleDTOList.Any()).ToList();
                    if (subscriptionTrxLines != null && subscriptionTrxLines.Any())
                    {
                        for (int i = 0; i < subscriptionTrxLines.Count; i++)
                        {
                            subscriptionBillingScheduleDTOList.AddRange(subscriptionTrxLines[i].SubscriptionHeaderDTO.SubscriptionBillingScheduleDTOList);
                        }
                    }
                }
                if (subscriptionBillingScheduleDTOList == null || subscriptionBillingScheduleDTOList.Any() == false)
                {
                    List<int> subscriptionBillingScheduleIdList = new List<int>();
                    if (accountDTO.AccountCreditPlusDTOList != null
                                 && accountDTO.AccountCreditPlusDTOList.Count > 0
                                 && accountDTO.AccountCreditPlusDTOList.Exists(x => x.ValidityStatus == AccountDTO.AccountValidityStatus.Hold && x.TransactionId == Trx_id))
                    {
                        List<AccountCreditPlusDTO> accountCreditPlusHoldList = accountDTO.AccountCreditPlusDTOList.Where(x => x.ValidityStatus == AccountDTO.AccountValidityStatus.Hold
                                                                                                                         && x.TransactionId == Trx_id).ToList();
                        if (accountCreditPlusHoldList != null && accountCreditPlusHoldList.Any())
                        {
                            List<AccountCreditPlusDTO> subscriptionCPList = accountCreditPlusHoldList.Where(cp => cp.SubscriptionBillingScheduleId != -1).ToList();
                            if (subscriptionCPList != null && subscriptionCPList.Any())
                            {
                                List<int> tempIdList = subscriptionCPList.Select(cp => cp.SubscriptionBillingScheduleId).ToList();
                                if (tempIdList != null && tempIdList.Any())
                                {
                                    subscriptionBillingScheduleIdList.AddRange(tempIdList);
                                }
                            }
                        }
                    }
                    if (accountDTO.AccountGameDTOList != null
                         && accountDTO.AccountGameDTOList.Count > 0
                         && accountDTO.AccountGameDTOList.Exists(x => x.ValidityStatus == AccountDTO.AccountValidityStatus.Hold && x.TransactionId == Trx_id))
                    {
                        List<AccountGameDTO> accountGameHoldList = accountDTO.AccountGameDTOList.Where(x => x.ValidityStatus == AccountDTO.AccountValidityStatus.Hold && x.TransactionId == Trx_id).ToList();
                        if (accountGameHoldList != null && accountGameHoldList.Any())
                        {
                            List<AccountGameDTO> subscriptionCGList = accountGameHoldList.Where(cg => cg.SubscriptionBillingScheduleId != -1).ToList();
                            if (subscriptionCGList != null && subscriptionCGList.Any())
                            {
                                List<int> tempIdList = subscriptionCGList.Select(cp => cp.SubscriptionBillingScheduleId).ToList();
                                if (tempIdList != null && tempIdList.Any())
                                {
                                    subscriptionBillingScheduleIdList.AddRange(tempIdList);
                                }
                            }
                        }
                    }
                    if (accountDTO.AccountDiscountDTOList != null
                         && accountDTO.AccountDiscountDTOList.Count > 0
                         && accountDTO.AccountDiscountDTOList.Exists(x => x.ValidityStatus == AccountDTO.AccountValidityStatus.Hold && x.TransactionId == Trx_id))
                    {
                        List<AccountDiscountDTO> accountDiscountHoldList = accountDTO.AccountDiscountDTOList.Where(x => x.ValidityStatus == AccountDTO.AccountValidityStatus.Hold && x.TransactionId == Trx_id).ToList();
                        if (accountDiscountHoldList != null && accountDiscountHoldList.Any())
                        {
                            List<AccountDiscountDTO> subscriptionCDList = accountDiscountHoldList.Where(cd => cd.SubscriptionBillingScheduleId != -1).ToList();
                            if (subscriptionCDList != null && subscriptionCDList.Any())
                            {
                                List<int> tempIdList = subscriptionCDList.Select(cp => cp.SubscriptionBillingScheduleId).ToList();
                                if (tempIdList != null && tempIdList.Any())
                                {
                                    subscriptionBillingScheduleIdList.AddRange(tempIdList);
                                }
                            }
                        }
                    }

                    if (subscriptionBillingScheduleIdList != null && subscriptionBillingScheduleIdList.Any())
                    {
                        subscriptionBillingScheduleIdList = subscriptionBillingScheduleIdList.Distinct().ToList();
                        SubscriptionBillingScheduleListBL subscriptionBillingScheduleListBL = new SubscriptionBillingScheduleListBL(Utilities.ExecutionContext);
                        subscriptionBillingScheduleDTOList = subscriptionBillingScheduleListBL.GetSubscriptionBillingScheduleDTOListById(subscriptionBillingScheduleIdList, SQLTrx);
                    }
                }
            }
            log.LogMethodExit(subscriptionBillingScheduleDTOList);
            return subscriptionBillingScheduleDTOList;
        }
        /// <summary>
        /// UpdateTrxLinesReceiptPrintedStatus
        /// </summary>
        /// <param name="LineId"></param>
        /// <returns></returns>
        public bool UpdateTrxLinesReceiptPrintedStatus(int LineId)
        {
            log.LogMethodEntry(LineId);
            if (this.Trx_id > 0)
            {
                SetReceiptPrintedStatus(LineId);
                this.Utilities.executeNonQuery(@"update trx_lines set ReceiptPrinted = @ReceiptPrinted
                                                where TrxId = @TrxId and LineId = @LineId",
                                        new SqlParameter("@TrxId", this.Trx_id),
                                        new SqlParameter("@ReceiptPrinted", true),
                                        new SqlParameter("@LineId", LineId));
            }
            log.LogMethodExit(true);
            return true;
        }

        public bool updateTrxLinesReceiptPrintedStatus()
        {
            log.LogMethodEntry();

            foreach (TransactionLine tl in TrxLines)
            {
                if (tl.DBLineId > 0 && tl.LineValid)
                    Utilities.executeNonQuery(@"update trx_lines set ReceiptPrinted = @ReceiptPrinted, KOTPrintCount = @KOTPrintCount
                                                where TrxId = @TrxId and LineId = @LineId",
                                              new SqlParameter("@TrxId", Trx_id),
                                              new SqlParameter("@ReceiptPrinted", tl.ReceiptPrinted),
                                              new SqlParameter("@KOTPrintCount", tl.KOTPrintCount),
                                              new SqlParameter("@LineId", tl.DBLineId));

                log.LogVariableState("@TrxId", Trx_id);
                log.LogVariableState("@ReceiptPrinted", tl.ReceiptPrinted);
                log.LogVariableState("@KOTPrintCount", tl.KOTPrintCount);
                log.LogVariableState("@LineId", tl.DBLineId);
            }

            log.LogMethodExit(true);
            return true;
        }

        /// <summary>
        /// Method to update Save and Print timings
        /// </summary>
        /// <param name="saveStartTime">save start time</param>
        /// <param name="saveEndTime">save end time</param>
        /// <param name="printStartTime">print start time</param>
        /// <param name="printEndTime">print end time</param>
        /// <param name="sqlTrx">sql transaction</param>
        /// <returns>true or false</returns>
        public bool UpdateTrxHeaderSavePrintTime(int trxId, DateTime? saveStartTime, DateTime? saveEndTime, DateTime? printStartTime, DateTime? printEndTime, SqlTransaction sqlTrx = null)
        {
            log.LogMethodEntry(Trx_id, saveStartTime, saveEndTime, printStartTime, printEndTime);
            if (trxId > 0)
            {
                try
                {
                    Utilities.executeNonQuery(@"update trx_header 
                                               set SaveStartTime = case when @SaveStartTime IS NULL 
                                                                        then SaveStartTime
                                                                        else @SaveStartTime
                                                                    end, 
                                                   SaveEndTime = case when @SaveEndTime IS NULL 
                                                                        then SaveEndTime
                                                                        else @SaveEndTime
                                                                    end,
                                                   PrintStartTime = case when @PrintStartTime IS NULL 
                                                                        then PrintStartTime
                                                                        else @PrintStartTime
                                                                    end,
                                                   PrintEndTime = case when @PrintEndTime IS NULL 
                                                                        then PrintEndTime
                                                                        else @PrintEndTime
                                                                    end,
                                                   LastUpdatedBy = @loginId
                                                where TrxId = @TrxId",
                                                sqlTrx,
                                                new SqlParameter("@TrxId", trxId),
                                                new SqlParameter("@SaveStartTime", saveStartTime == null ? (object)DBNull.Value : saveStartTime),
                                                new SqlParameter("@SaveEndTime", saveEndTime == null ? (object)DBNull.Value : saveEndTime),
                                                new SqlParameter("@PrintStartTime", printStartTime == null ? (object)DBNull.Value : printStartTime),
                                                new SqlParameter("@PrintEndTime", printEndTime == null ? (object)DBNull.Value : printEndTime),
                                                new SqlParameter("@loginId", Utilities.ParafaitEnv.LoginID));
                    //InsertTrxLogs(trxId, -1, Utilities.ParafaitEnv.LoginID, "LogTime", "Log Save/Print Time", sqlTrx);
                    log.LogMethodExit(true);
                    return true;
                }
                catch (Exception ex)
                {
                    log.Error("Error while updating save/print time", ex);
                    return false;
                }
            }
            else
            {
                log.LogMethodExit(false);
                return false;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public void UpdatePrintCount()
        {
            log.LogMethodEntry();

            try
            {
                Utilities.executeNonQuery(@"update trx_Header 
                                               set PrintCount = isnull(PrintCount, 0) + 1
                                             where TrxId = @TrxId",
                                            new SqlParameter("@TrxId", Trx_id));
            }
            catch (Exception ex)
            {
                log.Error("Unable to execute the print count update query", ex);
            }

            log.LogMethodExit(null);
        }

        public void updateReprintCount() //Starts: Modified on 17-May-2016 for PosPlus duplicate print count
        {
            log.LogMethodEntry();

            try
            {
                Utilities.executeNonQuery(@"update trx_Header 
                                               set ReprintCount = ReprintCount + 1
                                             where TrxId = @TrxId",
                                            new SqlParameter("@TrxId", Trx_id));
            }
            catch (Exception ex)
            {
                log.Error("Unable to execute the Update Transaction Query", ex);
            }

            log.LogMethodExit(null);
        }//Ends: Modified on 17-May-2016 for PosPlus duplicate print count

        public bool updateTrxLinesKDSSentStatus(Transaction.TransactionLine TrxLine, SqlTransaction sqlTrx = null)
        {
            log.LogMethodEntry();
            if (TrxLine.DBLineId > 0 && TrxLine.KDSSent)
                Utilities.executeNonQuery(@"update trx_lines set KDSSent = @KDSSent
                                                where TrxId = @TrxId and LineId = @LineId", sqlTrx,
                                          new SqlParameter("@TrxId", Trx_id),
                                          new SqlParameter("@KDSSent", TrxLine.KDSSent),
                                          new SqlParameter("@LineId", TrxLine.DBLineId));

            log.LogVariableState("@TrxId", Trx_id);
            log.LogVariableState("@KDSSent", TrxLine.KDSSent);
            log.LogVariableState("@LineId", TrxLine.DBLineId);
            log.LogMethodExit(true);
            return true;
        }
        HashSet<int> couponSetIdHashSet = new HashSet<int>();
        private ReservationDTO reservationDTO;

        bool saveDiscountLines(int LineId, int LineNumber, SqlTransaction TrxTransacation, ref string message)
        {
            log.LogMethodEntry(LineId, LineNumber, TrxTransacation, message);

            if (TrxLines[LineId].TransactionDiscountsDTOList != null)
            {
                foreach (var transactionDiscountsDTO in TrxLines[LineId].TransactionDiscountsDTOList)
                {
                    transactionDiscountsDTO.LineId = LineNumber;
                    transactionDiscountsDTO.TransactionId = Trx_id;
                    if (transactionDiscountsDTO.DiscountCouponsUsedDTO != null)
                    {
                        couponSetIdHashSet.Add(transactionDiscountsDTO.DiscountCouponsUsedDTO.CouponSetId);
                        transactionDiscountsDTO.DiscountCouponsUsedDTO.LineId = LineNumber;
                        transactionDiscountsDTO.DiscountCouponsUsedDTO.TransactionId = Trx_id;
                    }
                    TransactionDiscountsBL transactionDiscountsBL = new TransactionDiscountsBL(Utilities.ExecutionContext, transactionDiscountsDTO);
                    transactionDiscountsBL.Save(TrxTransacation);

                }

            }
            log.LogMethodExit(true);
            return true;
        }

        private void UpdateCoupon(SqlTransaction TrxTransacation)
        {
            log.LogMethodEntry();
            foreach (int couponSetId in couponSetIdHashSet)
            {
                DiscountCouponsBL discountCouponsBL = new DiscountCouponsBL(Utilities.ExecutionContext, couponSetId, TrxTransacation);
                //discountCouponsBL.DiscountCouponsDTO.UsedCount++;
                discountCouponsBL.Use(TrxTransacation);
                //discountCouponsBL.Save(TrxTransacation);
            }
            log.LogMethodExit();
        }

        //Begin Modification - 10-Mar-2016 - Added Methods for Rental Allocations
        public void CreateRentalAllocation(int ProductId, int TrxId, int TrxLineId, double DepositAmount, SqlTransaction SQLTrx)
        {
            log.LogMethodEntry(ProductId, TrxId, TrxLineId, DepositAmount, SQLTrx);
            object siteIdValue = DBNull.Value;
            if (Utilities.ParafaitEnv.IsCorporate)
                siteIdValue = Utilities.ParafaitEnv.SiteId;

            if (Utilities.executeScalar("select 1 from RentalAllocation where TrxId = @TrxId and TrxLineId = @TrxLineId",
                                                            new SqlParameter("@TrxId", TrxId),
                                                            new SqlParameter("@TrxLineId", TrxLineId)) == null)
            {
                Utilities.executeNonQuery(@"INSERT INTO RentalAllocation
                                                        (CardId, CardNumber,  
                                                        IssuedBy, IssuedTime,
                                                        creationTime, createdBy,
                                                        LastUpdatedTime, LastUpdatedBy, Site_Id,
                                                        TrxId, TrxLineId, ProductId, 
                                                        DepositAmount, Refunded)
                                                   VALUES (
                                                          case when @cardId = -1
                                                               then null
                                                               else @cardId
                                                          end, 
                                                          case when @cardNumber = ''
                                                               then null
                                                               else @cardNumber
                                                          end,
                                                          @user, getdate(),
                                                          getdate(), @user,
                                                          getdate(), @user, @siteid,
                                                          @TrxId, @TrxLineId, @ProductId, 
                                                          @DepositAmount, 0
                                                          )",
                                                    SQLTrx,
                                                    new SqlParameter("@cardId", (PrimaryCard == null ? -1 : PrimaryCard.card_id)),
                                                    new SqlParameter("@cardNumber", (PrimaryCard == null ? "" : PrimaryCard.CardNumber)),
                                                    new SqlParameter("@user", Utilities.ParafaitEnv.LoginID),
                                                    new SqlParameter("@TrxId", TrxId),
                                                    new SqlParameter("@TrxLineId", TrxLineId),
                                                    new SqlParameter("@ProductId", ProductId),
                                                    new SqlParameter("@DepositAmount", DepositAmount),
                                                    new SqlParameter("@siteid", siteIdValue));
            }
            else
            {
                log.LogMethodExit(null, "Throwing ApplicationException - Rental Product already issued");
                throw new ApplicationException("Rental Product already issued");
            }

            log.LogVariableState("@cardId", (PrimaryCard == null ? -1 : PrimaryCard.card_id));
            log.LogVariableState("@cardNumber", (PrimaryCard == null ? "" : PrimaryCard.CardNumber));
            log.LogVariableState("@user", Utilities.ParafaitEnv.LoginID);
            log.LogVariableState("@TrxId", TrxId);
            log.LogVariableState("@TrxLineId", TrxLineId);
            log.LogVariableState("@ProductId", ProductId);
            log.LogVariableState("@DepositAmount", DepositAmount);
            log.LogMethodExit(null);
        }

        public void ReturnRentalAllocation(int trxId, int productId, int returnTrxId, SqlTransaction SQLTrx)
        {
            log.LogMethodEntry(trxId, productId, returnTrxId, SQLTrx);

            int result = Utilities.executeNonQuery(@"UPDATE RentalAllocation 
                                                        SET Refunded = 1, LastUpdatedTime = getdate(), LastUpdatedBy = @user,
                                                            ReturnTrxId = @returnTrxId
                                                      WHERE id = (select top 1 id 
	                                                                from RentalAllocation
				                                                   WHERE trxid = @trxId
					                                                 AND productId = @productId
					                                                 AND Refunded = 0
			                                                      )",
                                                    SQLTrx,
                                                    new SqlParameter("@trxId", trxId),
                                                    new SqlParameter("@productId", productId),
                                                    new SqlParameter("@user", Utilities.ParafaitEnv.LoginID),
                                                    new SqlParameter("@returnTrxId", returnTrxId));

            log.LogVariableState("@trxId", trxId);
            log.LogVariableState("@productId", productId);
            log.LogVariableState("@user", Utilities.ParafaitEnv.LoginID);
            log.LogVariableState("@returnTrxId", returnTrxId);

            if (result == 0)
            {
                log.LogMethodExit(null, "Throwing ApplicationException - Rental Product already refunded");
                throw new ApplicationException("Rental Product already refunded");
            }

            log.LogMethodExit(null);
        }
        //End Modification - 10-Mar-2016 - Added Methods for Rental Allocations


        /// <summary>
        /// Perform Credit card specific updates for reversed payment lines
        /// </summary>
        /// <param name="origTrxId"></param>
        /// <param name="reversalTrxId"></param>
        /// <param name="SQLTrx"></param>
        /// <param name="message"></param>
        /// <returns>True or False</returns>
        public bool refundCreditCardPayments(int origTrxId, int reversalTrxId, SqlTransaction SQLTrx, ref string message)
        {
            log.LogMethodEntry(origTrxId, reversalTrxId, SQLTrx, message);

            try
            {
                TransactionPaymentsListBL trxPaymentsListBL = new TransactionPaymentsListBL();
                List<KeyValuePair<TransactionPaymentsDTO.SearchByParameters, string>> trxPaymentSearchParameters = new List<KeyValuePair<TransactionPaymentsDTO.SearchByParameters, string>>();
                trxPaymentSearchParameters.Add(new KeyValuePair<TransactionPaymentsDTO.SearchByParameters, string>(TransactionPaymentsDTO.SearchByParameters.TRANSACTION_ID, reversalTrxId.ToString()));
                List<TransactionPaymentsDTO> transactionPaymentDTOList = trxPaymentsListBL.GetNonReversedTransactionPaymentsDTOList(trxPaymentSearchParameters, null, SQLTrx);
                log.LogVariableState("@TrxId", reversalTrxId);
                if (transactionPaymentDTOList != null && transactionPaymentDTOList.Count > 0)
                {
                    transactionPaymentDTOList.RemoveAll(x => x.paymentModeDTO != null && (x.paymentModeDTO.IsCreditCard == false || x.Amount == 0));
                    transactionPaymentDTOList.ToList();
                    foreach (TransactionPaymentsDTO trxPaymentDTO in transactionPaymentDTOList)
                    {
                        double tipAmount = trxPaymentDTO.TipAmount;
                        double paymentAmount = trxPaymentDTO.Amount;
                        trxPaymentDTO.TransactionId = origTrxId;
                        if (trxPaymentDTO.paymentModeDTO.GatewayLookUp.ToString().ToUpper() == "CREDITCALL")
                        {
                            trxPaymentDTO.TransactionId = reversalTrxId;
                            trxPaymentDTO.Reference = origTrxId.ToString();
                        }
                        if (trxPaymentDTO.paymentModeDTO.GatewayLookUp.ToString().ToUpper() != "NONE")
                        {
                            if (!CreditCardPaymentGateway.RefundAmount(trxPaymentDTO, Utilities, ref message))
                            {
                                log.LogVariableState("Message  = ", message);
                                log.LogMethodExit(false);
                                return false;
                            }
                            else if (!string.IsNullOrEmpty(trxPaymentDTO.Reference))
                            {
                                CreditCardPaymentGateway.PrintCCReceipt(trxPaymentDTO);
                                log.LogVariableState("@id", trxPaymentDTO.PaymentId);
                                log.LogVariableState("@ResponseId", trxPaymentDTO.CCResponseId);
                                log.LogVariableState("@Reference", trxPaymentDTO.Reference);
                                log.LogVariableState("@Memo", trxPaymentDTO.Memo);
                                if (!trxPaymentDTO.paymentModeDTO.GatewayLookUp.Equals(PaymentGateways.Clover) && !trxPaymentDTO.paymentModeDTO.GatewayLookUp.Equals(PaymentGateways.CardConnect))
                                {
                                    trxPaymentDTO.TipAmount = tipAmount;
                                }
                                else
                                {
                                    if (trxPaymentDTO.TipAmount > 0)
                                    {
                                        trxPaymentDTO.TipAmount = trxPaymentDTO.TipAmount * -1;
                                    }
                                }
                                trxPaymentDTO.Amount = paymentAmount;
                            }
                        }
                        trxPaymentDTO.TransactionId = reversalTrxId;
                        TransactionPaymentsBL trxPaymentBL = new TransactionPaymentsBL(Utilities.ExecutionContext, trxPaymentDTO);
                        trxPaymentBL.Save(SQLTrx);
                    }
                }
                log.LogMethodExit(true);
                return true;
            }
            catch (Exception ex)
            {
                log.Error("Refunding Credit Card Unsuccessful ", ex);
                message = "RefundCreditCard:" + ex.Message;

                log.LogMethodExit(false);
                return false;
            }
        }

        public void CreateRoundOffPayment()
        {
            log.LogMethodEntry();
            if (TransactionPaymentsDTOList != null && TransactionPaymentsDTOList.Count > 0)
            {
                decimal paymentCashAmount = (decimal)TransactionPaymentsDTOList.Where(x => x.paymentModeDTO != null
                                                                            && x.paymentModeDTO.IsCash).Sum(x => x.Amount);
                decimal paymentRoundOffAmount = 0;
                if (paymentCashAmount > 0)
                {
                    decimal savPaymentCashAmount = paymentCashAmount;
                    paymentCashAmount = (decimal)(new Semnox.Core.GenericUtilities.CommonFuncs(Utilities)).RoundOff((double)paymentCashAmount, Utilities.ParafaitEnv.RoundOffAmountTo, Utilities.ParafaitEnv.RoundingPrecision, Utilities.ParafaitEnv.RoundingType);
                    paymentRoundOffAmount = savPaymentCashAmount - paymentCashAmount;
                    TransactionPaymentsDTOList.Where(x => x.paymentModeDTO != null
                                                       && x.paymentModeDTO.IsCash && x.Amount != 0).LastOrDefault().Amount =
                                                       TransactionPaymentsDTOList.Where(x => x.paymentModeDTO != null
                                                       && x.paymentModeDTO.IsCash && x.Amount != 0).LastOrDefault().Amount - (double)paymentRoundOffAmount;
                }

                if (paymentRoundOffAmount != 0)
                {
                    bool found = false;
                    foreach (TransactionPaymentsDTO trxPaymentDTO in TransactionPaymentsDTOList)
                    {
                        if (trxPaymentDTO.paymentModeDTO.IsRoundOff)
                        {
                            trxPaymentDTO.Amount = (double)paymentRoundOffAmount;
                            found = true;
                            break;
                        }
                    }
                    if (!found && Utilities.ParafaitEnv.RoundOffPaymentModeId != -1)
                    {
                        PaymentModeDTO paymentModeDTO = new PaymentMode(Utilities.ExecutionContext, Utilities.ParafaitEnv.RoundOffPaymentModeId).GetPaymentModeDTO;
                        TransactionPaymentsDTO trxPaymentDTO = new TransactionPaymentsDTO(-1, Trx_id == 0 ? -1 : Trx_id, Utilities.ParafaitEnv.RoundOffPaymentModeId, (double)paymentRoundOffAmount,
                                                                                      "", "", "", "", "", -1, "", -1, 0, -1, "", "", false, -1, -1, "", Utilities.getServerTime(),
                                                                                      Utilities.ParafaitEnv.LoginID, -1, null, 0, -1, Utilities.ParafaitEnv.POSMachine, -1, "", null);
                        trxPaymentDTO.paymentModeDTO = paymentModeDTO;
                        TransactionPaymentsDTOList.Add(trxPaymentDTO);
                    }
                }
                else
                {
                    TransactionPaymentsDTOList.RemoveAll(x => x.PaymentId == -1 && x.paymentModeDTO != null
                                                        && x.paymentModeDTO.IsRoundOff);
                }
            }
            log.LogVariableState("Transaction Payment List", TransactionPaymentsDTOList);
            log.LogMethodExit(null);
        }

        /// <summary>
        /// Clear Round off payment from TransactionPaymentsDTOList
        /// </summary>        
        public void ClearRoundOffPayment()
        {
            log.LogMethodEntry();
            if (TransactionPaymentsDTOList != null && TransactionPaymentsDTOList.Count > 0)
            {
                double totalRoundOffAmount = TransactionPaymentsDTOList.Where(x => x.PaymentId == -1 && x.paymentModeDTO != null
                                                                                && x.paymentModeDTO.IsRoundOff).Sum(x => x.Amount);
                foreach (TransactionPaymentsDTO trxPaymentDTO in TransactionPaymentsDTOList)
                {
                    if (trxPaymentDTO.paymentModeDTO != null && trxPaymentDTO.paymentModeDTO.IsCash)
                    {
                        trxPaymentDTO.Amount += totalRoundOffAmount;
                    }
                    break;
                }
                TransactionPaymentsDTOList.RemoveAll(x => x.PaymentId == -1 && x.paymentModeDTO != null
                                                        && x.paymentModeDTO.IsRoundOff);
            }
            log.LogMethodExit(null);
        }

        public bool CreatePaymentInfo(SqlTransaction TrxTransacation, ref string message)
        {
            log.LogMethodEntry(TrxTransacation, message);

            bool pmntExists = false;
            if (TransactionPaymentsDTOList != null && TransactionPaymentsDTOList.Count > 0
                && TransactionPaymentsDTOList.Exists(x => x.PaymentId == -1 || x.IsChanged))
            {
                if (TrxUpdatedByOthers(Trx_id, DBReadTime, TrxTransacation))
                {
                    message = "Transaction modified by other processes. Refresh and retry.";
                    log.LogVariableState("message", message);
                    log.LogMethodExit(1);
                    return false;
                }
            }
            if (TransactionPaymentsDTOList != null)
            {
                int totalCount = TransactionPaymentsDTOList.Count;
                int currentCount = 1;
                foreach (TransactionPaymentsDTO trxPaymentsDTO in TransactionPaymentsDTOList)
                {
                    if (trxPaymentsDTO.TransactionId == -1)
                        trxPaymentsDTO.TransactionId = Trx_id;
                    if (String.IsNullOrEmpty(trxPaymentsDTO.PosMachine))
                        trxPaymentsDTO.PosMachine = Utilities.ParafaitEnv.POSMachine;
                    if (trxPaymentsDTO.paymentModeDTO != null && trxPaymentsDTO.paymentModeDTO.IsCash
                        && trxPaymentsDTO.Amount != 0 && (trxPaymentsDTO.PaymentId == -1 || trxPaymentsDTO.IsChanged))
                    {
                        log.LogVariableState("Cash Payment", trxPaymentsDTO);
                        TransactionPaymentsBL trxCashPaymentBL = new TransactionPaymentsBL(Utilities.ExecutionContext, trxPaymentsDTO);
                        trxCashPaymentBL.Save(TrxTransacation);
                        pmntExists = true;
                    }

                    if (trxPaymentsDTO.paymentModeDTO != null && trxPaymentsDTO.Amount != 0
                         && !trxPaymentsDTO.paymentModeDTO.IsCash && !trxPaymentsDTO.paymentModeDTO.IsCreditCard
                         && !trxPaymentsDTO.paymentModeDTO.IsDebitCard
                         && (trxPaymentsDTO.PaymentId == -1 || trxPaymentsDTO.IsChanged))
                    {
                        log.LogVariableState("Other Payment", trxPaymentsDTO);
                        TransactionPaymentsBL trxOtherPaymentBL = new TransactionPaymentsBL(Utilities.ExecutionContext, trxPaymentsDTO);
                        trxOtherPaymentBL.Save(TrxTransacation);

                        if (trxPaymentsDTO.Reference != null && trxPaymentsDTO.Reference != string.Empty && trxPaymentsDTO.CouponSetId != -1)
                            TransactionUtils.UpdateCouponUsedDetails(trxPaymentsDTO.CouponSetId, trxPaymentsDTO.Reference.ToString(), (int)Trx_id, TrxTransacation, trxPaymentsDTO.Amount);

                        pmntExists = true;
                    }

                    if (trxPaymentsDTO.paymentModeDTO != null
                        && (trxPaymentsDTO.Amount != 0 || trxPaymentsDTO.PaymentUsedCreditPlus != 0)
                        && trxPaymentsDTO.paymentModeDTO.IsDebitCard
                        && (trxPaymentsDTO.PaymentId == -1 || trxPaymentsDTO.IsChanged))
                    {
                        if (trxPaymentsDTO.CardId == -1)
                        {
                            message = Utilities.MessageUtils.getMessage(373);

                            log.LogVariableState("message ", message);
                            log.LogMethodExit(false);
                            return false;
                        }
                        else
                        {
                            if (TrxLines.Exists(x => x.card != null && x.card.card_id != -1 && x.card.card_id == trxPaymentsDTO.CardId))
                                GameCardReadTime = Utilities.getServerTime();
                            AccountBL accountBL = new AccountBL(Utilities.ExecutionContext, trxPaymentsDTO.CardId, true, true, TrxTransacation);
                            if (accountBL.IsAccountUpdatedByOthers(GameCardReadTime))
                            {
                                message = Utilities.MessageUtils.getMessage(354);

                                log.LogVariableState("message ", message);
                                log.LogMethodExit(false);
                                return false;
                            }

                            if ((trxPaymentsDTO.Amount + trxPaymentsDTO.PaymentUsedCreditPlus) > 0 && (accountBL.GetCurrentPurchaseBalance() != null &&
                                    accountBL.GetCurrentPurchaseBalance() < Convert.ToDecimal(trxPaymentsDTO.Amount + trxPaymentsDTO.PaymentUsedCreditPlus)))
                            {
                                List<String> stringParam = new List<string>();
                                stringParam.Add((trxPaymentsDTO.Amount + trxPaymentsDTO.PaymentUsedCreditPlus).ToString());
                                stringParam.Add(accountBL.GetCurrentPurchaseBalance().ToString());
                                message = Utilities.MessageUtils.getMessage(49, stringParam.ToArray());

                                log.LogVariableState("message ", message);
                                log.LogMethodExit(false);
                                return false;
                            }

                            if (trxPaymentsDTO.PaymentUsedCreditPlus > 0 && (accountBL.GetCurrentPurchaseBalance() != null &&
                                    (accountBL.GetCurrentPurchaseBalance() - (accountBL.AccountDTO.Credits.HasValue ? accountBL.AccountDTO.Credits.Value : 0))
                                    < Convert.ToDecimal(trxPaymentsDTO.PaymentUsedCreditPlus)))
                            {
                                List<String> stringParam = new List<string>();
                                stringParam.Add((trxPaymentsDTO.PaymentUsedCreditPlus).ToString());
                                stringParam.Add((accountBL.GetCurrentPurchaseBalance() - (accountBL.AccountDTO.Credits.HasValue ? accountBL.AccountDTO.Credits.Value : 0)).ToString());
                                message = Utilities.MessageUtils.getMessage(49, stringParam.ToArray());

                                log.LogVariableState("message ", message);
                                log.LogMethodExit(false);
                                return false;
                            }

                            if (trxPaymentsDTO.Amount > 0 && (accountBL.AccountDTO.Credits != null &&
                                    accountBL.AccountDTO.Credits < Convert.ToDecimal(trxPaymentsDTO.Amount)))
                            {
                                List<String> stringParam = new List<string>();
                                stringParam.Add(trxPaymentsDTO.Amount.ToString());
                                stringParam.Add(accountBL.AccountDTO.Credits.ToString());
                                message = Utilities.MessageUtils.getMessage(49, stringParam.ToArray());

                                log.LogVariableState("message ", message);
                                log.LogMethodExit(false);
                                return false;
                            }

                        }

                        Card card = null;
                        if (ParafaitEnv.MIFARE_CARD)
                            card = new MifareCard(Utilities.ReaderDevice, PaymentCardNumber, Utilities.ParafaitEnv.LoginID, Utilities);
                        else
                            card = new Card(Utilities.ReaderDevice, trxPaymentsDTO.CardId, Utilities.ParafaitEnv.LoginID, Utilities);

                        if (trxPaymentsDTO.PaymentUsedCreditPlus != 0)
                        {
                            CreditPlus creditPlus = new CreditPlus(Utilities);
                            creditPlus.deductCreditPlus((int)Trx_id, trxPaymentsDTO.CardId, trxPaymentsDTO.PaymentUsedCreditPlus, this, TrxTransacation, POSTypeId, Utilities.ParafaitEnv.LoginID, trxPaymentsDTO.SplitId, trxPaymentsDTO.PaymentModeOTP);
                        }

                        if (trxPaymentsDTO.Amount != 0)
                        {
                            log.LogVariableState("Game card Payment", trxPaymentsDTO);
                            TransactionPaymentsBL trxDebitPaymentBL = new TransactionPaymentsBL(Utilities.ExecutionContext, trxPaymentsDTO);
                            trxDebitPaymentBL.Save(TrxTransacation);
                        }

                        bool response = card.AddCreditsToCard(trxPaymentsDTO.Amount * -1, TrxTransacation, ref message, trxPaymentsDTO.Amount, trxPaymentsDTO.PaymentUsedCreditPlus * -1);
                        if (!response)
                        {
                            message = "Deducting creditplus from card failed: " + message;

                            log.LogVariableState("message ", message);
                            log.LogMethodExit(false);
                            return false;
                        }

                        if (trxPaymentsDTO.PaymentUsedCreditPlus > 0 || trxPaymentsDTO.Amount > 0)
                            TransactionUtils.VIP_CardTypeUpgrade(trxPaymentsDTO.CardId, TrxTransacation);

                        pmntExists = true;
                    }
                    if (trxPaymentsDTO.paymentModeDTO != null && trxPaymentsDTO.paymentModeDTO.IsCreditCard
                         //&& trxPaymentsDTO.Amount != 0
                         && (trxPaymentsDTO.PaymentId == -1 || trxPaymentsDTO.IsChanged))
                    {
                        trxPaymentsDTO.MCC = GetTransactionMCC();
                        if (!trxPaymentsDTO.GatewayPaymentProcessed)
                        {
                            if (!CreditCardPaymentGateway.MakePayment(trxPaymentsDTO, Utilities, ref message))
                            {
                                log.LogVariableState("message ", message);
                                log.LogMethodExit(false);
                                return false;
                            }
                            string hasGratuityLine = GetActiveLineForType(ProductTypeValues.GRATUITY, null) != null ? "G" : String.Empty;
                            trxPaymentsDTO.ExternalSourceReference = hasGratuityLine;
                            CreditCardPaymentGateway.PrintCCReceipt(trxPaymentsDTO);
                            trxPaymentsDTO.ExternalSourceReference = null;
                        }
                        TransactionPaymentsBL trxCreditCardPaymentBL = new TransactionPaymentsBL(Utilities.ExecutionContext, trxPaymentsDTO);
                        trxCreditCardPaymentBL.Save(TrxTransacation);
                        pmntExists = true;
                    }
                    string finalMsg = MessageContainerList.GetMessage(Utilities.ExecutionContext, 4486, currentCount, totalCount);
                    //Saving payment line &1 of &2;
                    SendMessageToStatusMsgQueue(finalMsg, totalCount, currentCount);
                    currentCount++;
                }
                //GameCardId = -1;
                //PaymentCardNumber = string.Empty;
                //PaymentUsedCreditPlus = 0;
            }
            if (pmntExists)
            {
                getTotalPaidAmount(TrxTransacation);
                double cashAmount = TransactionPaymentsDTOList.Where(x => x.paymentModeDTO != null
                                                                            && x.paymentModeDTO.IsCash).Sum(x => x.Amount);
                double gameCardAmount = TransactionPaymentsDTOList.Where(x => x.paymentModeDTO != null
                                                                            && x.paymentModeDTO.IsDebitCard).Sum(x => x.Amount);
                String paymentType = (cashAmount != 0) ? "CASH" : (gameCardAmount != 0) ? "Debit Card" : "Credit Card";
                InsertTrxLogs(Trx_id, -1, Utilities.ParafaitEnv.LoginID, paymentType + " PAYMENT", "Payment done", TrxTransacation);
            }

            log.LogVariableState("message ", message);
            log.LogMethodExit(true);
            return true;
        }

        /// <summary>
        /// Build parent Child card list based on Trx lines
        /// </summary>
        /// <param name="sqlTrx">SQL Transaction</param>
        /// <returns>List ParentChildCardsDTO</returns>
        public List<ParentChildCardsDTO> BuildParentChildCardList(SqlTransaction sqlTrx = null)
        {
            log.LogMethodEntry(sqlTrx);
            List<ParentChildCardsDTO> parentChildCardDTOList = new List<ParentChildCardsDTO>();
            int parentCardId = -1;
            if (!TrxLines.Exists(x => x.LinkAsChildCard))
            {
                log.LogMethodExit(parentChildCardDTOList);
                return parentChildCardDTOList;
            }
            else
            {
                foreach (TransactionLine trxLine in TrxLines)
                {
                    if (trxLine.card == null)
                        continue;
                    ParentChildCardsListBL parentChildCardsListBL = new ParentChildCardsListBL(Utilities.ExecutionContext);
                    List<KeyValuePair<ParentChildCardsDTO.SearchByParameters, string>> searchParameters = new List<KeyValuePair<ParentChildCardsDTO.SearchByParameters, string>>();
                    searchParameters.Add(new KeyValuePair<ParentChildCardsDTO.SearchByParameters, string>(ParentChildCardsDTO.SearchByParameters.CHILD_CARD_ID, trxLine.card.card_id.ToString()));
                    searchParameters.Add(new KeyValuePair<ParentChildCardsDTO.SearchByParameters, string>(ParentChildCardsDTO.SearchByParameters.ACTIVE_FLAG, 1.ToString()));//Active record
                    List<ParentChildCardsDTO> parentChildCardsDTOList = parentChildCardsListBL.GetParentChildCardsDTOList(searchParameters, sqlTrx);
                    if (parentChildCardsDTOList == null || (parentChildCardsDTOList != null && parentChildCardsDTOList.Count() == 0))
                    {
                        if (trxLine.LinkAsChildCard)
                        {
                            ParentChildCardsDTO parentChildCardDTO = new ParentChildCardsDTO(-1, -1, trxLine.card.card_id, true, -1, null);
                            parentChildCardDTOList.Add(parentChildCardDTO);
                        }
                        if (!trxLine.LinkAsChildCard && (trxLine.card.primaryCard == "Y"
                                || (PrimaryCard != null && trxLine.card.card_id == PrimaryCard.card_id)
                                )
                           )
                        {
                            log.LogVariableState("Parent Card Id for ParentChildList: ", trxLine.card.card_id);
                            parentCardId = trxLine.card.card_id;
                        }
                        else if (!trxLine.LinkAsChildCard && parentCardId == -1)
                        {
                            log.LogVariableState("Parent Card Id for ParentChildList: ", trxLine.card.card_id);
                            parentCardId = trxLine.card.card_id;
                        }
                    }
                }
                //Handle cases where trx primary card is set
                if (PrimaryCard != null && parentCardId == -1
                    && !TrxLines.Exists(x => x.card != null && x.card.card_id == PrimaryCard.card_id))
                    parentCardId = PrimaryCard.card_id;

                if (parentChildCardDTOList.Count > 0 && parentCardId != -1)
                {
                    parentChildCardDTOList.Where(x => x.ParentCardId == -1).ToList().ForEach(x => x.ParentCardId = parentCardId);
                }
                log.LogMethodExit(parentChildCardDTOList);
                return parentChildCardDTOList;
            }
        }


        public List<AccountRelationshipDTO> BuildAccountRelationshipList(SqlTransaction sqlTrx = null)
        {
            log.LogMethodEntry(sqlTrx);
            List<AccountRelationshipDTO> accountRelationshipList = new List<AccountRelationshipDTO>();
            int parentCardId = -1;
            if (!TrxLines.Exists(x => x.LinkAsChildCard))
            {
                log.LogMethodExit(accountRelationshipList);
                return accountRelationshipList;
            }
            else
            {
                foreach (TransactionLine trxLine in TrxLines)
                {
                    if (trxLine.card == null)
                        continue;
                    AccountRelationshipListBL accountRelationshipListBL = new AccountRelationshipListBL(Utilities.ExecutionContext);
                    List<KeyValuePair<AccountRelationshipDTO.SearchByParameters, string>> searchParameters = new List<KeyValuePair<AccountRelationshipDTO.SearchByParameters, string>>();
                    searchParameters.Add(new KeyValuePair<AccountRelationshipDTO.SearchByParameters, string>(AccountRelationshipDTO.SearchByParameters.RELATED_ACCOUNT_ID, trxLine.card.card_id.ToString()));
                    searchParameters.Add(new KeyValuePair<AccountRelationshipDTO.SearchByParameters, string>(AccountRelationshipDTO.SearchByParameters.IS_ACTIVE, 1.ToString()));//Active record
                    List<AccountRelationshipDTO> accountRelationshipDTOs = accountRelationshipListBL.GetAccountRelationshipDTOList(searchParameters, sqlTrx);
                    if (accountRelationshipDTOs == null || (accountRelationshipDTOs != null && accountRelationshipDTOs.Count() == 0))
                    {
                        if (trxLine.LinkAsChildCard)
                        {
                            AccountRelationshipDTO accountRelationshipDTO = new AccountRelationshipDTO(-1, -1, trxLine.card.card_id, true, null);
                            accountRelationshipList.Add(accountRelationshipDTO);
                        }
                        if (!trxLine.LinkAsChildCard && (trxLine.card.primaryCard == "Y"
                                || (PrimaryCard != null && trxLine.card.card_id == PrimaryCard.card_id)
                                )
                           )
                        {
                            log.LogVariableState("Parent Card Id for ParentChildList: ", trxLine.card.card_id);
                            parentCardId = trxLine.card.card_id;
                        }
                        //else if (!trxLine.LinkAsChildCard && parentCardId == -1)
                        //{
                        //    log.LogVariableState("Parent Card Id for ParentChildList: ", trxLine.card.card_id);
                        //    parentCardId = trxLine.card.card_id;
                        //}
                    }
                }
                //Handle cases where trx primary card is set
                if (PrimaryCard != null && parentCardId == -1
                    && !TrxLines.Exists(x => x.card != null && x.card.card_id == PrimaryCard.card_id))
                    parentCardId = PrimaryCard.card_id;

                if (accountRelationshipList.Count > 0 && parentCardId != -1)
                {
                    accountRelationshipList.Where(x => x.AccountId == -1).ToList().ForEach(x => x.AccountId = parentCardId);
                }
                log.LogMethodExit(accountRelationshipList);
                return accountRelationshipList;
            }
        }

        /// <summary>
        /// Gets the MCC code and returns the MCC Value
        /// </summary>
        /// <returns></returns>
        private string GetTransactionMCC()
        {
            log.LogMethodEntry();
            DataTable dataTable = new DataTable();
            Dictionary<string, double> categoryPrice = new Dictionary<string, double>();
            try
            {
                foreach (TransactionLine trxline in TrxLines)
                {
                    if (trxline.ProductTypeCode.Equals("COMBO"))
                    {
                        if (trxline.LineAmount > 0 && trxline.CategoryId > -1)
                        {
                            dataTable = Utilities.executeDataTable("select top(1) * from getCategoryParentList(@categoryId) order by 4 desc", new SqlParameter("@categoryId", trxline.CategoryId));
                            if (categoryPrice.Keys.Contains(dataTable.Rows[0]["Name"].ToString()))
                            {
                                categoryPrice[dataTable.Rows[0]["Name"].ToString()] += trxline.LineAmount;
                            }
                            else
                            {
                                categoryPrice.Add(dataTable.Rows[0]["Name"].ToString(), trxline.LineAmount);
                            }
                            break;
                        }
                        else
                        {
                            continue;
                        }

                    }
                    else //if (trxline.ComboChildLine)
                    {
                        if (trxline.CategoryId > -1)
                        {

                            dataTable = Utilities.executeDataTable("select top(1) * from getCategoryParentList(@categoryId) order by 4 desc", new SqlParameter("@categoryId", trxline.CategoryId));

                            if (trxline.LineAmount > 0)
                            {
                                if (categoryPrice.Keys.Contains(dataTable.Rows[0]["Name"].ToString()))
                                {
                                    categoryPrice[dataTable.Rows[0]["Name"].ToString()] += trxline.LineAmount;
                                }
                                else
                                {
                                    categoryPrice.Add(dataTable.Rows[0]["Name"].ToString(), trxline.LineAmount);
                                }
                            }
                            else if (trxline.AllocatedProductPrice > 0)
                            {
                                if (categoryPrice.Keys.Contains(dataTable.Rows[0]["Name"].ToString()))
                                {
                                    categoryPrice[dataTable.Rows[0]["Name"].ToString()] += trxline.AllocatedProductPrice;
                                }
                                else
                                {
                                    categoryPrice.Add(dataTable.Rows[0]["Name"].ToString(), trxline.AllocatedProductPrice);
                                }
                            }
                            else
                            {
                                Products productBL = new Products(trxline.ProductID);
                                if (productBL.GetProductsDTO != null)
                                {
                                    if (categoryPrice.Keys.Contains(dataTable.Rows[0]["Name"].ToString()))
                                    {
                                        categoryPrice[dataTable.Rows[0]["Name"].ToString()] += Convert.ToDouble(productBL.GetProductsDTO.Price);
                                    }
                                    else
                                    {
                                        categoryPrice.Add(dataTable.Rows[0]["Name"].ToString(), Convert.ToDouble(productBL.GetProductsDTO.Price));
                                    }
                                }
                                else
                                {
                                    log.Info("Failed to fetch the product dto of product id:" + trxline.ProductID + " in mcc caalculation");
                                }
                            }
                        }
                        else
                        {
                            log.Info("Credit card mcc calculation failed for product id:" + trxline.ProductID + ". Transaction will process with default mcc");
                        }
                    }
                }
                KeyValuePair<string, double> res = new KeyValuePair<string, double>();
                if (categoryPrice.Count > 1)
                {
                    res = categoryPrice.Where(x => x.Value == categoryPrice.Max(y => y.Value)).First();
                    List<KeyValuePair<string, double>> resList = new List<KeyValuePair<string, double>>();
                    resList = categoryPrice.Where(x => (bool)(x.Value == res.Value && !x.Key.Equals(res.Key))).ToList<KeyValuePair<string, double>>();
                    if (resList != null && resList.Count >= 1)
                    {
                        if (resList.Exists(x => (bool)x.Key.Equals("Arcade")))
                        {
                            res = resList.Find(x => (bool)x.Key.Equals("Arcade"));
                        }
                    }

                }
                else if (categoryPrice.Count == 1)
                {
                    res = categoryPrice.First();
                }
                if (!String.IsNullOrEmpty(res.Key) && !res.Key.Equals(string.Empty))
                {
                    List<LookupValuesDTO> lookupValuesDTOList = new List<LookupValuesDTO>();
                    List<KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>> searchlookupParameters = new List<KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>>();
                    searchlookupParameters.Add(new KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>(LookupValuesDTO.SearchByLookupValuesParameters.LOOKUP_NAME, "MERCHANT_CATEGORY_CODE"));
                    searchlookupParameters.Add(new KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>(LookupValuesDTO.SearchByLookupValuesParameters.LOOKUP_VALUE, res.Key));
                    searchlookupParameters.Add(new KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>(LookupValuesDTO.SearchByLookupValuesParameters.SITE_ID, (Utilities.ParafaitEnv.IsCorporate ? Utilities.ParafaitEnv.SiteId : -1).ToString()));
                    lookupValuesDTOList = new LookupValuesList(Utilities.ExecutionContext).GetAllLookupValues(searchlookupParameters);
                    if (lookupValuesDTOList != null && lookupValuesDTOList.Count > 0)
                    {
                        log.LogMethodExit(lookupValuesDTOList[0].Description);
                        return lookupValuesDTOList[0].Description;
                    }
                }
                else
                {
                    log.LogMethodExit(string.Empty);
                    return string.Empty;
                }
            }
            catch (Exception ex)
            {
                log.Error("Error in while getting mcc code", ex);
            }
            log.LogMethodExit();
            return string.Empty;
        }

        public void CreateReversePayment(int origTrxId, int reversalTrxId, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(origTrxId, reversalTrxId, sqlTrx);
            TransactionDTO reversalTransactionDTO = new TransactionBL(Utilities.ExecutionContext, reversalTrxId, sqlTrx).TransactionDTO;
            TransactionDTO originalTransactionDTO = new TransactionBL(Utilities.ExecutionContext, origTrxId, sqlTrx).TransactionDTO;
            if (reversalTransactionDTO == null)
            {
                throw new Exception("Reversal Transaction does not exist. Trx Id: " + reversalTrxId.ToString());
            }
            bool isPartialOrZeroReveresal = true;
            if (Convert.ToDouble(reversalTransactionDTO.TransactionNetAmount) != 0)
            {
                //If reversal transaction amount is zero then no need to check as credit card gateway wont be called. Hence tip has to be set as zero only 
                isPartialOrZeroReveresal = TransactionIsPartiallyReversed(originalTransactionDTO, reversalTransactionDTO, sqlTrx);
            }

            TransactionPaymentsListBL trxPaymentsListBL = new TransactionPaymentsListBL();
            List<KeyValuePair<TransactionPaymentsDTO.SearchByParameters, string>> trxPaymentSearchParameters = new List<KeyValuePair<TransactionPaymentsDTO.SearchByParameters, string>>();
            trxPaymentSearchParameters.Add(new KeyValuePair<TransactionPaymentsDTO.SearchByParameters, string>(TransactionPaymentsDTO.SearchByParameters.TRANSACTION_ID, origTrxId.ToString()));
            List<TransactionPaymentsDTO> transactionPaymentDTOList = trxPaymentsListBL.GetNonReversedTransactionPaymentsDTOListForReversal(trxPaymentSearchParameters, null, sqlTrx);
            if (transactionPaymentDTOList != null && transactionPaymentDTOList.Count > 0)
            {
                foreach (TransactionPaymentsDTO trxPaymentDTO in transactionPaymentDTOList)
                {
                    log.LogVariableState("Transaction payment being inserted for Reversal Transaction", trxPaymentDTO);
                    trxPaymentDTO.TransactionId = reversalTrxId;
                    trxPaymentDTO.PaymentId = -1;
                    if (string.IsNullOrEmpty(trxPaymentDTO.PosMachine))
                        trxPaymentDTO.PosMachine = Utilities.ParafaitEnv.POSMachine;
                    trxPaymentDTO.Amount = trxPaymentDTO.Amount * Convert.ToDouble(reversalTransactionDTO.TransactionNetAmount) / ((originalTransactionDTO.TransactionNetAmount == null) ? 1 : Convert.ToDouble(originalTransactionDTO.TransactionNetAmount == 0 ? 1 : originalTransactionDTO.TransactionNetAmount));
                    if (isPartialOrZeroReveresal)
                    {
                        trxPaymentDTO.TipAmount = 0;
                    }
                    else
                    {
                        trxPaymentDTO.TipAmount = -1 * trxPaymentDTO.TipAmount;
                    }
                    trxPaymentDTO.TenderedAmount = 0;
                    //trxPaymentDTO.Reference = string.Empty;  // to add the new fiscalized signature for the payment, Remove old one
                    if (trxPaymentDTO.CouponValue != null)
                        trxPaymentDTO.CouponValue = -1 * trxPaymentDTO.CouponValue;
                    if ((Utilities.getParafaitDefaults("FISCAL_PRINTER").Equals(FiscalPrinters.Smartro.ToString())))
                    {
                        log.Debug("FiscalPrinters.SmartroKorea  Reversal");
                        FiscalPrinterFactory.GetInstance().Initialize(Utilities);
                        FiscalPrinter fiscalPrinter = FiscalPrinterFactory.GetInstance().GetFiscalPrinter(Utilities.getParafaitDefaults("FISCAL_PRINTER"));
                        string Message = string.Empty;
                        FiscalizationRequest fiscalizationRequest = new FiscalizationRequest();
                        List<PaymentInfo> payItemList = new List<PaymentInfo>();
                        PaymentInfo paymentInfo = new PaymentInfo();
                        if (trxPaymentDTO.paymentModeDTO.IsCash)
                        {
                            paymentInfo.paymentMode = "Cash";
                            decimal smartroAmount = decimal.Parse(trxPaymentDTO.Amount.ToString());
                            log.Debug("smartroAmount:" + smartroAmount);
                            paymentInfo.amount = Math.Round(smartroAmount, ParafaitEnv.RoundingPrecision, MidpointRounding.AwayFromZero) * -1;
                        }
                        else if (trxPaymentDTO.paymentModeDTO.IsCreditCard)
                        {
                            paymentInfo.paymentMode = "CreditCard";
                            paymentInfo.quantity = Convert.ToInt32(trxPaymentDTO.Reference);  // Installment month integer value 01,02...
                            paymentInfo.amount = Convert.ToDecimal(trxPaymentDTO.Amount) * -1;
                        }
                        paymentInfo.reference = trxPaymentDTO.CreditCardAuthorization;
                        paymentInfo.description = trxPaymentDTO.PaymentDate.ToString("yyyyMMdd");
                        log.LogVariableState("paymentInfo", paymentInfo);
                        payItemList.Add(paymentInfo);
                        fiscalizationRequest.payments = payItemList.ToArray();
                        fiscalizationRequest.isReversal = true;
                        fiscalizationRequest.extReference = trxPaymentDTO.Reference;
                        log.LogVariableState("fiscalizationRequest", fiscalizationRequest);
                        Semnox.Parafait.Device.Printer.FiscalPrint.TransactionLine transactionLine = new Semnox.Parafait.Device.Printer.FiscalPrint.TransactionLine();
                        if (reversalTransactionDTO != null && reversalTransactionDTO.TransactionLinesDTOList != null && reversalTransactionDTO.TransactionLinesDTOList.Any())
                        {
                            transactionLine.VATRate = Convert.ToDecimal(reversalTransactionDTO.TransactionLinesDTOList.First().TaxPercentage);
                            log.Debug("VATRate :" + transactionLine.VATRate);
                            if (transactionLine.VATRate > 0)
                            {
                                //creditCardAmount is inclusive of tax amount. 
                                transactionLine.VATAmount = (Convert.ToDecimal(paymentInfo.amount) * transactionLine.VATRate) / (100 + transactionLine.VATRate);
                                log.Debug("transactionLine.VATAmount :" + transactionLine.VATAmount);
                                if (transactionLine.VATAmount % 1 > 0)
                                {
                                    transactionLine.VATAmount = (decimal)(new Semnox.Core.GenericUtilities.CommonFuncs(Utilities)).RoundOff(Convert.ToDouble(transactionLine.VATAmount), Utilities.ParafaitEnv.RoundOffAmountTo, Utilities.ParafaitEnv.RoundingPrecision, Utilities.ParafaitEnv.RoundingType);
                                    log.Debug("transactionLine.VATAmount after rounding:" + transactionLine.VATAmount);
                                }
                            }
                            else
                            {
                                transactionLine.VATAmount = 0;
                                log.Debug("transactionLine.VATAmount :" + transactionLine.VATAmount);
                            }
                        }
                        fiscalizationRequest.transactionLines = new Semnox.Parafait.Device.Printer.FiscalPrint.TransactionLine[] { transactionLine };
                        bool success = fiscalPrinter.PrintReceipt(fiscalizationRequest, ref Message);
                        if (success)
                        {
                            if (fiscalPrinter != null && string.IsNullOrWhiteSpace(fiscalizationRequest.extReference) == false)
                            {
                                trxPaymentDTO.CreditCardNumber = fiscalizationRequest.payments[0].description;
                                trxPaymentDTO.CreditCardAuthorization = fiscalizationRequest.extReference;
                                trxPaymentDTO.ExternalSourceReference = fiscalizationRequest.payments[0].description;
                            }
                            else
                            {
                                log.Error("Payment reversal Failed");
                                fiscalPrinter.ClosePort();
                                throw new Exception(MessageContainerList.GetMessage(Utilities.ExecutionContext, 4279) + Message);
                            }
                        }
                        else
                        {
                            log.Error("Payment reversal Failed");
                            fiscalPrinter.ClosePort();
                            throw new Exception(MessageContainerList.GetMessage(Utilities.ExecutionContext, 4279) + Message);
                        }

                    }
                    TransactionPaymentsBL reverseTrxPaymentBL = new TransactionPaymentsBL(Utilities.ExecutionContext, trxPaymentDTO);
                    reverseTrxPaymentBL.Save(sqlTrx);
                }
            }
            log.LogMethodExit(null);
        }

        /// <summary>
        /// Create Tip Payment record for Cash tip payment in case of user selection
        /// </summary>
        /// <param name="paymentId"></param>
        /// <param name="userIdList"></param>
        /// <param name="SQLTrx"></param>
        /// <returns>True or False</returns>
        public bool CreateTipPayment(int paymentId, List<int> userIdList, SqlTransaction SQLTrx)
        {
            log.LogMethodEntry(paymentId, userIdList, SQLTrx);
            try
            {
                SqlCommand tipPaycmd = Utilities.getCommand(SQLTrx);

                foreach (int tipUserId in userIdList)
                {
                    tipPaycmd.CommandText = @"INSERT INTO TipPayment(PaymentId, user_id, CreatedBy, CreationDate) VALUES (@paymentId, @userIdList, @user, getdate()) ";
                    tipPaycmd.Parameters.Clear();
                    tipPaycmd.Parameters.AddWithValue("@paymentId", paymentId);
                    tipPaycmd.Parameters.AddWithValue("@userIdList", tipUserId);
                    tipPaycmd.Parameters.AddWithValue("@user", ParafaitEnv.Username);
                    tipPaycmd.ExecuteNonQuery();

                    log.LogVariableState("@paymentId", paymentId);
                    log.LogVariableState("@userIdList", tipUserId);
                    log.LogVariableState("@user", ParafaitEnv.Username);
                }


                log.LogMethodExit(true);
                return true;
            }
            catch (Exception ex)
            {
                log.Error("", ex);
                log.LogMethodExit(false);
                return false;
            }
        }
        //public void updateParentPaymentId(PaymentModeDetail pd, SqlTransaction sqlTrx = null)
        //{
        //    Semnox.Parafait.logging.Logger log = new Semnox.Parafait.logging.Logger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        //    log.Debug("Starts-updateParentPaymentId()");//Modified for Adding logger feature on 08-Mar-2016
        //    Utilities.executeNonQuery(@"update trxPayments set ParentPaymentId = @parent 
        //                                where paymentId = (select max(paymentId) from trxPayments where trxId = @trxId)",
        //                              sqlTrx,
        //                              new SqlParameter("@parent", pd.ParentPaymentId),
        //                              new SqlParameter("@trxId", pd.TrxId));
        //    log.Debug("Ends-updateParentPaymentId()" + pd.ParentPaymentId + " " + pd.TrxId);//Modified for Adding logger feature on 08-Mar-2016
        //}

        public void getTotalPaidAmount(SqlTransaction SQLTrx)
        {
            log.LogMethodEntry(SQLTrx);

            if (Trx_id > 0)
            {
                DataTable dt = Utilities.executeDataTable(@"select (select isnull(sum(amount), 0) 
															from trxPayments 
															where trxId = @trxId),
															ISNULL((select TrxNetAmount from Trx_header where trxId = @trxId),0) TrxNetAmount,(select isnull(sum(TipAmount), 0)
															from trxPayments 
															where trxId = @trxId)",
                                                            SQLTrx,
                                                            new SqlParameter("@trxId", Trx_id));
                TotalPaidAmount = Math.Round(Convert.ToDouble(dt.Rows[0][0]), ParafaitEnv.RoundingPrecision, MidpointRounding.AwayFromZero);
                Net_Transaction_Amount = Math.Round(Convert.ToDouble(dt.Rows[0][1]), ParafaitEnv.RoundingPrecision, MidpointRounding.AwayFromZero);
                Tip_Amount = Math.Round(Convert.ToDouble(dt.Rows[0][2]), ParafaitEnv.RoundingPrecision, MidpointRounding.AwayFromZero);//Begin Modification on 09-Nov-2015:Tip Feture
            }
            log.LogMethodExit(null);
        }

        bool CreateCreditCardSurcharge(Double paymentCCSurchargeAmount, SqlTransaction SQLTrx, ref string message)
        {
            log.LogMethodEntry(SQLTrx, message);

            if (paymentCCSurchargeAmount > 0)
            {
                SqlCommand cmd = Utilities.getCommand(SQLTrx);
                SQLTrx.Save("CreditCardSurcharge");

                try
                {
                    cmd.CommandText = "insert into trx_lines ( " +
                                                "LineId, " +
                                                "TrxId, " +
                                                "product_id, " +
                                                "price, " +
                                                "quantity, " +
                                                "amount, site_id) " +
                                                "values (" +
                                                "(select isnull(max(LineId), 0) + 1 from trx_lines where trxId = @TrxId), " +
                                                "@TrxId, " +
                                                "@product_id, " +
                                                "@price, " +
                                                "1, " +
                                                "@price, @site_id)";
                    cmd.Parameters.Clear();
                    cmd.Parameters.AddWithValue("@TrxId", Trx_id);
                    cmd.Parameters.AddWithValue("@site_id", site_id);
                    cmd.Parameters.AddWithValue("@product_id", Utilities.ParafaitEnv.CreditCardSurchargeProductId);
                    cmd.Parameters.AddWithValue("@price", paymentCCSurchargeAmount);
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    log.Error("Unable to Insert details into trx_lines", ex);

                    message = ex.Message;
                    log.LogVariableState("message ", message);
                    log.LogMethodExit(false);
                    return false;
                }
                PaymentCreditCardSurchargeAmount = 0;
            }

            log.LogVariableState("@TrxId", Trx_id);
            log.LogVariableState("@site_id", site_id);
            log.LogVariableState("@product_id", Utilities.ParafaitEnv.CreditCardSurchargeProductId);
            log.LogVariableState("@price", paymentCCSurchargeAmount);
            log.LogVariableState("message ", message);
            log.LogMethodExit(true);
            return true;
        }
        /// <summary>
        /// CreateCardGames
        /// </summary>
        /// <param name="SQLTrx"></param>
        /// <param name="CardId"></param>
        /// <param name="ProductId"></param>
        /// <param name="TrxId"></param>
        /// <param name="LineId"></param>
        /// <param name="Line"></param>
        /// <param name="subscriptionBillingScheduleDTO"></param>
        public void CreateCardGames(SqlTransaction SQLTrx, int CardId, int ProductId, int TrxId, int LineId, TransactionLine Line, SubscriptionBillingScheduleDTO subscriptionBillingScheduleDTO, bool reservationTransaction)
        {
            log.LogMethodEntry(SQLTrx, CardId, ProductId, TrxId, LineId, Line, subscriptionBillingScheduleDTO, reservationTransaction);

            int GraceTime = GetGraceTime(SQLTrx, TrxId, Line);

            SqlCommand cmd = Utilities.getCommand(SQLTrx);

            cmd.CommandText =
                @"declare @cardGameId int;
                insert into CardGames (Card_Id, game_profile_id, Game_Id, quantity, 
                                        ExpiryDate, FromDate, 
                                        Frequency, BalanceGames, TrxId, TrxLineId, 
                                        EntitlementType, OptionalAttribute, last_update_date, CustomDataSetId, TicketAllowed, site_id,
                                        Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday, ExpireWithMembership, 
                                        MembershipId, MembershipRewardsId, CreatedBy, CreationDate, LastUpdatedBy, IsActive, ValidityStatus, SubscriptionBillingScheduleId) 
                select @cardId, game_profile_id, game_Id, quantity, 
                    case when ExpiryDate is not null then 
			            case when ExpiryTime is null 
				            then  dateadd(ss, @OffsetDuration, dateadd(MI, @graceTime, dateadd(MI, 6, dateadd(dd, 1, expirydate))))
				            else  dateadd(ss, @OffsetDuration, dateadd(MI, @graceTime, dateadd(mi, (FLOOR(ExpiryTime)*60 + (ExpiryTime - FLOOR(ExpiryTime))*100), expirydate)))
			            end
		            else
			            case when FromDate is not null 
                             then case ValidMinutesDays when 'D' 
					             then case when ExpiryTime is not null 
							                then dateadd(ss, @OffsetDuration, dateadd(MI, @graceTime, dateadd(MI, floor(ExpiryTime)*60 + (ExpiryTime - FLOOR(ExpiryTime))*100, 
								                        dateadd(dd, isnull(EffectiveAfterDays, 0) + isnull(ValidFor, 0), FromDate))))
							                else dateadd(ss, @OffsetDuration, dateadd(MI, @graceTime, dateadd(MI, 360, dateadd(dd, isnull(EffectiveAfterDays, 0) + ValidFor, FromDate))))
						              end
					             else case when ExpiryTime is not null 
							            then dateadd(ss, @OffsetDuration, dateadd(MI, @graceTime, dateadd(MI, floor(ExpiryTime)*60 + (ExpiryTime - FLOOR(ExpiryTime))*100, 
								                        dateadd(dd, isnull(EffectiveAfterDays, 0), FromDate))))
							            else dateadd(ss, @OffsetDuration, dateadd(MI, @graceTime, dateadd(MI, ValidFor + 360, dateadd(dd, isnull(EffectiveAfterDays, 0), FromDate))))
						                end						
				                end
			                else case ValidMinutesDays when 'D' 
					             then case when ExpiryTime is not null 
							               then dateadd(ss, @OffsetDuration, dateadd(MI, @graceTime, dateadd(MI, floor(ExpiryTime)*60 + (ExpiryTime - FLOOR(ExpiryTime))*100, 
								                        dateadd(dd, isnull(EffectiveAfterDays, 0) + isnull(ValidFor, 0), 
										                        DATEADD(D, 0, DATEDIFF(D, 0, case when @IsAttraction = 1 then @schTo else @refDate end))))))
							               else case when @IsAttraction = 0 
                                                    then dateadd(ss, @OffsetDuration, dateadd(MI, @graceTime, dateadd(MI, 360, dateadd(dd, isnull(EffectiveAfterDays, 0) + ValidFor, DATEADD(D, 0, DATEDIFF(D, 0, @refDate))))))
                                                    else dateadd(ss, @OffsetDuration, dateadd(MI, @graceTime, dateadd(dd, isnull(EffectiveAfterDays, 0) + isnull(ValidFor, 0), @schTo)))
                                                end
						                   end
					            else case when ExpiryTime is not null 
							              then dateadd(ss, @OffsetDuration, dateadd(MI, @graceTime, dateadd(MI, floor(ExpiryTime)*60 + (ExpiryTime - FLOOR(ExpiryTime))*100, dateadd(dd, isnull(EffectiveAfterDays, 0), DATEADD(D, 0, DATEDIFF(D, 0, case when @IsAttraction = 1 then @schTo else @refDate end))))))
							              else case when @IsAttraction = 0 
                                                    then dateadd(ss, @OffsetDuration, dateadd(MI, @graceTime, dateadd(MI, ValidFor, dateadd(dd, isnull(EffectiveAfterDays, 0), @refDate))))
                                                    else dateadd(ss, @OffsetDuration, dateadd(MI, @graceTime,  case when ValidFor is not null then dateadd(MI, ValidFor, dateadd(dd, isnull(EffectiveAfterDays, 0), @schFrom)) else dateadd(dd, isnull(EffectiveAfterDays, 0), @schTo) end))
                                               end
						                  end
				                end
                            end
		            end ExpiryDate,
                    case when Frequency not in ('B', 'A') then 
                            case when FromDate is not null then dateadd(ss, @OffsetDuration, dateadd(MI, -@graceTime, dateadd(DD, isnull(EffectiveAfterDays, 0), dateadd(HH, 6, FromDate))))
                                else case when isnull(EffectiveAfterDays, 0) > 0 then dateadd(ss, @OffsetDuration, dateadd(MI, -@graceTime, dateadd(HH, 6, dateadd(DD, EffectiveAfterDays, DATEADD(D, 0, DATEDIFF(D, 0, case when @IsAttraction = 1 then @schFrom else @refDate end))))))
                                        else dateadd(ss, @OffsetDuration, dateadd(MI, -@graceTime, case when @IsAttraction = 1 then @schFrom else @refDate end))
                                    end 
                            end 
                    else case when Frequency = 'B' then (select CONVERT(DateTime,CONVERT(NVARCHAR(MAX),DECRYPTBYPASSPHRASE(@passPhrase,prof.DateOfBirth))) birth_date
                                                                from cards c left outer join customers cu on cu.customer_id = c.customer_id left outer join Profile prof on cu.ProfileId = prof.id
                                                                where c.card_id = @cardId)
                                when Frequency = 'A' then (select  CONVERT(DateTime,CONVERT(NVARCHAR(MAX),DECRYPTBYPASSPHRASE(@passPhrase,prof.Anniversary))) anniversary
                                                                from cards c left outer join customers cu on cu.customer_id = c.customer_id left outer join Profile prof on cu.ProfileId = prof.id
                                                                where c.card_id = @cardId)
                                else NULL
                            end
                    end startDate, 
                    Frequency, Quantity, @TrxId, @TrxLineId,
                    EntitlementType, OptionalAttribute, getdate(), CustomDataSetId, TicketAllowed, @site_id,
                    CASE WHEN (Monday IS NULL OR Monday = 1) then 'Y' else 'N' end,
                    CASE WHEN (Tuesday IS NULL OR Tuesday = 1) then 'Y' else 'N' end,
                    CASE WHEN (Wednesday IS NULL OR Wednesday = 1) then 'Y' else 'N' end,
                    CASE WHEN (Thursday IS NULL OR Thursday = 1) then 'Y' else 'N' end,
                    CASE WHEN (Friday IS NULL OR Friday = 1) then 'Y' else 'N' end,
                    CASE WHEN (Saturday IS NULL OR Saturday = 1) then 'Y' else 'N' end,
                    CASE WHEN (Sunday IS NULL OR Sunday = 1) then 'Y' else 'N' end,
                    @ExpireWithMembership, @MembershipId, @MembershipRewardsId, @CreatedBy, 
                    GetDate(), @lastUpdatedBy, 1, @ValidityStatus, @SubscriptionBillingScheduleId
            from ProductGames
            where product_game_id = @productGameId; select @cardGameId = @@identity;
            insert into cardGameExtended (cardGameId, GameId, GameProfileId, Exclude, site_id, PlayLimitPerGame)
                select @cardGameId, GameId, GameProfileId, Exclude, site_id, PlayLimitPerGame 
                from productGameExtended
                where productGameId = @productGameId;
            INSERT INTO EntityOverrideDates (EntityName, EntityGuid, OverrideDate, IncludeExcludeFlag, Day, Remarks, LastUpdatedBy, LastUpdatedDate, site_id)
            SELECT 'CARDGAMES',(SELECT Guid from CARDGAMES WHERE card_game_id = @cardGameId), OverrideDate, IncludeExcludeFlag, Day, Remarks, @lastUpdatedBy, GetDate(), site_id 
            FROM EntityOverrideDates
            WHERE EntityGuid = (SELECT Guid from ProductGames where product_game_id = @productGameId); 
            ";

            DataTable dtpg = Utilities.executeDataTable("Select product_game_id from productGames where product_id = @product_id",
                                                        SQLTrx,
                                                        new SqlParameter("@product_id", ProductId));
            foreach (DataRow dr in dtpg.Rows)
            {
                cmd.Parameters.Clear();
                cmd.Parameters.AddWithValue("@passPhrase", Semnox.Core.Utilities.ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "CUSTOMER_ENCRYPTION_PASS_PHRASE"));
                cmd.Parameters.AddWithValue("@cardId", CardId);
                cmd.Parameters.AddWithValue("@site_id", site_id);
                cmd.Parameters.AddWithValue("@refDate", (Line.LineAtb != null && Line.LineAtb.AttractionBookingDTO != null)
                                                        ? Line.LineAtb.AttractionBookingDTO.ScheduleFromDate
                                                        : (subscriptionBillingScheduleDTO == null ? EntitlementReferenceDate : subscriptionBillingScheduleDTO.BillFromDate));//Entitlement Date added to card games
                cmd.Parameters.AddWithValue("@productGameId", dr[0]);
                cmd.Parameters.AddWithValue("@lastUpdatedBy", ParafaitEnv.LoginID);
                cmd.Parameters.AddWithValue("@TrxId", TrxId == -1 ? DBNull.Value
                                                             : (subscriptionBillingScheduleDTO == null ? (object)TrxId
                                                                                                       : (subscriptionBillingScheduleDTO.TransactionId == -1 ? DBNull.Value
                                                                                                                                                             : (object)TrxId)));
                cmd.Parameters.AddWithValue("@TrxLineId", LineId == -1 ? DBNull.Value
                                                                       : (subscriptionBillingScheduleDTO == null ? (object)LineId
                                                                                                                 : (subscriptionBillingScheduleDTO.TransactionLineId == -1 ? DBNull.Value
                                                                                                                                                                          : (object)LineId)));
                cmd.Parameters.AddWithValue("@graceTime", GraceTime);
                cmd.Parameters.AddWithValue("@CreatedBy", ParafaitEnv.LoginID);
                cmd.Parameters.AddWithValue("@MembershipId", Line.MembershipId == -1 ? DBNull.Value : (object)Line.MembershipId);
                cmd.Parameters.AddWithValue("@MembershipRewardsId", Line.MembershipRewardsId == -1 ? DBNull.Value : (object)Line.MembershipRewardsId);
                if (Line.ExpireWithMembership == "Y")
                    cmd.Parameters.AddWithValue("@ExpireWithMembership", Line.ExpireWithMembership);
                else
                    cmd.Parameters.AddWithValue("@ExpireWithMembership", DBNull.Value);

                cmd.Parameters.AddWithValue("@IsAttraction", Line.LineAtb != null ? 1 : 0);
                cmd.Parameters.AddWithValue("@schFrom", (Line.LineAtb == null
                                                          ? (subscriptionBillingScheduleDTO == null ? DBNull.Value : (object)subscriptionBillingScheduleDTO.BillFromDate)
                                                          : (object)Line.LineAtb.AttractionBookingDTO.ScheduleFromDate));
                //cmd.Parameters.AddWithValue("@schTo", Line.LineAtb == null ? DBNull.Value : (object)Line.LineAtb.AttractionBookingDTO.ScheduleTime.Date.AddMinutes((Convert.ToInt32(Math.Floor(Line.LineAtb.AttractionBookingDTO.ScheduleToTime) * 60 + (Line.LineAtb.AttractionBookingDTO.ScheduleToTime - Math.Floor(Line.LineAtb.AttractionBookingDTO.ScheduleToTime)) * 100))));
                cmd.Parameters.AddWithValue("@schTo", Line.LineAtb == null
                                                       ? DBNull.Value //(subscriptionBillingScheduleDTO == null ? DBNull.Value : (object)subscriptionBillingScheduleDTO.BillToDate)
                                                       : (object)Line.LineAtb.AttractionBookingDTO.ScheduleToDate);
                cmd.Parameters.AddWithValue("@OffsetDuration", offSetDuration);
                if (ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "LOAD_CARD_ENTITLEMENT_ON_TRANSACTION_COMPLETE").Equals("Y"))
                {
                    if (reservationTransaction == false)
                    {
                        cmd.Parameters.AddWithValue("@ValidityStatus", 'H');
                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@ValidityStatus", DBNull.Value);
                    }
                }
                else
                {
                    if (subscriptionBillingScheduleDTO == null || (subscriptionBillingScheduleDTO != null && subscriptionBillingScheduleDTO.TransactionId > -1))
                    {
                        cmd.Parameters.AddWithValue("@ValidityStatus", DBNull.Value);
                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@ValidityStatus", 'H');
                    }
                }

                cmd.Parameters.AddWithValue("@SubscriptionBillingScheduleId", subscriptionBillingScheduleDTO == null
                                                                                   ? DBNull.Value : (object)subscriptionBillingScheduleDTO.SubscriptionBillingScheduleId);
                cmd.ExecuteNonQuery();

                log.LogVariableState("@productGameId", dr[0]);
                log.LogVariableState("LOAD_CARD_ENTITLEMENT_ON_TRANSACTION_COMPLETE: ", ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "LOAD_CARD_ENTITLEMENT_ON_TRANSACTION_COMPLETE"));

            }

            cmd.CommandText = @"delete cardGameExtended
								from CardGames cg
								where cg.card_game_id < (select MAX(card_game_id)
															from cardGames
															where card_id = @cardId
															and Frequency in ('A', 'B'))
								and cg.card_game_id = CardGameExtended.CardGameId
								and cg.card_id = @cardId
								and cg.Frequency in ('A', 'B');

                                delete from cardGames 
                                where card_game_id < (select MAX(card_game_id)
                                                    from cardGames pg
                                                    where pg.Frequency = cardGames.Frequency
                                                    and pg.card_id = cardGames.card_id)
                                and Frequency in ('A', 'B')
                                and card_id = @cardId";
            cmd.Parameters.Clear();
            cmd.Parameters.AddWithValue("@cardId", CardId);
            cmd.ExecuteNonQuery();

            log.LogVariableState("@cardId", CardId);
            log.LogVariableState("@site_id", site_id);
            log.LogVariableState("@refDate", EntitlementReferenceDate);//Entitlement Date added to card games
            log.LogVariableState("@lastUpdatedBy", ParafaitEnv.LoginID);
            log.LogVariableState("@TrxId", TrxId == -1 ? DBNull.Value : (object)TrxId);
            log.LogVariableState("@TrxLineId", LineId == -1 ? DBNull.Value : (object)LineId);
            log.LogVariableState("@cardId", CardId);


            log.LogMethodExit(null);
        }

        #region Modified on July 19 for creating recurrence creditplus upfront for entire schedule'
        /// <summary>
        /// CreateCardCreditPlus
        /// </summary>
        /// <param name="SQLTrx"></param>
        /// <param name="CardId"></param>
        /// <param name="ProductId"></param>
        /// <param name="TrxId"></param>
        /// <param name="LineId"></param>
        /// <param name="Line"></param>
        /// <param name="subscriptionBillingScheduleDTO"></param>
        public void CreateCardCreditPlus(SqlTransaction SQLTrx, int CardId, int ProductId, int TrxId, int LineId, TransactionLine Line, SubscriptionBillingScheduleDTO subscriptionBillingScheduleDTO, bool reservationTransaction)
        {
            log.LogMethodEntry(SQLTrx, CardId, ProductId, TrxId, LineId, Line, subscriptionBillingScheduleDTO, reservationTransaction);
            SqlCommand creditPlusCmd = Utilities.getCommand(SQLTrx);
            SqlCommand creditPlusConsumedCmd = Utilities.getCommand(SQLTrx);
            SqlCommand selectCmd = Utilities.getCommand(SQLTrx);

            selectCmd.CommandText = @"select pcp.*, -1 as subscriptionBillingScheduleId, 0 as billedSubscriptionCycle 
                                        from ProductCreditPlus pcp  
                                       where product_id = @product_id";
            selectCmd.Parameters.AddWithValue("@product_id", ProductId);

            log.LogVariableState("@product_id", ProductId);

            int businessStartTime;
            if (int.TryParse(ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "BUSINESS_DAY_START_TIME"), out businessStartTime) == false)
            {
                businessStartTime = 6;
            }

            SqlDataAdapter da = new SqlDataAdapter(selectCmd);
            DataTable dt = new DataTable();
            da.Fill(dt);
            if (dt.Rows.Count == 0)
            {
                log.LogMethodExit(null);
                return;
            }

            Card card = new Card(Utilities);
            card.getCardDetails(CardId, SQLTrx);

            bool loadEntitlements = true;

            foreach (DataRow dataRow in dt.Rows)
            {
                if (subscriptionBillingScheduleDTO != null)
                {
                    dataRow["subscriptionBillingScheduleId"] = subscriptionBillingScheduleDTO.SubscriptionBillingScheduleId;
                    dataRow["billedSubscriptionCycle"] = (subscriptionBillingScheduleDTO.TransactionId != -1) ? 1 : 0;
                }
                if (Line.LineAtb != null)
                {
                    dataRow["PeriodFrom"] = Line.LineAtb.AttractionBookingDTO.ScheduleFromDate;
                    dataRow["PeriodTo"] = Line.LineAtb.AttractionBookingDTO.ScheduleToDate;
                    //dataRow["PeriodTo"] = Line.LineAtb.AttractionBookingDTO.ScheduleTime.Date.AddMinutes((Convert.ToInt32(Math.Floor(Line.LineAtb.AttractionBookingDTO.ScheduleToTime) * 60 + (Line.LineAtb.AttractionBookingDTO.ScheduleToTime - Math.Floor(Line.LineAtb.AttractionBookingDTO.ScheduleToTime)) * 100)));
                }
                else
                {
                    if (dataRow["PeriodFrom"] == DBNull.Value) //When from date is NULL then consider EntitlementReferenceDate is from date
                    {
                        log.Debug("Product credit plus Period From is NULL.");
                        dataRow["PeriodFrom"] = subscriptionBillingScheduleDTO != null ? subscriptionBillingScheduleDTO.BillFromDate : EntitlementReferenceDate;
                        //Updated to consider EffectiveAfterMinutes field in ProductCreditPlus 16-Dec-2019
                        if (dataRow.Table.Columns.Contains("EffectiveAfterMinutes") &&
                            dataRow["EffectiveAfterMinutes"] != DBNull.Value)
                            dataRow["PeriodFrom"] = (subscriptionBillingScheduleDTO != null
                                                        ? subscriptionBillingScheduleDTO.BillFromDate
                                                        : EntitlementReferenceDate).AddMinutes(Convert.ToInt32(dataRow["EffectiveAfterMinutes"]));
                    }
                    //else
                    //{
                    //    if (subscriptionBillingScheduleDTO != null && Convert.ToDateTime(dataRow["PeriodFrom"]) < subscriptionBillingScheduleDTO.BillFromDate)
                    //    {
                    //        dataRow["PeriodFrom"] = subscriptionBillingScheduleDTO.BillToDate;
                    //    }
                    //}
                    if (dataRow["PeriodTo"] == DBNull.Value)
                    {
                        log.Debug("Product credit plus Period To is NULL.");
                        DateTime newPeriodTODate = DateTime.MinValue;
                        if (dataRow["ValidForDays"] != DBNull.Value)
                        {
                            newPeriodTODate = (subscriptionBillingScheduleDTO != null
                                                      ? subscriptionBillingScheduleDTO.BillFromDate
                                                      : EntitlementReferenceDate).Date.AddDays(Convert.ToInt32(dataRow["ValidForDays"])).AddHours(businessStartTime);
                        }
                        else if (dataRow["Minutes"] != DBNull.Value)
                        {
                            newPeriodTODate = (subscriptionBillingScheduleDTO != null
                                                     ? subscriptionBillingScheduleDTO.BillFromDate
                                                     : EntitlementReferenceDate).AddMinutes(Convert.ToInt32(dataRow["Minutes"]));
                        }
                        else if (dataRow["Frequency"].ToString() == "D" || dataRow["Frequency"].ToString() == "W" || dataRow["Frequency"].ToString() == "M")
                        {
                            newPeriodTODate = (subscriptionBillingScheduleDTO != null
                                                     ? subscriptionBillingScheduleDTO.BillToDate
                                                     : (EntitlementReferenceDate).AddYears(1)); // When there is no expiry date, consider expirydate is 1 year from now for freq(D,W,M)
                        }
                        else if (dataRow["Frequency"].ToString() == "B" || dataRow["Frequency"].ToString() == "Y" || dataRow["Frequency"].ToString() == "A")
                        {
                            newPeriodTODate = (subscriptionBillingScheduleDTO != null
                                                     ? subscriptionBillingScheduleDTO.BillToDate
                                                     : (EntitlementReferenceDate).AddYears(3)); // When there is no expiry date, consider expirydate is 3 year from now for freq(B,Y,A)
                        }

                        //if (subscriptionBillingScheduleDTO != null && (newPeriodTODate > subscriptionBillingScheduleDTO.BillToDate || newPeriodTODate == DateTime.MinValue))
                        //{
                        //    newPeriodTODate = subscriptionBillingScheduleDTO.BillToDate;
                        //}
                        if (newPeriodTODate != DateTime.MinValue)
                        {
                            dataRow["PeriodTo"] = newPeriodTODate;
                        }
                        //else expiry date is null and frequency is null
                    }
                    //else
                    //{
                    //    if (subscriptionBillingScheduleDTO != null && Convert.ToDateTime(dataRow["PeriodTo"]) > subscriptionBillingScheduleDTO.BillToDate)
                    //    {
                    //        dataRow["PeriodTo"] = subscriptionBillingScheduleDTO.BillToDate;
                    //    }
                    //}
                }

                int count = 0;

                // Load user defined entitlements or licenses
                if (dataRow["CreditPlusType"] != DBNull.Value && CreditPlusTypeConverter.IsUserDefinedCreditPlusType(dataRow["CreditPlusType"].ToString()))
                {
                    log.Debug("Product credit plus is user defined credit plus type: " + dataRow["CreditPlusType"].ToString());
                    DateTime entitlementConsumptionDate = EntitlementReferenceDate;
                    if (Line.LineAtb != null)
                        entitlementConsumptionDate = Line.LineAtb.AttractionBookingDTO.ScheduleFromDate;

                    AccountDTO accountDTO = new AccountBL(Utilities.ExecutionContext, card.card_id, true, true, SQLTrx).AccountDTO;

                    String licenseExists = CheckLicenseForCustomerAndCard(accountDTO, dataRow["CreditPlusType"].ToString(),
                        entitlementConsumptionDate, customerDTO != null ? customerDTO.Id : -1, SQLTrx);

                    // if the row is user defined data type and a valid entry exists, so not load again
                    if (String.IsNullOrEmpty(licenseExists))
                        loadEntitlements = false;
                }


                if (Line.LineAtb != null)
                {
                    if (!loadEntitlements)
                    {
                        continue;
                    }
                    else
                        CreateCreditPlusLine(dataRow, card, ProductId, TrxId, LineId, count, Line, SQLTrx, reservationTransaction);
                }
                else if (dataRow["Frequency"] == DBNull.Value || dataRow["Frequency"].ToString() == "N" || dataRow["PeriodTo"] == DBNull.Value) //Frequency will be null
                {
                    if (!loadEntitlements) { continue; }
                    else
                        CreateCreditPlusLine(dataRow, card, ProductId, TrxId, LineId, count, Line, SQLTrx, reservationTransaction);
                }
                else
                {
                    DateTime startDate = Convert.ToDateTime(dataRow["PeriodFrom"]);
                    DateTime endDate = Convert.ToDateTime(dataRow["PeriodTo"]);

                    int dayCount = (endDate.Date - startDate.Date).Days;

                    if (dataRow["Frequency"].ToString() == "D")
                    {
                        count = dayCount;
                    }
                    else if (dataRow["Frequency"].ToString() == "W")
                    {
                        for (DateTime sd = startDate; sd <= endDate; sd = sd.AddDays(1))
                        {
                            if (sd.DayOfWeek == DayOfWeek.Sunday)
                            {
                                count++;
                            }
                        }
                    }
                    else if (dataRow["Frequency"].ToString() == "M")
                    {
                        count = ((endDate.Year * 12) + endDate.Month) - ((startDate.Year * 12) + startDate.Month);

                        if (endDate >= startDate)
                        {
                            count++;
                        }
                    }
                    else if (dataRow["Frequency"].ToString() == "Y")
                    {
                        count = endDate.Year - startDate.Year;

                        if (endDate.Day >= startDate.Day)
                        {
                            count++;
                        }
                    }
                    else if (dataRow["Frequency"].ToString() == "A" || dataRow["Frequency"].ToString() == "B")
                    {
                        DateTime freqDate;
                        if (dataRow["Frequency"].ToString() == "A")
                        {
                            if (card.customerDTO != null && card.customerDTO.Anniversary != null)
                            {
                                freqDate = card.customerDTO.Anniversary.Value;
                            }
                            else
                            {
                                continue;
                            }
                        }
                        else
                        {
                            if (card.customerDTO != null && card.customerDTO.DateOfBirth != null)
                            {
                                freqDate = card.customerDTO.DateOfBirth.Value;
                            }
                            else
                            {
                                continue;
                            }
                        }

                        count = GenericUtils.GetBetweenDates(startDate, endDate, freqDate).Count;
                        if (count == 0)
                            continue;
                    }

                    log.LogVariableState("loadEntitlements flag value: ", loadEntitlements);
                    if (!loadEntitlements)
                    {
                        continue;
                    }
                    else
                        CreateCreditPlusLine(dataRow, card, ProductId, TrxId, LineId, count, Line, SQLTrx, reservationTransaction);
                }
            }

            creditPlusCmd.CommandText = @"update CardCreditPlus 
                                        set PeriodTo = (select max(PeriodTo) 
                                                        from CardCreditPlus c 
                                                       where c.Card_Id = @cardId 
                                                        and c.ExtendOnReload = 'Y'
                                                        and c.CreditPlusType = CardCreditPlus.CreditPlusType),
                                        LastupdatedDate = getdate()
                                        where Card_Id = @cardId
                                          and ExtendOnReload = 'Y'
                                          and PeriodTo >= getdate()
                                          and CreditPlusBalance > 0
                                          and CreditPlusType in (select CreditPlusType
                                                                   from ProductCreditPlus
                                                                  where product_id = @product_id)";
            creditPlusCmd.Parameters.AddWithValue("@product_id", ProductId);
            creditPlusCmd.Parameters.AddWithValue("@cardId", card.card_id);
            creditPlusCmd.ExecuteNonQuery();

            log.LogVariableState("@product_id", ProductId);
            log.LogVariableState("@cardId", card.card_id);

            //update card last update time after credit plus creation
            card.updateCardTime(SQLTrx);

            log.LogMethodExit(null);
        }

        List<DateTime> GetBetweenDates(DateTime startDate, DateTime endDate, DateTime betweenDate)
        {
            log.LogMethodEntry(startDate, endDate, betweenDate);

            List<DateTime> betweenDates = new List<DateTime>();

            for (DateTime date = startDate.Date; date <= endDate.Date; date = date.AddDays(1))
            {
                if (date.Day == betweenDate.Day && date.Month == betweenDate.Month)
                {
                    betweenDates.Add(new DateTime(date.Year, date.Month, date.Day));
                    date = date.AddYears(1).AddDays(-1);
                }
            }

            log.LogMethodExit(betweenDates);
            return betweenDates;
        }

        private void CreateCreditPlusLine(DataRow dataRow, Card card, int ProductId, int TrxId, int LineId, int count, TransactionLine Line, SqlTransaction SQLTrx, bool reservationTransaction)
        {
            log.LogMethodEntry(dataRow, card, ProductId, TrxId, LineId, count, Line, SQLTrx, reservationTransaction);

            int businessStartTime;
            if (int.TryParse(ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "BUSINESS_DAY_START_TIME"), out businessStartTime) == false)
            {
                businessStartTime = 6;
            }

            int lineCount;
            if (count <= 0) // Will be zero or less when there is difference between expirydate and startdate by considering frequency
                lineCount = 1;
            else
                lineCount = count;

            int GraceTime = GetGraceTime(SQLTrx, TrxId, Line);

            Double cpBalance = dataRow.Table.Columns.Contains("CreditPlus") ?
                                    (dataRow["CreditPlus"] != DBNull.Value ? Convert.ToDouble(dataRow["CreditPlus"].ToString()) : 0) : 0;

            if (Line.ProductTypeCode == "VARIABLECARD")
            {
                cpBalance = Line.VariableCreditPlusCredits;
            }

            SqlCommand creditPlusCmd = Utilities.getCommand(SQLTrx);
            SqlCommand creditPlusConsumedCmd = Utilities.getCommand(SQLTrx);

            creditPlusCmd.CommandText = @"insert into CardCreditPlus (Card_Id, CreditPlus, CreditPlusBalance, Refundable, Remarks, 
                                            TrxId, LineId, CreditPlusType, PeriodFrom, PeriodTo, NumberOfDays, ExtendOnReload
                                            ,[TimeFrom]
                                            ,[TimeTo]
                                            ,[Monday]
                                            ,[Tuesday]
                                            ,[Wednesday]
                                            ,[Thursday]
                                            ,[Friday]
                                            ,[Saturday]
                                            ,[Sunday]
                                            ,CreationDate, LastupdatedDate, LastUpdatedBy
                                            ,TicketAllowed, site_id, ForMembershipOnly
                                            ,ExpireWithMembership,  MembershipId, MembershipRewardsId
                                            ,PauseAllowed
                                            ,CreatedBy, IsActive, ValidityStatus, SubscriptionBillingScheduleId)
                                          values (@cardId, @CreditPlus, @CreditPlus, @Refundable, @Remarks, 
                                            @TrxId, @LineId, @CreditPlusType, @PeriodFrom, @PeriodTo, @NumberOfDays, @ExtendOnReload
                                            ,@TimeFrom
                                            ,@TimeTo
                                            ,@Monday
                                            ,@Tuesday
                                            ,@Wednesday
                                            ,@Thursday
                                            ,@Friday
                                            ,@Saturday
                                            ,@Sunday
                                            ,getdate(), getdate(), @user, @TicketAllowed, @SiteId
                                            ,@ForMembershipOnly,@ExpireWithMembership, @MembershipId
                                            ,@MembershipRewardsId 
                                            ,@pauseAllowed
                                            ,@user, 1, @ValidityStatus, @SubscriptionBillingScheduleId); select @@identity";

            creditPlusConsumedCmd.CommandText = "insert into CardCreditPlusConsumption (CardCreditPlusId, POSTypeId, CategoryId, GameId, GameProfileId, ExpiryDate, Productid, OrderTypeId, " +
                                                    "DiscountPercentage, DiscountAmount, DiscountedPrice, ConsumptionBalance, QuantityLimit, site_id, ConsumptionQty) " +
                                                "select @CardCreditPlusId, POSTypeId, CategoryId, GameId, GameProfileId, ExpiryDate, product_id, OrderTypeId, " +
                                                    "case when product_id is null and CategoryId is null then null else case when @CreditPlusAmount = 0 then DiscountPercentage else null end end, " +
                                                    "case when product_id is null and CategoryId is null then null else case when @CreditPlusAmount = 0 then DiscountAmount else null end end, " +
                                                    "case when product_id is null and CategoryId is null then null else case when @CreditPlusAmount = 0 then DiscountedPrice else null end end, " +
                                                    "case when product_id is null and CategoryId is null then null else case when @CreditPlusAmount = 0 then isnull(Quantity, 1) else null end end, " +
                                                    "QuantityLimit , @SiteId , " +
                                                    "case when product_id is null and CategoryId is null then null else case when @CreditPlusAmount = 0 then isnull(Quantity, 1) else null end end " +
                                                "from ProductCreditPlusConsumption " +
                                                "where ProductCreditPlusId = @ProductCreditPlusId " +
                                               "INSERT INTO EntityOverrideDates (EntityName, EntityGuid, OverrideDate, IncludeExcludeFlag, Day, Remarks, LastUpdatedBy, LastUpdatedDate, site_id) " +
                                                "SELECT 'CARDCREDITPLUS',(SELECT Guid from CardCreditPlus WHERE CardCreditPlusId = @CardCreditPlusId), OverrideDate, IncludeExcludeFlag, Day, Remarks, @lastUpdatedBy, GetDate(), site_id " +
                                                "FROM EntityOverrideDates " +
                                                "WHERE EntityGuid = (SELECT Guid from ProductCreditPlus where ProductCreditPlusId = @ProductCreditPlusId)";

            DateTime startDate = Convert.ToDateTime(dataRow["PeriodFrom"]);
            DateTime expiryDate = DateTime.MinValue;
            DateTime frequencyDate = expiryDate;

            if (dataRow["PeriodTo"] != DBNull.Value)
            {
                frequencyDate = expiryDate = Convert.ToDateTime(dataRow["PeriodTo"]);
            }

            for (int i = 0; i < lineCount; i++)
            {
                creditPlusCmd.Parameters.Clear();
                creditPlusCmd.Parameters.AddWithValue("@cardId", card.card_id);
                creditPlusCmd.Parameters.AddWithValue("@TrxId", (TrxId == -1 || (dataRow["SubscriptionBillingScheduleId"].ToString() != "-1"
                                                                                && dataRow["billedSubscriptionCycle"].ToString() == "0")) ? DBNull.Value : (object)TrxId);
                creditPlusCmd.Parameters.AddWithValue("@LineId", (LineId == -1 || (dataRow["SubscriptionBillingScheduleId"].ToString() != "-1"
                                                                                   && dataRow["billedSubscriptionCycle"].ToString() == "0")) ? DBNull.Value : (object)LineId);
                creditPlusCmd.Parameters.AddWithValue("@user", ParafaitEnv.LoginID);
                creditPlusCmd.Parameters.AddWithValue("@CreditPlus", cpBalance);
                creditPlusCmd.Parameters.AddWithValue("@Refundable", dataRow["Refundable"]);
                creditPlusCmd.Parameters.AddWithValue("@Remarks", dataRow["Remarks"]);
                creditPlusCmd.Parameters.AddWithValue("@CreditPlusType", dataRow["CreditPlusType"]);

                if (ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "LOAD_CARD_ENTITLEMENT_ON_TRANSACTION_COMPLETE").Equals("Y")
                    || (dataRow["SubscriptionBillingScheduleId"].ToString() != "-1" && dataRow["billedSubscriptionCycle"].ToString() == "0"))
                {
                    if (reservationTransaction == false)
                    {
                        creditPlusCmd.Parameters.AddWithValue("@ValidityStatus", 'H');
                    }
                    else
                    {
                        creditPlusCmd.Parameters.AddWithValue("@ValidityStatus", DBNull.Value);
                    }
                }
                else
                {
                    creditPlusCmd.Parameters.AddWithValue("@ValidityStatus", DBNull.Value);
                }


                log.LogVariableState("@cardId", card.card_id);
                log.LogVariableState("@TrxId", TrxId == -1 ? DBNull.Value : (object)TrxId);
                log.LogVariableState("@LineId", LineId == -1 ? DBNull.Value : (object)LineId);
                log.LogVariableState("@user", ParafaitEnv.LoginID);
                log.LogVariableState("@CreditPlus", cpBalance);
                log.LogVariableState("@Refundable", dataRow["Refundable"]);
                log.LogVariableState("@Remarks", dataRow["Remarks"]);
                log.LogVariableState("@CreditPlusType", dataRow["CreditPlusType"]);
                log.LogVariableState("LOAD_CARD_ENTITLEMENT_ON_TRANSACTION_COMPLETE: ", ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "LOAD_CARD_ENTITLEMENT_ON_TRANSACTION_COMPLETE"));
                log.LogVariableState("@Remarks", dataRow["Remarks"]);

                if (Utilities.ParafaitEnv.IsCorporate == false || Utilities.ParafaitEnv.SiteId <= 0)
                {
                    creditPlusCmd.Parameters.AddWithValue("@SiteId", DBNull.Value);
                    log.LogVariableState("@SiteId", DBNull.Value);
                }
                else
                {
                    creditPlusCmd.Parameters.AddWithValue("@SiteId", Utilities.ParafaitEnv.SiteId);
                    log.LogVariableState("@SiteId", Utilities.ParafaitEnv.SiteId);
                }


                creditPlusCmd.Parameters.AddWithValue("@MembershipId", (Line.MembershipId == -1 ? DBNull.Value : (object)Line.MembershipId));
                log.LogVariableState("MembershipId", (Line.MembershipId == -1 ? DBNull.Value : (object)Line.MembershipId));

                creditPlusCmd.Parameters.AddWithValue("@MembershipRewardsId", (Line.MembershipRewardsId == -1 ? DBNull.Value : (object)Line.MembershipRewardsId));
                log.LogVariableState("MembershipRewardsId", (Line.MembershipRewardsId == -1 ? DBNull.Value : (object)Line.MembershipRewardsId));

                //creditPlusCmd.Parameters.AddWithValue("@ForMembershipOnly", (Line.ForMembershipOnly == true? (object)Line.ForMembershipOnly : DBNull.Value));
                //log.LogVariableState("ForMembershipOnly", (Line.ForMembershipOnly == true ? (object)Line.ForMembershipOnly : DBNull.Value));
                if (!String.IsNullOrEmpty(Line.ForMembershipOnly) && Line.ForMembershipOnly == "Y")
                    creditPlusCmd.Parameters.AddWithValue("@ForMembershipOnly", Line.ForMembershipOnly);
                else
                    creditPlusCmd.Parameters.AddWithValue("@ForMembershipOnly", DBNull.Value);

                log.LogVariableState("ForMembershipOnly", Line.ForMembershipOnly);

                //creditPlusCmd.Parameters.AddWithValue("@ExpireWithMembership", (Line.ExpireWithMembership == true ? (object)Line.ExpireWithMembership : DBNull.Value));
                //log.LogVariableState("ExpireWithMembership", (Line.ExpireWithMembership == true ? (object)Line.ExpireWithMembership : DBNull.Value));
                if (!String.IsNullOrEmpty(Line.ExpireWithMembership) && Line.ExpireWithMembership == "Y")
                    creditPlusCmd.Parameters.AddWithValue("@ExpireWithMembership", Line.ExpireWithMembership);
                else
                    creditPlusCmd.Parameters.AddWithValue("@ExpireWithMembership", DBNull.Value);

                log.LogVariableState("ExpireWithMembership", Line.ExpireWithMembership);

                if (dataRow["PauseAllowed"] != DBNull.Value)
                {
                    creditPlusCmd.Parameters.AddWithValue("@pauseAllowed", dataRow["PauseAllowed"]);
                }
                else
                {
                    creditPlusCmd.Parameters.AddWithValue("@pauseAllowed", true); //default value is true
                }
                log.LogVariableState("@pauseAllowed", dataRow["pauseAllowed"]);

                if (count > 0)
                {
                    dataRow["PeriodFrom"] = startDate;

                    if (dataRow["Frequency"].ToString() == "D")
                    {
                        if (lineCount - 1 == i) // last day line
                        {
                            frequencyDate = expiryDate;
                        }
                        else
                        {
                            frequencyDate = startDate.Date.AddDays(1).AddHours(businessStartTime);
                        }
                    }
                    else if (dataRow["Frequency"].ToString() == "W")
                    {
                        if (startDate.DayOfWeek == DayOfWeek.Sunday)
                        {
                            frequencyDate = startDate.Date.AddDays(7).AddHours(businessStartTime);

                            if (frequencyDate > expiryDate)
                                frequencyDate = expiryDate;
                        }
                        else
                        {
                            frequencyDate = startDate.Date.AddDays(7 - (int)startDate.Date.DayOfWeek).AddHours(businessStartTime);
                        }
                    }
                    else if (dataRow["Frequency"].ToString() == "M")
                    {
                        if (lineCount - 1 == i) // last month line
                        {
                            frequencyDate = expiryDate;
                        }
                        else if (i == 0)
                        {
                            //To get the last day date of the month
                            DateTime firstDayOfTheMonth = new DateTime(startDate.Year, startDate.Month, 1);
                            //frequencyDate = firstDayOfTheMonth.AddMonths(1).AddDays(-1).AddHours(6);
                            frequencyDate = firstDayOfTheMonth.AddMonths(1).AddHours(businessStartTime);
                        }
                        else
                        {
                            frequencyDate = frequencyDate.AddMonths(1);
                        }
                    }
                    else if (dataRow["Frequency"].ToString() == "Y")
                    {
                        if (lineCount - 1 == i) // last year line
                        {
                            frequencyDate = expiryDate;
                        }
                        else if (i == 0)
                        {
                            //frequencyDate = new DateTime(startDate.Year, 12, 31).AddHours(6); //last day of the year
                            frequencyDate = new DateTime(startDate.Year, 12, 31).AddDays(1).AddHours(businessStartTime); //last day of the year
                        }
                        else
                        {
                            frequencyDate = startDate.Date.AddYears(1).AddHours(businessStartTime);
                        }
                    }
                    else if (dataRow["Frequency"].ToString() == "A" || dataRow["Frequency"].ToString() == "B")
                    {
                        List<DateTime> lstDates;
                        if (dataRow["Frequency"].ToString() == "A")
                        {
                            lstDates = GenericUtils.GetBetweenDates(startDate, expiryDate, card.customerDTO.Anniversary == null ? DateTime.MinValue : card.customerDTO.Anniversary.Value);
                        }
                        else
                        {
                            lstDates = GenericUtils.GetBetweenDates(startDate, expiryDate, card.customerDTO.DateOfBirth == null ? DateTime.MinValue : card.customerDTO.DateOfBirth.Value);
                        }

                        if (lstDates.Count > 0)
                        {
                            frequencyDate = lstDates[0];
                        }
                        else
                        {
                            continue;
                        }

                        dataRow["PeriodFrom"] = frequencyDate.AddHours(businessStartTime); //b'day date or ann date
                        frequencyDate = frequencyDate.Date.AddDays(1).AddHours(businessStartTime); //expired on next day 6AM
                    }
                }

                creditPlusCmd.Parameters.AddWithValue("@PeriodFrom", Convert.ToDateTime(dataRow["PeriodFrom"]).AddMinutes(-GraceTime).AddSeconds(offSetDuration));

                if (dataRow["PeriodTo"].ToString() == "")
                {
                    if (count > 0)
                        creditPlusCmd.Parameters.AddWithValue("@PeriodTo", frequencyDate.AddMinutes(GraceTime).AddSeconds(offSetDuration));
                    else
                        creditPlusCmd.Parameters.AddWithValue("@PeriodTo", DBNull.Value);
                }
                else
                {
                    creditPlusCmd.Parameters.AddWithValue("@PeriodTo", (count > 0 ? frequencyDate.AddMinutes(GraceTime).AddSeconds(offSetDuration) : ((dataRow["PeriodTo"] != DBNull.Value) ? Convert.ToDateTime(dataRow["PeriodTo"]).AddMinutes(GraceTime).AddSeconds(offSetDuration) : dataRow["PeriodTo"])));
                }

                log.LogVariableState("@PeriodFrom", dataRow["PeriodFrom"]);
                log.LogVariableState("@PeriodTo", count > 0 ? frequencyDate : dataRow["PeriodTo"]);

                if (dataRow["PeriodTo"] != DBNull.Value)
                {
                    if (count > 0)
                        dataRow["ValidForDays"] = (frequencyDate.Date - Convert.ToDateTime(dataRow["PeriodFrom"]).Date).Days;
                    else
                        dataRow["ValidForDays"] = (Convert.ToDateTime(dataRow["PeriodTo"]).Date - Convert.ToDateTime(dataRow["PeriodFrom"]).Date).Days;
                }

                creditPlusCmd.Parameters.AddWithValue("@NumberOfDays", dataRow["ValidForDays"]);
                creditPlusCmd.Parameters.AddWithValue("@ExtendOnReload", dataRow["ExtendOnReload"]);
                creditPlusCmd.Parameters.AddWithValue("@TimeFrom", dataRow["TimeFrom"]);
                creditPlusCmd.Parameters.AddWithValue("@TimeTo", dataRow["TimeTo"]);
                creditPlusCmd.Parameters.AddWithValue("@Monday", dataRow["Monday"].Equals(false) ? 'N' : 'Y');
                creditPlusCmd.Parameters.AddWithValue("@Tuesday", dataRow["Tuesday"].Equals(false) ? 'N' : 'Y');
                creditPlusCmd.Parameters.AddWithValue("@Wednesday", dataRow["Wednesday"].Equals(false) ? 'N' : 'Y');
                creditPlusCmd.Parameters.AddWithValue("@Thursday", dataRow["Thursday"].Equals(false) ? 'N' : 'Y');
                creditPlusCmd.Parameters.AddWithValue("@Friday", dataRow["Friday"].Equals(false) ? 'N' : 'Y');
                creditPlusCmd.Parameters.AddWithValue("@Saturday", dataRow["Saturday"].Equals(false) ? 'N' : 'Y');
                creditPlusCmd.Parameters.AddWithValue("@Sunday", dataRow["Sunday"].Equals(false) ? 'N' : 'Y');
                creditPlusCmd.Parameters.AddWithValue("@TicketAllowed", dataRow["TicketAllowed"]);
                creditPlusCmd.Parameters.AddWithValue("@SubscriptionBillingScheduleId", dataRow["SubscriptionBillingScheduleId"].ToString() == "-1"
                                                                                   ? DBNull.Value : dataRow["SubscriptionBillingScheduleId"]);



                long cardCreditPlusId = Convert.ToInt64(creditPlusCmd.ExecuteScalar());

                creditPlusConsumedCmd.Parameters.Clear();
                creditPlusConsumedCmd.Parameters.AddWithValue("@CardCreditPlusId", cardCreditPlusId);
                creditPlusConsumedCmd.Parameters.AddWithValue("@ProductCreditPlusId", dataRow["ProductCreditPlusId"]);
                creditPlusConsumedCmd.Parameters.AddWithValue("@CreditPlusAmount", cpBalance);
                creditPlusConsumedCmd.Parameters.AddWithValue("@lastUpdatedBy", Utilities.ParafaitEnv.Username);

                log.LogVariableState("@NumberOfDays", dataRow["ValidForDays"]);
                log.LogVariableState("@ExtendOnReload", dataRow["ExtendOnReload"]);
                log.LogVariableState("@TimeFrom", dataRow["TimeFrom"]);
                log.LogVariableState("@TimeTo", dataRow["TimeTo"]);
                log.LogVariableState("@Monday", dataRow["Monday"].Equals(false) ? 'N' : 'Y');
                log.LogVariableState("@Tuesday", dataRow["Tuesday"].Equals(false) ? 'N' : 'Y');
                log.LogVariableState("@Wednesday", dataRow["Wednesday"].Equals(false) ? 'N' : 'Y');
                log.LogVariableState("@Thursday", dataRow["Thursday"].Equals(false) ? 'N' : 'Y');
                log.LogVariableState("@Friday", dataRow["Friday"].Equals(false) ? 'N' : 'Y');
                log.LogVariableState("@Saturday", dataRow["Saturday"].Equals(false) ? 'N' : 'Y');
                log.LogVariableState("@Sunday", dataRow["Sunday"].Equals(false) ? 'N' : 'Y');
                log.LogVariableState("@TicketAllowed", dataRow["TicketAllowed"]);
                log.LogVariableState("@CardCreditPlusId", cardCreditPlusId);
                log.LogVariableState("@ProductCreditPlusId", dataRow["ProductCreditPlusId"]);
                log.LogVariableState("@CreditPlusAmount", cpBalance);
                log.LogVariableState("@lastUpdatedBy", Utilities.ParafaitEnv.Username);
                log.LogVariableState("@SubscriptionBillingScheduleId", dataRow["SubscriptionBillingScheduleId"]);

                if (Utilities.ParafaitEnv.IsCorporate == false || Utilities.ParafaitEnv.SiteId <= 0)
                {
                    creditPlusConsumedCmd.Parameters.AddWithValue("@SiteId", DBNull.Value);
                    log.LogVariableState("@SiteId", DBNull.Value);
                }
                else
                {
                    creditPlusConsumedCmd.Parameters.AddWithValue("@SiteId", Utilities.ParafaitEnv.SiteId);
                    log.LogVariableState("@SiteId", Utilities.ParafaitEnv.SiteId);
                }

                creditPlusConsumedCmd.ExecuteNonQuery();

                startDate = frequencyDate;

                if (count > 0 && lineCount - 1 == i)
                {
                    if (expiryDate > frequencyDate && (dataRow["Frequency"].ToString() != "B" && dataRow["Frequency"].ToString() != "A"))
                    {
                        dataRow["PeriodFrom"] = frequencyDate;
                        dataRow["PeriodTo"] = expiryDate;
                        CreateCreditPlusLine(dataRow, card, ProductId, TrxId, LineId, 0, Line, SQLTrx, reservationTransaction);
                    }
                }
            }

            log.LogMethodExit(null);
        }
        #endregion
        /// <summary>
        /// CreateCardDiscounts
        /// </summary>
        /// <param name="SQLTrx"></param>
        /// <param name="transactionId"></param>
        /// <param name="lineId"></param>
        /// <param name="CardId"></param>
        /// <param name="ProductId"></param>
        /// <param name="Line"></param>
        /// <param name="subscriptionBillingScheduleDTO"></param>
        public void CreateCardDiscounts(SqlTransaction SQLTrx, int transactionId, int lineId, long CardId, int ProductId, TransactionLine Line, SubscriptionBillingScheduleDTO subscriptionBillingScheduleDTO, bool reservationTransaction)
        {
            log.LogMethodEntry(SQLTrx, transactionId, lineId, CardId, ProductId, Line, subscriptionBillingScheduleDTO, reservationTransaction);
            int businessStartTime;
            if (int.TryParse(ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "BUSINESS_DAY_START_TIME"), out businessStartTime) == false)
            {
                businessStartTime = 6;
            }

            ProductDiscountsListBL productDiscountsListBL = new ProductDiscountsListBL(Utilities.ExecutionContext);
            List<KeyValuePair<ProductDiscountsDTO.SearchByParameters, string>> searchProductDiscountsParams = new List<KeyValuePair<ProductDiscountsDTO.SearchByParameters, string>>();
            searchProductDiscountsParams.Add(new KeyValuePair<ProductDiscountsDTO.SearchByParameters, string>(ProductDiscountsDTO.SearchByParameters.PRODUCT_ID, ProductId.ToString()));
            searchProductDiscountsParams.Add(new KeyValuePair<ProductDiscountsDTO.SearchByParameters, string>(ProductDiscountsDTO.SearchByParameters.IS_ACTIVE, "Y"));
            searchProductDiscountsParams.Add(new KeyValuePair<ProductDiscountsDTO.SearchByParameters, string>(ProductDiscountsDTO.SearchByParameters.SITE_ID, (Utilities.ParafaitEnv.IsCorporate ? Utilities.ParafaitEnv.SiteId : -1).ToString()));
            searchProductDiscountsParams.Add(new KeyValuePair<ProductDiscountsDTO.SearchByParameters, string>(ProductDiscountsDTO.SearchByParameters.EXPIRY_DATE_GREATER_THAN, Utilities.getServerTime().ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture)));
            List<ProductDiscountsDTO> productDiscountsDTOList = productDiscountsListBL.GetProductDiscountsDTOList(searchProductDiscountsParams);
            if (productDiscountsDTOList != null)
            {
                foreach (var productDiscountsDTO in productDiscountsDTOList)
                {
                    CardDiscountsListBL cardDiscountsListBL = new CardDiscountsListBL();
                    List<KeyValuePair<CardDiscountsDTO.SearchByParameters, string>> searchCardDiscountsParams = new List<KeyValuePair<CardDiscountsDTO.SearchByParameters, string>>();
                    searchCardDiscountsParams.Add(new KeyValuePair<CardDiscountsDTO.SearchByParameters, string>(CardDiscountsDTO.SearchByParameters.DISCOUNT_ID, productDiscountsDTO.DiscountId.ToString()));
                    searchCardDiscountsParams.Add(new KeyValuePair<CardDiscountsDTO.SearchByParameters, string>(CardDiscountsDTO.SearchByParameters.CARD_ID, CardId.ToString()));
                    searchCardDiscountsParams.Add(new KeyValuePair<CardDiscountsDTO.SearchByParameters, string>(CardDiscountsDTO.SearchByParameters.IS_ACTIVE, "Y"));
                    searchCardDiscountsParams.Add(new KeyValuePair<CardDiscountsDTO.SearchByParameters, string>(CardDiscountsDTO.SearchByParameters.SITE_ID, (Utilities.ParafaitEnv.IsCorporate ? Utilities.ParafaitEnv.SiteId : -1).ToString()));
                    searchCardDiscountsParams.Add(new KeyValuePair<CardDiscountsDTO.SearchByParameters, string>(CardDiscountsDTO.SearchByParameters.EXPIRY_DATE_GREATER_THAN, Utilities.getServerTime().ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture)));
                    List<CardDiscountsDTO> cardDiscountsDTOList = cardDiscountsListBL.GetCardDiscountsDTOList(searchCardDiscountsParams, SQLTrx);
                    if (cardDiscountsDTOList != null && cardDiscountsDTOList.Count > 0)
                    {
                        //The discount already exist in card discounts continue
                        continue;
                    }
                    DiscountContainerDTO discountContainerDTO = DiscountContainerList.GetDiscountContainerDTO(Utilities.ExecutionContext, productDiscountsDTO.DiscountId);
                    if (discountContainerDTO == null || discountContainerDTO.IsActive != true)
                    {
                        //Discount is not active continue
                        continue;
                    }
                    CardDiscountsDTO cardDiscountsDTO = new CardDiscountsDTO();
                    cardDiscountsDTO.CardId = Convert.ToInt32(CardId);
                    cardDiscountsDTO.DiscountId = productDiscountsDTO.DiscountId;
                    cardDiscountsDTO.TransactionId = (subscriptionBillingScheduleDTO == null ? transactionId
                                                                                             : (subscriptionBillingScheduleDTO.TransactionId == -1 ? -1 : transactionId));

                    cardDiscountsDTO.LineId = (subscriptionBillingScheduleDTO == null ? lineId
                                                                                             : (subscriptionBillingScheduleDTO.TransactionId == -1 ? -1 : lineId));
                    DateTime referenceDate = (subscriptionBillingScheduleDTO == null ?
                                                new DateTime(EntitlementReferenceDate.Year, EntitlementReferenceDate.Month, EntitlementReferenceDate.Day)
                                          : new DateTime(subscriptionBillingScheduleDTO.BillFromDate.Year, subscriptionBillingScheduleDTO.BillFromDate.Month, subscriptionBillingScheduleDTO.BillFromDate.Day));
                    if (productDiscountsDTO.ValidFor != null)
                    {
                        if (productDiscountsDTO.ValidForDaysMonths == "D")
                        {
                            cardDiscountsDTO.ExpiryDate = referenceDate.AddDays(Convert.ToInt32(productDiscountsDTO.ValidFor)).AddHours(businessStartTime);
                        }
                        else
                        {
                            cardDiscountsDTO.ExpiryDate = referenceDate.AddMonths(Convert.ToInt32(productDiscountsDTO.ValidFor)).AddHours(businessStartTime);
                        }
                    }
                    if (productDiscountsDTO.ExpiryDate != null)
                    {
                        DateTime expiryDate = (DateTime)productDiscountsDTO.ExpiryDate;
                        DateTime timeAdjustedExpiryDate = (new DateTime(expiryDate.Year, expiryDate.Month, expiryDate.Day)).AddHours(businessStartTime);
                        if (cardDiscountsDTO.ExpiryDate == null || cardDiscountsDTO.ExpiryDate > timeAdjustedExpiryDate)
                        {
                            cardDiscountsDTO.ExpiryDate = timeAdjustedExpiryDate;
                        }
                    }
                    cardDiscountsDTO.MembershipId = Line.MembershipId;
                    cardDiscountsDTO.MembershipRewardsId = Line.MembershipRewardsId;
                    cardDiscountsDTO.ExpireWithMembership = Line.ExpireWithMembership;
                    if (ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "LOAD_CARD_ENTITLEMENT_ON_TRANSACTION_COMPLETE").Equals("Y"))
                    {
                        if (reservationTransaction == false)
                        {
                            cardDiscountsDTO.ValidityStatus = CardCoreDTO.CardValidityStatus.Hold;
                        }
                        else
                        {
                            cardDiscountsDTO.ValidityStatus = CardCoreDTO.CardValidityStatus.Valid;
                        }
                    }
                    else
                    {
                        if (subscriptionBillingScheduleDTO == null || (subscriptionBillingScheduleDTO != null && subscriptionBillingScheduleDTO.TransactionId > -1))
                        {
                            cardDiscountsDTO.ValidityStatus = CardCoreDTO.CardValidityStatus.Valid;
                        }
                        else
                        {
                            cardDiscountsDTO.ValidityStatus = CardCoreDTO.CardValidityStatus.Hold;
                        }
                    }
                    cardDiscountsDTO.SubscriptionBillingScheduleId = (subscriptionBillingScheduleDTO == null ? -1 : subscriptionBillingScheduleDTO.SubscriptionBillingScheduleId);
                    CardDiscountsBL cardDiscountsBL = new CardDiscountsBL(cardDiscountsDTO);
                    cardDiscountsBL.Save(SQLTrx);
                }
            }

            log.LogMethodExit(null);
        }

        public void ApplyProfile(object pTrxProfileId, TransactionLine trxline = null, bool recalculateAmounts = true, bool saveOrder = true)
        {
            log.LogMethodEntry(pTrxProfileId, trxline, recalculateAmounts);

            TrxProfileId = Convert.ToInt32(pTrxProfileId);
            if (trxline == null)
            {
                foreach (TransactionLine tl in TrxLines)
                {
                    if (tl.LineValid)
                    {
                        if (tl.tax_id > 0)
                        {
                            tl.tax_percentage = Convert.ToDouble(Utilities.executeScalar("select isnull(tax_percentage, 0) from tax where tax_id = @taxId",
                                                 new SqlParameter("@taxId", tl.tax_id)));

                            if (TrxProfileId >= 0)
                            {
                                tl.tax_percentage -= (double)getProfileTaxExemptPercentage(tl.tax_id);
                                tl.TrxProfileId = TrxProfileId;
                                if (tl.DBLineId > 0)
                                {
                                    Utilities.executeNonQuery(@"delete from TrxTaxLines where TrxId = @TrxId and LineId = @LineId",
                                                 new SqlParameter("@TrxId", Trx_id),
                                                 new SqlParameter("@LineId", tl.DBLineId));
                                }
                            }

                            tl.LineAmount = (double)tl.quantity * tl.Price * (1 + tl.tax_percentage / 100.0);
                            tl.tax_amount = (double)tl.quantity * tl.Price * tl.tax_percentage / 100.0;

                        }
                    }
                }
            }
            else
            {
                if (trxline.LineValid)
                {
                    if (trxline.tax_id > 0)
                    {
                        trxline.tax_percentage = Convert.ToDouble(Utilities.executeScalar("select isnull(tax_percentage, 0) from tax where tax_id = @taxId",
                                             new SqlParameter("@taxId", trxline.tax_id)));
                        double tax_percentage = trxline.tax_percentage;
                        if (TrxProfileId >= 0)
                        {
                            trxline.tax_percentage -= (double)getProfileTaxExemptPercentage(trxline.tax_id);
                            trxline.TrxProfileId = TrxProfileId;
                            TrxProfileId = -1;
                            if (trxline.DBLineId > 0)
                            {
                                Utilities.executeNonQuery(@"delete from TrxTaxLines where TrxId = @TrxId and LineId = @LineId",
                                                new SqlParameter("@TrxId", Trx_id),
                                                new SqlParameter("@LineId", trxline.DBLineId));
                            }
                        }

                        trxline.LineAmount = (double)trxline.quantity * trxline.Price * (1 + trxline.tax_percentage / 100.0);
                        trxline.tax_amount = (double)trxline.quantity * trxline.Price * trxline.tax_percentage / 100.0;
                    }
                }
                TrxProfileId = -1;
            }
            if (recalculateAmounts)
            {
                updateAmounts(true);
            }
            try
            {
                if (TrxLines.Exists(x => x.DBLineId > 0) && saveOrder)
                {
                    TransactionPaymentsDTOList.RemoveAll(x => x.PaymentId == -1);
                    string message = "";
                    if (SaveOrder(ref message) == 0)
                        InsertTrxLogs(Trx_id, -1, Utilities.ParafaitEnv.LoginID, "SAVE", "Order Saved successful after applying Trx Profile");
                    else
                        InsertTrxLogs(Trx_id, -1, Utilities.ParafaitEnv.LoginID, "SAVE", "Order Saved failed after applying Trx Profile");
                }
            }
            catch
            {
                log.Error("SaveOrder method failed after applying Trx profile: " + TrxProfileId.ToString());
            }
            log.LogMethodExit(null);
        }

        private void CompleteOrder(int OrderId, SqlTransaction SQLTrx)
        {
            log.LogMethodEntry(OrderId, SQLTrx);

            SqlCommand cmd = Utilities.getCommand(SQLTrx);
            cmd.CommandText = "Update orderHeader set OrderStatus = 'COMPLETE' " +
                              "where orderId = @OrderId";
            cmd.Parameters.AddWithValue("@OrderID", OrderId);
            cmd.ExecuteNonQuery();

            log.LogVariableState("@OrderID", OrderId);

            log.LogMethodExit(null);
        }

        public void updateAmounts(bool calculateDiscounts = true, SqlTransaction sqlTrx = null, bool saveOrder = true)
        {
            log.LogMethodEntry(calculateDiscounts);

            Transaction_Amount = 0;
            Pre_TaxAmount = 0;
            Tax_Amount = 0;
            Discount_Amount = 0;
            for (int i = 0; i < TrxLines.Count; i++)
            {
                if (TrxLines[i].LineValid)
                {
                    decimal preTaxLineAmount = (decimal)TrxLines[i].Price * TrxLines[i].quantity;
                    TrxLines[i].LineAmount = (double)preTaxLineAmount;
                    Pre_TaxAmount = (double)((decimal)Pre_TaxAmount + preTaxLineAmount);
                    TrxLines[i].tax_amount = (double)(preTaxLineAmount * (decimal)TrxLines[i].tax_percentage / 100.0m);
                    Tax_Amount = (double)((decimal)Tax_Amount + (decimal)TrxLines[i].tax_amount);
                    TrxLines[i].LineAmount = (double)((decimal)TrxLines[i].LineAmount + (decimal)TrxLines[i].tax_amount);
                    TrxLines[i].Discount_Percentage = 0;
                }
            }
            Transaction_Amount = (double)((decimal)Pre_TaxAmount + (decimal)Tax_Amount);
            if (calculateDiscounts)
            {
                CalculateDiscounts(sqlTrx);
            }
            UpdateDiscountsSummary();
            for (int i = 0; i < TrxLines.Count; i++)
            {
                if (TrxLines[i].LineValid)
                {
                    if (TrxLines[i].TransactionDiscountsDTOList != null &&
                        TrxLines[i].TransactionDiscountsDTOList.Count > 0)
                    {
                        TrxLines[i].Discount_Percentage = (double)TrxLines[i].TransactionDiscountsDTOList.Average(x => x.DiscountPercentage);
                        Discount_Amount = (double)((decimal)Discount_Amount + (TrxLines[i].TransactionDiscountsDTOList.Sum(x => x.DiscountAmount)));
                    }
                }
            }
            if (DiscountsSummaryDTODictionary != null && discountApplicationHistoryDTOList != null)
            {
                foreach (var DiscountsSummaryDTOPair in DiscountsSummaryDTODictionary)
                {
                    if (DiscountsSummaryDTOPair.Value.DiscountAmount > 0)
                    {
                        foreach (var discountApplicationHistoryDTO in discountApplicationHistoryDTOList)
                        {
                            if (discountApplicationHistoryDTO.DiscountId == DiscountsSummaryDTOPair.Key)
                            {
                                DiscountContainerDTO discountContainerDTO = DiscountContainerList.GetDiscountContainerDTO(Utilities.ExecutionContext, discountApplicationHistoryDTO.DiscountId);
                                if (discountContainerDTO.TransactionProfileId != -1)
                                {
                                    if (discountApplicationHistoryDTO.TransactionLineBL != null)
                                    {
                                        if (discountApplicationHistoryDTO.TransactionLineBL.DBLineId == 0 &&
                                            discountApplicationHistoryDTO.TransactionLineBL.TransactionProfileId == -1 &&
                                            discountApplicationHistoryDTO.TransactionLineBL.TaxId > -1)
                                        {
                                            ApplyProfile(discountContainerDTO.TransactionProfileId, discountApplicationHistoryDTO.TransactionLineBL as TransactionLine, true, saveOrder);
                                        }
                                    }
                                    else
                                    {
                                        if (IsTransactionProfileApplied(discountContainerDTO.TransactionProfileId) == false)
                                        {
                                            ApplyProfile(discountContainerDTO.TransactionProfileId, null, true, saveOrder);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (IsGroupMeal)
                Discount_Amount = (double)decimal.Round((decimal)Discount_Amount, ParafaitEnv.RoundingPrecision);
            Net_Transaction_Amount = (double)decimal.Round((decimal)Transaction_Amount - (decimal)Discount_Amount, ParafaitEnv.RoundingPrecision, MidpointRounding.AwayFromZero);

            log.LogMethodExit();
        }

        private bool IsTransactionProfileApplied(int transactionProfileId)
        {
            log.LogMethodEntry(transactionProfileId);
            bool applied = false;
            bool taxidEmpty = true;
            bool lineSaved = false;
            foreach (var line in TrxLines)
            {
                if (line.LineValid && line.TrxProfileId == transactionProfileId)
                {
                    applied = true;
                }
                if (line.LineValid && line.tax_id > -1)
                {
                    taxidEmpty = false;
                }
                if (line.LineValid && line.DBLineId > 0)
                {
                    lineSaved = true;
                }
            }
            if (taxidEmpty || lineSaved)
            {
                applied = true;
            }
            log.LogMethodExit(applied);
            return applied;
        }

        public bool cancelTransaction(ref string message, SqlTransaction sqlTransaction = null)
        {
            log.LogMethodEntry(message);

            if (Trx_id > 0)
            {
                bool CANCEL_PRINTED_TRX_LINE = Utilities.getParafaitDefaults("CANCEL_PRINTED_TRX_LINE").Equals("Y");
                foreach (TransactionLine tl in TrxLines)
                {
                    if (tl.LineValid
                        && tl.DBLineId > 0
                        && (((tl.ReceiptPrinted || tl.KDSSent) && CANCEL_PRINTED_TRX_LINE == false) || tl.AllowEdit == false))
                    {
                        message = Utilities.MessageUtils.getMessage(512);

                        log.LogVariableState("message ", message);
                        log.LogMethodExit(false);
                        return false;
                    }
                }

                if (Convert.ToDecimal(Utilities.executeScalar("select isnull(sum(Amount), 0) from trxPayments where trxId = @trxId",
                                         new SqlParameter("@trxId", Trx_id))) != 0)
                {
                    message = Utilities.MessageUtils.getMessage(521);

                    log.LogVariableState("@trxId", Trx_id);
                    log.LogVariableState("message ", message);
                    log.LogMethodExit(false);
                    return false;
                }
                SqlCommand cmd;
                if (sqlTransaction == null)
                {
                    cmd = Utilities.getCommand(Utilities.createConnection().BeginTransaction());
                }
                else
                {
                    cmd = Utilities.getCommand(sqlTransaction);
                }

                foreach (TransactionLine line in TrxLines)
                {

                    if (line.ProductTypeCode == ProductTypeValues.ATTRACTION
                        && line.LineAtb != null
                        && line.LineAtb.AttractionBookingDTO != null
                        && line.LineAtb.AttractionBookingDTO.TrxId == -1)
                    {
                        line.LineAtb.Expire(sqlTransaction, true);
                    }

                    if (line.LineValid
                        && line.DBLineId > 0
                        && !string.IsNullOrEmpty(line.InventoryProductCode))
                        try
                        {
                            Inventory.updateStock(line.InventoryProductCode, cmd, line.quantity * -1, POSMachineId, Utilities.ParafaitEnv.LoginID, Trx_id, line.DBLineId, line.Price, line.tax_percentage, line.TaxInclusivePrice, Utilities.ExecutionContext.GetSiteId(), -1, -1);
                        }
                        catch (Exception ex)
                        {
                            log.Error("Error occurred when updating the inventory stock", ex);

                            message = ex.Message;
                            cmd.Transaction.Rollback();
                            cmd.Connection.Close();

                            log.LogVariableState("message ", message);
                            log.LogMethodExit(false);
                            return false;
                        }
                    //Modified 02/2019 for BearCat - 86-68
                    if (line.LineValid
                        && line.DBLineId > 0)
                    {
                        try
                        {
                            if (ParafaitDefaultContainerList.GetParafaitDefault<bool>(Utilities.ExecutionContext, "ALLOW_PRODUCTS_TOBE_MARKED_UNAVAILABLE") &&
                                (line.ProductTypeCode == "MANUAL" || line.ProductTypeCode == "COMBO"))
                            {
                                ProductsAvailabilityListBL unavailableProductsList = new ProductsAvailabilityListBL(Utilities.ExecutionContext);
                                ProductsAvailabilityDTO unavailableProduct = unavailableProductsList.SearchUnavailableProductByProductId(line.ProductID, cmd.Transaction);
                                if (unavailableProduct.Id > 0)
                                {
                                    unavailableProduct.AvailableQty = unavailableProduct.AvailableQty - (line.quantity * -1);
                                    ProductsAvailabilityBL productsAvailabilityBL = new ProductsAvailabilityBL(Utilities.ExecutionContext, unavailableProduct, cmd.Transaction);
                                    productsAvailabilityBL.Save(unavailableProduct.ApprovedBy);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            log.Error("Error occurred when incrementing the available quantity", ex);

                            message = ex.Message;
                            cmd.Transaction.Rollback();
                            cmd.Connection.Close();

                            log.LogVariableState("message ", message);
                            log.LogMethodExit(false);
                            return false;
                        }
                    }
                }

                cmd.CommandText = @"Update orderHeader set OrderStatus = 'CANCELLED'
                              where orderId = (select OrderId from trx_header where trxId = @trxId);
                                delete from trxDiscounts where TrxId = @trxId;
                                delete from trxTaxLines where TrxId = @trxId;
                                update trx_lines set Price = 0, Amount = 0, UserPrice = 0, 
                                                    credits = 0, bonus = 0, courtesy = 0, time = 0, tickets = 0,
                                                        LastUpdateDate = getdate(),
                                                        LastUpdatedBy = @user,
                                                    cancelledTime = getdate(), cancelledBy = @user,
                                                    ApprovedBy = @ApprovedBy
                                where TrxId = @trxId;
                                update TrxUserVerificationDetails set IsActive = 'N', LastUpdatedBy = @user, LastUpdateDate = getdate()
                                 where TrxId = @trxId;
                                update trx_header set status = 'CANCELLED', trxAmount = 0, TaxAmount = 0, trxNetAmount = 0, cashAmount = 0 where TrxId = @trxId;";

                cmd.Parameters.AddWithValue("@trxId", Trx_id);
                cmd.Parameters.AddWithValue("@user", Utilities.ParafaitEnv.LoginID);
                cmd.Parameters.AddWithValue("@ApprovedBy", Utilities.ParafaitEnv.ApproverId == "-1" ? "" : Utilities.ParafaitEnv.ApproverId);

                try
                {
                    cmd.ExecuteNonQuery();
                    TransactionUtils.reverseAttractionBookings(Trx_id, -1, cmd.Transaction);
                    CancelReservationSchedule(cmd.Transaction);
                    if (sqlTransaction == null)
                    {
                        cmd.Transaction.Commit();
                        cmd.Connection.Close();
                    }
                    log.LogVariableState("message ", message);
                    log.LogMethodExit(true);
                    return true;
                }
                catch (Exception ex)
                {
                    log.Error("Error occurred while cancel transaction", ex);
                    message = ex.Message;
                    if (sqlTransaction == null)
                    {
                        cmd.Transaction.Rollback();
                        cmd.Connection.Close();
                    }
                    log.LogVariableState("message ", message);
                    log.LogMethodExit(false);
                    return false;
                }
            }
            else
            {
                log.LogVariableState("message ", message);
                log.LogMethodExit(true);
                return true;
            }
        }


        public class clsTransactionInfo
        {
            public Semnox.Parafait.logging.Logger log = new Semnox.Parafait.logging.Logger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

            Utilities Utilities;
            private Transaction trx;
            public string PrimaryPaymentCardNumber;
            public int PrimaryPaymentCardId;
            public Card PrimaryCard;
            public double PrimaryCardBalance, PrimaryCardCreditBalance, PrimaryCardBonusBalance;
            public double ExpiringCPCredits, ExpiringCPBonus, ExpiringCPLoyalty;
            public int ExpiringCPTickets;
            public DateTime CPCreditsExpiryDate, CPBonusExpiryDate, CPLoyaltyExpiryDate, CPTicketsExpiryDate;
            public string PrimaryCustomerName, TrxCustomerName, TrxCustomerPhone;
            public string Address;
            public string City;
            public string State;
            public string Pin;
            public string Phone;
            public string PhotoFileName;
            public string UniqueId;
            public int OrderId = -1;
            public string TableNumber, WaiterName, OrderCustomerName, OrderRemarks;
            public double TaxableAmount, NonTaxableAmount, DiscountedTaxAmount, DiscountAmountExclTax, TaxExempt, ZeroRatedTaxable;
            public double PaymentCashAmount, PaymentGameCardAmount, PaymentCreditCardAmount, PaymentOtherModeAmount, PaymentRoundOffAmount, GroupMealTotal, TotalCouponValue, TotalTipAmount, TotalPaymentAmount;
            public double AdvancePaidAmount;
            public double TenderedAmount, ChangeAmount;
            public double LoyaltyPoints;
            public decimal DiscountedPreTaxAmount;
            public int Tickets;
            public string PaymentCreditCardNumber, OtherPaymentMode, PaymentReference;
            public string TrxProfile;
            //Begin Modification- Jan -08-2016-Added Rental Deposit and Rental Amount //
            public double rentalAmount, rentalDepositAmount;
            //End  Modification- Jan -08-2016-Get the Rental Deposit and Rental Amount //
            public string creditCardName, nameOnCreditCard; //Added for printing Manual Credit Card details on Receipt 14-Oct-2016
            public string currencyCode;
            public double currencyRate, amountInOtherCurrency;
            public string originalTrxNo, transactionSeq, creditTransactionSeq; //Added on 29-Feb-2016 for showing original Trx as part of Refund
            public string creditCardReceipt; //09-May-2016 Added for printing on the Trx Receipt. This will contain the pre-generated credit card receipt
            public int splitCnt = -1; //To handle Split Printing
            public int totalPrintCount = 0; //To print total print count
            public string splitLineId = "-1"; //To handle Split Printing. Create string of line id split by comma
            public string CustomerTaxCode;
            public string InvoiceData;
            public int PrimaryCardCreditPlusConsumptionBalance = 0;
            public bool IsVirtualQueueEnabled = false;

            /// <summary>
            /// Original Transaction Info
            /// </summary>
            public class OriginalTransactionInfo
            {
                /// <summary>
                /// Original Transaction Number
                /// </summary>
                public string OriginalTrxNo;
                /// <summary>
                /// Reversal Remarks
                /// </summary>
                public string ReversalRemarks;
                /// <summary>
                /// Original Transaction Date
                /// </summary>
                public DateTime OriginalTrxDate;
                /// <summary>
                /// Original Transaction Id
                /// </summary>
                public int OriginalTrxId = -1;
            }

            public OriginalTransactionInfo OriginalTrxInfo = new OriginalTransactionInfo();

            /// <summary>
            /// CardInfo
            /// </summary>
            public class CardInfo
            {
                public string CardNumber;
                public decimal FaceValue;
                public string CustomerName;
                public string LineRemarks;
                public decimal TaxAmount;
                public decimal Amount;
                public decimal RedeemableValue;
                public decimal BonusValue;
                public decimal TimeValue;
            }
            /// <summary>
            /// TrxCards
            /// </summary>
            public List<CardInfo> TrxCards = new List<CardInfo>();

            /// <summary>
            /// CreditPlusConsumptionInfo containing CardId, Balance, ConsumedQuantity
            /// and credit plus remarks
            /// </summary>
            public class CardCreditPlusConsumptionInfo
            {
                public int CardId;
                public int CardCPConsumptionBalance;
                public int CardCPConsumedQuantity;
                public string Remarks;
            }
            /// <summary>
            /// CardCPConsumptionInfo
            /// </summary>
            public List<CardCreditPlusConsumptionInfo> CardCPConsumptionInfo = new List<CardCreditPlusConsumptionInfo>();
            /// <summary>
            /// ProductTaxInfo
            /// </summary>
            public class ProductTaxInfo
            {
                public int LineId = 0;
                public string TaxName;
                public decimal Percentage;
                public decimal TaxAmount;
                public int TaxStructureId;
            }
            /// <summary>
            /// ProductTrxTax
            /// </summary>
            public List<ProductTaxInfo> ProductTrxTax = new List<ProductTaxInfo>();
            /// <summary>
            /// ChargeInfo
            /// </summary>
            public class ChargeInfo
            {
                /// <summary>
                /// ChargeName
                /// </summary>
                public string ChargeName;
                /// <summary>
                /// ChargeAmount
                /// </summary>
                public decimal ChargeAmount;
            }
            public List<ChargeInfo> TrxTaxableCharges = new List<ChargeInfo>();
            public List<ChargeInfo> TrxNonTaxableCharges = new List<ChargeInfo>();
            public class TaxInfo
            {
                public string TaxName;
                public decimal Percentage;
                public decimal TaxAmount;
                public decimal ProductSplitAmount; //Added for Structure Tax 25-Mar-2016
            }
            public List<TaxInfo> TrxTax = new List<TaxInfo>();

            /// <summary>
            /// TrxWaiverInfo for ItemSlip
            /// </summary>
            public class TrxWaiverInfo
            {
                public int TrxLineId;
                public int ProductId;
                public string ProductType;
                public string BookingExists;
                public string CustName;
                public string CustPhoneNumber;
                public string CustEmail;
                public string MembershipName;
                public string CustProSkill;
                public string ProductWinBy;
                public string ProductRaceBy;
                public string ProductLapDuration;
                public string ProductIsEvent;
                public string ProductName;
                public string FacilityMapName;
                public string FacilityName;
                public DateTime ScheduleTime;
            }
            /// <summary>
            /// List of TrxWaiver at each trx line
            /// </summary>
            public List<TrxWaiverInfo> TrxWaiverList = new List<TrxWaiverInfo>();

            public class ProductInfo
            {
                public int DBLineId;
                public int productId;
                public string productName;
                public string hsnSacCode;
                public decimal quantity;
                public decimal kotQuantity;
                public double price;
                public double taxPercentage;
                public double preTaxAmount;
                public double tax;
                public string taxName;
                public double amountInclTax;
                public double amount;
                public double TotalAmountInclTax;
                public string cardNumber;
                public string productType;
                public string lineType;
                public int parentLineId;
                public string remarks;
                public bool cancelledLine;
                public bool printEligible;
                public decimal amountInclDiscount;
                public string ApprovedBy = "";
            }
            public List<ProductInfo> TrxProduct = new List<ProductInfo>();
            public List<ProductInfo> TrxProductSummary = new List<ProductInfo>();

            public class DiscountInfo
            {
                public int DiscountId;
                public string DiscountName;
                public double DiscPercentage;
                public double DiscAmount;
                public double DiscAmountWithTax;
            }
            public List<DiscountInfo> TrxDiscountInfo = new List<DiscountInfo>();

            public class DiscountSummaryInfo
            {
                public string DiscountText;
                public double? Amount;
                public bool? isSCPWD;
                public int Sort;
            }
            public List<DiscountSummaryInfo> TrxDiscountSummaryInfo = new List<DiscountSummaryInfo>();

            public class UserVerificationInfo
            {
                public int LineId;
                public string VerificationId;
                public string UserName;
                public string UserRemarks;
            }
            public List<UserVerificationInfo> TrxUserVerificationInfo = new List<UserVerificationInfo>();

            public List<TransactionPaymentsDTO> TrxPaymentsDTOList = new List<TransactionPaymentsDTO>();

            public clsTransactionInfo(Utilities inUtilities, Transaction trx)
            {
                log.LogMethodEntry(inUtilities);

                Utilities = inUtilities;
                this.trx = trx;
                Clear();

                log.LogMethodExit(null);
            }

            void Clear()
            {
                log.LogMethodEntry();

                OrderId = -1;
                OrderCustomerName = TableNumber = WaiterName = OrderRemarks = PrimaryCustomerName = TrxCustomerName = TrxCustomerPhone = Address = City = State = Pin = Phone = UniqueId = PhotoFileName = "";
                PrimaryCardBalance = TaxableAmount = NonTaxableAmount = DiscountedTaxAmount = PrimaryCardCreditBalance = PrimaryCardBonusBalance = DiscountAmountExclTax = TaxExempt = 0;
                PaymentCashAmount = PaymentCreditCardAmount = PaymentGameCardAmount = PaymentOtherModeAmount = PaymentRoundOffAmount = GroupMealTotal = TotalCouponValue = TotalTipAmount = AdvancePaidAmount = TotalPaymentAmount = 0;
                PrimaryCard = null;
                DiscountedPreTaxAmount = 0;
                TenderedAmount = ChangeAmount = 0;
                LoyaltyPoints = Tickets = totalPrintCount = 0;
                PrimaryPaymentCardId = -1;
                PaymentCreditCardNumber = OtherPaymentMode = "";
                PrimaryPaymentCardNumber = "";
                ExpiringCPCredits = ExpiringCPBonus = ExpiringCPLoyalty = ExpiringCPTickets = 0;
                rentalDepositAmount = rentalAmount = 0;
                CPCreditsExpiryDate = CPBonusExpiryDate = CPLoyaltyExpiryDate = CPTicketsExpiryDate = DateTime.MinValue;
                TrxProfile = "";
                originalTrxNo = transactionSeq = creditTransactionSeq = ""; //Added on 29-Feb-2016
                creditCardReceipt = ""; //09-May-2016
                creditCardName = nameOnCreditCard = "";
                currencyCode = "";
                currencyRate = amountInOtherCurrency = 0;
                splitCnt = -1;
                splitLineId = "-1"; //handle split printing
                InvoiceData = string.Empty;
                OriginalTrxInfo = new OriginalTransactionInfo();
                if (TrxCards != null)
                {
                    TrxCards.Clear();
                }
                if (TrxTaxableCharges != null)
                {
                    TrxTaxableCharges.Clear();
                }
                if (TrxNonTaxableCharges != null)
                {
                    TrxNonTaxableCharges.Clear();
                }
                if (TrxTax != null)
                {
                    TrxTax.Clear();
                }
                if (ProductTrxTax != null)
                {
                    ProductTrxTax.Clear();
                }
                if (TrxProduct != null)
                {
                    TrxProduct.Clear();
                }
                if (TrxProductSummary != null)
                {
                    TrxProductSummary.Clear();
                }
                if (TrxDiscountInfo != null)
                {
                    TrxDiscountInfo.Clear();
                }
                if (TrxDiscountSummaryInfo != null)
                {
                    TrxDiscountSummaryInfo.Clear();
                }
                if (TrxPaymentsDTOList != null)
                {
                    TrxPaymentsDTOList.Clear();
                }
                if (TrxUserVerificationInfo != null)
                {
                    TrxUserVerificationInfo.Clear();
                }
                if (TrxWaiverList != null)
                {
                    TrxWaiverList.Clear();
                }
                IsVirtualQueueEnabled = false;
                log.LogMethodExit();
            }

            public void createTransactionInfo(int inTrxId)
            {
                log.LogMethodEntry(inTrxId);

                createTransactionInfo(inTrxId, -1);

                log.LogMethodExit(null);
            }

            //Method override to accommodate Split Id
            public void createTransactionInfo(int inTrxId, int splitId)
            {
                log.LogMethodEntry(inTrxId, splitId);

                int TrxId = inTrxId;

                if (splitId != -1) //handle split printing
                {
                    Clear(); //clear as every print call from split should be refreshed
                    DataTable dtSplit = Utilities.executeDataTable(@"SELECT ISNULL(NoOfSplits, -1) splitCnt, ISNULL(l.lineId, -1) lineId 
                                                                       FROM TrxSplitPayments p 
                                                                            left outer JOIN TrxSplitLines l on l.SplitId = p.SplitId 
                                                                                                            and NoOfSplits is null  
                                                                      WHERE TrxId = @TrxId and p.SplitId = @SplitId",
                                                        new SqlParameter("@TrxId", TrxId),
                                                        new SqlParameter("@SplitId", splitId));
                    for (int i = 0; i < dtSplit.Rows.Count; i++)
                    {
                        splitCnt = Convert.ToInt32(dtSplit.Rows[0]["splitCnt"]);
                        if (Convert.ToInt32(dtSplit.Rows[i]["lineId"]) != -1)
                            splitLineId += "," + dtSplit.Rows[i]["lineId"].ToString();
                    }
                }


                string encryptedPassPhrase = Utilities.getParafaitDefaults("CUSTOMER_ENCRYPTION_PASS_PHRASE");
                string passPhrase = Encryption.Decrypt(encryptedPassPhrase);

                if (!string.IsNullOrEmpty(Utilities.ParafaitEnv.TaxIdentificationNumber))
                {
                    string prefixValue;
                    string trxStatus = Utilities.executeScalar(@"select status from trx_header where trxid = @trxid", new SqlParameter("@trxid", TrxId)).ToString();
                    DataTable dtInvoiceData = Utilities.executeDataTable(@"select right('00' + convert(varchar, TokenNumber), 2) tokenNo,
                                                                               substring((select top 1 prefix from Sequences where seqName = 'BillTransaction'

                                                                                    and(PosMachineId is null or POSMachineId = @posMachineId)), 0 , len((select top 1 prefix from Sequences where seqName = 'BillTransaction'
                                                                                    and (PosMachineId is null or POSMachineId = @posMachineId)))) BillPrefix,
					                                                            substring((select top 1 prefix from Sequences where seqName = 'Transaction'
                                                                                and(PosMachineId is null or POSMachineId = @posMachineId)), 0 , len((select top 1 prefix from Sequences where seqName = 'Transaction'
                                                                                    and (PosMachineId is null or POSMachineId = @posMachineId)))) InvoicePrefix,
					                                                            convert(varchar, right('0000000'+substring(trx_no, charindex('-', trx_no)+1, len(trx_no)), 7))  TrxNo,
					                                                            convert(numeric(18,2),taxAmount) taxAmt,
                                                                                convert(numeric(18,2),trxNetAmount) netAmount,
			                                                                   convert(varchar, convert(date, getdate()), 121) TrxDate,
				                                                               (select Unique_ID from CustomerView(@PassphraseEnteredByUser) where customer_id = h.customerId) CIN
                                                                          from trx_header h
                                                                         where trxid = @trxid",
                                                                        new SqlParameter("@trxid", TrxId),
                                                                        new SqlParameter("@posMachineId", Utilities.ParafaitEnv.POSMachineId),
                                                                        new SqlParameter("@PassphraseEnteredByUser", passPhrase));
                    if ((Transaction.TrxStatus)Enum.Parse(typeof(Transaction.TrxStatus), trxStatus, true) == TrxStatus.CLOSED)
                        prefixValue = dtInvoiceData.Rows[0]["InvoicePrefix"].ToString();
                    else
                        prefixValue = dtInvoiceData.Rows[0]["BillPrefix"].ToString();

                    InvoiceData = Utilities.ParafaitEnv.TaxIdentificationNumber + "|" + dtInvoiceData.Rows[0]["tokenNo"].ToString() + "|" +
                                  prefixValue + "|" + dtInvoiceData.Rows[0]["TrxNo"].ToString() + "|" +
                                  dtInvoiceData.Rows[0]["taxAmt"].ToString() + "|" + dtInvoiceData.Rows[0]["netAmount"].ToString() + "|" +
                                  dtInvoiceData.Rows[0]["TrxDate"].ToString() + "|" + "  " + "|" + dtInvoiceData.Rows[0]["CIN"].ToString() + "|";
                }
                if (PrimaryCard != null)
                {
                    if (PrimaryCard.valid_flag == 'N') // refunded card
                    {
                        PrimaryCard.credits = PrimaryCard.bonus = PrimaryCard.CreditPlusCardBalance = PrimaryCard.CreditPlusCredits = PrimaryCard.CreditPlusBonus = PrimaryCard.creditPlusItemPurchase = 0;
                        PrimaryCard.loyalty_points = PrimaryCard.TotalCreditPlusLoyaltyPoints = 0;
                        PrimaryCard.ticket_count = PrimaryCard.CreditPlusTickets = 0;
                    }

                    if (PrimaryCard.customerDTO != null)
                    {
                        PrimaryCustomerName = PrimaryCard.customerDTO.FirstName + " " + PrimaryCard.customerDTO.LastName;
                        if (PrimaryCard.customerDTO.AddressDTOList != null && PrimaryCard.customerDTO.AddressDTOList.Count > 0)
                        {
                            Address = PrimaryCard.customerDTO.AddressDTOList[0].Line1 + " " + PrimaryCard.customerDTO.AddressDTOList[0].Line2 + " " + PrimaryCard.customerDTO.AddressDTOList[0].Line3;
                            City = PrimaryCard.customerDTO.AddressDTOList[0].City;
                            State = GetStateName(PrimaryCard.customerDTO.AddressDTOList[0].StateId);
                            Pin = PrimaryCard.customerDTO.AddressDTOList[0].PostalCode;
                        }
                        string seperator = "";
                        if (PrimaryCard.customerDTO.ContactDTOList != null)
                        {
                            foreach (var contactDTO in PrimaryCard.customerDTO.ContactDTOList)
                            {
                                if (contactDTO.ContactType == ContactType.PHONE)
                                {
                                    Phone += seperator + contactDTO.Attribute1;
                                    seperator = " / ";
                                }
                            }
                        }
                        UniqueId = PrimaryCard.customerDTO.UniqueIdentifier;
                        PhotoFileName = PrimaryCard.customerDTO.PhotoURL;
                        CustomerTaxCode = PrimaryCard.customerDTO.TaxCode;
                    }

                    PrimaryCardBalance = PrimaryCard.credits + PrimaryCard.CreditPlusCardBalance + PrimaryCard.bonus + PrimaryCard.CreditPlusCredits + PrimaryCard.CreditPlusBonus + PrimaryCard.creditPlusItemPurchase;
                    PrimaryCardCreditBalance = PrimaryCard.credits + PrimaryCard.CreditPlusCardBalance + PrimaryCard.CreditPlusCredits + PrimaryCard.creditPlusItemPurchase;
                    PrimaryCardBonusBalance = PrimaryCard.bonus + PrimaryCard.CreditPlusBonus;
                    LoyaltyPoints = PrimaryCard.loyalty_points + PrimaryCard.TotalCreditPlusLoyaltyPoints;
                    Tickets = PrimaryCard.ticket_count + PrimaryCard.CreditPlusTickets;
                    PrimaryPaymentCardId = PrimaryCard.card_id;
                    PrimaryPaymentCardNumber = PrimaryCard.CardNumber;

                    DataTable dtCP = Utilities.executeDataTable(@"SELECT case when cp.CreditPlusType in ('A', 'G', 'P') then 'C' else CreditPlusType end Type
                                                                ,[PeriodTo] Period_to
                                                                ,sum([CreditPlusBalance]) Balance
                                                            FROM [CardCreditPlus] cp
                                                            where card_id = @CardId
                                                            and PeriodTo in (select Min(PeriodTo)
					                                                        FROM [CardCreditPlus] cp1
					                                                        where cp1.card_id = cp.Card_id
					                                                        and cp1.PeriodTo >= getdate()
					                                                        and cp1.CreditPlusBalance != 0
					                                                        and cp1.CreditPlusType = cp.CreditPlusType)    
                                                            group by case when cp.CreditPlusType in ('A', 'G', 'P') then 'C' else CreditPlusType end, PeriodTo
                                                            having sum(CreditPlusBalance) > 0",
                                                            new SqlParameter("@CardId", PrimaryCard.card_id));
                    log.LogVariableState("@CardId", PrimaryCard.card_id);

                    for (int i = 0; i < dtCP.Rows.Count; i++)
                    {
                        string type = dtCP.Rows[i]["Type"].ToString();
                        double balance = Convert.ToDouble(dtCP.Rows[i]["Balance"]);
                        DateTime expiryDate = Convert.ToDateTime(dtCP.Rows[i]["Period_to"]);

                        switch (type)
                        {
                            case "C": ExpiringCPCredits = balance; CPCreditsExpiryDate = expiryDate; break;
                            case "B": ExpiringCPBonus = balance; CPBonusExpiryDate = expiryDate; break;
                            case "L": ExpiringCPLoyalty = balance; CPLoyaltyExpiryDate = expiryDate; break;
                            case "T": ExpiringCPTickets = (int)balance; CPTicketsExpiryDate = expiryDate; break;
                        }
                    }

                    //Begin - 29-Feb-2016 - Find original trx no to print with Refund card task
                    object objOriginalTrxNo = Utilities.executeScalar(@"SELECT top 1 trx_no
                                                                          FROM trx_header
                                                                         WHERE trxId = (SELECT min(trxid) trxid
                                                                                          FROM trx_lines l
                                                                                         WHERE l.card_id = @card_id)",
                                                                      new SqlParameter("@card_id", PrimaryCard.card_id));

                    log.LogVariableState("@card_id", PrimaryCard.card_id);

                    if (objOriginalTrxNo != null && objOriginalTrxNo != DBNull.Value)
                        originalTrxNo = objOriginalTrxNo.ToString();
                    //End - 29-Feb-2016 - Find original trx no to print with Refund card task
                }
                //Begin - 23-Mar-2016 - Assign Prefix for transaction and credit transaction sequence
                object objTransactionSeq = Utilities.executeScalar(@"SELECT top 1 Prefix
                                                                       FROM Sequences
                                                                      WHERE SeqName = 'Transaction'");
                if (objTransactionSeq != null && objTransactionSeq != DBNull.Value)
                    transactionSeq = objTransactionSeq.ToString();

                object objCreditTransactionSeq = Utilities.executeScalar(@"SELECT top 1 Prefix
                                                                             FROM Sequences
                                                                            WHERE SeqName = 'CreditTransaction'");
                if (objCreditTransactionSeq != null && objCreditTransactionSeq != DBNull.Value)
                    creditTransactionSeq = objCreditTransactionSeq.ToString();
                //End - 23-Mar-2016 - Assign Prefix for transaction and credit transaction sequence

                //Assign Trx Profile to TrxProfile parameter
                object objTrxProfile = Utilities.executeScalar(@"select profileName from trxProfiles tp, trx_header h where tp.trxProfileId = h.TrxProfileId
                                                        and h.trxid = @TrxId", new SqlParameter("@TrxId", TrxId));

                if (objTrxProfile != null && objTrxProfile != DBNull.Value)
                    TrxProfile = objTrxProfile.ToString();

                TrxTaxableCharges.Clear();
                string taxableChargesCmdText = string.Empty;

                if (splitId == -1 || (splitId != -1 && splitCnt != -1))
                {
                    taxableChargesCmdText = @"select tl.LineId, p.product_name ChargeName, tl.amount, sum(l.amount) taxAmount
                                         from Trx_lines tl, TrxTaxLines l,
                                          (select p.product_id , p.product_name, p.tax_id
                                             from products p, product_type pt 
                                            where pt.product_type in ('SERVICECHARGE','GRATUITY')
                                              and pt.product_type_id = p.product_type_id) p 
                                        where tl.TrxId = @TrxId 
                                          and tl.CancelledTime is null 
                                          and tl.product_id = p.product_id 
                                          and tl.TrxId = l.TrxId
										  and tl.LineId = l.LineId 
                                     group by tl.LineId, p.product_name, tl.amount
                                     order by p.product_name";
                }
                else
                {
                    if (splitId != -1 && splitLineId != "-1")
                    {
                        taxableChargesCmdText = @"select tl.LineId, p.product_name ChargeName, tl.amount , sum(l.amount) taxAmount
                                         from Trx_lines tl, TrxTaxLines l,
                                          (select p.product_id , p.product_name, p.tax_id
                                             from products p, product_type pt 
                                            where pt.product_type in ('SERVICECHARGE','GRATUITY')
                                              and pt.product_type_id = p.product_type_id
                                              and p.Tax_id is not null) p 
                                        where tl.TrxId = @TrxId 
                                          and tl.CancelledTime is null "
                                      + " and tl.lineId in (" + splitLineId + ") "
                                     + @" and tl.product_id = p.product_id  
                                          and tl.TrxId = l.TrxId
										  and tl.LineId = l.LineId                                       
                                     group by tl.LineId, p.product_name, tl.amount
                                     order by p.product_name";
                    }
                }

                DataTable dtCharges = Utilities.executeDataTable(taxableChargesCmdText, new SqlParameter("@TrxId", TrxId));
                for (int i = 0; i < dtCharges.Rows.Count; i++)
                {
                    bool found = false;
                    foreach (ChargeInfo tinfo in TrxTaxableCharges)
                    {
                        if (tinfo.ChargeName.ToLower().Equals(dtCharges.Rows[i]["ChargeName"].ToString().ToLower()))
                        {
                            tinfo.ChargeAmount += (Convert.ToDecimal(dtCharges.Rows[i]["amount"]) - Convert.ToDecimal(dtCharges.Rows[i]["taxAmount"]));
                            found = true;
                            break;
                        }
                    }

                    if (!found)
                    {
                        ChargeInfo ti = new ChargeInfo();
                        ti.ChargeName = dtCharges.Rows[i]["ChargeName"].ToString();
                        ti.ChargeAmount = Convert.ToDecimal(dtCharges.Rows[i]["amount"]) - Convert.ToDecimal(dtCharges.Rows[i]["taxAmount"]);
                        TrxTaxableCharges.Add(ti);
                    }
                }
                if (splitCnt != -1) //if equal split then divide by split count
                {
                    foreach (ChargeInfo tinfo in TrxTaxableCharges)
                    {
                        tinfo.ChargeAmount = tinfo.ChargeAmount / splitCnt;
                    }
                }

                TrxNonTaxableCharges.Clear();
                string nonTaxableChargesCmdText = string.Empty;

                if (splitId == -1 || (splitId != -1 && splitCnt != -1))
                {
                    nonTaxableChargesCmdText = @"select tl.LineId, p.product_name ChargeName, tl.amount 
                                         from Trx_lines tl, 
                                          (select p.product_id , p.product_name, p.tax_id
                                             from products p, product_type pt 
                                            where pt.product_type in ('SERVICECHARGE','GRATUITY')
                                              and pt.product_type_id = p.product_type_id
                                              and p.Tax_id is null) p 
                                        where tl.TrxId = @TrxId 
                                          and tl.CancelledTime is null 
                                          and tl.product_id = p.product_id 
                                        order by p.product_name";
                }
                else
                {
                    if (splitId != -1 && splitLineId != "-1")
                    {
                        nonTaxableChargesCmdText = @"select tl.LineId, p.product_name ChargeName, tl.amount 
                                         from Trx_lines tl, 
                                          (select p.product_id , p.product_name, p.tax_id
                                             from products p, product_type pt 
                                            where pt.product_type in ('SERVICECHARGE','GRATUITY')
                                              and pt.product_type_id = p.product_type_id
                                              and p.Tax_id is null) p 
                                        where tl.TrxId = @TrxId 
                                          and tl.CancelledTime is null "
                                      + " and tl.lineId in (" + splitLineId + ") "
                                      + @" and tl.product_id = p.product_id
                                        order by p.product_name";
                    }
                }

                DataTable dtNonTaxableCharges = Utilities.executeDataTable(nonTaxableChargesCmdText, new SqlParameter("@TrxId", TrxId));
                for (int i = 0; i < dtNonTaxableCharges.Rows.Count; i++)
                {
                    bool found = false;
                    foreach (ChargeInfo tinfo in TrxNonTaxableCharges)
                    {
                        if (tinfo.ChargeName.ToLower().Equals(dtNonTaxableCharges.Rows[i]["ChargeName"].ToString().ToLower()))
                        {
                            tinfo.ChargeAmount += Convert.ToDecimal(dtNonTaxableCharges.Rows[i]["amount"]);
                            found = true;
                            break;
                        }
                    }

                    if (!found)
                    {
                        ChargeInfo ti = new ChargeInfo();
                        ti.ChargeName = dtNonTaxableCharges.Rows[i]["ChargeName"].ToString();
                        ti.ChargeAmount = Convert.ToDecimal(dtNonTaxableCharges.Rows[i]["amount"]);
                        TrxNonTaxableCharges.Add(ti);
                    }
                }
                if (splitCnt != -1) //if equal split then divide by split count
                {
                    foreach (ChargeInfo tinfo in TrxNonTaxableCharges)
                    {
                        tinfo.ChargeAmount = tinfo.ChargeAmount / splitCnt;
                    }
                }

                TrxTax.Clear();
                TaxableAmount = 0;
                NonTaxableAmount = 0;
                DiscountedTaxAmount = 0;
                DiscountedPreTaxAmount = 0;
                TaxExempt = 0;
                ZeroRatedTaxable = 0;
                //Query modified to add Tax Structure Product Split Amount - 25-Mar-2016
                string cmdText = "";
                if (splitId == -1 || (splitId != -1 && splitCnt != -1))
                {
                    cmdText = @"select taxName, percentage, sum(amount) amount, sum(DiscountedTaxAmount) DiscountedTaxAmount, 
                                          sum(isnull(TaxStructureSplitAmount,0)) TaxStructureSplitAmount, TaxStructureId, lineid
                                        from (select tl.LineId, isnull(structureName, tax_name) taxName, 
                                                    isnull(l.TaxStructureId, 999999) TaxStructureId,
                                                  l.percentage, sum(l.amount) amount, 
                                                  sum(l.amount * (1 - isnull(d.discountPercentage, 0))
													 ) DiscountedTaxAmount,
												  sum(ProductSplitAmount) TaxStructureSplitAmount
                                                from Trx_lines tl, TrxTaxLines l left outer join TaxStructure ts
                                                    on ts.TaxStructureId = l.TaxStructureId
                                                left outer join
                                                 (select LineId, sum(DiscountPercentage)/100.0 discountPercentage
                                                            from trxDiscounts
                                                            where trxId = @TrxId group by LineId) d
                                                on d.LineId = l.LineId, Tax t
                                                where l.TrxId = @TrxId
												and tl.trxid = l.trxid                                           
                                                and not exists(select 1
                                                                from products pp, product_type pt
                                                                where pt.product_type in ('SERVICECHARGE', 'GRATUITY')
                                                                    and pt.product_type_id = pp.product_type_id
                                                                    and tl.product_id = pp.product_id)
												and tl.LineId = l.LineId
                                                and t.tax_id = l.taxId
                                                group by tl.LineId, isnull(structureName, tax_name), isnull(l.TaxStructureId, 999999), l.percentage, d.discountPercentage) inview
                                        group by taxName, percentage, TaxStructureId, lineid
                                        order by TaxStructureId, taxName";
                }
                else
                {
                    if (splitId != -1 && splitLineId != "-1")
                    {
                        cmdText = @"select taxName, percentage, sum(amount) amount, sum(DiscountedTaxAmount) DiscountedTaxAmount, 
                                          sum(isnull(TaxStructureSplitAmount,0)) TaxStructureSplitAmount, TaxStructureId, lineid
                                        from (select tl.LineId, isnull(structureName, tax_name) taxName, isnull(l.TaxStructureId, 999999) TaxStructureId,
                                                  l.percentage, sum(l.amount) amount, 
                                                  sum(l.amount * (1 - isnull(d.discountPercentage, 0))
													 ) DiscountedTaxAmount,
												  sum(ProductSplitAmount) TaxStructureSplitAmount
                                                from Trx_lines tl, TrxTaxLines l left outer join TaxStructure ts
                                                    on ts.TaxStructureId = l.TaxStructureId
                                                left outer join
                                                 (select LineId, sum(DiscountPercentage)/100.0 discountPercentage
                                                            from trxDiscounts
                                                            where trxId = @TrxId group by LineId) d
                                                on d.LineId = l.LineId, Tax t
                                                where l.TrxId = @TrxId     
												and tl.trxid = l.trxid                                             
                                                and not exists(select 1
                                                                from products pp, product_type pt
                                                                where pt.product_type in ('SERVICECHARGE', 'GRATUITY')
                                                                    and pt.product_type_id = pp.product_type_id
                                                                    and tl.product_id = pp.product_id)
												and tl.LineId = l.LineId
                                                and l.lineId in (" + splitLineId + ") " +
                                             @" and t.tax_id = l.taxId
                                                group by tl.LineId, isnull(structureName, tax_name), isnull(l.TaxStructureId, 999999), l.percentage, d.discountPercentage) inview
                                        group by taxName, percentage, TaxStructureId, lineid 
                                        order by TaxStructureId, taxName";
                    }
                }

                DataTable dtTax = Utilities.executeDataTable(cmdText, new SqlParameter("@TrxId", TrxId));

                for (int i = 0; i < dtTax.Rows.Count; i++)
                {
                    bool found = false;
                    foreach (TaxInfo tinfo in TrxTax)
                    {
                        if (tinfo.TaxName.ToLower().Equals(dtTax.Rows[i]["taxName"].ToString().ToLower())
                            && tinfo.Percentage.Equals(Convert.ToDecimal(dtTax.Rows[i]["Percentage"])))
                        {
                            tinfo.TaxAmount += Convert.ToDecimal(dtTax.Rows[i]["DiscountedTaxAmount"]);
                            tinfo.ProductSplitAmount += Convert.ToDecimal(dtTax.Rows[i]["TaxStructureSplitAmount"]);//Added on 25-Mar-2016
                            found = true;
                            break;
                        }
                    }

                    if (!found)
                    {
                        TaxInfo ti = new TaxInfo();
                        ti.TaxName = dtTax.Rows[i]["taxName"].ToString();
                        ti.Percentage = Convert.ToDecimal(dtTax.Rows[i]["Percentage"]);
                        ti.TaxAmount = Convert.ToDecimal(dtTax.Rows[i]["DiscountedTaxAmount"]);
                        ti.ProductSplitAmount = Convert.ToDecimal(dtTax.Rows[i]["TaxStructureSplitAmount"]);//Added on 25-Mar-2016
                        TrxTax.Add(ti);
                    }

                    //ProductTaxInfo
                    bool productTaxfound = false;
                    foreach (ProductTaxInfo ptinfo in ProductTrxTax)
                    {
                        if (ptinfo.TaxName.ToLower().Equals(dtTax.Rows[i]["taxName"].ToString().ToLower())
                            && ptinfo.Percentage.Equals(Convert.ToDecimal(dtTax.Rows[i]["Percentage"]))
                            && ptinfo.LineId.Equals(Convert.ToInt32(dtTax.Rows[i]["LineId"]))
                            && ptinfo.TaxStructureId.Equals(Convert.ToInt32(dtTax.Rows[i]["TaxStructureId"])))
                        {
                            ptinfo.TaxAmount += Convert.ToDecimal(dtTax.Rows[i]["DiscountedTaxAmount"]);
                            productTaxfound = true;
                            break;
                        }
                    }

                    if (!productTaxfound)
                    {
                        ProductTaxInfo pti = new ProductTaxInfo();
                        pti.TaxName = dtTax.Rows[i]["taxName"].ToString();
                        pti.Percentage = Convert.ToDecimal(dtTax.Rows[i]["Percentage"]);
                        pti.TaxAmount = Convert.ToDecimal(dtTax.Rows[i]["DiscountedTaxAmount"]);
                        pti.LineId = Convert.ToInt32(dtTax.Rows[i]["LineId"]);
                        pti.TaxStructureId = Convert.ToInt32(dtTax.Rows[i]["TaxStructureId"]);
                        ProductTrxTax.Add(pti);
                    }
                }

                if (splitCnt != -1) //if equal split then divide by split count
                {
                    foreach (TaxInfo tinfo in TrxTax)
                    {
                        tinfo.TaxAmount = tinfo.TaxAmount / splitCnt;
                        tinfo.ProductSplitAmount = tinfo.ProductSplitAmount / splitCnt;
                    }
                }

                //Added Discount Amount excluding Tax Amount for Printing 12-Sep-2016
                if (splitId == -1 || (splitId != -1 && splitCnt != -1))
                {
                    cmdText = @"SELECT 
	                                  sum(totalDiscountedGross) Discount 
                                 FROM trx_header h, 
                                      (  SELECT v.trxid, 
		                               -- sum(trxdsc.discountPercentage/100) DiscPerc, 
		                               -- sum(sign(v.amount)) * sum(v.Trx_Price * v.quantity) Gross_Total,
		                                sum(trxdsc.discountPercentage/100) * sum(sign(v.amount)) * sum(v.Trx_Price * v.quantity) totalDiscountedGross  
		                                from TransactionView v left outer join products p on v.product_id = p.product_id  
			                                JOIN (select sum(discountAmount) DiscountAMount,trxid, lineid, sum(discountPercentage) DISCOUNTPERCENTAGE 
							                                   from TRXDISCOUNTS 
							                                  WHERE trxId = @trxid  
							                                  group by trxid, lineid) TRXDSC ON TRXDSC.TRXID =  v.TRXID AND TRXDSC.LineId =  v.LINEID 
		                                where v.trxid = @trxid 
			                                 and v.product_type !='DISCOUNT' 
		                                group by v.trxid, v.trx_no, v.lineId, cast(v.TRXDATE as date), p.CustomDataSetId, v.tax)v 
                                 WHERE h.trxid = v.trxid 
                                   AND H.TRXID = @trxid";
                }
                else
                {
                    if (splitId != -1 && splitLineId != "-1")
                    {
                        cmdText = @"SELECT 
	                                      sum(totalDiscountedGross) Discount 
                                     FROM trx_header h, 
                                          (  SELECT v.trxid, 
		                                  --  sum(trxdsc.discountPercentage/100) DiscPerc, 
		                                  --  sum(sign(v.amount)) * sum(v.trx_price * v.quantity) Gross_Total,
		                                    sum(trxdsc.discountPercentage/100) * sum(sign(v.amount)) * sum(v.Trx_Price * v.quantity) totalDiscountedGross
		                                    from TransactionView v left outer join products p on v.product_id = p.product_id 
			                                       JOIN (select sum(discountAmount) DiscountAMount,trxid, 
                                                                            lineid, sum(discountPercentage) DISCOUNTPERCENTAGE 
							                                           from TRXDISCOUNTS 
							                                          WHERE trxId = @trxid  
							                                          group by trxid, lineid) TRXDSC ON TRXDSC.TRXID =  v.TRXID  
                                                                                                    AND TRXDSC.LineId =  v.LINEID 
		                                    where v.trxid = @trxid 
			                                  and v.product_type != 'DISCOUNT' 
                                              and v.lineId in (" + splitLineId + ") " +
                                            @"group by v.trxid, v.trx_no, v.lineId, cast(v.TRXDATE as date), p.CustomDataSetId, v.tax)v 
                                     WHERE h.trxid = v.trxid 
                                       AND H.TRXID = @trxid";
                    }
                }

                object objDiscountAmountExclTax = Utilities.executeScalar(cmdText, new SqlParameter("@TrxId", TrxId));

                if (objDiscountAmountExclTax != null && objDiscountAmountExclTax != DBNull.Value)
                {
                    if (splitCnt == -1)
                    {
                        DiscountAmountExclTax = Convert.ToDouble(objDiscountAmountExclTax);
                    }
                    else//if equal split then divide by split count
                    {
                        DiscountAmountExclTax = Convert.ToDouble(objDiscountAmountExclTax) / splitCnt;
                    }
                }
                //End Modification 12-Sep-2016

                if (splitId == -1 || (splitId != -1 && splitCnt != -1))
                {

                    cmdText = @"select isnull(sum(TaxableAmount), 0) TaxableAmount, isnull(sum(TaxExempt),0) TaxExempt,
                                       isnull(sum(ZeroRatedTax),0) ZeroRatedTax , 
                                       isnull(sum(NonTaxableAmount), 0) NonTaxableAmount, 
                                       isnull(sum(DiscountedTaxAmount), 0) DiscountedTaxAmount,
		                               isnull(sum(DiscountedPreTaxAmount), 0) DiscountedPreTaxAmount
                                        from (select cast(round(cast(case when tax_id is not null and tax_percentage > 0 and trxProfileId is null
                                                          then ((p.price) * (p.quantity) * (1.0 - isnull(d.discountPercentage, 0)) 
								                               ) 
                                                          else 0 
                                                      end + isnull(Voucher.ExcessVoucherAmount, 0) as numeric(18,3)), 3) as numeric(18,2)) TaxableAmount,
                                                   case  when p.tax_id is not null and p.tax_percentage = 0 
                                                              and p.TrxProfileId is not null 
							                                   and (select ISNULL(verificationRequired , 'N')
									                                  from TrxProfiles tp
											                         where tp.TrxProfileId = p.TrxProfileId) = 'Y'
										                 Then round(((p.price)  * p.quantity), 4) 
                                                         else 0 end TaxExempt,
												   case  when p.tax_id is not null 
                                                              and p.tax_percentage = 0 
                                                              and (p.TrxProfileId is null 
                                                                  OR (p.TrxProfileId is not null 
							                                           and (select ISNULL(verificationRequired , 'N')
									                                          from TrxProfiles tp
											                                 where tp.TrxProfileId = p.TrxProfileId) = 'N'
                                                                     )
                                                                   )
										                Then (p.price * (1.0 - isnull(discountPercentage,0))  * p.quantity) 
                                                        else 0 
                                                    end ZeroRatedTax,
                                                   case when tax_id is null 
                                                        then (p.price * p.quantity * (1.0 - isnull(d.discountPercentage, 0)) 
								                             )
                                                        else 0 
                                                         end NonTaxableAmount,
				                                    round((p.price * p.quantity * isnull(p.tax_percentage, 0)/100.0 * (1.0 - isnull(d.discountPercentage, 0)) 
			                                        + CASE WHEN P.product_id IN (select top 1 product_id 
											                                        from Products p, product_type pt
											                                        where product_type = 'EXCESSVOUCHERVALUE' 
											                                        and p.product_type_id = pt.product_type_id) 
			                                                   AND P.AllocatedProductPrice > 0
					                                           AND P.amount = 0
				                                           THEN P.AllocatedProductPrice * isnull(p.tax_percentage, 0)/100.0
				                                           ELSE 0
				                                        END
								                    ), 5)  DiscountedTaxAmount,
					                                CASE WHEN P.product_id IN (select top 1 product_id 
											                                        from Products p, product_type pt
											                                        where product_type in ('SERVICECHARGE', 'GRATUITY')
											                                        and p.product_type_id = pt.product_type_id) 
                                                         THEN 0
                                                          ELSE p.price * (1 - isnull(d.discountPercentage,0)) END DiscountedPreTaxAmount
                                                   from trx_lines p left outer join
                                                    (select LineId, sum(discountPercentage)/100.0 discountPercentage
                                                            from trxDiscounts
                                                            where trxId = @TrxId group by LineId) d 
                                                    on d.LineId = p.LineId
				                                        left outer join
				                                    (select lineId, sum(productSplitAmount) SplitAmount
				                                       from trxTaxLines
				                                      where trxId = @TrxId
				                                      and productSplitAmount is not null
				                                      group by LineId) t 
				                                    on t.lineId = p.LineId
				                                        left outer join
			                                        (select lineId, sum(isnull(allocatedProductPrice, 0)) ExcessVoucherAmount
				                                        from trx_lines
				                                        where trxId = @TrxId
				                                        and AllocatedProductPrice is not null
				                                        and product_id in ( select top 1 product_id 
									                                        from Products p, product_type pt
									                                        where product_type = 'EXCESSVOUCHERVALUE' 
									                                        and p.product_type_id = pt.product_type_id
								                                          )
				                                        group by LineId) voucher 
			                                        on voucher.lineId = p.LineId
                                                   where p.trxId = @TrxId    
                                                  ) v";
                }
                else
                {
                    if (splitId != -1 && splitLineId != "-1")
                    {
                        cmdText = @"select isnull(sum(TaxableAmount), 0) TaxableAmount, isnull(sum(TaxExempt),0) TaxExempt,
                                       isnull(sum(ZeroRatedTax),0) ZeroRatedTax , 
                                       isnull(sum(NonTaxableAmount), 0) NonTaxableAmount, 
                                       isnull(sum(DiscountedTaxAmount), 0) DiscountedTaxAmount,
		                               isnull(sum(DiscountedPreTaxAmount), 0) DiscountedPreTaxAmount
                                        from (select cast(round(cast(case when tax_id is not null and tax_percentage > 0 and trxProfileId is null
                                                          then ((p.price) * (p.quantity) * (1.0 - isnull(d.discountPercentage, 0)) 
								                               ) 
                                                          else 0 
                                                      end + isnull(Voucher.ExcessVoucherAmount, 0) as numeric(18,3)), 3) as numeric(18,3)) TaxableAmount,
                                                   case  when p.tax_id is not null and p.tax_percentage = 0 
                                                              and p.TrxProfileId is not null 
							                                   and (select ISNULL(verificationRequired , 'N')
									                                  from TrxProfiles tp
											                         where tp.TrxProfileId = p.TrxProfileId) = 'Y'
										                 Then round(((p.price)  * p.quantity), 3) 
                                                         else 0 end TaxExempt,
												   case  when p.tax_id is not null 
                                                              and p.tax_percentage = 0 
                                                              and (p.TrxProfileId is null 
                                                                  OR (p.TrxProfileId is not null 
							                                           and (select ISNULL(verificationRequired , 'N')
									                                          from TrxProfiles tp
											                                 where tp.TrxProfileId = p.TrxProfileId) = 'N'
                                                                     )
                                                                   )
										                Then (p.price * (1.0 - isnull(discountPercentage,0))  * p.quantity) 
                                                        else 0 
                                                    end ZeroRatedTax,
                                                   case when tax_id is null 
                                                        then (p.price * p.quantity * (1.0 - isnull(d.discountPercentage, 0)) 
								                             )
                                                        else 0 
                                                         end NonTaxableAmount,
				                                    round((p.price * p.quantity * isnull(p.tax_percentage, 0)/100.0 * (1.0 - isnull(d.discountPercentage, 0)) 
			                                        + CASE WHEN P.product_id IN (select top 1 product_id 
											                                        from Products p, product_type pt
											                                        where product_type = 'EXCESSVOUCHERVALUE' 
											                                        and p.product_type_id = pt.product_type_id) 
			                                                   AND P.AllocatedProductPrice > 0
					                                           AND P.amount = 0
				                                           THEN P.AllocatedProductPrice * isnull(p.tax_percentage, 0)/100.0
				                                           ELSE 0
				                                        END
								                    ), 5)  DiscountedTaxAmount,
                                                    CASE WHEN P.product_id IN (select product_id 
											                                        from Products p, product_type pt
											                                        where product_type in ('SERVICECHARGE', 'GRATUITY')
											                                        and p.product_type_id = pt.product_type_id) 
                                                         THEN 0
                                                          ELSE p.price * (1 - isnull(d.discountPercentage,0)) END DiscountedPreTaxAmount
                                                   from trx_lines p left outer join
                                                    (select LineId, sum(discountPercentage)/100.0 discountPercentage
                                                            from trxDiscounts
                                                            where trxId = @TrxId group by LineId) d 
                                                    on d.LineId = p.LineId
				                                        left outer join
				                                    (select lineId, sum(productSplitAmount) SplitAmount
				                                       from trxTaxLines
				                                      where trxId = @TrxId
				                                      and productSplitAmount is not null
				                                      group by LineId) t 
				                                    on t.lineId = p.LineId
				                                        left outer join
			                                        (select lineId, sum(isnull(allocatedProductPrice, 0)) ExcessVoucherAmount
				                                        from trx_lines
				                                        where trxId = @TrxId
				                                        and AllocatedProductPrice is not null
				                                        and product_id in ( select top 1 product_id 
									                                        from Products p, product_type pt
									                                        where product_type = 'EXCESSVOUCHERVALUE' 
									                                        and p.product_type_id = pt.product_type_id
								                                          )
				                                        group by LineId) voucher 
			                                        on voucher.lineId = p.LineId
                                                   where p.trxId = @TrxId   
                                                     and p.lineId in (" + splitLineId + ") " +
                                                  ") v";
                    }
                }

                DataTable dtTaxNonTax = Utilities.executeDataTable(cmdText, new SqlParameter("@TrxId", TrxId));

                if (splitCnt == -1)
                {
                    TaxableAmount = Convert.ToDouble(dtTaxNonTax.Rows[0]["TaxableAmount"]);
                    NonTaxableAmount = Convert.ToDouble(dtTaxNonTax.Rows[0]["NonTaxableAmount"]);
                    DiscountedTaxAmount = Convert.ToDouble(dtTaxNonTax.Rows[0]["DiscountedTaxAmount"]);
                    TaxExempt = Convert.ToDouble(dtTaxNonTax.Rows[0]["TaxExempt"]);
                    ZeroRatedTaxable = Convert.ToDouble(dtTaxNonTax.Rows[0]["ZeroRatedTax"]);
                    DiscountedPreTaxAmount = Convert.ToDecimal(dtTaxNonTax.Rows[0]["DiscountedPreTaxAmount"]);
                }
                else//if equal split then divide by split count
                {
                    TaxableAmount = Convert.ToDouble(dtTaxNonTax.Rows[0]["TaxableAmount"]) / splitCnt;
                    NonTaxableAmount = Convert.ToDouble(dtTaxNonTax.Rows[0]["NonTaxableAmount"]) / splitCnt;
                    DiscountedTaxAmount = Convert.ToDouble(dtTaxNonTax.Rows[0]["DiscountedTaxAmount"]) / splitCnt;
                    TaxExempt = Convert.ToDouble(dtTaxNonTax.Rows[0]["TaxExempt"]) / splitCnt;
                    ZeroRatedTaxable = Convert.ToDouble(dtTaxNonTax.Rows[0]["ZeroRatedTax"]) / splitCnt;
                    DiscountedPreTaxAmount = Convert.ToDecimal(dtTaxNonTax.Rows[0]["DiscountedPreTaxAmount"]) / splitCnt;
                }
                cmdText = @"select h.PaymentReference, oh.TableNumber, oh.CustomerName
                                  , WaiterName, isnull(oh.Remarks, '') Remarks
                                        from trx_header h 
                                             left outer join orderHeader oh 
                                             on oh.OrderId = h.OrderId
                                       where trxId = @TrxId";
                DataTable dtPayment = Utilities.executeDataTable(cmdText, new SqlParameter("@TrxId", TrxId));

                if (dtPayment.Rows.Count > 0)
                {
                    PaymentReference = dtPayment.Rows[0]["PaymentReference"].ToString();
                    TableNumber = dtPayment.Rows[0]["TableNumber"].ToString();
                    OrderCustomerName = dtPayment.Rows[0]["CustomerName"].ToString();
                    WaiterName = dtPayment.Rows[0]["WaiterName"].ToString();
                    OrderRemarks = dtPayment.Rows[0]["Remarks"].ToString();
                }

                //DataTable dtPaymentModes = new DataTable();
                PaymentCreditCardNumber = OtherPaymentMode = "";
                PaymentCreditCardAmount = PaymentOtherModeAmount = PaymentRoundOffAmount = TenderedAmount = PaymentCashAmount = PaymentGameCardAmount = TotalCouponValue = TotalTipAmount = AdvancePaidAmount = TotalPaymentAmount = 0;
                TransactionPaymentsListBL trxPaymentsListBL = new TransactionPaymentsListBL(Utilities.ExecutionContext);
                List<KeyValuePair<TransactionPaymentsDTO.SearchByParameters, string>> trxPaymentSearchParameters = new List<KeyValuePair<TransactionPaymentsDTO.SearchByParameters, string>>();
                trxPaymentSearchParameters.Add(new KeyValuePair<TransactionPaymentsDTO.SearchByParameters, string>(TransactionPaymentsDTO.SearchByParameters.TRANSACTION_ID, TrxId.ToString()));
                if (splitId != -1)
                    trxPaymentSearchParameters.Add(new KeyValuePair<TransactionPaymentsDTO.SearchByParameters, string>(TransactionPaymentsDTO.SearchByParameters.SPLIT_ID, splitId.ToString()));
                TrxPaymentsDTOList = trxPaymentsListBL.GetNonReversedTransactionPaymentsDTOList(trxPaymentSearchParameters);

                if (TrxPaymentsDTOList != null)
                {
                    foreach (TransactionPaymentsDTO trxPaymentDTO in TrxPaymentsDTOList)
                    {
                        if (trxPaymentDTO.paymentModeDTO != null & trxPaymentDTO.paymentModeDTO.IsCreditCard)
                        {
                            string ccnumber = trxPaymentDTO.CreditCardNumber.PadLeft(4, 'X');
                            ccnumber = ccnumber.Substring(ccnumber.Length - 4, 4);
                            PaymentCreditCardNumber += ",XXXX" + ccnumber + ":" + trxPaymentDTO.CreditCardAuthorization + "/" + trxPaymentDTO.Amount.ToString(Utilities.getAmountFormat());
                            PaymentCreditCardAmount += trxPaymentDTO.Amount;
                        }
                        PaymentCreditCardNumber = PaymentCreditCardNumber.TrimStart(',');

                        if (trxPaymentDTO.paymentModeDTO != null && !trxPaymentDTO.paymentModeDTO.IsCash && !trxPaymentDTO.paymentModeDTO.IsCreditCard && !trxPaymentDTO.paymentModeDTO.IsDebitCard && !trxPaymentDTO.paymentModeDTO.IsRoundOff)
                        {
                            if (trxPaymentDTO.CouponValue != null)
                                TotalCouponValue += Convert.ToDouble(trxPaymentDTO.CouponValue);
                            //If Coupon Value exists, show Coupon Value instead of Amount paid
                            OtherPaymentMode += "," + trxPaymentDTO.paymentModeDTO.PaymentMode + "#:" + trxPaymentDTO.Reference + "|" + trxPaymentDTO.paymentModeDTO.PaymentMode + " " + MessageContainerList.GetMessage(Utilities.ExecutionContext, "Amount")
                                                 + ": " + ((trxPaymentDTO.CouponValue == null) ? 0 : (trxPaymentDTO.CouponValue > 0 ? (double)trxPaymentDTO.CouponValue : trxPaymentDTO.Amount)).ToString(Utilities.getAmountFormat());
                            PaymentOtherModeAmount += trxPaymentDTO.Amount;

                        }
                        OtherPaymentMode = OtherPaymentMode.TrimStart(',');

                        if (trxPaymentDTO.paymentModeDTO != null && trxPaymentDTO.paymentModeDTO.IsRoundOff)
                        {
                            PaymentRoundOffAmount += trxPaymentDTO.Amount * -1;
                            //PaymentOtherModeAmount = 0; // make this zero as it is already shown in round off.
                        }

                        if (trxPaymentDTO.paymentModeDTO != null && trxPaymentDTO.paymentModeDTO.IsCash)
                        {
                            if (trxPaymentDTO.TenderedAmount != null)
                                TenderedAmount += Convert.ToDouble(trxPaymentDTO.TenderedAmount);
                            PaymentCashAmount += trxPaymentDTO.Amount;
                        }

                        if (trxPaymentDTO.paymentModeDTO != null && trxPaymentDTO.paymentModeDTO.IsDebitCard)
                        {
                            PaymentGameCardAmount += trxPaymentDTO.Amount;
                        }

                        if (trxPaymentDTO.paymentModeDTO != null && trxPaymentDTO.paymentModeDTO.IsCreditCard && !string.IsNullOrEmpty(trxPaymentDTO.CreditCardName))
                            creditCardName = trxPaymentDTO.CreditCardName;

                        if (trxPaymentDTO.paymentModeDTO != null && trxPaymentDTO.paymentModeDTO.IsCreditCard && !string.IsNullOrEmpty(trxPaymentDTO.NameOnCreditCard))
                            nameOnCreditCard = trxPaymentDTO.NameOnCreditCard;

                        if (trxPaymentDTO.paymentModeDTO != null && trxPaymentDTO.paymentModeDTO.IsCash && !string.IsNullOrEmpty(trxPaymentDTO.CurrencyCode))
                            currencyCode = trxPaymentDTO.CurrencyCode;

                        if (trxPaymentDTO.TipAmount != 0)
                            TotalTipAmount += trxPaymentDTO.TipAmount;

                        if (trxPaymentDTO.paymentModeDTO != null && trxPaymentDTO.paymentModeDTO.IsCash && trxPaymentDTO.CurrencyRate != null)
                            currencyRate = Convert.ToDouble(trxPaymentDTO.CurrencyRate);

                        if (trxPaymentDTO.paymentModeDTO != null && trxPaymentDTO.paymentModeDTO.IsCash && trxPaymentDTO.CurrencyRate != null)
                            amountInOtherCurrency = Convert.ToDouble(trxPaymentDTO.CurrencyRate) * trxPaymentDTO.Amount;
                        if (trxPaymentDTO.Amount > 0)
                            TotalPaymentAmount += trxPaymentDTO.Amount;
                    }
                    TransactionPaymentsDTO ccTransactionPaymentDTO = TrxPaymentsDTOList.Find(x => !string.IsNullOrEmpty(x.Memo)
                                                                && x.paymentModeDTO != null && x.paymentModeDTO.IsCreditCard);
                    if (ccTransactionPaymentDTO != null)
                        creditCardReceipt = ccTransactionPaymentDTO.Memo;

                    object objBookingDate = Utilities.executeScalar(@"select FromDate 
                                                                        from bookings 
                                                                        where trxid = @trxId",
                                                                     new SqlParameter("@trxId", TrxId));
                    if (objBookingDate != null && objBookingDate != DBNull.Value)
                    {
                        DateTime bookingDate = Convert.ToDateTime(objBookingDate);
                        AdvancePaidAmount = TrxPaymentsDTOList.Where(x => x.PaymentDate < bookingDate && x.Amount != 0).Sum(x => x.Amount);
                    }
                }
                ChangeAmount = TenderedAmount <= 0 ? 0 : ((TenderedAmount - PaymentCashAmount) < 0 ? 0 : (TenderedAmount - PaymentCashAmount));
                TenderedAmount = TenderedAmount <= 0 ? 0 : TenderedAmount; //In case of negative value for reversals, it should be set to 0
                                                                           //Begin 20-Oct-2016
                TrxProduct.Clear();
                List<int> validTransactionLineIdList = trx.TrxLines.Where(x => x.LineValid).Select(x => x.DBLineId).ToList();
                SqlParameter validListSqlParameter = GetValidLineListSQLParameter(validTransactionLineIdList);
                //Query modified to add Tax Structure Product Split Amount - 25-Mar-2016
                if (splitId == -1 || (splitId != -1 && splitCnt != -1))
                {
                    cmdText = @"with n(lineId, ParentLIneId, Level) as
	                                (select lineId, ParentLIneId, 1 as Level
	                                  from trx_lines, @LineIdList List
	                                 where ParentlineId is null
	                                   and trxid = @TrxId
                                       and trx_lines.LineId = List.Id
	                                 union all
	                                 select l.lineId, l.ParentLIneId, n.Level + 1
	                                  from trx_lines l, n, @LineIdList List
	                                 where l.ParentLIneId = n.Lineid
	                                   and l.trxid = @TrxId
                                       and l.LineId = List.Id)
                                SELECT l.trxid, 
                                   l.PRODUCT_ID, 
	                               ISNULL(STUFF(( SELECT ' ' + (SELECT TOP 1 code FROM (SELECT discount_id, (case rownumber % 5 
								   when 0 then '$ '
								   when 1 then '* '
								   when 2 then '^ '
								   when 3 then '# '
								   when 4 then '@ '
								   else ''
								   end) code
								   FROM(
	  SELECT  discount_id, ROW_NUMBER() over (order by discount_id asc) rownumber
	  FROM TrxDiscounts, discounts
	  WHERE TrxDiscounts.DiscountId = discounts.discount_id AND TrxDiscounts.TrxId = l.TrxId
	  GROUP BY discount_id)A)B
	  WHERE discount_id = TrxDiscounts.DiscountId )
      FROM TrxDiscounts
	  WHERE TrxDiscounts.LineId = min(l.LineId) AND TrxDiscounts.TrxId = min(l.TrxId)
      FOR XML PATH('') 
	  ), 1, 1, ''), '')  + 
	                               case when l.parentlineid is not null 
                                         and pt.product_type != 'CHECK-IN'
                                         and pt.product_type != 'CHECK-OUT'
                                        then ISNULL((select top 1 replicate(' ', (Level-1)*3 + 1) 
										        from n where ParentLineId = l.ParentLineId) + N'└ ', '')
                                        else '' end  
                                            + case when l.ProductDescription is not null
											       then l.ProductDescription
												   else p.product_name
											  end
                                            + min(case when pt.product_type = 'LOCKER' and la.lockername is not null
                                                   then '-Locker:' + lockername
                                                   when pt.product_type = 'LOCKER' and la.lockername is null
                                                   then '-Locker:Free Mode'
                                                   else ''
                                              end)
					                        + min(case when pt.product_type = 'ATTRACTION' and ATB.productDetails is not null
                                                    then atb.productDetails
                                                    else ''
                                                end) product_name, 
	                               l.price, 
	                               ISNULL(t.tax_percentage, 0) tax_percentage, 
	                               l.price * sum(quantity) PreTaxAmount, 
	                               l.price * isnull(min(l.tax_percentage),0)/100 * sum(quantity) Tax,
	                               sum(l.price * (1 + isnull(case when l.tax_percentage = 0 and l.TrxProfileId is not null
								                                  then (ISNULL(linetax.tax_percentage,0))
																  else l.tax_percentage
																  end
								                                  ,0)/100))/sum(quantity) AmountInclTax,
	                               sum(l.amount) amount,
	                               sum(l.amount + case when l.tax_percentage = 0 and l.trxProfileId is not null
								                       then l.price * (isnull(linetax.tax_percentage,0)/100) * l.quantity
													   else 0
													   end) TotalAmountInclTax,
	                               t.tax_name,
	                               ISNULL(p.HsnSacCode, '') HSNCode, 
	                               SUM(QUANTITY) Quantity, 
								   sum(case when receiptPrinted = 1 
								             then 0
											 else quantity end) KOTQuantity, 
	                               isnull(CARD_NUMBER, '') card_number, 
	                               min(case when pt.CardSale = 'Y' then 'Card' else 'Manual' end) ProductType,
	                               min(case when l.ParentLineId is not null then 'C' else 'P' end) LineType,
	                               line.ParentLineId ParentLineId,
	                               ISNULL(remarks, '') remarks,
	                               max(l.lineid) DBLineId,
	                               case when CancelledBy is null then 0 else 1 end CancelledLine,
	                               case when CancelledBy is null then 1 else 0 end PrintEligible,
								   sum(l.Price * (1 - isnull(tdamount.discountPercentage, 0))) discountedAmount
                              from trx_lines l  
										outer apply (select sum(td.discountId) discountCount
											 from TrxDiscounts td
											 where td.lineId = l.lineId and td.trxId = l.trxId
											 group by td.lineId)td
                                               inner join @LineIdList List On l.LineId = List.Id
											   left outer join (select sum(discountPercentage)/100.0 discountPercentage, 
                                                                      sum(discountAmount) discAmt, trxid, lineId 
											                      from TrxDiscounts
																 where trxid = @TrxId 
																group by trxid, lineid) tdamount on l.trxid = tdamount.TrxId and l.LineId = tdamount.LineId
                                               left outer join tax linetax on l.tax_id = linetax.tax_id
                                               left outer join (SELECT lockername, la.trxid, la.trxLineId
                                                                  from LockerAllocation la, lockers l
                                                                 WHERE la.trxid = @TrxId 
                                                                   AND l.lockerId = la.lockerId) la
                                                             on la.trxId = l.trxId
                                                            and la.trxLineId = l.LineId
						                        LEFT OUTER JOIN (SELECT atb.trxid, atb.lineid, ap.PlayName + 
						                                                                       ':' + replace(Convert(varchar(11), da.ScheduleDateTime, 106), ' ', '-') + ' ' + LTRIM(RIGHT(CONVERT(VARCHAR(20), da.ScheduleDateTime, 100), 7)) +
																	                           ':' + ISNULL(ats.SeatName, '') productDetails, atb.ExpiryDate
											                        FROM AttractionBookings atb
												                        left outer join (SELECT atb.BookingId, stuff((select ', '+ cast(SeatName as nvarchar(250))
																	                        FROM FacilitySeats fs, AttractionBookingSeats atbs
																	                        WHERE fs.seatId = atbs.SeatId 
																		                        and atbs.BookingId = atb.BookingId
																	                        GROUP BY SeatName
																	                        FOR XML PATH('')
																	                        )
																	                        , 1, 1, '')	SeatName	 
																	                        from AttractionBookings atb
																	                       WHERE ATB.TRXID = @TrxId
																	                        ) ats on atb.BookingId = ats.BookingId,
												                        AttractionPlays ap,
                                                                        DayAttractionSchedule da
										                        WHERE atb.DayAttractionScheduleId = da.DayAttractionScheduleId and da.AttractionPlayId = ap.AttractionPlayId) atb on atb.trxid = l.trxid and atb.LineId = l.LineId and (atb.ExpiryDate is null or atb.ExpiryDate > getdate())
						                        left outer join ( select CASE WHEN (select top 1 parentLineId from trx_lines where trxid = @TrxId and lineid = (select top 1 parentLineId from trx_lines where trxid = @trxid and lineId = l.ParentLineId) order by lineid) is not null
																			THEN (select top 1 parentLineId from trx_lines where trxid = @TrxId and lineid = (select top 1 parentLineId from trx_lines where trxid = @trxid and lineId = l.ParentLineId) order by lineid)
																			WHEN (select top 1 parentLineId from trx_lines where trxid = @TrxId and lineid = l.ParentLineId order by lineid) is not null
																			THEN (select top 1 parentLineId from trx_lines where trxid = @TrxId and lineid = l.ParentLineId order by lineid)
																			WHEN L.PARENTLINEID IS NULL AND L.LINEID = LINE.ParentLineId
																				THEN LINE.ParentLineId
																				ELSE ISNULL(L.ParentLineId, -1)
																			 END ParentLineId, lineid
																   from trx_lines l
																		left outer join (select count(1)cnt, parentlineid 
																							from trx_lines 
																							where trxid = @TrxId
																							group by parentlineid)line on l.lineid = line.ParentLineId
																 where l.trxid = @TrxId
																) line on l.lineid = line.lineid
											   , 
                                    product_type pt, products p left outer join tax t on p.tax_id = t.tax_id
									
                             where l.trxid = @TrxId 
                               and l.product_id = p.product_id
                               and pt.product_type NOT IN ( 'LOYALTY', 'SERVICECHARGE','GRATUITY')
                               and pt.product_type_id = p.product_type_id
                            group by l.trxid, l.PRODUCT_ID, l.productDescription, pt.product_type, p.product_name, l.price, t.tax_percentage, l.amount, t.tax_name, 
                                     p.HsnSacCode, CARD_NUMBER,line.ParentLineId,
                                     l.parentLineId, remarks, CancelledBy, lockername, atb.productdetails, td.discountCount
                            order by DBLineId";
                }
                else
                {
                    if (splitId != -1 && splitLineId != "-1")
                    {
                        cmdText = @"with n(lineId, ParentLIneId, Level) as
	                                (select lineId, ParentLIneId, 1 as Level
	                                  from trx_lines, @LineIdList List
	                                 where ParentlineId is null
                                       and trx_lines.LineId = List.Id 
	                                   and trxid = @TrxId
	                                 union all
	                                 select l.lineId, l.ParentLIneId, n.Level + 1
	                                  from trx_lines l, n, @LineIdList List
	                                 where l.ParentLIneId = n.Lineid
	                                   and l.trxid = @TrxId
                                       and l.LineId = List.Id)
                                SELECT l.trxid, 
                                   l.PRODUCT_ID, 
														   ISNULL(STUFF(( SELECT ' ' + (SELECT TOP 1 code FROM (SELECT discount_id, (case rownumber % 5 
								                               when 0 then '$ '
								                               when 1 then '* '
								                               when 2 then '^ '
								                               when 3 then '# '
								                               when 4 then '@ '
								                               else ''
								                               end) code
								                               FROM(
	                              SELECT  discount_id, ROW_NUMBER() over (order by discount_id asc) rownumber
	                              FROM TrxDiscounts, discounts
	                              WHERE TrxDiscounts.DiscountId = discounts.discount_id AND TrxDiscounts.TrxId = l.TrxId
	                              GROUP BY discount_id)A)B
	                              WHERE discount_id = TrxDiscounts.DiscountId )
                                  FROM TrxDiscounts
	                              WHERE TrxDiscounts.LineId = min(l.LineId) AND TrxDiscounts.TrxId = min(l.TrxId)
                                  FOR XML PATH('') 
	                              ), 1, 1, ''), '')  +
	                               case when l.parentlineid is not null
                                         and pt.product_type != 'CHECK-IN'
                                         and pt.product_type != 'CHECK-OUT'
                                        then ISNULL((select top 1 replicate(' ', (Level-1)*3 + 1) 
										        from n where ParentLineId = l.ParentLineId) + N'└ ', '')
                                        else '' end 
                                            + case when l.ProductDescription is not null
											       then l.ProductDescription
												   else p.product_name
											  end
                                          + min(case when pt.product_type = 'LOCKER' and la.lockername is not null
                                                   then '-Locker:' + lockername
                                                   when pt.product_type = 'LOCKER' and la.lockername is null
                                                   then '-Locker:Free Mode'
                                                   else ''
                                              end)
					                      + min(case when pt.product_type = 'ATTRACTION' and ATB.productDetails is not null
                                                     then atb.productDetails
                                                     else ''
                                                end)  product_name, 
	                               l.price, 
	                               ISNULL(t.tax_percentage, 0) tax_percentage, 
	                               l.price * sum(quantity) PreTaxAmount, 
	                               l.price * isnull(min(l.tax_percentage),0)/100 * sum(quantity) Tax,
	                               sum(l.price * (1 + isnull(case when l.tax_percentage = 0 and l.TrxProfileId is not null
								                                  then (ISNULL(linetax.tax_percentage,0))
																  else l.tax_percentage
																  end
								                                  ,0)/100))/sum(quantity) AmountInclTax,
	                               sum(l.amount) amount,
	                               sum(l.amount + case when l.tax_percentage = 0 and l.trxProfileId is not null
								                       then l.price * (isnull(linetax.tax_percentage,0)/100) * l.quantity
													   else 0
													   end) TotalAmountInclTax,
	                               t.tax_name,
	                               ISNULL(p.HsnSacCode, '') HSNCode, 
	                               SUM(QUANTITY) Quantity, 
								   sum(case when receiptPrinted = 1 
								             then 0
											 else quantity end) KOTQuantity, 
	                               isnull(CARD_NUMBER, '') card_number, 
	                               min(case when pt.CardSale = 'Y' then 'Card' else 'Manual' end) ProductType,
	                               min(case when l.ParentLineId is not null then 'C' else 'P' end) LineType,
	                               line.ParentLineId ParentLineId,
	                               ISNULL(remarks, '') remarks,
	                               max(l.lineid) DBLineId,
	                               case when CancelledBy is null then 0 else 1 end CancelledLine,
	                               case when CancelledBy is null then 1 else 0 end PrintEligible,
								   sum(l.Price * (1 - isnull(tdamount.discountPercentage, 0))) discountedAmount
                              from trx_lines l   
                                outer apply (select sum(td.discountId) discountCount
											 from TrxDiscounts td
											 where td.lineId = l.lineId and td.trxId = l.trxId
											 group by td.lineId)td 
                                               inner join @LineIdList List On l.LineId = List.Id                                               
											   left outer join (select sum(discountPercentage)/100.0 discountPercentage, 
                                                                      sum(discountAmount) discAmt, trxid, lineId 
											                      from TrxDiscounts
																 where trxid = @TrxId 
																group by trxid, lineid) tdamount on l.trxid = tdamount.TrxId and l.LineId = tdamount.LineId
                                               left outer join tax linetax on l.tax_id = linetax.tax_id
                                               left outer join (SELECT lockername, la.trxid, la.trxLineId
                                                                  from LockerAllocation la, lockers l
                                                                 WHERE la.trxid = @TrxId 
                                                                   AND l.lockerId = la.lockerId) la
                                                             on la.trxId = l.trxId
                                                            and la.trxLineId = l.LineId
						                        LEFT OUTER JOIN (SELECT atb.trxid, atb.lineid, ap.PlayName + 
						                                                                        ':' + replace(Convert(varchar(11), da.ScheduleDateTime, 106), ' ', '-') + ' ' + LTRIM(RIGHT(CONVERT(VARCHAR(20), da.ScheduleDateTime, 100), 7)) +
																	                            ':' + ISNULL(ats.SeatName, '') productDetails, atb.ExpiryDate
											                        FROM AttractionBookings atb
												                        left outer join (SELECT atb.BookingId, stuff((select ', '+ cast(SeatName as nvarchar(250))
																	                        FROM FacilitySeats fs, AttractionBookingSeats atbs
																	                        WHERE fs.seatId = atbs.SeatId 
																		                        and atbs.BookingId = atb.BookingId
																	                        GROUP BY SeatName
																	                        FOR XML PATH('')
																	                        )
																	                        , 1, 1, '')	SeatName	 
																	                        from AttractionBookings atb
																	                       WHERE ATB.TRXID = @TrxId
                                                                                             and ATB.lineId in (" + splitLineId + @")
																	                        ) ats on atb.BookingId = ats.BookingId,
												                        AttractionPlays ap,
                                                                        DayAttractionSchedule da 
										                        WHERE atb.DayAttractionScheduleId = da.DayAttractionScheduleId and da.AttractionPlayId = ap.AttractionPlayId) atb on atb.trxid = l.trxid and atb.LineId = l.LineId and (atb.ExpiryDate is null or atb.ExpiryDate > getdate())
						                        left outer join ( select CASE WHEN (select top 1 parentLineId from trx_lines where trxid = @TrxId and lineid = (select top 1 parentLineId from trx_lines where trxid = @trxid and lineId = l.ParentLineId) order by lineid) is not null
																			THEN (select top 1 parentLineId from trx_lines where trxid = @TrxId and lineid = (select top 1 parentLineId from trx_lines where trxid = @trxid and lineId = l.ParentLineId) order by lineid)
																			WHEN (select top 1 parentLineId from trx_lines where trxid = @TrxId and lineid = l.ParentLineId order by lineid) is not null
																			THEN (select top 1 parentLineId from trx_lines where trxid = @TrxId and lineid = l.ParentLineId order by lineid)
																			WHEN L.PARENTLINEID IS NULL AND L.LINEID = LINE.ParentLineId
																				THEN LINE.ParentLineId
																				ELSE ISNULL(L.ParentLineId, -1)
																			 END ParentLineId, lineid
																   from trx_lines l
																		left outer join (select count(1)cnt, parentlineid 
																							from trx_lines 
																							where trxid = @TrxId
                                                                                         	group by parentlineid)line on l.lineid = line.ParentLineId
																 where l.trxid = @TrxId
                                                                   and lineId in (" + splitLineId + @")
																) line on l.lineid = line.lineid
                                               , 
                                    product_type pt, products p left outer join tax t on p.tax_id = t.tax_id
                             where l.trxid = @TrxId 
                               and l.lineId in (" + splitLineId + @")
                               and l.product_id = p.product_id
                               and pt.product_type NOT IN ( 'LOYALTY', 'SERVICECHARGE','GRATUITY')
                               and pt.product_type_id = p.product_type_id
                            group by l.trxid, l.PRODUCT_ID, l.productDescription, pt.product_type,  p.product_name, l.price, t.tax_percentage, l.amount, t.tax_name, 
                                     p.HsnSacCode, CARD_NUMBER,line.ParentLineId,
                                     l.parentLineId, remarks, CancelledBy, lockername, atb.productdetails, td.discountCount
                            order by DBLineId";
                    }
                }

                DataTable dtTrxProduct = Utilities.executeDataTable(cmdText, new SqlParameter("@TrxId", TrxId), validListSqlParameter);

                for (int i = 0; i < dtTrxProduct.Rows.Count; i++)
                {
                    ProductInfo pi = new ProductInfo();
                    pi.DBLineId = Convert.ToInt32(dtTrxProduct.Rows[i]["DBLineId"]);
                    pi.productId = Convert.ToInt32(dtTrxProduct.Rows[i]["product_id"]);
                    pi.hsnSacCode = dtTrxProduct.Rows[i]["HSNCode"].ToString();
                    pi.productName = dtTrxProduct.Rows[i]["product_name"].ToString();
                    pi.productType = dtTrxProduct.Rows[i]["ProductType"].ToString();
                    pi.cardNumber = dtTrxProduct.Rows[i]["card_number"].ToString();
                    pi.remarks = dtTrxProduct.Rows[i]["remarks"].ToString();
                    pi.taxName = dtTrxProduct.Rows[i]["tax_name"].ToString();
                    pi.taxPercentage = Convert.ToDouble(dtTrxProduct.Rows[i]["tax_percentage"]);
                    pi.tax = splitCnt == -1 ? Convert.ToDouble(dtTrxProduct.Rows[i]["Tax"]) : Convert.ToDouble(dtTrxProduct.Rows[i]["Tax"]) / splitCnt;
                    pi.amount = splitCnt == -1 ? Convert.ToDouble(dtTrxProduct.Rows[i]["Amount"]) : Convert.ToDouble(dtTrxProduct.Rows[i]["Amount"]) / splitCnt;
                    pi.TotalAmountInclTax = splitCnt == -1 ? Convert.ToDouble(dtTrxProduct.Rows[i]["TotalAmountInclTax"]) : Convert.ToDouble(dtTrxProduct.Rows[i]["TotalAmountInclTax"]) / splitCnt;
                    pi.amountInclTax = splitCnt == -1 ? Convert.ToDouble(dtTrxProduct.Rows[i]["amountInclTax"]) : Convert.ToDouble(dtTrxProduct.Rows[i]["amountInclTax"]) / splitCnt;
                    pi.cancelledLine = Convert.ToBoolean(dtTrxProduct.Rows[i]["CancelledLine"]);
                    pi.printEligible = Convert.ToBoolean(dtTrxProduct.Rows[i]["PrintEligible"]);
                    pi.preTaxAmount = splitCnt == -1 ? Convert.ToDouble(dtTrxProduct.Rows[i]["PreTaxAmount"]) : Convert.ToDouble(dtTrxProduct.Rows[i]["PreTaxAmount"]) / splitCnt;
                    pi.price = Convert.ToDouble(dtTrxProduct.Rows[i]["price"]);
                    pi.quantity = splitCnt == -1 ? Convert.ToDecimal(dtTrxProduct.Rows[i]["Quantity"]) : Convert.ToDecimal(dtTrxProduct.Rows[i]["Quantity"]) / splitCnt;
                    pi.kotQuantity = splitCnt == -1 ? Convert.ToDecimal(dtTrxProduct.Rows[i]["KOTQuantity"]) : Convert.ToDecimal(dtTrxProduct.Rows[i]["KOTQuantity"]) / splitCnt;
                    pi.lineType = dtTrxProduct.Rows[i]["LineType"].ToString();
                    pi.parentLineId = Convert.ToInt32(dtTrxProduct.Rows[i]["ParentLineId"]);
                    pi.amountInclDiscount = splitCnt == -1 ? Convert.ToDecimal(dtTrxProduct.Rows[i]["discountedAmount"]) : Convert.ToDecimal(dtTrxProduct.Rows[i]["discountedAmount"]) / splitCnt;
                    TrxProduct.Add(pi);
                }

                //End 20-Oct-2016

                GroupMealTotal = 0;

                if (splitId == -1 || (splitId != -1 && splitCnt != -1))
                {
                    cmdText = @"SELECT SUM(tl.price * tl.quantity * (1 + ISNULL(t.tax_percentage,0)/100)) GroupMealTotal
                                  FROM trx_lines tl
                                       LEFT OUTER JOIN tax t on tl.tax_id = t.tax_id
                                 WHERE tl.trxid = @trxid
                                   and not exists(select 1
                                                    from products pp, product_type pt
                                                   where pt.product_type in ('SERVICECHARGE', 'GRATUITY')
                                                     and pt.product_type_id = pp.product_type_id
                                                     and tl.product_id = pp.product_id)";
                }
                else
                {
                    if (splitId != -1 && splitLineId != "-1")
                    {
                        cmdText = @"SELECT SUM(tl.price * tl.quantity * (1 + ISNULL(t.tax_percentage,0)/100)) GroupMealTotal 
                                      FROM trx_lines tl
                                           LEFT OUTER JOIN tax t on tl.tax_id = t.tax_id 
                                     WHERE tl.trxid = @trxid 
                                       AND tl.lineId in (" + splitLineId + ") " +
                                 @"    and not exists(select 1
                                                        from products pp, product_type pt
                                                       where pt.product_type in ('SERVICECHARGE', 'GRATUITY')
                                                         and pt.product_type_id = pp.product_type_id
                                                        and tl.product_id = pp.product_id)";
                    }
                }

                object objGroupMealTotal = Utilities.executeScalar(cmdText, new SqlParameter("@TrxId", TrxId));

                if (objGroupMealTotal != null && objGroupMealTotal != DBNull.Value)
                {
                    if (splitCnt == -1)
                    {
                        GroupMealTotal = Convert.ToDouble(objGroupMealTotal);
                    }
                    else//if equal split then divide by split count
                    {
                        GroupMealTotal = Convert.ToDouble(objGroupMealTotal) / splitCnt;
                    }
                }

                //Discounts Information
                TrxDiscountInfo.Clear();
                //Query modified to add Tax Structure Product Split Amount - 25-Mar-2016
                if (splitId == -1 || (splitId != -1 && splitCnt != -1))
                {
                    cmdText = @"SELECT d.discount_name DiscountName, sum(td.DiscountAmount) discAmount, td.discountid discountId,
                                       sum(((td.DiscountAmount/(td.DiscountPercentage/100))/(1 + isnull(tl.tax_percentage,0)/100)
                                           ) 
                                           * (td.DiscountPercentage/100)
                                          ) RevisedDiscAmount, 
                                       sum(ISNULL(td.DiscountAmount, 0)) DiscAmountWithTax,
                                       sum(td.DiscountAmount) / isnull(sum(tl.amount), null) * 100 discPerc 
                                  FROM TrxDiscounts td, Trx_lines tl, Discounts d 
                                 WHERE tl.trxid = td.trxid 
                                   AND tl.lineId = td.LineId 
                                   AND td.DiscountId = d.discount_id 
                                   AND tl.trxid = @TrxId 
                                   and not exists(select 1
                                                    from products pp, product_type pt
                                                   where pt.product_type in ('SERVICECHARGE', 'GRATUITY')
                                                     and pt.product_type_id = pp.product_type_id
                                                     and tl.product_id = pp.product_id)
                                group by td.DiscountId, d.discount_name";
                }
                else
                {
                    if (splitId != -1 && splitLineId != "-1")
                    {
                        cmdText = @"SELECT d.discount_name DiscountName, sum(td.DiscountAmount) discAmount, td.discountid discountId,
                                           sum(((td.DiscountAmount/(td.DiscountPercentage/100))/(1 + isnull(tl.tax_percentage,0)/100)
                                               ) 
                                               * (td.DiscountPercentage/100)
                                              ) RevisedDiscAmount, 
                                       sum(ISNULL(td.DiscountAmount, 0)) DiscAmountWithTax, 
                                           sum(td.DiscountAmount) / isnull(sum(tl.amount), null) * 100 discPerc 
                                      FROM TrxDiscounts td, Trx_lines tl, Discounts d 
                                     WHERE tl.trxid = td.trxid 
                                       AND tl.lineId = td.LineId 
                                       AND td.DiscountId = d.discount_id 
                                       AND tl.trxid = @TrxId 
                                       and not exists(select 1
                                                        from products pp, product_type pt
                                                       where pt.product_type in ('SERVICECHARGE', 'GRATUITY')
                                                         and pt.product_type_id = pp.product_type_id
                                                         and tl.product_id = pp.product_id)
                                       AND tl.lineId in (" + splitLineId + @")  
                                    group by td.DiscountId, d.discount_name";
                    }
                }

                DataTable dtTrxDiscountInfo = Utilities.executeDataTable(cmdText, new SqlParameter("@TrxId", TrxId));

                for (int i = 0; i < dtTrxDiscountInfo.Rows.Count; i++)
                {
                    DiscountInfo discInfo = new DiscountInfo();
                    discInfo.DiscountId = Convert.ToInt32(dtTrxDiscountInfo.Rows[i]["discountId"]);
                    discInfo.DiscAmount = Convert.ToDouble(dtTrxDiscountInfo.Rows[i]["RevisedDiscAmount"]);
                    discInfo.DiscAmountWithTax = Convert.ToDouble(dtTrxDiscountInfo.Rows[i]["DiscAmountWithTax"]);
                    discInfo.DiscPercentage = Convert.ToDouble(dtTrxDiscountInfo.Rows[i]["discPerc"]);
                    discInfo.DiscountName = Convert.ToString(dtTrxDiscountInfo.Rows[i]["DiscountName"]);
                    TrxDiscountInfo.Add(discInfo);
                }

                //DiscountSummary Information
                TrxDiscountSummaryInfo.Clear();

                if (splitId == -1 || (splitId != -1 && splitCnt != -1))
                {
                    cmdText = @"SELECT 'Amount: ' DiscountText, 
                                        round(sum(price*quantity*(1 + t.tax_percentage/100)), 3) Amount
                                       , 1 isSCPWD, 1 sort
                                  FROM TRX_LINES L, TAX T
                                 WHERE L.TRXID = @TrxId
                                   AND l.tax_id is not null 
                                   and l.tax_percentage = 0 
                                   and l.TrxProfileId is not null 
                                   AND L.tax_id = T.tax_id
                                   
                                UNION ALL
                                SELECT 'Less VAT: ' , round(sum(price*quantity*(t.tax_percentage/100)), 3), 1 isSCPWD, 2 sort
                                  FROM TRX_LINES L, TAX T
                                 WHERE L.TRXID = @TrxId
                                   AND l.tax_id is not null 
                                   and l.tax_percentage = 0 
                                   and l.TrxProfileId is not null 
                                   AND L.tax_id = T.tax_id
                                  UNION ALL
                                SELECT 'Net of VAT: ' , 
								       round(round(sum(price*quantity*(1 + t.tax_percentage/100)), 3) - round(sum(price*quantity*(t.tax_percentage/100)), 3), 3)
									   , 1 isSCPWD, 3 sort
                                  FROM TRX_LINES L, TAX T
                                 WHERE L.TRXID = @TrxId
                                   AND l.tax_id is not null 
                                   and l.tax_percentage = 0 
                                   and l.TrxProfileId is not null 
                                   AND L.tax_id = T.tax_id
                                UNION ALL
                                SELECT 'Less: ' + d.discount_name + '(' + convert(varchar,convert(numeric(3,0), (SELECT MAX(discountPercentage) FROM TrxDiscounts td WHERE td.DiscountId = d.discount_id and td.TrxId = @TrxId))) + '%)' ,
								(SELECT SUM(price*quantity*(td.DiscountPercentage/100))
								 FROM trx_lines l, TrxDiscounts td 
								 WHERE td.DiscountId = d.discount_id and td.TrxId = @TrxId
								AND l.tax_id is not null 
								and l.tax_percentage = 0 
								and l.TrxProfileId is not null
								AND L.TRXID = td.TRXID
								AND L.LINEID = td.LINEID) Amount
								,1 isSCPWD, 4 sort
								FROM discounts d
								WHERE EXISTS (SELECT 1 
											  FROM TrxDiscounts td, trx_lines l 
											  WHERE td.DiscountId = d.discount_id and td.TrxId = @TrxId
											  AND l.tax_id is not null 
											  and l.tax_percentage = 0 
											  and l.TrxProfileId is not null
											  AND L.TRXID = td.TRXID
											  AND L.LINEID = td.LINEID)
                                UNION ALL
                                SELECT 'SC/PWD Due: ' , round(SUM(AMOUNT), 3) Amount, 1 isSCPWD, 5 sort
								   FROM(
								   SELECT t.tax_name, price*quantity*(1 + t.tax_percentage/100) - price*quantity*(t.tax_percentage/100)
										- price*quantity*((SELECT ISNULL(SUM(DiscountPercentage),0) FROM TrxDiscounts WHERE TrxDiscounts.TrxId = L.TrxId AND TrxDiscounts.LineId = L.LineId)/100) Amount
								   FROM TRX_LINES L , TAX T
								   WHERE l.tax_id is not null 
									and l.tax_percentage = 0 
									and l.TrxProfileId is not null 
								   AND L.tax_id = T.tax_id AND L.TRXID = @TrxId)A
                                UNION ALL --NON-SC PART STARTS
                                SELECT 'Amount: ' , 
                                      sum(price*quantity*(1 + t.tax_percentage/100)), 0 isSCPWD, 6 sort
                                  FROM TRX_LINES L, TAX T
                                 WHERE L.TRXID = @TrxId
                                   AND l.tax_id is not null 
                                   and l.TrxProfileId is null 
                                   AND L.tax_id = T.tax_id
                                UNION ALL
                                SELECT 'Less VAT: ' , sum(price*quantity*(t.tax_percentage/100)), 0 isSCPWD, 7 sort
                                  FROM TRX_LINES L, TAX T
                                 WHERE L.TRXID = @TrxId
                                   AND l.tax_id is not null 
                                   and l.TrxProfileId is null 
                                   AND L.tax_id = T.tax_id
                                UNION ALL
                                SELECT 'Net of VAT: ' , sum(price*quantity), 0 isSCPWD, 8 sort
                                  FROM TRX_LINES L
                                 WHERE L.TRXID = @TrxId
                                   AND l.tax_id is not null 
                                   and l.TrxProfileId is null 
                                UNION ALL
                                SELECT 'Less: ' + d.discount_name + '(' + convert(varchar,convert(numeric(3,0), (SELECT MAX(discountPercentage) FROM TrxDiscounts td WHERE td.DiscountId = d.discount_id and td.TrxId = @TrxId))) + '%)' ,
								(SELECT SUM(price*quantity*(td.DiscountPercentage/100))
								 FROM trx_lines l, TrxDiscounts td 
								 WHERE td.DiscountId = d.discount_id and td.TrxId = @TrxId
								AND l.tax_id is not null 
								and l.TrxProfileId is null
								AND L.TRXID = td.TRXID
								AND L.LINEID = td.LINEID) Amount
								,0 isSCPWD, 9 sort
								FROM discounts d
								WHERE EXISTS (SELECT 1 
											  FROM TrxDiscounts td, trx_lines l 
											  WHERE td.DiscountId = d.discount_id and td.TrxId = @TrxId
											  AND l.tax_id is not null 
											  and l.TrxProfileId is null
											  AND L.TRXID = td.TRXID
											  AND L.LINEID = td.LINEID)
                                UNION ALL
                                SELECT 'Net of Discount: ' ,SUM(AMOUNT) Amount, 0 isSCPWD, 10 sort
								   FROM(
								   SELECT TrxId, LineId, price * quantity * (1- (SELECT SUM(DiscountPercentage) FROM TrxDiscounts WHERE TrxDiscounts.TrxId = L.TrxId AND TrxDiscounts.LineId = L.LineId)/ 100) AMOUNT
								   FROM TRX_LINES L
								   WHERE L.TRXID = @TrxId)A
                                UNION ALL
                                SELECT A.tax_name + ': '  ,SUM(AMOUNT) Amount, 0 isSCPWD, 11 sort
								   FROM(
								   SELECT L.TrxId, L.LineId, T.tax_name, price * quantity * (1- (SELECT ISNULL(SUM(DiscountPercentage),0) FROM TrxDiscounts WHERE TrxDiscounts.TrxId = L.TrxId AND TrxDiscounts.LineId = L.LineId)/ 100) * (TTL.Percentage/100) Amount
								   FROM TRX_LINES L , TAX T, TrxTaxLines TTL
								   WHERE L.TRXID = TTL.TRXID
								   AND L.LINEID = TTL.LINEID
								   AND L.tax_id = T.tax_id AND L.TRXID = @TrxId)A
									GROUP By A.tax_name
                                UNION ALL
                                SELECT 'Regular Discount Due: '  ,SUM(AMOUNT) Amount, 0 isSCPWD, 12 sort
								   FROM(
								   SELECT L.TrxId, L.LineId, T.tax_name, price * quantity * (1- (SELECT ISNULL(SUM(DiscountPercentage),0) FROM TrxDiscounts WHERE TrxDiscounts.TrxId = L.TrxId AND TrxDiscounts.LineId = L.LineId)/ 100) * (1 + TTL.Percentage/100) Amount
								   FROM TRX_LINES L , TAX T, TrxTaxLines TTL
								   WHERE L.TRXID = TTL.TRXID
								   AND L.LINEID = TTL.LINEID
								   AND L.tax_id = T.tax_id AND L.TRXID = @TrxId)A
                                UNION ALL
                                SELECT 'Regular Sale: ' , round(sum(price*quantity*(1 + isnull(l.tax_percentage,0)/100)), 3)
                                        , null isSCPWD, 13 sort
                                  FROM TRX_LINES L
                                 WHERE L.TRXID = @TrxId
                                   and l.TrxProfileId is null 
                                   and not exists (select 'x' from trxDiscounts TD
                                                    where td.TrxId = l.TrxId
					                                  and td.LineId = l.LineId
				                                  )
                                ORDER BY sort";
                }
                else
                {
                    if (splitId != -1 && splitLineId != "-1")
                    {
                        cmdText = @"SELECT 'Amount: ' DiscountText, 
                                        round(sum(price*quantity*(1 + t.tax_percentage/100)), 3) Amount
                                       , 1 isSCPWD, 1 sort
                                  FROM TRX_LINES L, TAX T
                                 WHERE L.TRXID = @TrxId
                                   AND l.tax_id is not null 
                                   and l.tax_percentage = 0 
                                    AND l.lineId in (" + splitLineId + @")
                                   and l.TrxProfileId is not null 
                                   AND L.tax_id = T.tax_id
                                   
                                UNION ALL
                                SELECT 'Less VAT: ' , round(sum(price*quantity*(t.tax_percentage/100)), 3), 1 isSCPWD, 2 sort
                                  FROM TRX_LINES L, TAX T
                                 WHERE L.TRXID = @TrxId
                                   AND l.tax_id is not null 
                                   and l.tax_percentage = 0 
                                   AND l.lineId in (" + splitLineId + @")
                                   and l.TrxProfileId is not null 
                                   AND L.tax_id = T.tax_id
                                  UNION ALL
                                SELECT 'Net of VAT: ' , 
								       round(round(sum(price*quantity*(1 + t.tax_percentage/100)), 3) - round(sum(price*quantity*(t.tax_percentage/100)), 3), 3)
									   , 1 isSCPWD, 3 sort
                                  FROM TRX_LINES L, TAX T
                                 WHERE L.TRXID = @TrxId
                                   AND l.tax_id is not null 
                                   and l.tax_percentage = 0 
                                    AND l.lineId in (" + splitLineId + @")
                                   and l.TrxProfileId is not null 
                                   AND L.tax_id = T.tax_id
                                UNION ALL
                                SELECT 'Less: ' + d.discount_name + '(' + convert(varchar,convert(numeric(3,0), (SELECT MAX(discountPercentage) FROM TrxDiscounts td WHERE td.DiscountId = d.discount_id and td.TrxId = @TrxId))) + '%)' ,
								(SELECT SUM(price*quantity*(td.DiscountPercentage/100))
								 FROM trx_lines l, TrxDiscounts td 
								 WHERE td.DiscountId = d.discount_id and td.TrxId = @TrxId
								AND l.tax_id is not null 
								and l.tax_percentage = 0 
								and l.TrxProfileId is not null
                                AND l.lineId in (" + splitLineId + @")
								AND L.TRXID = td.TRXID
								AND L.LINEID = td.LINEID) Amount
								,1 isSCPWD, 4 sort
								FROM discounts d
								WHERE EXISTS (SELECT 1 
											  FROM TrxDiscounts td, trx_lines l 
											  WHERE td.DiscountId = d.discount_id and td.TrxId = @TrxId
											  AND l.tax_id is not null 
											  and l.tax_percentage = 0 
                                              AND l.lineId in (" + splitLineId + @")
											  and l.TrxProfileId is not null
											  AND L.TRXID = td.TRXID
											  AND L.LINEID = td.LINEID)
                                UNION ALL
                                SELECT 'SC/PWD Due: ' , round(SUM(AMOUNT), 3) Amount, 1 isSCPWD, 5 sort
								   FROM(
								   SELECT t.tax_name, price*quantity*(1 + t.tax_percentage/100) - price*quantity*(t.tax_percentage/100)
										- price*quantity*((SELECT ISNULL(SUM(DiscountPercentage),0) FROM TrxDiscounts WHERE TrxDiscounts.TrxId = L.TrxId AND TrxDiscounts.LineId = L.LineId)/100) Amount
								   FROM TRX_LINES L , TAX T
								   WHERE l.tax_id is not null 
									and l.tax_percentage = 0 
                                    AND l.lineId in (" + splitLineId + @")
									and l.TrxProfileId is not null 
								   AND L.tax_id = T.tax_id AND L.TRXID = @TrxId)A
                                UNION ALL --NON-SC PART STARTS
                                SELECT 'Amount: ' , 
                                      sum(price*quantity*(1 + t.tax_percentage/100)), 0 isSCPWD, 6 sort
                                  FROM TRX_LINES L, TAX T
                                 WHERE L.TRXID = @TrxId
                                   AND l.tax_id is not null 
                                    AND l.lineId in (" + splitLineId + @")
                                   and l.TrxProfileId is null 
                                   AND L.tax_id = T.tax_id
                                UNION ALL
                                SELECT 'Less VAT: ' , sum(price*quantity*(t.tax_percentage/100)), 0 isSCPWD, 7 sort
                                  FROM TRX_LINES L, TAX T
                                 WHERE L.TRXID = @TrxId
                                   AND l.tax_id is not null 
                                    AND l.lineId in (" + splitLineId + @")
                                   and l.TrxProfileId is null 
                                   AND L.tax_id = T.tax_id
                                UNION ALL
                                SELECT 'Net of VAT: ' , sum(price*quantity), 0 isSCPWD, 8 sort
                                  FROM TRX_LINES L
                                 WHERE L.TRXID = @TrxId
                                   AND l.tax_id is not null 
                                    AND l.lineId in (" + splitLineId + @")
                                   and l.TrxProfileId is null 
                                UNION ALL
                                SELECT 'Less: ' + d.discount_name + '(' + convert(varchar,convert(numeric(3,0), (SELECT MAX(discountPercentage) FROM TrxDiscounts td WHERE td.DiscountId = d.discount_id and td.TrxId = @TrxId))) + '%)' ,
								(SELECT SUM(price*quantity*(td.DiscountPercentage/100))
								 FROM trx_lines l, TrxDiscounts td 
								 WHERE td.DiscountId = d.discount_id and td.TrxId = @TrxId
								AND l.tax_id is not null 
								and l.TrxProfileId is null
                                AND l.lineId in (" + splitLineId + @")
								AND L.TRXID = td.TRXID
								AND L.LINEID = td.LINEID) Amount
								,0 isSCPWD, 9 sort
								FROM discounts d
								WHERE EXISTS (SELECT 1 
											  FROM TrxDiscounts td, trx_lines l 
											  WHERE td.DiscountId = d.discount_id and td.TrxId = @TrxId
											  AND l.tax_id is not null 
											  and l.TrxProfileId is null
                                              AND l.lineId in (" + splitLineId + @")
											  AND L.TRXID = td.TRXID
											  AND L.LINEID = td.LINEID)
                                UNION ALL
                                SELECT 'Net of Discount: ' ,SUM(AMOUNT) Amount, 0 isSCPWD, 10 sort
								   FROM(
								   SELECT TrxId, LineId, price * quantity * (1- (SELECT SUM(DiscountPercentage) FROM TrxDiscounts WHERE TrxDiscounts.TrxId = L.TrxId AND TrxDiscounts.LineId = L.LineId)/ 100) AMOUNT
								   FROM TRX_LINES L
								   WHERE L.TRXID = @TrxId 
                                    AND l.lineId in (" + splitLineId + @"))A
                                UNION ALL
                                SELECT A.tax_name + ': '  ,SUM(AMOUNT) Amount, 0 isSCPWD, 11 sort
								   FROM(
								   SELECT L.TrxId, L.LineId, T.tax_name, price * quantity * (1- (SELECT ISNULL(SUM(DiscountPercentage),0) FROM TrxDiscounts WHERE TrxDiscounts.TrxId = L.TrxId AND TrxDiscounts.LineId = L.LineId)/ 100) * (TTL.Percentage/100) Amount
								   FROM TRX_LINES L , TAX T, TrxTaxLines TTL
								   WHERE L.TRXID = TTL.TRXID
								   AND L.LINEID = TTL.LINEID
                                   AND l.lineId in (" + splitLineId + @")
								   AND L.tax_id = T.tax_id AND L.TRXID = @TrxId)A
									GROUP By A.tax_name
                                UNION ALL
                                SELECT 'Regular Discount Due: '  ,SUM(AMOUNT) Amount, 0 isSCPWD, 12 sort
								   FROM(
								   SELECT L.TrxId, L.LineId, T.tax_name, price * quantity * (1- (SELECT ISNULL(SUM(DiscountPercentage),0) FROM TrxDiscounts WHERE TrxDiscounts.TrxId = L.TrxId AND TrxDiscounts.LineId = L.LineId)/ 100) * (1 + TTL.Percentage/100) Amount
								   FROM TRX_LINES L , TAX T, TrxTaxLines TTL
								   WHERE L.TRXID = TTL.TRXID
								   AND L.LINEID = TTL.LINEID
                                    AND L.lineId in (" + splitLineId + @")
								   AND L.tax_id = T.tax_id AND L.TRXID = @TrxId)A
                                UNION ALL
                                SELECT 'Regular Sale: ' , round(sum(price*quantity*(1 + isnull(l.tax_percentage,0)/100)), 3)
                                        , null isSCPWD, 13 sort
                                  FROM TRX_LINES L
                                 WHERE L.TRXID = @TrxId
                                   and l.TrxProfileId is null 
                                    AND l.lineId in (" + splitLineId + @")
                                   and not exists (select 'x' from trxDiscounts TD
                                                    where td.TrxId = l.TrxId
					                                  and td.LineId = l.LineId
				                                  )
                                ORDER BY sort";
                    }
                }

                DataTable dtTrxDiscountSummaryInfo = Utilities.executeDataTable(cmdText, new SqlParameter("@TrxId", TrxId));

                for (int i = 0; i < dtTrxDiscountSummaryInfo.Rows.Count; i++)
                {
                    if (dtTrxDiscountSummaryInfo.Rows[i]["Amount"] != DBNull.Value)
                    {
                        DiscountSummaryInfo discSummaryInfo = new DiscountSummaryInfo();
                        discSummaryInfo.DiscountText = dtTrxDiscountSummaryInfo.Rows[i]["DiscountText"].ToString();
                        discSummaryInfo.Amount = Convert.ToDouble(dtTrxDiscountSummaryInfo.Rows[i]["Amount"]);
                        discSummaryInfo.isSCPWD = (dtTrxDiscountSummaryInfo.Rows[i]["isSCPWD"] == DBNull.Value ? (bool?)null : Convert.ToBoolean(dtTrxDiscountSummaryInfo.Rows[i]["isSCPWD"]));
                        discSummaryInfo.Sort = Convert.ToInt32(dtTrxDiscountSummaryInfo.Rows[i]["sort"]);
                        TrxDiscountSummaryInfo.Add(discSummaryInfo);
                    }
                }

                //Load SC-PWD details
                TrxUserVerificationInfo.Clear();
                DataTable dttrxUserVerificationDet = Utilities.executeDataTable(@"SELECT LineId, 
                                                                                         isnull(VerificationId,'') VerificationId,
                                                                                         isnull(VerificationName,'') VerificationName,
                                                                                         isnull(VerificationRemarks, '') VerificationRemarks
                                                                                    FROM TrxUserVerificationDetails
                                                                                   WHERE TrxId = @TrxId
                                                                                     AND IsActive = 'Y'
                                                                                 ORDER BY LineId",
                                                                new SqlParameter("@TrxId", TrxId));

                for (int i = 0; i < dttrxUserVerificationDet.Rows.Count; i++)
                {
                    UserVerificationInfo uvi = new UserVerificationInfo();
                    uvi.LineId = Convert.ToInt32(dttrxUserVerificationDet.Rows[i]["LineId"]);
                    uvi.VerificationId = dttrxUserVerificationDet.Rows[i]["VerificationId"].ToString();
                    uvi.UserName = dttrxUserVerificationDet.Rows[i]["VerificationName"].ToString();
                    uvi.UserRemarks = dttrxUserVerificationDet.Rows[i]["VerificationRemarks"].ToString();
                    TrxUserVerificationInfo.Add(uvi);
                }

                //begin Modification- Jan -08-2016-Get the Rental Deposit and Rental Amount //
                rentalAmount = 0;
                rentalDepositAmount = 0;
                object objRentalAmount = Utilities.executeScalar(@"select sum(tl.amount) rentalAmount  
                                                                    from trx_lines tl , products p, product_type pt
                                                                    where p.product_id = tl.product_id 
                                                                    and p.product_type_id = pt.product_type_id
                                                                    and tl.TrxId = @trxId and pt.product_type ='RENTAL'", new SqlParameter("@trxId", TrxId));

                log.LogVariableState("@trxId", TrxId);

                if (objRentalAmount != null && objRentalAmount != DBNull.Value)
                    rentalAmount = Convert.ToDouble(objRentalAmount);

                object objRentalDepositAmount = Utilities.executeScalar(@"select sum(tl.amount) rentalAmount 
                                                                    from trx_lines tl , products p, product_type pt
                                                                    where p.product_id = tl.product_id 
                                                                    and p.product_type_id = pt.product_type_id
                                                                    and tl.TrxId = @trxId and pt.product_type ='DEPOSIT'", new SqlParameter("@trxId", TrxId));

                log.LogVariableState("@trxId", TrxId);

                if (objRentalDepositAmount != null && objRentalDepositAmount != DBNull.Value)
                    rentalDepositAmount = Convert.ToDouble(objRentalDepositAmount);
                //End  Modification- Jan -08-2016-Get the Rental Deposit and Rental Amount //

                string originalTransactionCommandText = @"select original.TrxId originalTrxId,
	                                                            original.Trx_no originalTrxNo,
	                                                            original.TrxDate originalTrxDate,
	                                                            LTRIM(RTRIM(ISNULL(substring(substring(substring(h.paymentReference, 0, 
                                                                            charindex('[Auth:', h.paymentReference, 0)), 
		                                                            charindex(':', substring(h.paymentReference, 0, charindex('[Auth:', h.paymentReference, 0)), 0) + 1, 
		                                                            len(substring(h.paymentReference, 0, charindex('[Auth:', h.paymentReference, 0))) 
		                                                            ),  
		                                                            charindex(':', substring(substring(h.paymentReference, 0, 
                                                                            charindex('[Auth:', h.paymentReference, 0)), 
		                                                            charindex(':', substring(h.paymentReference, 0, charindex('[Auth:', h.paymentReference, 0)), 0) + 1, 
		                                                            len(substring(h.paymentReference, 0, charindex('[Auth:', h.paymentReference, 0))) 
		                                                            ), 0) + 1,
		                                                            len(substring(substring(h.paymentReference, 0, 
                                                                            charindex('[Auth:', h.paymentReference, 0)), 
		                                                            charindex(':', substring(h.paymentReference, 0, charindex('[Auth:', h.paymentReference, 0)), 0) + 1, 
		                                                            len(substring(h.paymentReference, 0, charindex('[Auth:', h.paymentReference, 0))) 
		                                                            ))), ''))) ReversalTrxRemarks
                                                        from trx_header h, trx_header original
                                                        where h.OriginalTrxID is not null
                                                            and original.trxid = h.originalTrxId
                                                            and h.trxid = @trxId";
                DataTable originalTransactionDetailDT = Utilities.executeDataTable(originalTransactionCommandText,
                                                                                    new SqlParameter("@trxId", TrxId));
                for (int i = 0; i < originalTransactionDetailDT.Rows.Count; i++)
                {
                    OriginalTrxInfo = new OriginalTransactionInfo();
                    OriginalTrxInfo.OriginalTrxId = Convert.ToInt32(originalTransactionDetailDT.Rows[i]["originalTrxId"]);
                    OriginalTrxInfo.OriginalTrxNo = originalTransactionDetailDT.Rows[i]["originalTrxNo"].ToString();
                    OriginalTrxInfo.OriginalTrxDate = Convert.ToDateTime(originalTransactionDetailDT.Rows[i]["originalTrxDate"]);
                    OriginalTrxInfo.ReversalRemarks = originalTransactionDetailDT.Rows[i]["ReversalTrxRemarks"].ToString();
                }
                if (OriginalTrxInfo != null && OriginalTrxInfo.OriginalTrxId > -1)
                {
                    log.Debug("Calling method to transform clsTransactionInfo object for Credit Invoice");
                    ChangeTransactionInfoCreditInvoice();
                }
                log.LogMethodExit(null);
            }

            private void ChangeTransactionInfoCreditInvoice()
            {
                log.LogMethodEntry();
                if (OriginalTrxInfo == null || (OriginalTrxInfo != null && OriginalTrxInfo.OriginalTrxId == -1))
                {
                    log.LogMethodExit("Transaction is not credit transaction. Returning.");
                    return;
                }
                AdvancePaidAmount *= -1; amountInOtherCurrency *= -1; ChangeAmount *= -1;
                DiscountedTaxAmount *= -1; NonTaxableAmount *= -1; PaymentCashAmount *= -1; PaymentCreditCardAmount *= -1;
                PaymentGameCardAmount *= -1; PaymentOtherModeAmount *= -1; PaymentOtherModeAmount *= -1; PaymentRoundOffAmount *= -1;
                rentalAmount *= -1; rentalDepositAmount *= -1; TaxableAmount *= -1; TenderedAmount *= -1; TotalPaymentAmount *= -1; TotalTipAmount *= -1;
                if (TrxProduct != null && TrxProduct.Count > 0)
                {
                    TrxProduct = TrxProduct.Select(x => { x.amount = x.amount * -1; return x; }).ToList();
                    TrxProduct = TrxProduct.Select(x => { x.tax = x.tax * -1; return x; }).ToList();
                    TrxProduct = TrxProduct.Select(x => { x.amountInclTax = x.amountInclTax * -1; return x; }).ToList();
                    TrxProduct = TrxProduct.Select(x => { x.preTaxAmount = x.preTaxAmount * -1; return x; }).ToList();
                    TrxProduct = TrxProduct.Select(x => { x.TotalAmountInclTax = x.TotalAmountInclTax * -1; return x; }).ToList();
                    TrxProduct = TrxProduct.Select(x => { x.quantity = x.quantity * -1; return x; }).ToList();
                    TrxProduct = TrxProduct.Select(x => { x.kotQuantity = x.kotQuantity * -1; return x; }).ToList();
                }
                if (ProductTrxTax != null && ProductTrxTax.Count > 0)
                {
                    ProductTrxTax = ProductTrxTax.Select(x => { x.TaxAmount = x.TaxAmount * -1; return x; }).ToList();
                }
                if (TrxTax != null && TrxTax.Count > 0)
                {
                    TrxTax = TrxTax.Select(x => { x.TaxAmount = x.TaxAmount * -1; return x; }).ToList();
                    TrxTax = TrxTax.Select(x => { x.ProductSplitAmount = x.ProductSplitAmount * -1; return x; }).ToList();
                }
                if (TrxTaxableCharges != null && TrxTaxableCharges.Count > 0)
                {
                    TrxTaxableCharges = TrxTaxableCharges.Select(x => { x.ChargeAmount = x.ChargeAmount * -1; return x; }).ToList();
                }
                if (TrxNonTaxableCharges != null && TrxNonTaxableCharges.Count > 0)
                {
                    TrxNonTaxableCharges = TrxNonTaxableCharges.Select(x => { x.ChargeAmount = x.ChargeAmount * -1; return x; }).ToList();
                }
                if (TrxDiscountInfo != null && TrxDiscountInfo.Count > 0)
                {
                    TrxDiscountInfo = TrxDiscountInfo.Select(x => { x.DiscAmount = x.DiscAmount * -1; return x; }).ToList();
                    TrxDiscountInfo = TrxDiscountInfo.Select(x => { x.DiscAmountWithTax = x.DiscAmountWithTax * -1; return x; }).ToList();
                }
                if (TrxDiscountSummaryInfo != null && TrxDiscountSummaryInfo.Count > 0)
                {
                    TrxDiscountSummaryInfo = TrxDiscountSummaryInfo.Select(x => { x.Amount = x.Amount * -1; return x; }).ToList();
                }
            }

            private SqlParameter GetValidLineListSQLParameter(List<int> validTransactionLineIdList)
            {
                SqlParameter sqlParameter = new SqlParameter("@LineIdList", SqlDbType.Structured);
                sqlParameter.TypeName = "IntegerType";
                if (validTransactionLineIdList != null && validTransactionLineIdList.Any())
                {
                    sqlParameter.Value = GetSqlDataRecords(validTransactionLineIdList);
                }
                else
                {
                    sqlParameter.Value = GetSqlDataRecords(new List<int>() { -1 });
                }
                return sqlParameter;
            }

            private IEnumerable<SqlDataRecord> GetSqlDataRecords(List<int> integerList)
            {
                SqlMetaData[] columnStructures = new SqlMetaData[1];
                columnStructures[0] = new SqlMetaData("Id", SqlDbType.Int);

                for (int i = 0; i < integerList.Count; i++)
                {
                    SqlDataRecord dataRecord = new SqlDataRecord(columnStructures);
                    dataRecord.SetValue(0, Convert.ToInt32(integerList[i]));
                    yield return dataRecord;
                }
            }

            public int getPrintCount(int inTrxId)
            {
                //Reprint Count
                totalPrintCount = 0;
                object objPrintCount = Utilities.executeScalar(@"SELECT SUM(CNT)
                                                                    FROM (
                                                                       SELECT COUNT(1) CNT
                                                                         FROM TRX_HEADER H
                                                                        WHERE POSMachineId = @POSMachineId
                                                                          AND TRXID < @TrxId
                                                                          AND EXISTS (SELECT 'X' 
                                                                                        FROM TRX_LINES L 
                                                                                       WHERE H.TRXID = L.TRXID 
                                                                                         AND L.ReceiptPrinted = 1)
                                                                    --UNION ALL
                                                                    --SELECT SUM(ReprintCount) 
                                                                    --    FROM TRX_HEADER H
                                                                    --    WHERE POSMachineId = @POSMachineId
                                                                          ) A",
                                                                new SqlParameter("@POSMachineId", Utilities.ParafaitEnv.POSMachineId),
                                                                new SqlParameter("@TrxId", inTrxId));

                log.LogVariableState("@POSMachineId", Utilities.ParafaitEnv.POSMachineId);

                if (objPrintCount != null && objPrintCount != DBNull.Value)
                    totalPrintCount = Convert.ToInt32(objPrintCount);
                return totalPrintCount;
            }
            private string GetStateName(int stateId)
            {
                log.LogMethodEntry(stateId);
                string stateName = "";
                if (stateId != -1)
                {
                    StateBL stateBL = new StateBL(stateId);
                    if (stateBL.GetStateDTO != null)
                    {
                        stateName = stateBL.GetStateDTO.Description;
                    }
                }
                log.LogMethodExit(stateName);
                return stateName;
            }

            /// <summary>
            /// Method to get card details for each trx line.
            /// </summary>
            /// <param name="trxId"></param>
            /// <param name="passPhrase"></param>
            /// <returns>List of CardInfo</returns>
            public List<CardInfo> GetTrxCardsInfo(int trxId, string passPhrase)
            {
                log.LogMethodEntry(trxId, passPhrase);
                TrxCards.Clear();
                string CommandText = @"select card_number, customerName, sum(RedeemableValue) RedeemableValue, sum(BonusValue) BonusValue,
                                               sum(TimeValue) TimeValue, sum(Amount) Amount, sum(TaxAmount) TaxAmount, sum(FaceValue) FaceValue
                                        from (select p.card_number, prof.FirstName customerName, 
                                                isnull(sum(isnull(p.credits, 0) + isnull(cp.creditPlus, 0)), 0) RedeemableValue, 
                                                isnull(sum(isnull(p.bonus, 0) + isnull(p.courtesy, 0) + isnull(cpBonus.creditPlusBonus, 0)), 0) BonusValue, 
                                                isnull(sum(p.time + isnull(cpTime.creditPlusTime, 0)), 0) TimeValue, 
                                                sum(p.price * p.quantity * (1.0 - isnull(d.discountPercentage, 0)) * (1.0 + (isnull(p.tax_percentage, 0))/100.0)) Amount, 
                                                sum(p.price * p.quantity * isnull(p.tax_percentage, 0)/100.0) * (1.0 - isnull(d.discountPercentage, 0)) TaxAmount, 
                                                isnull(sum(prod.face_value), 0) FaceValue 
                                                from trx_lines p 
                                                inner join @LineIdList List On p.LineId = List.Id
                                                left outer join 
                                                    (select LineId, isnull(sum(CreditPlus), 0) creditPlus 
                                                        from CardCreditPlus 
                                                        where trxId = @TrxId 
                                                        and CreditPlusType in ('A', 'G', 'P') 
                                                        group by lineId) cp 
                                                    on cp.lineId = p.lineId 
                                                left outer join 
                                                    (select LineId, isnull(sum(CreditPlus), 0) creditPlusBonus 
                                                        from CardCreditPlus 
                                                        where trxId = @TrxId 
                                                        and CreditPlusType in ('B') 
                                                        group by lineId) cpBonus 
                                                    on cpBonus.lineId = p.lineId 
                                                left outer join 
                                                    (select LineId, isnull(sum(CreditPlus), 0) creditPlusTime 
                                                        from CardCreditPlus 
                                                        where trxId = @TrxId 
                                                        and CreditPlusType in ('M') 
                                                        group by lineId) cpTime 
                                                    on cpTime.lineId = p.lineId 
                                                left outer join cards ca 
                                                    on p.card_id = ca.card_id 
                                                left outer join customers cu on cu.customer_id = ca.customer_id 
                                                left outer join profile prof on cu.profileId = prof.id
                                                left outer join (select LineId, sum(DiscountPercentage)/100.0 discountPercentage
                                                                  from trxDiscounts
                                                                  where trxId = @TrxId group by LineId) d on d.LineId = p.LineId, 
                                                products prod 
                                                where p.trxId = @TrxId 
                                                and p.card_id is not null 
                                                and prod.product_id = p.product_id 
                                                group by p.card_number, prof.FirstName, d.discountPercentage) inview
                                          group by card_number, customerName";
                List<int> validTransactionLineIdList = trx.TrxLines.Where(x => x.LineValid).Select(x => x.DBLineId).ToList();
                SqlParameter validListSqlParameter = GetValidLineListSQLParameter(validTransactionLineIdList);
                DataTable dt = Utilities.executeDataTable(CommandText, new SqlParameter("@TrxId", trxId), new SqlParameter("@passPhrase", passPhrase), validListSqlParameter);

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    CardInfo tc = new CardInfo();
                    tc.CardNumber = dt.Rows[i]["Card_Number"].ToString();
                    tc.CustomerName = dt.Rows[i]["CustomerName"].ToString();
                    tc.FaceValue = Convert.ToDecimal(dt.Rows[i]["FaceValue"]);
                    tc.RedeemableValue = Convert.ToDecimal(dt.Rows[i]["RedeemableValue"]);
                    tc.BonusValue = Convert.ToDecimal(dt.Rows[i]["BonusValue"]);
                    tc.TimeValue = Convert.ToDecimal(dt.Rows[i]["TimeValue"]);
                    tc.TaxAmount = Convert.ToDecimal(dt.Rows[i]["TaxAmount"]);
                    tc.Amount = Convert.ToDecimal(dt.Rows[i]["Amount"]);
                    TrxCards.Add(tc);
                }
                log.LogMethodExit(TrxCards);
                return TrxCards;
            }

            /// <summary>
            /// Populate Card Credit Plus Consumption details to List.
            /// </summary>
            /// <param name="trxId"></param>
            public void PopulateCreditPlusConsumptionInfo(int trxId)
            {
                log.LogMethodEntry();
                CardCPConsumptionInfo.Clear();
                PrimaryCardCreditPlusConsumptionBalance = 0;
                string CommandText = @"SELECT cp.remarks, cp.Card_id, ISNULL(sum(consumptionBalance), 0) ConsumptionBalance, 
                                              count(distinct tp.paymentid) ConsumedCount
                                          FROM CardCreditPlus cp,
	                                           TrxPayments tp,
	                                           CardCreditPlusConsumption ccpc
                                         WHERE tp.trxId = @TrxId
                                           AND cp.CardCreditPlusId = tp.CardCreditPlusId
                                           AND tp.cardCreditPlusId IS NOT NULL
                                           AND ccpc.CardCreditPlusId = cp.CardCreditPlusId
                                          AND ISNULL(cp.PERIODTO, tp.PaymentDate + 1) > tp.PaymentDate
                                           group by remarks, cp.card_Id";
                DataTable dt = Utilities.executeDataTable(CommandText, new SqlParameter("@TrxId", trxId));

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    CardCreditPlusConsumptionInfo ccpConsumeInfo = new CardCreditPlusConsumptionInfo();
                    ccpConsumeInfo.CardId = Convert.ToInt32(dt.Rows[i]["Card_id"]);
                    ccpConsumeInfo.Remarks = dt.Rows[i]["Remarks"].ToString();
                    ccpConsumeInfo.CardCPConsumptionBalance = Convert.ToInt32(dt.Rows[i]["ConsumptionBalance"]);
                    ccpConsumeInfo.CardCPConsumedQuantity = Convert.ToInt32(dt.Rows[i]["ConsumedCount"]);
                    CardCPConsumptionInfo.Add(ccpConsumeInfo);
                }
                if (PrimaryCard != null)
                {
                    CommandText = @"declare @trxdate datetime = getdate();
                                        SELECT @trxdate = trxdate from trx_header where trxid = @TrxId;
                                        SELECT sum(consumptionBalance) ConsumptionBalance
                                          FROM CardCreditPlus cp,
	                                           CardCreditPlusConsumption ccpc
                                          WHERE ccpc.CardCreditPlusId = cp.CardCreditPlusId
                                           AND cp.card_Id = @cardId
                                           AND ISNULL(cp.PERIODTO, @trxdate + 1) > @trxdate";
                    object consumptionBalance = Utilities.executeScalar(CommandText, new SqlParameter("@cardId", PrimaryCard.card_id), new SqlParameter("@TrxId", trxId));
                    if (consumptionBalance != null && consumptionBalance != DBNull.Value)
                        PrimaryCardCreditPlusConsumptionBalance = Convert.ToInt32(consumptionBalance);
                }
            }

            /// <summary>
            /// Method to identify if Transaction has Virtual queue products
            /// </summary>
            /// <param name="trxId">Transaction Id</param>
            /// <param name="splitId">Split Id</param>
            public void IsTransactionVirtualQueueEnabled(int trxId, int splitId)
            {
                log.LogMethodEntry(trxId, splitId);
                IsVirtualQueueEnabled = false;
                string cmdText = string.Empty;
                if (splitId == -1 || (splitId != -1 && splitCnt != -1))
                {
                    cmdText = @"SELECT 1 
                                  FROM trx_lines l
                                 WHERE l.trxid = @trxid
                                   AND l.cancelledTime is null
                                   AND EXISTS (select 'x' from products p
                                                where l.product_id = p.product_id
				                                  and p.ExternalSystemReference = 'TET')";
                }
                else
                {
                    if (splitId != -1 && splitLineId != "-1")
                    {
                        cmdText = @"SELECT 1 
                                  FROM trx_lines l
                                 WHERE l.trxid = @trxid
                                   AND l.cancelledTime is null
                                   AND l.lineId in (" + splitLineId + @")
                                   AND EXISTS (select 'x' from products p
                                                where l.product_id = p.product_id
				                                  and p.ExternalSystemReference = 'TET')";
                    }
                }
                object objVirtualQueueEnabled = Utilities.executeScalar(cmdText, new SqlParameter("@TrxId", trxId));
                if (objVirtualQueueEnabled != null && objVirtualQueueEnabled != DBNull.Value)
                    IsVirtualQueueEnabled = true;
                log.LogMethodExit();
            }

            /// <summary>
            /// Populate TrxProductSummary
            /// </summary>
            /// <param name="trxId">Transaction Id</param>
            /// <param name="showModifierLines">showModifierLines</param>
            /// <param name="splitId">Split Id</param>
            public void PopulateProductSummary(int trxId, int splitId, bool showModifierLines)
            {
                log.LogMethodEntry(trxId, splitId, showModifierLines);
                TrxProductSummary.Clear();
                string cmdText = string.Empty;
                if (splitId == -1 || (splitId != -1 && splitCnt != -1))
                {
                    cmdText = @"declare @bookingTrx bit = (select top 1 1 from bookings where trxid = @TrxId);
                                   with n(lineId, ParentLIneId, Level) as
	                                (select lineId, ParentLIneId, 1 as Level
	                                  from trx_lines, @LineIdList List
	                                 where ParentlineId is null
	                                   and trxid = @TrxId
                                       and trx_lines.LineId = List.Id
	                                 union all
	                                 select l.lineId, l.ParentLIneId, n.Level + 1
	                                  from trx_lines l, n, @LineIdList List
	                                 where l.ParentLIneId = n.Lineid
	                                   and l.trxid = @TrxId
                                       and l.LineId = List.Id),
                                  productgroup( productId, cnt) as
                                (select  product_id, count(distinct parentlineId)
                                 from trx_lines, @LineIdList List
                                 where trxid= @TrxId
                                 and parentlineId is not null
                                 and cancelledTime is null
                                 and trx_lines.LineId = List.Id
                                 group by product_id
                                 having count(distinct parentlineId) > 1)
                                    SELECT l.trxid, 
                                        l.PRODUCT_ID, 
	                                    ISNULL(STUFF(( SELECT ' ' + (SELECT TOP 1 code FROM (SELECT discount_id, (case rownumber % 5 
								   when 0 then '$ '
								   when 1 then '* '
								   when 2 then '^ '
								   when 3 then '# '
								   when 4 then '@ '
								   else ''
								   end) code
								   FROM(
	                                      SELECT  discount_id, ROW_NUMBER() over (order by discount_id asc) rownumber
	                                      FROM TrxDiscounts, discounts
	                                      WHERE TrxDiscounts.DiscountId = discounts.discount_id AND TrxDiscounts.TrxId = l.TrxId
	                                      GROUP BY discount_id)A)B
	                                      WHERE discount_id = TrxDiscounts.DiscountId )
                                          FROM TrxDiscounts
	                                      WHERE TrxDiscounts.LineId = min(l.LineId) AND TrxDiscounts.TrxId = min(l.TrxId)
                                          FOR XML PATH('') 
	                                      ), 1, 1, ''), '')  + 
	                                    case when min(l.parentlineid) is not null
                                         and pt.product_type != 'CHECK-IN'
                                         and pt.product_type != 'CHECK-OUT' 
                                            then ISNULL((select top 1 replicate(' ', (Level-1)*3 + 1) 
										        from n where ParentLineId = min(l.ParentLineId)) + N'└ ', '')
                                            else '' end  
                                                + case when l.ProductDescription is not null
						                                then l.ProductDescription
						                                else p.product_name
					                                end
                                                + min(case when pt.product_type = 'LOCKER' and la.lockername is not null
                                                        then '-Locker:' + lockername
                                                        when pt.product_type = 'LOCKER' and la.lockername is null
                                                        then '-Locker:Free Mode'
                                                        else ''
                                                    end)
				                                + min(case when pt.product_type = 'ATTRACTION' and ATB.productDetails is not null
                                                        then atb.productDetails
                                                        else ''
                                                    end) product_name, 
	                                    l.price, 
	                                    ISNULL(t.tax_percentage, 0) tax_percentage, 
	                                    l.price * sum(quantity) PreTaxAmount, 
	                                    l.price * isnull(min(l.tax_percentage),0)/100 * sum(quantity) Tax,
	                                    sum(l.price * (1 + isnull(case when l.tax_percentage = 0 and l.TrxProfileId is not null
								                                        then (ISNULL(linetax.tax_percentage,0))
										                                else l.tax_percentage
										                                end
								                                        ,0)/100))/sum(quantity) AmountInclTax,
	                                    sum(l.amount) amount,
	                                    sum(l.amount + case when l.tax_percentage = 0 and l.trxProfileId is not null
							                                then l.price * (isnull(linetax.tax_percentage,0)/100) * l.quantity
							                                else 0
							                                end) TotalAmountInclTax,
	                                    t.tax_name,
	                                    ISNULL(p.HsnSacCode, '') HSNCode, 
	                                    SUM(QUANTITY) Quantity, 
	                                    min(case when @bookingTrx = 1
										     then ''
											 else " +
                                          (showModifierLines ?
                                          @" CARD_NUMBER end) " : @" '' end) ") + @" card_number, 
	                                    min(case when pt.CardSale = 'Y' then 'Card' else 'Manual' end) ProductType,
	                                    min(ISNULL(l.ParentLineId, -1)) ParentLineId,
	                                    ISNULL(remarks, '') remarks,
	                                    min(l.lineid) DBLineId,
										min(case when @bookingTrx = 1
										     then l.lineId
											 else case when l.parentLineId IS NULL then l.lineId
														 when l.parentlineId = -1 then l.lineId
														 else cast(l.parentlineId as numeric(10,4)) + (l.parentlineId/cast(l.lineId * 100 as numeric(10,4))) 
											     end
											  end) sortableLineId,
								        sum(l.Price * (1 - isnull(tdamount.discountPercentage, 0))) discountedAmount
                                    from trx_lines l 
												outer apply (select sum(td.discountId) discountCount
											 from TrxDiscounts td
											 where td.lineId = l.lineId and td.trxId = l.trxId
											 group by td.lineId)td
											 left outer join (select cnt, productid from productgroup) productgroup on productid = l.product_id
                                               inner join @LineIdList List On l.LineId = List.Id                                               
											   left outer join (select sum(discountPercentage)/100.0 discountPercentage, 
                                                                      sum(discountAmount) discAmt, trxid, lineId 
											                      from TrxDiscounts
																 where trxid = @TrxId 
																group by trxid, lineid) tdamount on l.trxid = tdamount.TrxId and l.LineId = tdamount.LineId
                                               left outer join tax linetax on l.tax_id = linetax.tax_id
                                                    left outer join (SELECT lockername, la.trxid, la.trxLineId
                                                                        from LockerAllocation la, lockers l
                                                                        WHERE la.trxid = @TrxId 
                                                                        AND l.lockerId = la.lockerId) la
                                                                    on la.trxId = l.trxId
                                                                and la.trxLineId = l.LineId
					                                LEFT OUTER JOIN (SELECT atb.trxid, atb.lineid, ap.PlayName + 
						                                                                            ':' + replace(Convert(varchar(11), da.ScheduleDateTime, 106), ' ', '-') + ' ' + LTRIM(RIGHT(CONVERT(VARCHAR(20), da.ScheduleDateTime, 100), 7)) +
																	                                ':' + ISNULL(ats.SeatName, '') productDetails, atb.ExpiryDate
										                                FROM AttractionBookings atb
											                                left outer join (SELECT atb.BookingId, stuff((select ', '+ cast(SeatName as nvarchar(250))
																                                FROM FacilitySeats fs, AttractionBookingSeats atbs
																                                WHERE fs.seatId = atbs.SeatId 
																	                                and atbs.BookingId = atb.BookingId
																                                GROUP BY SeatName
																                                FOR XML PATH('')
																                                )
																                                , 1, 1, '')	SeatName	 
																                                from AttractionBookings atb
																                                WHERE ATB.TRXID = @TrxId
																                                ) ats on atb.BookingId = ats.BookingId,
											                                AttractionPlays ap,
                                                                            DayAttractionSchedule da 
									                                WHERE atb.DayAttractionScheduleId = da.DayAttractionScheduleId and da.AttractionPlayId = ap.AttractionPlayId) atb on atb.trxid = l.trxid and atb.LineId = l.LineId and (atb.ExpiryDate is null or atb.ExpiryDate > getdate())
					                                , 
                                        product_type pt, products p left outer join tax t on p.tax_id = t.tax_id
                                    where l.trxid = @TrxId 
                                    and l.product_id = p.product_id
	                                and l.CancelledBy is null
                                    and pt.product_type NOT IN ( 'LOYALTY','SERVICECHARGE','GRATUITY')
                                    and pt.product_type_id = p.product_type_id
                                group by l.trxid, l.PRODUCT_ID, l.productDescription, pt.product_type, p.product_name, 
			                                l.price, t.tax_percentage, l.amount, t.tax_name, 
                                            p.HsnSacCode, 
                                            " +
                                          (showModifierLines ?
                                          @" case when @bookingTrx = 1
										     then '1'
											 else CARD_NUMBER end, " : @" ") +
                                          (showModifierLines ?
                                          @" case when @bookingTrx = 1
										     then 1
                                             else (case when ISNULL(productgroup.cnt, 1) > 1
											      then l.ParentLineId
											      else 1 end)
                                             end, "
                                           : @" ")
                                          + @"  remarks, lockername, atb.productdetails, td.discountCount
                                order by sortableLineId -- min(l.LineId)
                              ";
                }
                else
                {
                    if (splitId != -1 && splitLineId != "-1")
                    {
                        cmdText = @"declare @bookingTrx bit = (select top 1 1 from bookings where trxid = @TrxId);
                                    with n(lineId, ParentLIneId, Level) as
	                                (select lineId, ParentLIneId, 1 as Level
	                                  from trx_lines, @LineIdList List
	                                 where ParentlineId is null
	                                   and trxid = @TrxId
                                       and trx_lines.LineId = List.Id
	                                 union all
	                                 select l.lineId, l.ParentLIneId, n.Level + 1
	                                  from trx_lines l, n, @LineIdList List
	                                 where l.ParentLIneId = n.Lineid
	                                   and l.trxid = @TrxId
                                       and l.LineId = List.Id),
                                      productgroup( productId, cnt) as
                                    (select  product_id, count(distinct parentlineId)
                                     from trx_lines, @LineIdList List
                                     where trxid= @TrxId
                                        and trx_lines.LineId = List.Id
                                        and parentlineId is not null
                                        and cancelledTime is null
                                    group by product_id
                                    having count(distinct parentlineId) > 1)
                                    SELECT l.trxid, 
                                            l.PRODUCT_ID, 
	                                        ISNULL(STUFF(( SELECT ' ' + (SELECT TOP 1 code FROM (SELECT discount_id, (case rownumber % 5 
								                                   when 0 then '$ '
								                                   when 1 then '* '
								                                   when 2 then '^ '
								                                   when 3 then '# '
								                                   when 4 then '@ '
								                                   else ''
								                                   end) code
								                                   FROM(
	                                  SELECT  discount_id, ROW_NUMBER() over (order by discount_id asc) rownumber
	                                  FROM TrxDiscounts, discounts
	                                  WHERE TrxDiscounts.DiscountId = discounts.discount_id AND TrxDiscounts.TrxId = l.TrxId
	                                  GROUP BY discount_id)A)B
	                                  WHERE discount_id = TrxDiscounts.DiscountId )
                                      FROM TrxDiscounts
	                                  WHERE TrxDiscounts.LineId = min(l.LineId) AND TrxDiscounts.TrxId = min(l.TrxId)
                                      FOR XML PATH('') 
	                                  ), 1, 1, ''), '')  + 
	                                        case when min(l.parentlineid) is not null
                                                  and pt.product_type != 'CHECK-IN'
                                                  and pt.product_type != 'CHECK-OUT' 
                                                 then ISNULL((select top 1 replicate(' ', (Level-1)*3 + 1) 
										                 from n where ParentLineId = min(l.ParentLineId)) + N'└ ', '') 
                                                 else '' end  
                                                    + case when l.ProductDescription is not null
						                                    then l.ProductDescription
						                                    else p.product_name
					                                    end
                                                    + min(case when pt.product_type = 'LOCKER' and la.lockername is not null
                                                            then '-Locker:' + lockername
                                                            when pt.product_type = 'LOCKER' and la.lockername is null
                                                            then '-Locker:Free Mode'
                                                            else ''
                                                        end)
				                                    + min(case when pt.product_type = 'ATTRACTION' and ATB.productDetails is not null
                                                            then atb.productDetails
                                                            else ''
                                                        end) product_name, 
	                                        l.price, 
	                                        ISNULL(t.tax_percentage, 0) tax_percentage, 
	                                        l.price * sum(quantity) PreTaxAmount, 
	                                        l.price * isnull(min(l.tax_percentage),0)/100 * sum(quantity) Tax,
	                                        sum(l.price * (1 + isnull(case when l.tax_percentage = 0 and l.TrxProfileId is not null
								                                            then (ISNULL(linetax.tax_percentage,0))
										                                    else l.tax_percentage
										                                    end
								                                            ,0)/100))/sum(quantity) AmountInclTax,
	                                        sum(l.amount) amount,
	                                        sum(l.amount + case when l.tax_percentage = 0 and l.trxProfileId is not null
							                                    then l.price * (isnull(linetax.tax_percentage,0)/100) * l.quantity
							                                    else 0
							                                    end) TotalAmountInclTax,
	                                        t.tax_name,
	                                        ISNULL(p.HsnSacCode, '') HSNCode, 
	                                        SUM(QUANTITY) Quantity, 
	                                        min(case when @bookingTrx = 1
										         then ''
											     else " +
                                              (showModifierLines ?
                                              @" CARD_NUMBER end) " : @" '' end) ") + @" card_number, --isnull(CARD_NUMBER, '')
	                                        min(case when pt.CardSale = 'Y' then 'Card' else 'Manual' end) ProductType,
	                                        min(ISNULL(l.ParentLineId, -1)) ParentLineId,
	                                        ISNULL(remarks, '') remarks,
	                                        min(l.lineid) DBLineId,
										    min(case when @bookingTrx = 1
										         then l.lineId
											     else case when l.parentLineId IS NULL then l.lineId
														     when l.parentlineId = -1 then l.lineId
														     else cast(l.parentlineId as numeric(10,4)) + (l.parentlineId/cast(l.lineId * 100 as numeric(10,4))) 
											         end
											      end) sortableLineId,
								            sum(l.Price * (1 - isnull(tdamount.discountPercentage, 0))) discountedAmount
                                        from trx_lines l  
                                              outer apply (select sum(td.discountId) discountCount
											 from TrxDiscounts td
											 where td.lineId = l.lineId and td.trxId = l.trxId
											 group by td.lineId)td
											 left outer join (select cnt, productid from productgroup) productgroup on productid = l.product_id
                                               inner join @LineIdList List On l.LineId = List.Id                                               
											   left outer join (select sum(discountPercentage)/100.0 discountPercentage, 
                                                                      sum(discountAmount) discAmt, trxid, lineId 
											                      from TrxDiscounts
																 where trxid = @TrxId 
																group by trxid, lineid) tdamount on l.trxid = tdamount.TrxId and l.LineId = tdamount.LineId
                                               left outer join tax linetax on l.tax_id = linetax.tax_id
                                                        left outer join (SELECT lockername, la.trxid, la.trxLineId
                                                                            from LockerAllocation la, lockers l
                                                                            WHERE la.trxid = @TrxId 
                                                                            AND l.lockerId = la.lockerId) la
                                                                        on la.trxId = l.trxId
                                                                    and la.trxLineId = l.LineId
					                                    LEFT OUTER JOIN (SELECT atb.trxid, atb.lineid, ap.PlayName + 
						                                                                                ':' + replace(Convert(varchar(11), da.ScheduleDateTime, 106), ' ', '-') + ' ' + LTRIM(RIGHT(CONVERT(VARCHAR(20), da.ScheduleDateTime, 100), 7)) +
																	                                    ':' + ISNULL(ats.SeatName, '') productDetails, atb.ExpiryDate
										                                    FROM AttractionBookings atb
											                                    left outer join (SELECT atb.BookingId, stuff((select ', '+ cast(SeatName as nvarchar(250))
																                                    FROM FacilitySeats fs, AttractionBookingSeats atbs
																                                    WHERE fs.seatId = atbs.SeatId 
																	                                    and atbs.BookingId = atb.BookingId
																                                    GROUP BY SeatName
																                                    FOR XML PATH('')
																                                    )
																                                    , 1, 1, '')	SeatName	 
																                                    from AttractionBookings atb
																                                    WHERE ATB.TRXID = @TrxId
                                                                                                       and ATB.lineId in (" + splitLineId + @")
																                                    ) ats on atb.BookingId = ats.BookingId,
											                                    AttractionPlays ap,
                                                                                DayAttractionSchedule da 
									                                    WHERE atb.DayAttractionScheduleId = da.DayAttractionScheduleId and da.AttractionPlayId = ap.AttractionPlayId) atb on atb.trxid = l.trxid and atb.LineId = l.LineId and (atb.ExpiryDate is null or atb.ExpiryDate > getdate())
					                                    , 
                                            product_type pt, products p left outer join tax t on p.tax_id = t.tax_id
                                        where l.trxid = @TrxId 
                                        and l.lineId in (" + splitLineId + @")
                                        and l.product_id = p.product_id
	                                    and l.CancelledBy is null
                                        and pt.product_type NOT IN ( 'LOYALTY','SERVICECHARGE','GRATUITY')
                                        and pt.product_type_id = p.product_type_id
                                    group by l.trxid, l.PRODUCT_ID, l.productDescription, pt.product_type, p.product_name, 
			                                    l.price, t.tax_percentage, l.amount, t.tax_name, 
                                                p.HsnSacCode, 
                                           " +
                                          (showModifierLines ?
                                          @" case when @bookingTrx = 1
                                             then '1'
											 else CARD_NUMBER end, " : @" ") +
                                          (showModifierLines ?
                                          @" case when @bookingTrx = 1
										     then 1
                                             else (case when ISNULL(productgroup.cnt, 1) > 1
											      then l.ParentLineId
											      else 1 end)
                                             end, "
                                           : @" ")
                                         +
                                                 @" remarks, lockername, atb.productdetails, td.discountCount
                                    order by sortableLineId --min(l.LineId)
                                   ";
                    }
                }
                List<int> validTransactionLineIdList = trx.TrxLines.Where(x => x.LineValid).Select(x => x.DBLineId).ToList();
                SqlParameter validListSqlParameter = GetValidLineListSQLParameter(validTransactionLineIdList);
                DataTable dtTrxProductSummary = Utilities.executeDataTable(cmdText, new SqlParameter("@TrxId", trxId), validListSqlParameter);

                for (int i = 0; i < dtTrxProductSummary.Rows.Count; i++)
                {
                    ProductInfo pi = new ProductInfo();
                    pi.DBLineId = Convert.ToInt32(dtTrxProductSummary.Rows[i]["DBLineId"]);
                    pi.productId = Convert.ToInt32(dtTrxProductSummary.Rows[i]["product_id"]);
                    pi.hsnSacCode = dtTrxProductSummary.Rows[i]["HSNCode"].ToString();
                    pi.productName = dtTrxProductSummary.Rows[i]["product_name"].ToString();
                    pi.productType = dtTrxProductSummary.Rows[i]["ProductType"].ToString();
                    pi.cardNumber = dtTrxProductSummary.Rows[i]["card_number"].ToString();
                    pi.remarks = dtTrxProductSummary.Rows[i]["remarks"].ToString();
                    pi.taxName = dtTrxProductSummary.Rows[i]["tax_name"].ToString();
                    pi.taxPercentage = Convert.ToDouble(dtTrxProductSummary.Rows[i]["tax_percentage"]);
                    pi.tax = splitCnt == -1 ? Convert.ToDouble(dtTrxProductSummary.Rows[i]["Tax"]) : Convert.ToDouble(dtTrxProductSummary.Rows[i]["Tax"]) / splitCnt;
                    pi.amount = splitCnt == -1 ? Convert.ToDouble(dtTrxProductSummary.Rows[i]["Amount"]) : Convert.ToDouble(dtTrxProductSummary.Rows[i]["Amount"]) / splitCnt;
                    pi.TotalAmountInclTax = splitCnt == -1 ? Convert.ToDouble(dtTrxProductSummary.Rows[i]["TotalAmountInclTax"]) : Convert.ToDouble(dtTrxProductSummary.Rows[i]["TotalAmountInclTax"]) / splitCnt;
                    pi.amountInclTax = splitCnt == -1 ? Convert.ToDouble(dtTrxProductSummary.Rows[i]["amountInclTax"]) : Convert.ToDouble(dtTrxProductSummary.Rows[i]["amountInclTax"]) / splitCnt;
                    pi.cancelledLine = false;
                    pi.printEligible = true;
                    pi.preTaxAmount = splitCnt == -1 ? Convert.ToDouble(dtTrxProductSummary.Rows[i]["PreTaxAmount"]) : Convert.ToDouble(dtTrxProductSummary.Rows[i]["PreTaxAmount"]) / splitCnt;
                    pi.price = Convert.ToDouble(dtTrxProductSummary.Rows[i]["price"]);
                    pi.quantity = splitCnt == -1 ? Convert.ToDecimal(dtTrxProductSummary.Rows[i]["Quantity"]) : Convert.ToDecimal(dtTrxProductSummary.Rows[i]["Quantity"]) / splitCnt;
                    pi.kotQuantity = 0;
                    pi.lineType = Convert.ToInt32(dtTrxProductSummary.Rows[i]["ParentLineId"]) == -1 ? "P" : "C";
                    pi.parentLineId = Convert.ToInt32(dtTrxProductSummary.Rows[i]["ParentLineId"]);
                    pi.amountInclDiscount = splitCnt == -1 ? Convert.ToDecimal(dtTrxProductSummary.Rows[i]["discountedAmount"]) : Convert.ToDecimal(dtTrxProductSummary.Rows[i]["discountedAmount"]) / splitCnt;
                    TrxProductSummary.Add(pi);
                }
                //End Product Summary
                if (OriginalTrxInfo != null && OriginalTrxInfo.OriginalTrxId > -1)
                {
                    if (TrxProductSummary != null && TrxProductSummary.Count > 0)
                    {
                        TrxProductSummary = TrxProductSummary.Select(x => { x.amount = x.amount * -1; return x; }).ToList();
                        TrxProductSummary = TrxProductSummary.Select(x => { x.tax = x.tax * -1; return x; }).ToList();
                        TrxProductSummary = TrxProductSummary.Select(x => { x.amountInclTax = x.amountInclTax * -1; return x; }).ToList();
                        TrxProductSummary = TrxProductSummary.Select(x => { x.preTaxAmount = x.preTaxAmount * -1; return x; }).ToList();
                        TrxProductSummary = TrxProductSummary.Select(x => { x.TotalAmountInclTax = x.TotalAmountInclTax * -1; return x; }).ToList();
                        TrxProductSummary = TrxProductSummary.Select(x => { x.quantity = x.quantity * -1; return x; }).ToList();
                        TrxProductSummary = TrxProductSummary.Select(x => { x.kotQuantity = x.kotQuantity * -1; return x; }).ToList();
                    }
                }
                log.LogMethodExit(TrxProductSummary);
            }

            /// <summary>
            /// Method to populate Transaction customer information 
            /// in case Primary card is not present. Called during print process
            /// </summary>
            /// <param name="trxId"></param>
            /// <param name="passPhrase"></param> 
            public void PopulateCustomerInfo(int trxId, string passPhrase)
            {
                DataTable dtCustomer = Utilities.executeDataTable(@"SELECT p.FirstName customer_name,
                                                                               p.LastName last_name,
                                                                               CONVERT(NVARCHAR(MAX),DECRYPTBYPASSPHRASE(@PassphraseEnteredByUser, p.Line1)) address1,
                                                                               CONVERT(NVARCHAR(MAX),DECRYPTBYPASSPHRASE(@PassphraseEnteredByUser, p.Line2)) address2,
                                                                               CONVERT(NVARCHAR(MAX),DECRYPTBYPASSPHRASE(@PassphraseEnteredByUser, p.Line3)) address3,
	                                                                           p.city City,
	                                                                           p.StateName  state,
	                                                                           p.PostalCode pin,
	                                                                           CONVERT(NVARCHAR(MAX),DECRYPTBYPASSPHRASE(@PassphraseEnteredByUser,p.contact_phone1)) contact_phone1 ,
                                                                               CONVERT(NVARCHAR(MAX),DECRYPTBYPASSPHRASE(@PassphraseEnteredByUser,p.contact_phone2)) contact_phone2,
	                                                                           CONVERT(NVARCHAR(MAX),DECRYPTBYPASSPHRASE(@PassphraseEnteredByUser,p.UniqueId)) Unique_ID,
	                                                                           p.PhotoURL PhotoFileName,
                                                                               CONVERT(NVARCHAR(MAX),DECRYPTBYPASSPHRASE(@PassphraseEnteredByUser,p.TaxCode)) TaxCode
                                                                        FROM Trx_Header h, customers C left outer join ((SELECT Profile.*,  
                                                                                                                                Address.Line1, Address.Line2, Address.Line3,Address.City, Address.StateName, Address.CountryName, Address.PostalCode ,
                                                                                                                                ContactPhone1.Attribute1 contact_phone1, 
                                                                                                                                ContactPhone2.Attribute1 contact_phone2 
                                                                                                                           FROM Profile
                                                                                                                                LEFT OUTER JOIN( SELECT Address.* , State.Description StateName, Country.CountryName, ROW_NUMBER() OVER(PARTITION BY Address.ProfileId ORDER BY Address.LastUpdateDate DESC) rnk
                                                                                                                                                 FROM Address 
                                                                                                                                                 LEFT OUTER JOIN State ON State.StateId = Address.StateId
                                                                                                                                                 LEFT OUTER JOIN Country ON Country.CountryId = Address.CountryId
                                                                                                                                                 WHERE Address.IsActive = 1) Address ON Address.ProfileId = Profile.Id AND Address.rnk = 1
                                                                                                                                LEFT OUTER JOIN (SELECT Contact.* , DENSE_RANK() OVER(PARTITION BY Contact.ProfileId ORDER BY Contact.LastUpdateDate DESC, Contact.Id DESC) rnk
                                                                                                                                                 FROM Contact
                                                                                                                                                 INNER JOIN ContactType ON ContactType.Id = Contact.ContactTypeId
                                                                                                                                                 WHERE Contact.IsActive = 1 AND ContactType.Name = 'PHONE') ContactPhone1 ON ContactPhone1.ProfileId = Profile.Id AND ContactPhone1.rnk = 1
                                                                                                                                LEFT OUTER JOIN (SELECT Contact.* , DENSE_RANK() OVER(PARTITION BY Contact.ProfileId ORDER BY Contact.LastUpdateDate DESC, Contact.Id DESC) rnk
                                                                                                                                                 FROM Contact
                                                                                                                                                INNER JOIN ContactType ON ContactType.Id = Contact.ContactTypeId
                                                                                                                                                 WHERE Contact.IsActive = 1 AND ContactType.Name = 'PHONE') ContactPhone2 ON ContactPhone2.ProfileId = Profile.Id AND ContactPhone2.rnk = 2
                                                                                                                         )) p on c.profileId = p.id
                                                                       WHERE h.trxId = @TrxId
                                                                         AND h.customerId = c.customer_id",
                                                       new SqlParameter("@TrxId", trxId), new SqlParameter("@PassphraseEnteredByUser", passPhrase));
                if (dtCustomer.Rows.Count > 0)
                {
                    PrimaryCustomerName = dtCustomer.Rows[0]["customer_name"].ToString() + " " + dtCustomer.Rows[0]["last_name"].ToString();
                    Address = dtCustomer.Rows[0]["address1"].ToString() + " " + dtCustomer.Rows[0]["address2"].ToString() + " " + dtCustomer.Rows[0]["address3"].ToString();
                    City = dtCustomer.Rows[0]["City"].ToString();
                    State = dtCustomer.Rows[0]["state"].ToString();
                    Pin = dtCustomer.Rows[0]["pin"].ToString();
                    UniqueId = dtCustomer.Rows[0]["Unique_ID"].ToString();
                    CustomerTaxCode = dtCustomer.Rows[0]["TaxCode"].ToString();
                    Phone = dtCustomer.Rows[0]["contact_phone1"] + (dtCustomer.Rows[0]["contact_phone2"].ToString().Trim() == "" ? "" : " / ") + dtCustomer.Rows[0]["contact_phone2"].ToString();
                    PhotoFileName = dtCustomer.Rows[0]["PhotoFileName"].ToString();
                    TrxCustomerName = dtCustomer.Rows[0]["customer_name"].ToString() + " " + dtCustomer.Rows[0]["last_name"].ToString();
                    TrxCustomerPhone = dtCustomer.Rows[0]["contact_phone1"] + (dtCustomer.Rows[0]["contact_phone2"].ToString().Trim() == "" ? "" : " / ") + dtCustomer.Rows[0]["contact_phone2"].ToString();
                }
            }

            /// <summary>
            /// Method to populate Transaction Waiver information 
            /// Called during print process
            /// </summary>
            /// <param name="trxId"></param>
            /// <param name="passPhrase"></param> 
            public void PopulateTrxWaiverInfo(int trxId, string passPhrase)
            {
                log.LogMethodEntry(trxId, "passPhrase");
                TrxWaiverList.Clear();
                DataTable dtTrxWaiver = Utilities.executeDataTable(@"SELECT l.lineid TrxLineId,
                                                                             l.product_id ProductId,
		                                                                     pt.product_type ProductType,
		                                                                     ISNULL((select top 1 'Y' from bookings where trxid = @trxid), 'N') BookingExists,
                                                                             c.customer_name+ ' '+ isnull(c.last_name, '') CustName
                                                                                  , ISNULL(c.contact_phone1, '') CustPhoneNumber
			                                                                      , ISNULL(c.email, '') CustEmail
			                                                                      , ISNULL(c.membershipName, '') CustMembership
			                                                                      ,ISNULL(customProSkill.ValueChar, '') CustProSkill
			                                                                      , ISNULL(customWinBy.ValueChar, '') ProductWinBy
			                                                                      , ISNULL(customRaceBy.ValueChar, '') ProductRaceBy
			                                                                      , ISNULL(customLapOrMinutes.ValueChar, '') ProductLapDuration
			                                                                      , ISNULL(customEvent.ValueChar, '') ProductIsEvent
			                                                                      , p.product_name ProductName
			                                                                      , ISNULL(atb.FacilityMapName, '') FacilityMapName
			                                                                      , ISNULL(atb.FacilityName, '') FacilityName
			                                                                      , ISNULL(atb.ScheduleDateTime, '') ScheduleTime
                                                                        FROM CustomerView(@PassphraseEnteredByUser) c
	                                                                              left outer join (select name, ValueChar, CustomDataSetId
		                                                                                             from CustomDataView cdv 
						                                                                            where cdv.Applicability='Customer'
		                                                                                                                         and cdv.Name = 'ProSkill') customProSkill
					                                                                           on customProSkill.CustomDataSetId = c.CustomDataSetId,
                                                                                (select csw.signedFor, ws.trxId, ws.LineId
					                                                               from WaiversSigned ws, CustomerSignedWaiver csw
					                                                              where ws.IsActive = 1
                                                                                    AND ws.CustomerSignedWaiverId = csw.CustomerSignedWaiverId
						                                                            and ws.trxid = @trxId
					                                                              group by csw.signedFor, ws.trxid, ws.lineId) ws,
			                                                                    trx_header h,
			                                                                    trx_lines l
			                                                                        LEFT OUTER JOIN (SELECT  FM.FacilityMapName, FACILITY.FacilityName,
				                                                                                             da.ScheduleDateTime,
				                                                                                             atb.trxid, atb.lineid, ap.PlayName + 
						                                                                                                                                            ':' + replace(Convert(varchar(11), da.ScheduleDateTime, 106), ' ', '-') + ' ' + LTRIM(RIGHT(CONVERT(VARCHAR(20), da.ScheduleDateTime, 100), 7)) +
																	                                                                                                ':' + ISNULL(ats.SeatName, '') productDetails, atb.ExpiryDate
									                                                                    FROM FacilityMap fm
									                                                                         INNER JOIN (SELECT fmd.FacilityMapId, CIF.FacilityName
										                                                                             FROM FacilityMapDetails FMD, CheckInFacility CIF
										                                                                            WHERE FMD.FacilityId = CIF.FacilityId
												                                                                      AND FMD.IsActive = 1) Facility on fm.FacilityMapId = facility.FacilityMapId,
									                                                                         AttractionBookings atb
										                                                                     left outer join (SELECT atb.BookingId, stuff((select ', '+ cast(SeatName as nvarchar(250))
															                                                                    FROM FacilitySeats fs, AttractionBookingSeats atbs
															                                                                    WHERE fs.seatId = atbs.SeatId 
																                                                                    and atbs.BookingId = atb.BookingId
															                                                                    GROUP BY SeatName
															                                                                    FOR XML PATH('')
															                                                                    )
															                                                                    , 1, 1, '')	SeatName	 
															                                                                    from AttractionBookings atb
															                                                                    WHERE ATB.TRXID = @TrxId
															                                                                    ) ats on atb.BookingId = ats.BookingId,
										                                                                      AttractionPlays ap,
                                                                                                              DayAttractionSchedule da 
								                                                                       WHERE atb.DayAttractionScheduleId = da.DayAttractionScheduleId and da.AttractionPlayId = ap.AttractionPlayId
								                                                                         AND da.FacilityMapId = FM.FacilityMapId AND (atb.ExpiryDate IS NULL or atb.ExpiryDate >= getdate())) atb 
																	on atb.trxid = l.trxid and atb.LineId = l.LineId,
			                                                                        product_type pt,
				                                                                    products p
			                                                                        LEFT OUTER JOIN (select name, ValueChar, CustomDataSetId
		                                                                                             from CustomDataView cdv 
						                                                                            where cdv.Applicability='PRODUCT'
								                                                                      and cdv.Name = 'WinBy') customWinBy
							                                                                    on customWinBy.CustomDataSetId = p.CustomDataSetId
			                                                                        LEFT OUTER JOIN (select name, ValueChar, CustomDataSetId
		                                                                                             from CustomDataView cdv 
						                                                                            where cdv.Applicability='PRODUCT'
								                                                                      and cdv.Name = 'RaceBy') customRaceBy
							                                                                    on customRaceBy.CustomDataSetId = p.CustomDataSetId
			                                                                        LEFT OUTER JOIN (select name, ValueChar, CustomDataSetId
		                                                                                             from CustomDataView cdv 
						                                                                            where cdv.Applicability='PRODUCT'
								                                                                      and cdv.Name = 'LapsOrMinutes') customLapOrMinutes
							                                                                    on customLapOrMinutes.CustomDataSetId = p.CustomDataSetId
			                                                                        LEFT OUTER JOIN (select name, ValueChar, CustomDataSetId
		                                                                                             from CustomDataView cdv 
						                                                                            where cdv.Applicability='PRODUCT'
								                                                                      and cdv.Name = 'IsEvent') customEvent
							                                                                    on customEvent.CustomDataSetId = p.CustomDataSetId
                                                                        WHERE h.trxid = @trxid
	                                                                      AND h.trxid = l.trxid
	                                                                      AND ws.TrxId = h.trxid
	                                                                      AND ws.LineId = l.lineid
	                                                                      AND l.product_id = p.product_id
	                                                                      AND p.product_type_id = pt.product_type_id
	                                                                      AND l.CancelledTime IS NULL
                                                                          AND ws.SignedFor = c.customer_id",
                                                       new SqlParameter("@TrxId", trxId), new SqlParameter("@PassphraseEnteredByUser", passPhrase));
                for (int i = 0; i < dtTrxWaiver.Rows.Count; i++)
                {
                    TrxWaiverInfo twi = new TrxWaiverInfo();
                    twi.TrxLineId = Convert.ToInt32(dtTrxWaiver.Rows[i]["TrxLineId"]);
                    twi.ProductId = Convert.ToInt32(dtTrxWaiver.Rows[i]["ProductId"]);
                    twi.ProductType = dtTrxWaiver.Rows[i]["ProductType"].ToString();
                    twi.BookingExists = dtTrxWaiver.Rows[i]["BookingExists"].ToString();
                    twi.CustName = dtTrxWaiver.Rows[i]["CustName"].ToString();
                    twi.CustPhoneNumber = dtTrxWaiver.Rows[i]["CustPhoneNumber"].ToString();
                    twi.CustEmail = dtTrxWaiver.Rows[i]["CustEmail"].ToString();
                    twi.MembershipName = dtTrxWaiver.Rows[i]["CustMembership"].ToString();
                    twi.CustProSkill = dtTrxWaiver.Rows[i]["CustProSkill"].ToString();
                    twi.ProductWinBy = dtTrxWaiver.Rows[i]["ProductWinBy"].ToString();
                    twi.ProductRaceBy = dtTrxWaiver.Rows[i]["ProductRaceBy"].ToString();
                    twi.ProductLapDuration = dtTrxWaiver.Rows[i]["ProductLapDuration"].ToString();
                    twi.ProductIsEvent = dtTrxWaiver.Rows[i]["ProductIsEvent"].ToString();
                    twi.ProductName = dtTrxWaiver.Rows[i]["ProductName"].ToString();
                    twi.FacilityMapName = dtTrxWaiver.Rows[i]["FacilityMapName"].ToString();
                    twi.FacilityName = dtTrxWaiver.Rows[i]["FacilityName"].ToString();
                    twi.ScheduleTime = (String.IsNullOrEmpty(dtTrxWaiver.Rows[i]["ScheduleTime"].ToString()) ? DateTime.MinValue : Convert.ToDateTime(dtTrxWaiver.Rows[i]["ScheduleTime"]));
                    log.LogVariableState("TrxWaiverClass", twi);
                    TrxWaiverList.Add(twi);
                }
                log.LogMethodExit();
            }
        }

        //Begin Modification - 24-Nov-2016 - for Avoiding multiple reprint transaction
        public bool CheckReprintAllowed(int transactionId)
        {
            log.LogMethodEntry(transactionId);
            bool isAllowed = true;
            if (ParafaitDefaultContainerList.GetParafaitDefault<bool>(Utilities.ExecutionContext, "ALLOW_ONE_TRANSACTION_REPRINT_WITH_APPROVAL"))
            {
                int reprintCountValue = Convert.ToInt32(Utilities.executeScalar(@"select ISNULL(ReprintCount, 0) as ReprintCount 
                                                                                    from trx_Header where TrxId = @trxId",
                                                                                new SqlParameter("@trxId", transactionId)));

                if (reprintCountValue < 1)
                {
                    isAllowed = true;
                }
                else
                {
                    isAllowed = false;
                }
            }
            log.LogMethodExit(isAllowed);
            return isAllowed;
        }


        public bool CanAllowFirstTransactionReprintWithoutApproval(int transactionId)
        {
            log.LogMethodEntry(transactionId);
            bool isAllowed = false;
            if (ParafaitDefaultContainerList.GetParafaitDefault<bool>(Utilities.ExecutionContext, "ALLOW_FIRST_TRANSACTION_REPRINT_WITHOUT_APPROVAL"))
            {
                int reprintCountValue = Convert.ToInt32(Utilities.executeScalar(@"select ISNULL(ReprintCount, 0) as ReprintCount 
                                                                                    from trx_Header where TrxId = @trxId",
                                                                                new SqlParameter("@trxId", transactionId)));

                if (reprintCountValue < 1)
                {
                    isAllowed = true;
                }
            }
            log.LogMethodExit(isAllowed);
            return isAllowed;
        }

        //method to update Coupon used status into Merkle
        #region Merkle API Integration Coupon status update code block
        //public bool UpdateCouponStatus(string couponStatus, List<string> couponsToUpdate)
        //{
        //    log.LogMethodEntry(couponStatus, couponsToUpdate);

        //    bool retStatus = false;
        //    UpdateDetails couponUpdate = new UpdateDetails(Utilities);
        //    if (couponsToUpdate != null)
        //    {
        //        for (int d = 0; d < couponsToUpdate.Count; d++)
        //        {
        //            if (couponsToUpdate[d] != null)
        //            {
        //                retStatus = couponUpdate.Update(couponsToUpdate[d].ToString(), couponStatus);

        //                if (!retStatus)
        //                    Utilities.EventLog.logEvent("ParafaitDataTransfer", 'E', "Merkle Failed Updating Coupon status -" + couponStatus + " Coupon Number: " + couponsToUpdate[d].ToString(), "", "MerkleAPIIntegration", 1, "", "", Utilities.ParafaitEnv.LoginID, Utilities.ParafaitEnv.POSMachine, null);
        //            }
        //        }
        //    }
        //    log.LogMethodExit(retStatus);
        //    return retStatus;
        //}

        public List<string> GetCouponsList(int trxId)
        {
            log.LogMethodEntry(trxId);

            Transaction reversingTrx = new Transaction(Utilities);
            List<string> couponsList = new List<string>();
            if (Utilities.getParafaitDefaults("ENABLE_MERKLE_INTEGRATION").Equals("Y"))
            {
                reversingTrx = TransactionUtils.CreateTransactionFromDB(trxId, Utilities);
                if (reversingTrx != null)
                {
                    if (reversingTrx.DiscountApplicationHistoryDTOList != null && reversingTrx.DiscountApplicationHistoryDTOList.Count > 0)
                    {
                        var couponDiscountHistroryDTOList = reversingTrx.DiscountApplicationHistoryDTOList.FindAll(x => string.IsNullOrWhiteSpace(x.CouponNumber) == false);
                        foreach (var discountHistoryDTO in couponDiscountHistroryDTOList)
                        {
                            couponsList.Add(discountHistoryDTO.CouponNumber);
                        }
                    }
                }
            }

            log.LogMethodExit(couponsList);
            return couponsList;
        }
        #endregion


        /// <summary>
        /// Added on 27th March 2017 for getting today's product sale count
        /// </summary>
        /// <param name="productId"></param>
        /// <param name="trxDate"></param>
        /// <returns></returns>
        public int GetProductQuantity(int productId, DateTime trxDate)
        {
            log.LogMethodEntry(productId, trxDate);
            DateTime trxDateValue = (trxDate == DateTime.MinValue ? Utilities.getServerTime() : trxDate);
            log.LogVariableState("trxDateValue", trxDateValue);
            object productCount = Utilities.executeScalar(@"Select COUNT(tl.product_id) 
                                                              from trx_lines tl, trx_header th  
                                                             where th.trxId=tl.trxId and tl.amount >= 0
                                                               and tl.product_id = @productId 
                                                               and th.Status not in ('CANCELLED','SYSTEMABANDONED') 
                                                               and th.trxdate >= DATEADD(HOUR, 6, DATEADD(D, 0, DATEDIFF(D, 0, @trxDate))) 
                                                               and th.trxdate < 1 + DATEADD(HOUR, 6, DATEADD(D, 0, DATEDIFF(D, 0,  @trxDate)))  
                                                               and tl.CancelledBy is null", new SqlParameter[] { new SqlParameter("@productId", productId), new SqlParameter("@trxDate", trxDateValue) });

            if (productCount != null)
            {
                int returnValueNew = Convert.ToInt32(productCount);
                log.LogMethodEntry(returnValueNew);
                return returnValueNew;
            }

            log.LogMethodExit(0);
            return 0;
        }//end

        public void InsertTrxLogs(int trxId, int lineId, string loginId, string action, string description, SqlTransaction sqlTrx = null, string approverId = null, DateTime? approvalTime = null)
        {
            log.LogMethodEntry(trxId, lineId, loginId, action, description, sqlTrx);
            try
            {
                TrxUserLogsBL trxUserLogs = new TrxUserLogsBL(trxId, lineId, loginId, ServerDateTime.Now, Utilities.ParafaitEnv.POSMachineId, action, description, Utilities.ParafaitEnv.LoginID, Utilities.ParafaitEnv.LoginID, Utilities.ExecutionContext, approverId, approvalTime);
                trxUserLogs.Save(sqlTrx);
                log.LogMethodExit(null);
            }
            catch (Exception ex)
            {
                log.Error("Error occurredd when inserting into TrxUserLogs ", ex);
            }

        }

        public bool TrxUpdatedByOthers(int trxId, DateTime currentUpdateTime, SqlTransaction SQLTrx)
        {
            log.LogMethodEntry(trxId, currentUpdateTime, SQLTrx);

            object o = Utilities.executeScalar("select LastUpdateTime from trx_header where trxId = @trxId", SQLTrx,
                                                new SqlParameter("@trxId", trxId));

            log.LogVariableState("@trxId", trxId);

            if (o != null && o != DBNull.Value)
            {
                if (currentUpdateTime < Convert.ToDateTime(o))
                {
                    log.LogMethodExit(true);
                    return true;
                }
                else
                {
                    log.LogMethodExit(false);
                    return false;
                }
            }
            else
            {
                log.LogMethodExit(false);
                return false;
            }
        }

        /// <summary>
        /// CreateWaiverSetLineData
        /// </summary>
        /// <param name="TrxLine"></param>
        /// <param name="waiverSetId"></param>
        /// <param name="sqlTrx"></param>
        public void CreateWaiverSetLineData(TransactionLine TrxLine, int waiverSetId, SqlTransaction sqlTrx = null)
        {
            // Line Level
            log.LogMethodEntry(TrxLine, waiverSetId, sqlTrx);

            //if (waiversSignedHistoryDTOList == null)
            //    waiversSignedHistoryDTOList = new List<WaiverSignatureDTO>();

            TrxLine.WaiverSignedDTOList = new List<WaiverSignatureDTO>();

            if (waiverSetId != -1 || TrxLine.IsWaiverRequired == "Y")
            {
                ExecutionContext executionContext = Utilities.ExecutionContext;
                WaiversListBL waiversListBL = new WaiversListBL(executionContext);
                FacilityWaiverListBL facilityWaiverListBL = new FacilityWaiverListBL(executionContext);
                List<KeyValuePair<FacilityWaiverDTO.SearchByParameters, string>> searchParam = new List<KeyValuePair<FacilityWaiverDTO.SearchByParameters, string>>();
                searchParam.Add(new KeyValuePair<FacilityWaiverDTO.SearchByParameters, string>(FacilityWaiverDTO.SearchByParameters.SITE_ID, executionContext.GetSiteId().ToString()));
                searchParam.Add(new KeyValuePair<FacilityWaiverDTO.SearchByParameters, string>(FacilityWaiverDTO.SearchByParameters.PRODUCT_ID, TrxLine.ProductID.ToString()));
                searchParam.Add(new KeyValuePair<FacilityWaiverDTO.SearchByParameters, string>(FacilityWaiverDTO.SearchByParameters.IS_ACTIVE, "1"));
                searchParam.Add(new KeyValuePair<FacilityWaiverDTO.SearchByParameters, string>(FacilityWaiverDTO.SearchByParameters.EFFECTIVE_FROM, Utilities.getServerTime().ToString("yyyy-MM-dd HH:mm:ss")));
                searchParam.Add(new KeyValuePair<FacilityWaiverDTO.SearchByParameters, string>(FacilityWaiverDTO.SearchByParameters.EFFECTIVE_TO, Utilities.getServerTime().ToString("yyyy-MM-dd HH:mm:ss")));
                List<FacilityWaiverDTO> facilityWaiversDTOList = facilityWaiverListBL.GetAllFacilityWaiverList(searchParam);
                List<WaiversDTO> facWaiversDTOList = null;
                if (facilityWaiversDTOList != null && facilityWaiversDTOList.Any())
                {
                    List<int> waiverSetIdList = facilityWaiversDTOList.Select(fw => fw.WaiverSetId).ToList();
                    if (waiverSetIdList != null && waiverSetIdList.Any())
                    {
                        string waiverSetIDStringList = string.Empty;
                        for (int i = 0; i < waiverSetIdList.Count; i++)
                        {
                            waiverSetIDStringList = waiverSetIDStringList + waiverSetIdList[i] + ", ";
                        }
                        waiverSetIDStringList = waiverSetIDStringList.Substring(0, waiverSetIDStringList.Length - 1);
                        List<KeyValuePair<WaiversDTO.SearchByWaivers, string>> searchParameters = new List<KeyValuePair<WaiversDTO.SearchByWaivers, string>>();
                        searchParameters.Add(new KeyValuePair<WaiversDTO.SearchByWaivers, string>(WaiversDTO.SearchByWaivers.IS_ACTIVE, "1"));
                        searchParameters.Add(new KeyValuePair<WaiversDTO.SearchByWaivers, string>(WaiversDTO.SearchByWaivers.WAIVERSET_ID_LIST, waiverSetIDStringList));
                        searchParameters.Add(new KeyValuePair<WaiversDTO.SearchByWaivers, string>(WaiversDTO.SearchByWaivers.EFFECTIVE_DATE, Utilities.getServerTime().ToString("yyyy-MM-dd HH:mm:ss")));
                        searchParameters.Add(new KeyValuePair<WaiversDTO.SearchByWaivers, string>(WaiversDTO.SearchByWaivers.SITE_ID, executionContext.GetSiteId().ToString()));
                        searchParameters.Add(new KeyValuePair<WaiversDTO.SearchByWaivers, string>(WaiversDTO.SearchByWaivers.SIGNING_OPTION_IS_SET, "1"));
                        facWaiversDTOList = waiversListBL.GetWaiversDTOList(searchParameters, sqlTrx);
                    }
                }
                List<WaiversDTO> waiversDTOList = null;
                if (TrxLine.WaiverSetId > -1)
                {
                    List<KeyValuePair<WaiversDTO.SearchByWaivers, string>> searchParameters = new List<KeyValuePair<WaiversDTO.SearchByWaivers, string>>();
                    searchParameters.Add(new KeyValuePair<WaiversDTO.SearchByWaivers, string>(WaiversDTO.SearchByWaivers.IS_ACTIVE, "1"));
                    searchParameters.Add(new KeyValuePair<WaiversDTO.SearchByWaivers, string>(WaiversDTO.SearchByWaivers.WAIVERSET_ID, waiverSetId.ToString()));
                    searchParameters.Add(new KeyValuePair<WaiversDTO.SearchByWaivers, string>(WaiversDTO.SearchByWaivers.EFFECTIVE_DATE, Utilities.getServerTime().ToString("yyyy-MM-dd HH:mm:ss")));
                    searchParameters.Add(new KeyValuePair<WaiversDTO.SearchByWaivers, string>(WaiversDTO.SearchByWaivers.SITE_ID, executionContext.GetSiteId().ToString()));
                    searchParameters.Add(new KeyValuePair<WaiversDTO.SearchByWaivers, string>(WaiversDTO.SearchByWaivers.SIGNING_OPTION_IS_SET, "1"));
                    waiversDTOList = waiversListBL.GetWaiversDTOList(searchParameters);
                }
                if (waiversDTOList == null)
                {
                    waiversDTOList = new List<WaiversDTO>();
                }
                if (facWaiversDTOList != null && facWaiversDTOList.Any())
                {
                    for (int i = 0; i < facWaiversDTOList.Count; i++)
                    {
                        if (waiversDTOList.Exists(ws => ws.WaiverSetDetailId == facWaiversDTOList[i].WaiverSetDetailId) == false)
                        {
                            waiversDTOList.Add(facWaiversDTOList[i]);
                        }
                    }
                }
                //bool waiverSetModeEnabled = (WaiverSignedMode == WaiverSigningMode.ONLINE ? false : true);

                //// Get Lookup Waiver Signing Options 
                //List<LookupValuesDTO> lookupValuesDTOList = new List<LookupValuesDTO>();
                //if (WaiverSignedMode == WaiverSigningMode.ONLINE)
                //{
                //    List<KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>> searchlookupParameters = new List<KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>>();
                //    searchlookupParameters.Add(new KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>(LookupValuesDTO.SearchByLookupValuesParameters.LOOKUP_NAME, "WAIVER_SIGNING_OPTION"));
                //    searchlookupParameters.Add(new KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>(LookupValuesDTO.SearchByLookupValuesParameters.SITE_ID, (Utilities.ParafaitEnv.IsCorporate ? Utilities.ParafaitEnv.SiteId : -1).ToString()));
                //    lookupValuesDTOList = new LookupValuesList(executionContext).GetAllLookupValues(searchlookupParameters);
                //    if (lookupValuesDTOList != null)
                //        lookupValuesDTOList = lookupValuesDTOList.Where(x => x.LookupValue == WaiverSigningMode.ONLINE.ToString()).ToList();

                //    if (lookupValuesDTOList != null && lookupValuesDTOList.Count > 0)
                //    {
                //        // Check here if this is enabled for online
                //        List<KeyValuePair<WaiverSetSigningOptionsDTO.SearchByParameters, string>> searchSiginingOptionParameters = new List<KeyValuePair<WaiverSetSigningOptionsDTO.SearchByParameters, string>>();
                //        searchSiginingOptionParameters.Add(new KeyValuePair<WaiverSetSigningOptionsDTO.SearchByParameters, string>(WaiverSetSigningOptionsDTO.SearchByParameters.WAIVER_SET_ID, TrxLine.WaiverSetId.ToString()));
                //        var waiverSetSigningOptionsList = new WaiverSetSigningOptionsListBL(executionContext).GetWaiverSetSigningOptionsList(searchSiginingOptionParameters);

                //        if (waiverSetSigningOptionsList != null || waiverSetSigningOptionsList.Count > 0)
                //        {
                //            if (waiverSetSigningOptionsList.Where(waiverSetSigningOptions => lookupValuesDTOList.Any(p => waiverSetSigningOptions.LookupValueId == p.LookupValueId)).Count() > 0)
                //                waiverSetModeEnabled = true;
                //        }
                //    }
                //}

                // if (waiverSetModeEnabled == true && waiversDTOList != null)
                if (waiversDTOList != null)
                {
                    foreach (var waiverSetDetail in waiversDTOList)
                    {
                        // if (DateTime.Now >= waiverSetDetail.EffectiveDate)
                        // {
                        WaiverSignatureDTO waiverSignedDTO = new WaiverSignatureDTO();
                        waiverSignedDTO.WaiverSetDetailId = waiverSetDetail.WaiverSetDetailId;
                        //waiverSignedDTO.WaiverOriginalFileName = waiverSetDetail.WaiverFileName;

                        //if (waiverSignedDTO.WaiverOriginalFileName.Contains("."))
                        //{
                        //    waiverSignedDTO.WaiverSignedFileName = Guid.NewGuid().ToString().ToUpper() + "." + waiverSetDetail.WaiverFileName.Split('.')[1];
                        //}
                        //else
                        //{
                        //    waiverSignedDTO.WaiverSignedFileName = Guid.NewGuid().ToString().ToUpper();
                        //}
                        waiverSignedDTO.ProductId = TrxLine.ProductID;
                        waiverSignedDTO.ProductName = TrxLine.ProductName;
                        //waiverSignedDTO.WaiverSetDetailDTO = waiverSetDetail;
                        //if (waiverSetDetail.ValidForDays > 0)
                        //    waiverSignedDTO.ExpiryDate = DateTime.Now.AddDays(waiverSetDetail.ValidForDays.Value);
                        waiverSignedDTO.IsActive = true;
                        TrxLine.WaiverSignedDTOList.Add(waiverSignedDTO);

                        //waiversSignedHistoryDTOList.Add(waiverSignedDTO);
                        // }
                    }
                }
            }
            // log.LogMethodExit(waiversSignedHistoryDTOList.Count());
            log.LogMethodExit();
        }

        /// <summary>
        /// SaveWaiverSignedData
        /// </summary>
        /// <param name="TrxId"></param>
        /// <param name="inTrxLine"></param>
        /// <param name="SQLTrx"></param>
        private bool SaveWaiverSignedData(int TrxId, TransactionLine inTrxLine, SqlTransaction SQLTrx)
        {
            log.LogMethodEntry(TrxId, inTrxLine, SQLTrx);

            int unSignedWaiverCount = 0;
            foreach (var signedDTO in inTrxLine.WaiverSignedDTOList)
            {
                if (signedDTO.CustomerSignedWaiverId == -1 && signedDTO.IsActive)
                {
                    unSignedWaiverCount++;
                    //break;
                }

                if (signedDTO.TrxId != TrxId)
                {
                    signedDTO.TrxId = TrxId;
                }
                if (signedDTO.LineId != inTrxLine.DBLineId)
                {
                    signedDTO.LineId = inTrxLine.DBLineId;
                }
                if (signedDTO.Site_id != (Utilities.ParafaitEnv.IsCorporate ? Utilities.ParafaitEnv.SiteId : -1))
                {
                    signedDTO.Site_id = Utilities.ParafaitEnv.IsCorporate ? Utilities.ParafaitEnv.SiteId : -1;
                }
                WaiverSignatureBL waiverSignedBL = new WaiverSignatureBL(Utilities.ExecutionContext, signedDTO);
                waiverSignedBL.Save(SQLTrx);
            }
            if (inTrxLine.lineApprovals != null && inTrxLine.lineApprovals.Any())
            {
                ApprovalAction overrideWaiver = inTrxLine.GetApproval(ApprovalAction.ApprovalActionType.OVERRIDE_WAIVER.ToString());
                if (overrideWaiver != null && overrideWaiver.ApprovalTime != null)//&& string.IsNullOrEmpty(overrideWaiver.ApproverId) == false)
                {
                    InsertTrxLogs(Trx_id, inTrxLine.DBLineId, Utilities.ParafaitEnv.LoginID, ApprovalAction.ApprovalActionType.OVERRIDE_WAIVER.ToString(), "Override Waiver", SQLTrx, overrideWaiver.ApproverId, overrideWaiver.ApprovalTime);
                    inTrxLine.lineApprovals.Remove(ApprovalAction.ApprovalActionType.OVERRIDE_WAIVER.ToString());
                }
                ApprovalAction resetOverrideWaiver = inTrxLine.GetApproval(ApprovalAction.ApprovalActionType.RESET_OVERRIDEN_WAIVER.ToString());
                if (resetOverrideWaiver != null && resetOverrideWaiver.ApprovalTime != null)
                {
                    InsertTrxLogs(Trx_id, inTrxLine.DBLineId, Utilities.ParafaitEnv.LoginID, ApprovalAction.ApprovalActionType.OVERRIDE_WAIVER.ToString(), "Reset Overriden Waiver", SQLTrx, resetOverrideWaiver.ApproverId, resetOverrideWaiver.ApprovalTime);
                    inTrxLine.lineApprovals.Remove(ApprovalAction.ApprovalActionType.RESET_OVERRIDEN_WAIVER.ToString());
                }
            }

            log.LogMethodExit(null);
            return unSignedWaiverCount > 0 ? false : true;
        }


        private int GetGraceTime(SqlTransaction SQLTrx, int TrxId, Transaction.TransactionLine Line)
        {
            log.LogMethodEntry(TrxId, Line);

            if (Line.LineAtb == null || Line.card == null || Line.LineAtb.AttractionBookingDTO.AttractionPlayId == -1)
            {
                log.LogMethodExit(0);
                return 0;
            }

            FacilityMapBL facilityMapBL = new FacilityMapBL(Utilities.ExecutionContext, Line.LineAtb.AttractionBookingDTO.FacilityMapId, false, true, SQLTrx);
            //object atbCheckInFacilityData = Utilities.executeScalar(@"select isnull(GraceTime,0) 
            //                                                            from CheckInFacility where FacilityId in 
            //                                                                   (select isnull(FacilityId,0) from AttractionSchedules where AttractionScheduleId = @AttractionScheduleId )", SQLTrx,
            //                                                                     new SqlParameter("@AttractionScheduleId", Line.LineAtb.AttractionBookingDTO.AttractionScheduleId));
            //if (atbCheckInFacilityData != null)
            //{
            //    int returnValueNew = Convert.ToInt32(atbCheckInFacilityData);
            //    log.LogMethodEntry(returnValueNew);
            //    return returnValueNew;
            //}
            if (facilityMapBL != null && facilityMapBL.FacilityMapDTO != null)
            {
                //int returnValueNew = (facilityDTOList[0].GraceTime == null ? 0 : (int)facilityDTOList[0].GraceTime);
                int returnValueNew = facilityMapBL.FacilityMapDTO.GraceTime == null ? 0 : (int)facilityMapBL.FacilityMapDTO.GraceTime;
                log.LogMethodEntry(returnValueNew);
                return returnValueNew;
            }
            log.LogMethodExit(0);
            return 0;
        }
        /// <summary>
        /// UpdateMembershipInfoOnLines
        /// </summary>
        /// <param name="inOrderedProducts">inOrderedProducts list</param>
        /// <param name="MembershipId">MembershipId</param>
        /// <param name="MembershipRewardsId">MembershipRewardsId</param>
        /// <returns></returns>
        public void UpdateMembershipInfoOnLines(List<LinkedPurchaseProductsStruct> inOrderedProducts, int membershipId, int membershipRewardsId, string expireWithMembership, string forMembershipOnly)
        {
            foreach (Transaction.TransactionLine trxLine in TrxLines)
            {
                if (trxLine.ProductID >= 0 && inOrderedProducts.Exists(prod => prod.ProductId == trxLine.ProductID))
                {
                    trxLine.MembershipId = membershipId;
                    trxLine.MembershipRewardsId = membershipRewardsId;
                    trxLine.ExpireWithMembership = expireWithMembership;
                    trxLine.ForMembershipOnly = forMembershipOnly;
                }
            }
        }
        /// <summary>
        /// CreateMembershipRewardTransaction
        /// </summary> 
        /// <returns></returns>
        public int CreateMembershipRewardTransactionLine(int cardId, int productId, int membershipId, int membershipRewardId, string expireWithMembership,
            string forMembershipOnly, double productPrice, DateTime runForDate, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(cardId, productId, membershipId, membershipRewardId, expireWithMembership, productPrice, runForDate,
                sqlTrx);
            int lineReturnValue = -1;
            try
            {

                //    ShouldCommit = true, 
                //Transaction newTrx = new Transaction(Utilities);
                if (this.EntitlementReferenceDate != runForDate)
                { this.EntitlementReferenceDate = runForDate; }
                Card primaryCard = new Card(cardId, Utilities.ParafaitEnv.LoginID, Utilities, sqlTrx);
                string message = "";
                if (primaryCard.customerDTO != null)
                {
                    this.customerDTO = primaryCard.customerDTO;
                }
                this.PaymentMode = -1;
                this.PaymentReference = "Membership Rewards";
                this.Remarks = "Membership Rewards";
                lineReturnValue = this.createTransactionLine(primaryCard, productId, productPrice, 1, ref message, null, true, sqlTrx);
                if (lineReturnValue == 0)
                {
                    foreach (Transaction.TransactionLine trxLine in this.TrxLines)
                    {
                        if (trxLine.ProductID >= 0 && trxLine.ProductID == productId)
                        {
                            trxLine.MembershipId = membershipId;
                            trxLine.MembershipRewardsId = membershipRewardId;
                            trxLine.ExpireWithMembership = expireWithMembership;
                            trxLine.ForMembershipOnly = forMembershipOnly;
                            if (productPrice > 0)
                            {
                                trxLine.Price = 0;
                                trxLine.LineAmount = 0;
                                trxLine.tax_amount = 0;
                            }
                        }
                    }
                    //int returnValue = this.SaveTransacation(sqlTrx, ref message);
                    this.updateAmounts(true, sqlTrx);
                    //int returnValue = this.SaveOrder(ref message, sqlTrx);
                    //if (returnValue == 0)
                    //{
                    //    transactionId = this.Trx_id;
                    //}
                    //else
                    //{
                    //    log.Error(message);
                    //    throw new Exception(message);
                    //} 
                }
                else
                {
                    log.Error(message);
                    throw new Exception(message);
                }
                log.LogMethodExit(lineReturnValue);
                return lineReturnValue;
            }
            catch (Exception ex)
            {
                log.Error(ex);
                throw new Exception(ex.Message);
            }
        }
        /// <summary>
        /// ReprintNeedsApproval
        /// </summary>
        /// <returns></returns>
        public bool ReprintNeedsApproval()
        {
            log.LogMethodEntry();
            bool needsApproval = ParafaitDefaultContainerList.GetParafaitDefault<bool>(Utilities.ExecutionContext, "TRANSACTION_REPRINT_REQUIRES_MANAGER_APPROVAL");
            log.LogMethodExit(needsApproval);
            return needsApproval;
        }

        public void AddApproval(string action, string approverId, DateTime? approvalTime)
        {
            if (this.transactionApprovals != null)
            {
                if (!transactionApprovals.ContainsKey(action))
                {
                    ApprovalAction approvalAction = new ApprovalAction(approverId, approvalTime);
                    transactionApprovals.Add(action, approvalAction);
                }
            }
        }

        public ApprovalAction GetApproval(string action)
        {
            ApprovalAction approvalAction = new ApprovalAction("", null);
            if (this.transactionApprovals != null)
            {
                if (transactionApprovals.ContainsKey(action))
                {
                    return transactionApprovals[action];
                }
            }
            return approvalAction;
        }

        public string GetLinkedCardNumber(int lineId)
        {
            log.LogMethodEntry(lineId);
            string cardNumber = string.Empty;
            if (this.TrxLines != null)
            {
                Card lineCard = null;
                if (this.TrxLines.Exists(tl => tl.DBLineId == lineId))
                {
                    lineCard = this.TrxLines.Find(tl => tl.DBLineId == lineId).card;
                }
                if (lineCard == null)
                {
                    lineCard = this.PrimaryCard;
                }
                if (lineCard != null)
                {
                    cardNumber = lineCard.CardNumber;
                }
            }
            log.LogMethodExit(cardNumber);
            return cardNumber;

        }


        public bool IsReservationTransaction(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(sqlTrx);
            bool isReservationTransaction = false;
            log.LogVariableState("this.Trx_id", this.Trx_id);
            if (this.TrxLines != null && this.TrxLines.Exists(tl => tl.LineValid && tl.TransactionReservationScheduleDTOList != null && tl.TransactionReservationScheduleDTOList.Any()))
            {
                isReservationTransaction = true;
            }

            if (isReservationTransaction == false)
            {
                if (this.Trx_id > 0)
                {
                    TransactionListBL transactionListBL = new TransactionListBL(Utilities.ExecutionContext);
                    List<KeyValuePair<TransactionDTO.SearchByParameters, string>> searchParameters = new List<KeyValuePair<TransactionDTO.SearchByParameters, string>>();
                    searchParameters.Add(new KeyValuePair<TransactionDTO.SearchByParameters, string>(TransactionDTO.SearchByParameters.TRANSACTION_ID, Trx_id.ToString()));
                    searchParameters.Add(new KeyValuePair<TransactionDTO.SearchByParameters, string>(TransactionDTO.SearchByParameters.IS_RESERVATION_TRANSACTION, "1"));
                    searchParameters.Add(new KeyValuePair<TransactionDTO.SearchByParameters, string>(TransactionDTO.SearchByParameters.SITE_ID, Utilities.ExecutionContext.GetSiteId().ToString()));
                    List<TransactionDTO> transactionDTOList = transactionListBL.GetTransactionDTOList(searchParameters, Utilities, sqlTrx);
                    if (transactionDTOList != null && transactionDTOList.Any())
                    {
                        isReservationTransaction = true;
                    }
                }
            }
            log.LogMethodExit(isReservationTransaction);
            return isReservationTransaction;
        }

        public bool HasBookingCancellationCharge(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(sqlTrx);
            bool hasBookingCancellationCharge = true;
            if (this.TrxLines != null && IsReservationTransaction(sqlTrx)) //valiation is not applicable for non booking transactions
            {
                List<TransactionReservationScheduleDTO> tempTransactionReservationScheduleDTOList = new List<TransactionReservationScheduleDTO>();
                foreach (Transaction.TransactionLine trxLineEntry in this.TrxLines)
                {
                    if (trxLineEntry.LineValid && trxLineEntry.TransactionReservationScheduleDTOList != null)
                    {
                        tempTransactionReservationScheduleDTOList.Add(trxLineEntry.GetCurrentTransactionReservationScheduleDTO());
                    }
                }

                if (tempTransactionReservationScheduleDTOList.Count == 0)
                {
                    TransactionReservationScheduleListBL trxReservationScheduleListBL = new TransactionReservationScheduleListBL(Utilities.ExecutionContext);
                    List<KeyValuePair<TransactionReservationScheduleDTO.SearchByParameters, string>> searchParameters = new List<KeyValuePair<TransactionReservationScheduleDTO.SearchByParameters, string>>();
                    searchParameters.Add(new KeyValuePair<TransactionReservationScheduleDTO.SearchByParameters, string>(TransactionReservationScheduleDTO.SearchByParameters.TRX_ID, this.Trx_id.ToString()));
                    searchParameters.Add(new KeyValuePair<TransactionReservationScheduleDTO.SearchByParameters, string>(TransactionReservationScheduleDTO.SearchByParameters.IS_CANCELLED, "0"));
                    searchParameters.Add(new KeyValuePair<TransactionReservationScheduleDTO.SearchByParameters, string>(TransactionReservationScheduleDTO.SearchByParameters.SITE_ID, Utilities.ExecutionContext.GetSiteId().ToString()));
                    tempTransactionReservationScheduleDTOList = trxReservationScheduleListBL.GetTransactionReservationScheduleDTOList(searchParameters, sqlTrx);
                }
                if (tempTransactionReservationScheduleDTOList == null || tempTransactionReservationScheduleDTOList.Count == 0)
                {
                    throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, "Transaction is not having any reservation schedule details"));
                }
                else
                {
                    foreach (TransactionReservationScheduleDTO transactionReservationScheduleDTO in tempTransactionReservationScheduleDTOList)
                    {
                        FacilityMapBL facilityMapBL = new FacilityMapBL(Utilities.ExecutionContext, transactionReservationScheduleDTO.FacilityMapId, false, true, sqlTrx);
                        if (facilityMapBL != null && facilityMapBL.FacilityMapDTO != null && facilityMapBL.FacilityMapDTO.CancellationProductId > -1)
                        {

                            int cancellationProductId = facilityMapBL.FacilityMapDTO.CancellationProductId;
                            if (this.TrxLines != null)
                            {
                                if (this.TrxLines.Exists(line => line.ProductID == cancellationProductId && line.LineValid == true) == false)
                                {
                                    hasBookingCancellationCharge = false;
                                    break;
                                }
                            }
                            else
                            {
                                throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, "Transaction is not having any transaction line details"));
                            }
                        }
                    }
                }
            }
            log.LogMethodExit(hasBookingCancellationCharge);
            return hasBookingCancellationCharge;
        }

        public List<Transaction.TransactionLine> GetBookingCancellationChargeLines(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(sqlTrx);
            List<Transaction.TransactionLine> cancellationChargeLines = null;
            List<TransactionReservationScheduleDTO> tempTransactionReservationScheduleDTOList = new List<TransactionReservationScheduleDTO>();
            if (this.TrxLines != null && IsReservationTransaction(sqlTrx))
            {

                foreach (Transaction.TransactionLine trxLineEntry in this.TrxLines)
                {
                    if (trxLineEntry.TransactionReservationScheduleDTOList != null)
                    {
                        tempTransactionReservationScheduleDTOList.Add(trxLineEntry.GetCurrentTransactionReservationScheduleDTO());
                    }
                }
                if (tempTransactionReservationScheduleDTOList.Count == 0)
                {
                    TransactionReservationScheduleListBL trxReservationScheduleListBL = new TransactionReservationScheduleListBL(Utilities.ExecutionContext);
                    List<KeyValuePair<TransactionReservationScheduleDTO.SearchByParameters, string>> searchParameters = new List<KeyValuePair<TransactionReservationScheduleDTO.SearchByParameters, string>>();
                    searchParameters.Add(new KeyValuePair<TransactionReservationScheduleDTO.SearchByParameters, string>(TransactionReservationScheduleDTO.SearchByParameters.TRX_ID, this.Trx_id.ToString()));
                    searchParameters.Add(new KeyValuePair<TransactionReservationScheduleDTO.SearchByParameters, string>(TransactionReservationScheduleDTO.SearchByParameters.SITE_ID, Utilities.ExecutionContext.GetSiteId().ToString()));
                    tempTransactionReservationScheduleDTOList = trxReservationScheduleListBL.GetTransactionReservationScheduleDTOList(searchParameters, sqlTrx);
                }
                if (tempTransactionReservationScheduleDTOList.Count > 0)
                {
                    foreach (TransactionReservationScheduleDTO transactionReservationScheduleDTO in tempTransactionReservationScheduleDTOList)
                    {
                        FacilityMapBL facilityMapBL = new FacilityMapBL(Utilities.ExecutionContext, transactionReservationScheduleDTO.FacilityMapId, false, true, sqlTrx);
                        if (facilityMapBL != null && facilityMapBL.FacilityMapDTO != null && facilityMapBL.FacilityMapDTO.CancellationProductId > -1)
                        {

                            int cancellationProductId = facilityMapBL.FacilityMapDTO.CancellationProductId;

                            if (this.TrxLines.Exists(line => line.ProductID == cancellationProductId && line.CancelledLine == false) == true)
                            {
                                if (cancellationChargeLines == null)
                                {
                                    cancellationChargeLines = new List<TransactionLine>();
                                }
                                cancellationChargeLines.AddRange(this.TrxLines.Where(line => line.ProductID == cancellationProductId && line.CancelledLine == false).ToList());
                            }
                        }
                    }
                }
            }
            log.LogMethodExit(cancellationChargeLines);
            return cancellationChargeLines;
        }

        public List<ProductsDTO> GetBookingCancellationChargeProducts(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(sqlTrx);
            List<ProductsDTO> cancellationChargeProductList = null;
            List<TransactionReservationScheduleDTO> tempTransactionReservationScheduleDTOList = new List<TransactionReservationScheduleDTO>();
            if (this.TrxLines != null && IsReservationTransaction(sqlTrx))
            {

                //tempTransactionReservationScheduleDTOList = this.TrxLines.Where(tl => tl.LineValid == true && tl.TransactionReservationScheduleDTO != null && tl.TransactionReservationScheduleDTO.Cancelled == false);
                foreach (Transaction.TransactionLine trxLineEntry in this.TrxLines)
                {
                    if (trxLineEntry.LineValid && trxLineEntry.TransactionReservationScheduleDTOList != null)
                    {
                        TransactionReservationScheduleDTO trsDTO = trxLineEntry.GetCurrentTransactionReservationScheduleDTO();
                        if (trsDTO != null && trsDTO.Cancelled == false)
                        {
                            if (cancellationChargeProductList == null)
                            {
                                cancellationChargeProductList = new List<ProductsDTO>();
                            }
                            tempTransactionReservationScheduleDTOList.Add(trsDTO);
                        }
                    }
                }
                if (tempTransactionReservationScheduleDTOList.Count == 0)
                {
                    TransactionReservationScheduleListBL trxReservationScheduleListBL = new TransactionReservationScheduleListBL(Utilities.ExecutionContext);
                    List<KeyValuePair<TransactionReservationScheduleDTO.SearchByParameters, string>> searchParameters = new List<KeyValuePair<TransactionReservationScheduleDTO.SearchByParameters, string>>();
                    searchParameters.Add(new KeyValuePair<TransactionReservationScheduleDTO.SearchByParameters, string>(TransactionReservationScheduleDTO.SearchByParameters.TRX_ID, this.Trx_id.ToString()));
                    searchParameters.Add(new KeyValuePair<TransactionReservationScheduleDTO.SearchByParameters, string>(TransactionReservationScheduleDTO.SearchByParameters.SITE_ID, Utilities.ExecutionContext.GetSiteId().ToString()));
                    tempTransactionReservationScheduleDTOList = trxReservationScheduleListBL.GetTransactionReservationScheduleDTOList(searchParameters, sqlTrx);
                }
                if (tempTransactionReservationScheduleDTOList.Count > 0)
                {
                    //string productIdList = "( ";
                    cancellationChargeProductList = new List<ProductsDTO>();
                    for (int i = 0; i < tempTransactionReservationScheduleDTOList.Count; i++)// transactionReservationScheduleDTO i)
                    {
                        if (tempTransactionReservationScheduleDTOList[i].Cancelled == false)
                        {
                            FacilityMapBL facilityMapBL = new FacilityMapBL(Utilities.ExecutionContext, tempTransactionReservationScheduleDTOList[i].FacilityMapId, false, true, sqlTrx);

                            if (facilityMapBL != null && facilityMapBL.FacilityMapDTO != null && facilityMapBL.FacilityMapDTO.CancellationProductId > -1)
                            {
                                //productIdList = productIdList + facilityMapBL.FacilityMapDTO.CancellationProductId.ToString() + ", ";
                                Products products = new Products(facilityMapBL.FacilityMapDTO.CancellationProductId);
                                cancellationChargeProductList.Add(products.GetProductsDTO);
                            }
                        }
                    }
                    //productIdList = productIdList.Substring(0, productIdList.Length - 2) + " ) ";
                    //ProductsList productsList = new ProductsList(Utilities.ExecutionContext);
                    //List<KeyValuePair<ProductsDTO.SearchByProductParameters, string>> searchParameters = new List<KeyValuePair<ProductsDTO.SearchByProductParameters, string>>();
                    //searchParameters.Add(new KeyValuePair<ProductsDTO.SearchByProductParameters, string>(ProductsDTO.SearchByProductParameters.PRODUCT_ID_LIST, productIdList));
                    //searchParameters.Add(new KeyValuePair<ProductsDTO.SearchByProductParameters, string>(ProductsDTO.SearchByProductParameters.SITEID, Utilities.ExecutionContext.GetSiteId().ToString()));
                    //cancellationChargeProductList = productsList.GetProductsDTOList(searchParameters);
                }
            }
            log.LogMethodExit(cancellationChargeProductList);
            return cancellationChargeProductList;
        }


        private void CancelReservationSchedule(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(sqlTrx);
            if (TrxLines != null)
            {
                foreach (Transaction.TransactionLine trxLineItem in TrxLines)
                {
                    if (trxLineItem.TransactionReservationScheduleDTOList != null)
                    {
                        trxLineItem.ExpireTrxReservationSchedule(Utilities.ExecutionContext, sqlTrx);
                        //trxLineItem.TransactionReservationScheduleDTO.Cancelled = true;
                        //trxLineItem.TransactionReservationScheduleDTO.CancelledBy = Utilities.ParafaitEnv.LoginID;
                        //TransactionReservationScheduleBL transactionReservationScheduleBL = new TransactionReservationScheduleBL(Utilities.ExecutionContext, trxLineItem.TransactionReservationScheduleDTO);
                        //transactionReservationScheduleBL.Save(sqlTrx);
                    }
                }
            }
            log.LogMethodExit();
        }

        public void ContainsTempCards()
        {
            log.LogMethodEntry();
            if (TrxLines != null)
            {
                if (TrxLines.Exists(line => line.CancelledLine == false && line.LineValid == true && string.IsNullOrEmpty(line.CardNumber) == false && line.CardNumber.StartsWith("T")))
                {
                    throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, "Transaction has temp cards"));
                }
            }
            log.LogMethodExit();
        }

        public bool HasProductsForKOTPrint(List<POSPrinterDTO> posPrintersDTOList)
        {
            log.LogMethodEntry(posPrintersDTOList);
            bool hasProductsForKOTPrint = false;
            if (TrxLines != null && TrxLines.Count > 0)
            {
                //if (EligibleTrxLinesPrinterMapperList == null || EligibleTrxLinesPrinterMapperList.Count == 0)
                //{
                //    if (POSPrinterDTOList == null || POSPrinterDTOList.Count == 0)
                //    {
                //        POSMachines posMachine = new POSMachines(Utilities.ExecutionContext, Utilities.ParafaitEnv.POSMachineId);
                //        POSPrinterDTOList = posMachine.PopulatePrinterDetails();
                //    }
                //    this.GetPrintableTransactionLines(POSPrinterDTOList);
                //}
                //if(EligibleTrxLinesPrinterMapperList.Count > 0)
                //{
                //    hasProductsForKOTPrint = true;
                //} 
                hasProductsForKOTPrint = TrxLines.Exists(tl => tl.LineValid == true && POSPrinterListBL.EligibleForKOTPrint(tl.ProductID, posPrintersDTOList)
                                                                                    && (tl.KOTPrintCount == DBNull.Value
                                                                                        || tl.KOTPrintCount != DBNull.Value && Convert.ToInt32(tl.KOTPrintCount) == 0));
            }
            log.LogMethodExit(hasProductsForKOTPrint);
            return hasProductsForKOTPrint;
        }

        public void CanApplyTrxProfileAtTransactionLevel()
        {
            log.LogMethodEntry();
            if (this.TrxLines != null && this.TrxLines.Count > 0)
            {
                if (TrxLines.Exists(line => line.CancelledLine == false && line.LineValid == true && line.TrxProfileId > -1))
                {
                    throw new ValidationException("There are some transaction lines with transaction profiles. Remove them first to apply at transaction level");
                }
            }
            log.LogMethodExit();
        }

        /// <summary>
        /// Clear Un saved Attraction Schedules
        /// </summary>
        public void ClearUnSavedAttractionSchedules()
        {
            log.LogMethodEntry();
            if (TrxLines != null && TrxLines.Count > 0)
            {
                for (int lineId = 0; lineId < TrxLines.Count; lineId++)
                {
                    if (TrxLines[lineId].ProductTypeCode == ProductTypeValues.ATTRACTION
                  && TrxLines[lineId].LineAtb != null
                  && TrxLines[lineId].LineAtb.AttractionBookingDTO != null
                  && TrxLines[lineId].LineAtb.AttractionBookingDTO.TrxId == -1)
                    {
                        TrxLines[lineId].LineAtb.Expire(null, true);
                    }
                }
            }
            log.LogMethodExit();
        }

        /// <summary>
        /// SetReservationTransactionStatus - Set status based on reservation statsu
        /// </summary>
        /// <param name="reservationDTO"></param>
        internal void SetReservationTransactionStatus(ReservationDTO reservationDTO, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(reservationDTO);
            if (reservationDTO != null)
            {
                log.LogVariableState("reservationDTO.Status", reservationDTO.Status);
                log.LogVariableState("Transaction Status before the update: ", Status);
                if ((reservationDTO.Status == ReservationDTO.ReservationStatus.BOOKED.ToString()
                     || reservationDTO.Status == ReservationDTO.ReservationStatus.BLOCKED.ToString()
                     || reservationDTO.Status == ReservationDTO.ReservationStatus.WIP.ToString())
                     )
                {
                    this.Status = Transaction.TrxStatus.BOOKING;
                }
                else if (reservationDTO.Status == ReservationDTO.ReservationStatus.CANCELLED.ToString())
                {
                    string trxStatusValue = Utilities.executeScalar("select th.status from trx_header th where th.trxId = @trxId", sqlTrx,
                                                                  new SqlParameter[] { new SqlParameter("@trxId", this.Trx_id) }).ToString();

                    if (trxStatusValue == Transaction.TrxStatus.CANCELLED.ToString())
                    {
                        this.Status = Transaction.TrxStatus.CANCELLED;
                    }
                    else
                    {   //marking  as closed as there is active line for cancellation charge
                        this.Status = Transaction.TrxStatus.CLOSED;
                    }
                }
                else if (reservationDTO.Status == ReservationDTO.ReservationStatus.CONFIRMED.ToString())
                {
                    this.Status = Transaction.TrxStatus.RESERVED;
                }
                else if (reservationDTO.Status == ReservationDTO.ReservationStatus.COMPLETE.ToString()
                       && (this.Status == Transaction.TrxStatus.BOOKING || this.Status == Transaction.TrxStatus.RESERVED))
                {
                    this.Status = Transaction.TrxStatus.OPEN;
                }
                log.LogVariableState("Transaction Status after the update: ", Status);
            }
            else
            {
                throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2131)); // "Sorry, unable to proceed. Reservation details are missing"
            }
            log.LogMethodExit();
        }
        /// <summary>
        /// SetReservationTransactionDate
        /// </summary>
        /// <param name="reservationDTO"></param>
        internal void SetReservationTransactionDate(ReservationDTO reservationDTO)
        {
            log.LogMethodEntry(reservationDTO);
            if (reservationDTO != null)
            {
                log.LogVariableState("reservationDTO.FromDate", reservationDTO.FromDate);
                log.LogVariableState("Transaction date before the update: ", this.TrxDate);
                log.LogVariableState("EntitlementReferenceDate before the update: ", this.EntitlementReferenceDate);
                if (reservationDTO.FromDate != this.TrxDate)
                {
                    this.TrxDate = reservationDTO.FromDate;
                    this.EntitlementReferenceDate = TrxDate;
                    log.LogVariableState("Transaction date after the update: ", this.TrxDate);
                    log.LogVariableState("EntitlementReferenceDate after the update: ", this.EntitlementReferenceDate);
                }
            }
            else
            {
                throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2131)); // "Sorry, unable to proceed. Reservation details are missing"
            }
            log.LogMethodExit();
        }


        /// <summary>
        /// Check whether reservation has service charge details
        /// </summary>
        internal bool HasServiceCharges()
        {
            log.LogMethodEntry();
            bool hasServiceCharges = false;
            Transaction.TransactionLine serviceChargeTrxLine = GetActiveLineForType(ProductTypeValues.SERVICECHARGE, null);
            if (serviceChargeTrxLine != null)
            {
                hasServiceCharges = true;
            }
            log.LogMethodExit(hasServiceCharges);
            return hasServiceCharges;
        }

        internal bool HasThisSchedule(int scheduleId, int facilityMapId)
        {
            log.LogMethodEntry(scheduleId, facilityMapId);
            bool alreadyPresent = false;
            if (this.TrxLines != null)
            {
                alreadyPresent = this.TrxLines.Exists(tl => tl.LineValid == true && tl.CancelledLine == false
                                                            && tl.TransactionReservationScheduleDTOList != null
                                                            && tl.TransactionReservationScheduleDTOList.Any()
                                                            && tl.TransactionReservationScheduleDTOList.Exists(trs => trs.FacilityMapId == facilityMapId
                                                                                                                     && trs.SchedulesId == scheduleId
                                                                                                                     && trs.Cancelled == false));
            }
            log.LogMethodExit(alreadyPresent);
            return alreadyPresent;
        }

        internal bool HasThisBookingProduct(int bookingProductId)
        {
            log.LogMethodEntry(bookingProductId);
            bool alreadyPresent = false;
            if (this.TrxLines != null)
            {
                alreadyPresent = this.TrxLines.Exists(tl => (tl.ProductID == bookingProductId || tl.ProductTypeCode == ProductTypeValues.BOOKINGS) && tl.LineValid == true && tl.CancelledLine == false);
            }
            log.LogMethodExit(alreadyPresent);
            return alreadyPresent;
        }

        /// <summary>
        /// GetBookingProductTransactionLine
        /// </summary>
        /// <returns></returns>
        internal Transaction.TransactionLine GetBookingProductTransactionLine()
        {
            log.LogMethodEntry();
            try
            {
                Transaction.TransactionLine selectedTrxLines = null;
                if (this.TrxLines != null)
                {
                    // int bookingProductId = this.reservationDTO.BookingProductId;
                    List<Transaction.TransactionLine> allBookingProductLines = this.TrxLines.Where(tl => tl.ProductTypeCode.ToUpper() == ProductTypeValues.BOOKINGS
                                                                                                          && tl.LineValid == true && tl.CancelledLine == false).ToList();
                    if (allBookingProductLines != null && allBookingProductLines.Count > 0)
                    {
                        selectedTrxLines = allBookingProductLines[0];
                    }
                }
                log.LogMethodExit(selectedTrxLines);
                return selectedTrxLines;
            }
            catch (Exception ex)
            {
                log.Error(ex);
                log.LogMethodExit(ex.Message);
                throw;
            }
        }
        /// <summary>
        /// GetBookingProduct
        /// </summary>
        /// <returns></returns>
        internal Products GetBookingProduct()
        {
            log.LogMethodEntry();
            Products productsBL = null;
            if (this.TrxLines != null)
            {
                Transaction.TransactionLine transactionLine = GetBookingProductTransactionLine();
                if (transactionLine != null)
                {
                    Products bookingProduct = new Products(transactionLine.ProductID);
                    productsBL = bookingProduct;
                }
            }
            log.LogMethodExit(productsBL);
            return productsBL;
        }

        /// <summary>
        /// GetScheduleTransactionLines
        /// </summary>
        /// <returns></returns>
        internal List<Transaction.TransactionLine> GetScheduleTransactionLines()
        {
            log.LogMethodEntry();
            try
            {
                List<Transaction.TransactionLine> selectedTrxLines = null;
                if (this.TrxLines != null)
                {

                    List<Transaction.TransactionLine> allLinesWithSchedules = this.TrxLines.Where(tl => tl.TransactionReservationScheduleDTOList != null
                                                                                                        && tl.TransactionReservationScheduleDTOList.Any()).ToList();
                    if (allLinesWithSchedules != null && allLinesWithSchedules.Count > 0)
                    {
                        if (selectedTrxLines == null)
                        {
                            selectedTrxLines = new List<Transaction.TransactionLine>();
                        }
                        List<Transaction.TransactionLine> activeLinesWithSchedules = allLinesWithSchedules.Where(tl => tl.LineValid == true && tl.CancelledLine == false).ToList();
                        if (activeLinesWithSchedules != null && activeLinesWithSchedules.Count > 0)
                        {
                            selectedTrxLines.AddRange(activeLinesWithSchedules);
                        }
                        else
                        {
                            var facMapProdDistinctList = allLinesWithSchedules.Select(tl => new { tl.ProductID }).Distinct();
                            if (facMapProdDistinctList != null)
                            {
                                var facilityProductIdList = facMapProdDistinctList.ToList();
                                if (facilityProductIdList != null && facilityProductIdList.Count > 0)
                                {
                                    for (int i = 0; i < facilityProductIdList.Count; i++)
                                    {
                                        int facProductId = Convert.ToInt32(facilityProductIdList[i].ProductID);
                                        List<Transaction.TransactionLine> selectedLineForFacility = allLinesWithSchedules.Where(tl => tl.ProductID == facProductId).OrderByDescending(tlDesc => this.TrxLines.IndexOf(tlDesc)).ToList();
                                        if (selectedLineForFacility != null && selectedLineForFacility.Count > 0)
                                        {
                                            selectedTrxLines.Add(selectedLineForFacility[0]);//take newest line
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                log.LogMethodExit(selectedTrxLines);
                return selectedTrxLines;
            }
            catch (Exception ex)
            {
                log.Error(ex);
                log.LogMethodExit(ex.Message);
                throw;
            }
        }

        internal void CancelReservationTransaction(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(sqlTrx);
            if (this.TrxLines != null)
            {

                if (HasBookingCancellationCharge(sqlTrx) == false && this.TotalPaidAmount != 0)
                {
                    throw new Exception(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2148));// "Cannot proceed, cancellation charges needs to be collected"
                }
                List<Transaction.TransactionLine> cancellationChargeLines = GetBookingCancellationChargeLines(sqlTrx);
                if (cancellationChargeLines != null && cancellationChargeLines.Count > 0)
                {
                    foreach (Transaction.TransactionLine trxline in this.TrxLines)
                    {
                        if (cancellationChargeLines.Exists(line => line == trxline))
                        {
                            continue;
                        }
                        else if (trxline.LineValid && trxline.CancelledLine == false)
                        {
                            trxline.AllowEdit = true;
                            trxline.ReceiptPrinted = false;
                            this.cancelLine(this.TrxLines.IndexOf(trxline), sqlTrx);
                        }
                    }
                    this.Status = TrxStatus.CLOSED;
                    updateAmounts(false, sqlTrx);
                }
                else
                {
                    string msg = "";
                    foreach (Transaction.TransactionLine tl in this.TrxLines)
                    {
                        tl.ReceiptPrinted = false;
                        tl.AllowEdit = true;
                    }
                    if (cancelTransaction(ref msg, sqlTrx) == false)
                    {
                        log.Error(msg);
                        throw new Exception(msg);
                    }
                }
            }
            log.LogMethodExit();
        }

        /// <summary>
        /// Execute Reservation Transation
        /// </summary>
        /// <param name="cardList"></param>
        /// <param name="progress"></param>
        /// <param name="sqlTrx"></param>
        /// <param name="completeTransaction"></param>
        internal void ExecuteReservationTransaction(Dictionary<string, string> cardList, IProgress<ProgressReport> progress, SqlTransaction sqlTrx, bool completeTransaction = false) //Never pass completeTransaction as true from POS. KOT print will get fired.
        {
            log.LogMethodEntry(cardList, completeTransaction);
            string message = "";
            try
            {

                if (cardList != null && cardList.Count > 0)
                {
                    TaskProcs tp = new TaskProcs(Utilities);
                    CardUtils cardUtils = new CardUtils(Utilities);
                    List<string> cardNumberList = cardList.Select(k => k.Key.ToString()).ToList();
                    List<string> cardNumberListTwo = cardList.Select(k => k.Value).ToList();
                    cardNumberList.AddRange(cardNumberListTwo);
                    List<Card> cardObjectList = cardUtils.GetCardList(cardNumberList, "", sqlTrx);
                    int totalCount = cardList.Count;
                    int currentCount = 0;
                    string processMsg = MessageContainerList.GetMessage(Utilities.ExecutionContext, "of");
                    List<string> processedToCardList = new List<string>();
                    foreach (KeyValuePair<string, string> keyv in cardList)
                    {
                        currentCount++;
                        progress.Report(new ProgressReport((currentCount * 100) / totalCount, currentCount + " " + processMsg + " " + totalCount));
                        if (keyv.Key.Equals(keyv.Value))
                            continue;

                        log.Debug("Start card " + keyv.Value.ToString());
                        Card card = cardObjectList.Find(cardObject => cardObject.CardNumber == keyv.Value.ToString()); // new Card(keyv.Value, "", Utilities); 
                        Card tempCard = cardObjectList.Find(cardObject => cardObject.CardNumber == keyv.Key.ToString()); //new Card(keyv.Key, "", Utilities);  
                        if (processedToCardList.Exists(c => c == card.CardNumber))
                        {
                            //reload repeat card
                            card = new Card(keyv.Value, "", Utilities, sqlTrx);
                        }
                        if (card.CardStatus == "ISSUED")
                        {
                            //Card[] cards = new Card[2];
                            List<Card> cards = new List<Card>();
                            cards.Add(tempCard);
                            cards.Add(card);

                            log.Debug("Start Consolidate for " + card.CardNumber);
                            if (!tp.Consolidate(cards, 2, "Execute Reservation", ref message, sqlTrx, true, true))
                            {
                                log.Debug("Error in Consolidate for " + card.CardNumber);
                                log.LogVariableState("message ", message);
                                log.LogMethodExit();
                                throw new Exception(message);
                            }
                            log.Debug("End Consolidate for " + card.CardNumber);
                            if (this.PrimaryCard != null && this.PrimaryCard.CardNumber == tempCard.CardNumber)
                            {
                                this.PrimaryCard = card;
                            }
                            Utilities.executeNonQuery(@"Update bookings 
                                                          set LastUpdatedDate = getdate()
                                                        Where TrxId = @TrxId; ",
                                                    sqlTrx,
                                                  new SqlParameter("@TrxId", Trx_id),
                                                  new SqlParameter("@cardId", card.card_id),
                                                  new SqlParameter("@tempCardId", tempCard.card_id));
                            //Utilities.executeNonQuery(@"Update trx_header 
                            //                              set PrimaryCardId = @cardId
                            //                            Where TrxId = @TrxId AND PrimaryCardId = @tempCardId;

                            //                           Update bookings 
                            //                              set LastUpdatedDate = getdate()
                            //                            Where TrxId = @TrxId; ",
                            //                         sqlTrx,
                            //                       new SqlParameter("@TrxId", Trx_id),
                            //                       new SqlParameter("@cardId", card.card_id),
                            //                       new SqlParameter("@tempCardId", tempCard.card_id));

                            for (int i = 0; i < this.TrxLines.Count; i++)
                            {
                                Transaction.TransactionLine tl = this.TrxLines[i];
                                if (tempCard.CardNumber.Equals(tl.CardNumber))
                                {
                                    tl.CardNumber = card.CardNumber;
                                    tl.card = card;
                                    if (tl.ProductID.Equals(Utilities.ParafaitEnv.CardDepositProductId))
                                    {
                                        tl.LineValid = false;
                                        this.deleteLineFromDB(tl, sqlTrx);
                                    }
                                }
                                //if ((string.IsNullOrEmpty(tl.CardNumber) == false) && tl.CardNumber.Equals(tempCard.CardNumber) && tl.LineValid)
                                //{

                                //    tl.CardNumber = card.CardNumber;
                                //    tl.card = card; 
                                //}
                            }
                            //Utilities.executeNonQuery(@"Update trx_lines 
                            //                              set card_id = @cardId, card_number = @cardNumber
                            //                            Where TrxId = @TrxId AND card_id = @tempCardId ",
                            //                           sqlTrx,
                            //                         new SqlParameter("@TrxId", Trx_id),
                            //                         new SqlParameter("@cardId", card.card_id),
                            //                         new SqlParameter("@cardNumber", card.CardNumber),
                            //                         new SqlParameter("@tempCardId", tempCard.card_id));
                        }
                        else
                        {
                            log.Debug("Start transferCard for " + card.CardNumber);
                            if (!tp.transferCard(tempCard, card, "Execute Reservation", ref message, sqlTrx, this.Trx_id))
                            {
                                log.Fatal("Error in transferCard for " + card.CardNumber);
                                log.LogVariableState("Error message ", message);
                                log.LogMethodExit(false);
                                throw new Exception(message);
                            }
                            log.Debug("End transferCard for " + card.CardNumber);
                        }
                        if (processedToCardList.Exists(c => c == card.CardNumber) == false)
                        {
                            processedToCardList.Add(card.CardNumber);
                        }
                    }
                }
                log.Debug("Out of card loop");
                this.updateAmounts();
                if (completeTransaction)
                {
                    try
                    {
                        ContainsTempCards();
                    }
                    catch (Exception ex)
                    {
                        log.Error(ex);
                        completeTransaction = false;
                    }
                }
                this.Status = Transaction.TrxStatus.OPEN;

                if (completeTransaction)
                {
                    if (CompleteTransaction(sqlTrx, ref message) == false)
                    {
                        log.LogVariableState("Error message ", message);
                        message = MessageContainerList.GetMessage(Utilities.ExecutionContext, 526);
                        log.LogMethodExit();
                        throw new Exception(message);
                    }
                }
            }
            catch (Exception ex)
            {
                log.Error(ex);
                log.LogVariableState("message ", message);
                log.LogMethodExit();
                throw;
            }
            log.LogVariableState("message ", message);
            log.LogMethodExit();
        }

        internal void RestoreReservationTransactionFromBlockedStateToNew()
        {
            log.LogMethodEntry();
            if (this.TrxLines != null)
            {
                this.Trx_id = 0;
                this.Status = TrxStatus.OPEN;
                this.Order = null;
                foreach (Transaction.TransactionLine lineItem in this.TrxLines)
                {
                    if (lineItem.DBLineId > 0)
                    {
                        lineItem.DBLineId = 0;
                    }
                    if (lineItem.TransactionReservationScheduleDTOList != null && lineItem.TransactionReservationScheduleDTOList.Any())
                    {
                        for (int i = 0; i < lineItem.TransactionReservationScheduleDTOList.Count; i++)
                        {
                            if (lineItem.TransactionReservationScheduleDTOList[i].TrxId > 0)
                            {
                                lineItem.TransactionReservationScheduleDTOList[i].TrxReservationScheduleId = -1;
                                lineItem.TransactionReservationScheduleDTOList[i].TrxId = -1;
                            }
                        }

                    }
                }
            }
            log.LogMethodExit();
        }

        internal bool HasThisReservationRentalProductAndSchedule(int scheduleId, int facilityMapId, int rentalProduct)
        {
            log.LogMethodEntry(scheduleId, facilityMapId);
            bool alreadyPresent = false;
            if (this.TrxLines != null)
            {
                alreadyPresent = this.TrxLines.Exists(tl => tl.LineValid == true && tl.CancelledLine == false
                                                            && tl.ProductID == rentalProduct
                                                            && tl.TransactionReservationScheduleDTOList != null
                                                            && tl.TransactionReservationScheduleDTOList.Any()
                                                            && tl.TransactionReservationScheduleDTOList.Exists(trs => trs.FacilityMapId == facilityMapId
                                                                                                                    && trs.SchedulesId == scheduleId
                                                                                                                    && trs.Cancelled == false));
            }
            log.LogMethodExit(alreadyPresent);
            return alreadyPresent;
        }

        internal bool HasBookingProduct()
        {
            log.LogMethodEntry();
            bool bookingProductIsPresent = false;
            if (this.TrxLines != null)
            {
                bookingProductIsPresent = this.TrxLines.Exists(tl => tl.ProductTypeCode.ToUpper() == ProductTypeValues.BOOKINGS && tl.LineValid == true && tl.CancelledLine == false);
                log.LogVariableState("alreadyPresent", bookingProductIsPresent);
            }
            log.LogMethodExit(bookingProductIsPresent);
            return bookingProductIsPresent;
        }

        internal bool HasValidPartyBookingSchedule()
        {
            log.LogMethodEntry();
            bool hasSchedule = false;
            if (this.TrxLines != null)
            {
                hasSchedule = this.TrxLines.Exists(tl => tl.ProductTypeCode.ToUpper() == ProductTypeValues.RENTAL
                                                                                    && tl.LineValid == true
                                                                                    && tl.CancelledLine == false
                                                                                    && tl.TransactionReservationScheduleDTOList != null
                                                                                    && tl.TransactionReservationScheduleDTOList.Any()
                                                                                    && tl.TransactionReservationScheduleDTOList.Exists(trs => trs.Cancelled == false));
                log.LogVariableState("hasSchedule", hasSchedule);
            }
            log.LogMethodExit(hasSchedule);
            return hasSchedule;
        }

        internal List<ValidationError> HasValidCustomer()
        {
            log.LogMethodEntry();
            List<ValidationError> validationErrorList = new List<ValidationError>();
            ValidationError validationError = null;
            if (this.customerDTO != null)
            {
                validationErrorList = ValidateCustomer(this.customerDTO);
            }
            else
            {
                validationError = new ValidationError(MessageContainerList.GetMessage(Utilities.ExecutionContext, "Customer"), MessageContainerList.GetMessage(Utilities.ExecutionContext, "Customer"), MessageContainerList.GetMessage(Utilities.ExecutionContext, "Customer information is mandatory"));
                validationErrorList.Add(validationError);
            }
            log.LogMethodExit(validationErrorList);
            return validationErrorList;
        }

        private List<ValidationError> ValidateCustomer(CustomerDTO customerDTO)
        {
            log.LogMethodEntry(customerDTO);
            List<ValidationError> validationErrorList = new List<ValidationError>();
            ValidationError validationError = null;
            CustomerBL customerBL = new CustomerBL(Utilities.ExecutionContext, customerDTO);
            if (customerDTO != null && (customerDTO.Id == -1 || customerDTO.IsChanged))
            {
                validationErrorList.AddRange(customerBL.Validate());
                if (string.IsNullOrWhiteSpace(customerDTO.FirstName))
                {
                    validationError = new ValidationError(MessageContainerList.GetMessage(Utilities.ExecutionContext, "Customer"), MessageContainerList.GetMessage(Utilities.ExecutionContext, "First Name"), MessageContainerList.GetMessage(Utilities.ExecutionContext, 303));
                    validationErrorList.Add(validationError);
                }
            }
            log.LogMethodExit(validationErrorList);
            return validationErrorList;
        }

        internal bool HasBookingPackageProducts()
        {
            log.LogMethodEntry();
            bool hasPackageProduct = false;
            if (this.TrxLines != null)
            {
                List<Transaction.TransactionLine> packageProductLines = GetPurchasedBookingPackageProducts();
                if (packageProductLines != null && packageProductLines.Count > 0)
                    hasPackageProduct = packageProductLines.Exists(tl => tl.LineValid == true && tl.CancelledLine == false);
            }
            log.LogMethodExit(hasPackageProduct);
            return hasPackageProduct;
        }

        internal List<Transaction.TransactionLine> GetPurchasedBookingPackageProducts()
        {
            log.LogMethodEntry();
            List<Transaction.TransactionLine> transactionLines = null;
            transactionLines = GetPurchasedProductsForReservation(true);
            log.LogMethodExit(transactionLines);
            return transactionLines;
        }

        /// <summary>
        /// GetPurchasedAdditionalProducts
        /// </summary>
        /// <returns></returns>
        internal List<Transaction.TransactionLine> GetPurchasedAdditionalProductsForBooking()
        {
            log.LogMethodEntry();
            List<Transaction.TransactionLine> transactionLines = null;
            transactionLines = GetPurchasedProductsForReservation(false);
            log.LogMethodExit(transactionLines);
            return transactionLines;
        }


        private List<Transaction.TransactionLine> GetPurchasedProductsForReservation(bool packageProducts)
        {
            log.LogMethodEntry();
            List<Transaction.TransactionLine> transactionLines = null;
            if (this.TrxLines != null)
            {
                Transaction.TransactionLine bookingProductTrxLine = GetBookingProductTransactionLine();
                if (bookingProductTrxLine != null)
                {
                    ComboProductList comboProductList = new ComboProductList(Utilities.ExecutionContext);
                    List<KeyValuePair<ComboProductDTO.SearchByParameters, string>> searchParameters = new List<KeyValuePair<ComboProductDTO.SearchByParameters, string>>();
                    searchParameters.Add(new KeyValuePair<ComboProductDTO.SearchByParameters, string>(ComboProductDTO.SearchByParameters.PRODUCT_ID, bookingProductTrxLine.ProductID.ToString()));
                    searchParameters.Add(new KeyValuePair<ComboProductDTO.SearchByParameters, string>(ComboProductDTO.SearchByParameters.SITE_ID, Utilities.ExecutionContext.GetSiteId().ToString()));
                    searchParameters.Add(new KeyValuePair<ComboProductDTO.SearchByParameters, string>(ComboProductDTO.SearchByParameters.ADDITIONAL_PRODUCT, (packageProducts == true ? "0" : "1")));
                    List<ComboProductDTO> comboProductDTOList = comboProductList.GetComboProductDTOList(searchParameters);
                    if (comboProductDTOList != null && comboProductDTOList.Count > 0)
                    {
                        transactionLines = new List<Transaction.TransactionLine>();
                        foreach (ComboProductDTO comboProductDTOItem in comboProductDTOList)
                        {
                            List<Transaction.TransactionLine> fetchedTrxLines = GetReservationProductTransactionLines(comboProductDTOItem.ChildProductId, comboProductDTOItem.ComboProductId);
                            if (fetchedTrxLines != null && fetchedTrxLines.Count > 0)
                            {
                                transactionLines.AddRange(fetchedTrxLines);
                            }
                        }
                    }
                }
                else
                {
                    log.Info(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2169));
                    //throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2169));// "Transaction does not have a booking product"
                }
            }
            log.LogMethodExit(transactionLines);
            return transactionLines;
        }

        internal List<Transaction.TransactionLine> GetReservationProductTransactionLines(int productId, int comboProductId)
        {
            log.LogMethodEntry();
            try
            {
                List<Transaction.TransactionLine> selectedTrxLines = null;
                if (this.TrxLines != null)
                {
                    List<Transaction.TransactionLine> selectedParentTrxLines = this.TrxLines.Where(tl => tl.ProductID == productId
                                                                                                    && tl.ComboproductId == comboProductId
                                                                                                    && tl.LineValid == true
                                                                                                    && tl.CancelledLine == false).ToList();
                    if (selectedParentTrxLines != null && selectedParentTrxLines.Count > 0)
                    {
                        selectedTrxLines = LoadTrxLineDetails(selectedParentTrxLines);
                    }
                }

                log.LogMethodExit(selectedTrxLines);
                return selectedTrxLines;
            }
            catch (Exception ex)
            {
                log.Error(ex);
                log.LogMethodExit(ex.Message);
                throw;
            }
        }

        private List<Transaction.TransactionLine> LoadTrxLineDetails(List<Transaction.TransactionLine> selectedParentTrxLines)
        {
            log.LogMethodEntry();
            List<Transaction.TransactionLine> selectedTrxLines = new List<Transaction.TransactionLine>();
            if (selectedParentTrxLines != null)
            {
                foreach (Transaction.TransactionLine parentTrxLine in selectedParentTrxLines)
                {
                    selectedTrxLines.Add(parentTrxLine);
                    List<Transaction.TransactionLine> selectedChildTrxLines = this.TrxLines.Where(tl => tl.ParentLine == parentTrxLine
                                                                                                     && tl.LineValid == true && tl.CancelledLine == false).ToList();

                    if (selectedChildTrxLines != null && selectedChildTrxLines.Count > 0)
                    {
                        List<Transaction.TransactionLine> selectedSubChildTrxLines = LoadTrxLineDetails(selectedChildTrxLines);
                        if (selectedSubChildTrxLines != null)
                            selectedTrxLines.AddRange(selectedSubChildTrxLines);
                    }
                }
            }
            log.LogMethodExit(selectedTrxLines);
            return selectedTrxLines;
        }

        /// <summary>
        /// Add cancellation charge product
        /// </summary>
        /// <param name="card"></param>
        /// <param name="productList"></param>
        /// <param name="addCashPayment"></param>
        internal void AddReservationCancellationProduct(Card card, List<KeyValuePair<int, double>> productList, bool addCashPayment = true)
        {
            log.LogMethodEntry(productList, addCashPayment);
            if (this.TrxLines != null && productList != null && productList.Count > 0)
            {

                string msg = "";
                double cancellationAmount = 0;
                foreach (KeyValuePair<int, double> productInfo in productList)
                {
                    log.LogVariableState("productInfo.Key", productInfo.Key);
                    log.LogVariableState("productInfo.Value", productInfo.Value);
                    double lineAmount = 0;
                    cancellationAmount += productInfo.Value;
                    DataRow productDataRow = getProductDetails(productInfo.Key);
                    if (productDataRow["TaxInclusivePrice"].ToString() == "N")
                    {
                        //deduct tax amount
                        lineAmount = productInfo.Value - (productInfo.Value * (1 - (1 / (1 + Convert.ToDouble(productDataRow["tax_percentage"]) / 100))));
                    }
                    else
                    {
                        lineAmount = productInfo.Value;
                    }
                    log.LogVariableState("lineAmount", lineAmount);
                    if (createTransactionLine(card, productInfo.Key, lineAmount, 1, ref msg) != 0)
                    {
                        log.Error(msg);
                        log.LogMethodExit(msg);
                        throw new ValidationException(msg);
                    }
                }

                foreach (KeyValuePair<int, double> productInfo in productList)
                {
                    List<Transaction.TransactionLine> cancellationTrxLines = this.TrxLines.Where(tl => tl.LineValid && tl.ProductID == productInfo.Key && tl.TransactionDiscountsDTOList != null).ToList();
                    if (cancellationTrxLines != null && cancellationTrxLines.Count > 0)
                    {
                        for (int i = 0; i < cancellationTrxLines.Count; i++)
                        {
                            int lineIndex = this.TrxLines.IndexOf(cancellationTrxLines[i]);
                            log.LogVariableState("line Index of cancellation line", lineIndex);
                            this.TrxLines[lineIndex].TransactionDiscountsDTOList = null;
                        }
                    }
                }
                updateAmounts(false);
                //throw new Exception("test");
                if (this.TransactionPaymentsDTOList != null && this.TransactionPaymentsDTOList.Count > 0)
                {
                    double sumReceived = this.TransactionPaymentsDTOList.Sum(tpDTO => tpDTO.Amount);
                    if (sumReceived > cancellationAmount)
                    {
                        double returnAmount = (sumReceived - cancellationAmount) * -1;
                        log.LogVariableState("returnAmount", returnAmount);
                        if (addCashPayment)
                        {
                            int paymentModeId = -1;
                            PaymentModeDTO paymentModeDTO = null;
                            PaymentModeList paymentModeListBL = new PaymentModeList(Utilities.ExecutionContext);
                            List<KeyValuePair<PaymentModeDTO.SearchByParameters, string>> searchParameters = new List<KeyValuePair<PaymentModeDTO.SearchByParameters, string>>();
                            searchParameters.Add(new KeyValuePair<PaymentModeDTO.SearchByParameters, string>(PaymentModeDTO.SearchByParameters.ISCASH, "Y"));
                            List<PaymentModeDTO> paymentModeDTOList = paymentModeListBL.GetPaymentModeList(searchParameters);
                            if (paymentModeDTOList != null)
                            {
                                paymentModeId = paymentModeDTOList[0].PaymentModeId;
                                paymentModeDTO = paymentModeDTOList[0];
                            }
                            TransactionPaymentsDTO transactionPaymentsDTO = new TransactionPaymentsDTO(-1, this.Trx_id, paymentModeId, returnAmount, "", "", "", "", "", -1, "", -1, -1, "", "", false, Utilities.ExecutionContext.GetSiteId(), -1, "", Utilities.getServerTime(), "", -1, null, 0, -1, Utilities.ParafaitEnv.POSMachine, -1, "", null);
                            transactionPaymentsDTO.paymentModeDTO = paymentModeDTO;
                            log.LogVariableState("transactionPaymentsDTO", transactionPaymentsDTO);
                            this.TransactionPaymentsDTOList.Add(transactionPaymentsDTO);
                        }

                    }
                }
            }
            log.LogMethodExit();
        }

        internal List<int> GetTrxLineIDList(int productid, int comboProductId)
        {
            log.LogMethodEntry(productid, comboProductId);
            List<int> trxLineIdList = new List<int>();
            if (this.TrxLines != null)
            {
                foreach (Transaction.TransactionLine trxLine in this.TrxLines)
                {
                    if (trxLine.ProductID == productid && trxLine.ComboproductId == comboProductId && trxLine.CancelledLine == false && trxLine.LineValid == true)
                    {
                        trxLineIdList.Add(this.TrxLines.IndexOf(trxLine));
                    }
                }
            }
            log.LogMethodExit(trxLineIdList);
            return trxLineIdList;
        }

        internal List<DiscountContainerDTO> GetReservationTransactionAppliedDiscountInfo(int productId, int comboProductId)
        {
            log.LogMethodEntry(productId, comboProductId);
            List<DiscountContainerDTO> appliedDiscountContainerDTOList = null;

            DiscountApplicability applicability = DiscountApplicability.LINE;
            if (productId == -1 && comboProductId == -1)
            {
                applicability = DiscountApplicability.TRANSACTION;
            }
            HashSet<int> discountIdList = new HashSet<int>();
            List<Transaction.TransactionLine> productLines = this.TrxLines.Where(tl => tl.LineValid == true
                                                                                                   && (tl.ProductID == productId || productId == -1)
                                                                                                   && (tl.ComboproductId == comboProductId || comboProductId == -1)).ToList();
            foreach (Transaction.TransactionLine lineItem in productLines)
            {
                if (lineItem.TransactionDiscountsDTOList != null && lineItem.TransactionDiscountsDTOList.Any())
                {
                    discountIdList.UnionWith(lineItem.TransactionDiscountsDTOList.Where(x => x.Applicability == applicability).Select(x => x.DiscountId));
                }
            }
            if (discountIdList != null && discountIdList.Any())
            {
                appliedDiscountContainerDTOList = new List<DiscountContainerDTO>();
                foreach (int discountId in discountIdList)
                {
                    DiscountContainerDTO discountContainerDTO =
                        DiscountContainerList.GetDiscountContainerDTOOrDefault(Utilities.ExecutionContext, discountId);
                    if (discountContainerDTO == null)
                    {
                        string message = MessageContainerList.GetMessage(Utilities.ExecutionContext, 2196, "Discount", discountId);
                        log.LogMethodExit(null, "Throwing Exception - " + message);
                        throw new EntityNotFoundException(message);
                    }
                    appliedDiscountContainerDTOList.Add(discountContainerDTO);
                }
            }
            log.LogMethodExit(appliedDiscountContainerDTOList);
            return appliedDiscountContainerDTOList;
        }

        internal void ApplyTransactionProfile(int transactionProfileId, int productId, int comboProductId, string userVerificationId, string userVerificationName)
        {
            log.LogMethodEntry(transactionProfileId, productId, comboProductId, userVerificationId, userVerificationName);
            try
            {
                if (this.TrxLines != null)
                {
                    if (productId > -1 && comboProductId > -1)
                    {
                        List<int> trxLineIdList = GetTrxLineIDList(productId, comboProductId);
                        if (trxLineIdList != null)
                        {
                            log.LogVariableState("trxLineIdList", trxLineIdList);
                            for (int lineIDToTransactionProfile = trxLineIdList.Count - 1; lineIDToTransactionProfile >= 0; lineIDToTransactionProfile--)
                            {
                                ApplyProfile(transactionProfileId, this.TrxLines[lineIDToTransactionProfile]);
                                if (string.IsNullOrEmpty(userVerificationId) == false)
                                {
                                    this.TrxLines[lineIDToTransactionProfile].userVerificationId = userVerificationId;
                                    this.TrxLines[lineIDToTransactionProfile].userVerificationName = userVerificationName;
                                }
                            }
                        }
                    }
                    else if (productId == -1 && comboProductId == -1)
                    {
                        CanApplyTrxProfileAtTransactionLevel();
                        ApplyProfile(transactionProfileId);
                        if (string.IsNullOrEmpty(userVerificationId) == false)
                        {
                            this.TrxLines[0].userVerificationId = userVerificationId;
                            this.TrxLines[0].userVerificationName = userVerificationName;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                log.Error(ex);
                throw;
            }
            log.LogMethodExit();
        }

        internal string GetReservationFacilities(string reservationStatus)
        {
            log.LogMethodEntry();
            string facilityNameList = string.Empty;
            List<int> facilityMapIdList = new List<int>();
            List<Transaction.TransactionLine> scheduleLines = GetScheduleTransactionLines();
            if (scheduleLines != null && scheduleLines.Count > 0)
            {
                //facilityNameList = new List<string>();
                foreach (Transaction.TransactionLine item in scheduleLines)
                {
                    if (item.LineValid && item.TransactionReservationScheduleDTOList != null && item.TransactionReservationScheduleDTOList.Any()
                        && (item.TransactionReservationScheduleDTOList.Exists(trs => trs.Cancelled == false)
                           || reservationStatus == ReservationDTO.ReservationStatus.CANCELLED.ToString()))
                    {
                        TransactionReservationScheduleDTO transactionReservationScheduleDTO = item.GetCurrentTransactionReservationScheduleDTO();
                        int facilityMapId = transactionReservationScheduleDTO.FacilityMapId;
                        if (facilityMapIdList.Contains(facilityMapId) == false)
                        {
                            facilityMapIdList.Add(facilityMapId);
                            FacilityMapBL facilityMapBL = new FacilityMapBL(Utilities.ExecutionContext, facilityMapId);
                            if (string.IsNullOrEmpty(facilityNameList))
                            {
                                facilityNameList = facilityMapBL.GetMappedFacilityNames();
                            }
                            else
                            {
                                facilityNameList = "," + facilityMapBL.GetMappedFacilityNames();
                            }

                        }
                    }
                }

            }
            log.LogMethodExit(facilityNameList);
            return facilityNameList;
        }

        internal int GetReservationTransactionGuestQuantity()
        {
            log.LogMethodEntry();
            int guestQty = 1;
            if (this.TrxLines != null)
            {
                List<Transaction.TransactionLine> scheduleLines = this.TrxLines.Where(tl => tl.TransactionReservationScheduleDTOList != null && tl.LineValid == true).ToList();
                if (scheduleLines != null && scheduleLines.Count > 0)
                {
                    Transaction.TransactionLine bookingProductLine = GetBookingProductTransactionLine();
                    if (bookingProductLine != null && bookingProductLine.ParentLine != null)
                    {
                        int scheduleLineIndex = this.TrxLines.IndexOf(bookingProductLine.ParentLine);
                        TransactionReservationScheduleDTO transactionReservationScheduleDTO = this.TrxLines[scheduleLineIndex].GetCurrentTransactionReservationScheduleDTO();
                        guestQty = transactionReservationScheduleDTO.GuestQuantity;
                    }
                }
            }
            log.LogMethodExit(guestQty);
            return guestQty;
        }

        internal DiscountContainerDTO GetAppliedDiscountCouponForReservation()
        {
            log.LogMethodEntry();
            DiscountContainerDTO discountContainerDTO = null;
            if (this.DiscountApplicationHistoryDTOList != null)
            {
                DiscountApplicationHistoryDTO discountApplicationHistoryDTO = this.DiscountApplicationHistoryDTOList.Where(x => string.IsNullOrWhiteSpace(x.CouponNumber) == false).FirstOrDefault();
                if (discountApplicationHistoryDTO != null)
                {
                    discountContainerDTO = DiscountContainerList.GetDiscountContainerDTO(Utilities.ExecutionContext, discountApplicationHistoryDTO.DiscountId);
                }
            }
            log.LogMethodExit(discountContainerDTO);
            return discountContainerDTO;
        }

        internal DiscountContainerDTO GetAppliedDiscountForReservation()
        {
            log.LogMethodEntry();
            DiscountContainerDTO discountContainerDTO = null;
            if (this.DiscountApplicationHistoryDTOList != null)
            {
                DiscountApplicationHistoryDTO discountApplicationHistoryDTO = this.DiscountApplicationHistoryDTOList.Where(x => x.TransactionLineBL == null).FirstOrDefault();
                if (discountApplicationHistoryDTO != null)
                {
                    discountContainerDTO = DiscountContainerList.GetDiscountContainerDTO(Utilities.ExecutionContext, discountApplicationHistoryDTO.DiscountId);
                }
            }
            log.LogMethodExit(discountContainerDTO);
            return discountContainerDTO;
        }
        /// <summary>
        /// ResetReceiptPrintFlagForKOTItemsToBePrinted
        /// </summary>
        /// <param name="posPrintersDTOList"></param>
        public void ResetReceiptPrintFlagForKOTItemsToBePrinted(List<POSPrinterDTO> posPrintersDTOList)
        {
            log.LogMethodEntry(posPrintersDTOList);
            if (this.TrxLines != null && this.TrxLines.Count > 0)
            {
                foreach (Transaction.TransactionLine lineItem in this.TrxLines)
                {
                    if (lineItem.LineValid && lineItem.PrintKOT && lineItem.ReceiptPrinted
                        && (lineItem.KOTPrintCount == DBNull.Value || (lineItem.KOTPrintCount != DBNull.Value && Convert.ToInt32(lineItem.KOTPrintCount) == 0))
                        && POSPrinterListBL.EligibleForKOTPrint(lineItem.ProductID, posPrintersDTOList))
                    {
                        log.LogVariableState("lineItem before reseting ReceiptPrinted", lineItem);
                        lineItem.ReceiptPrinted = false;
                    }
                }
            }
            log.LogMethodExit();
        }

        internal void AddCustomer(CustomerDTO customerDTO)
        {
            log.LogMethodEntry(customerDTO);
            if (customerDTO == null)
            {
                throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, "Customer details are missing"));
            }

            List<ValidationError> validationErrorList = ValidateCustomer(customerDTO);
            if (validationErrorList != null && validationErrorList.Count > 0)
            {
                throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2157), validationErrorList);//"Valid Customer is required"
            }
            this.customerDTO = customerDTO;
            log.LogMethodExit();
        }

        internal void SetPrimaryCard(Card card)
        {
            log.LogMethodEntry(card);
            if (card == null || card.card_id == -1)
            {
                throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, "Card details are missing"));
            }
            else
            {
                this.PrimaryCard = card;
            }
            log.LogMethodExit();
        }

        internal void ResetPrimaryCard()
        {
            log.LogMethodEntry();
            log.LogVariableState("this.PrimaryCard", this.PrimaryCard);
            if (this.PrimaryCard != null)
            {
                this.PrimaryCard = null;
            }
            log.LogMethodExit();
        }
        public void UpdateTransactionLine(int lineId, double credits, double courtesy, double bonus, int tickets, double loyaltyPoints)
        {
            log.LogMethodEntry(lineId, credits, courtesy, bonus, tickets, loyaltyPoints);
            if (this.TrxLines != null && this.TrxLines.Count >= lineId)
            {
                int lineIndex = lineId - 1;
                this.TrxLines[lineIndex].Credits = credits;
                this.TrxLines[lineIndex].Courtesy = courtesy;
                this.TrxLines[lineIndex].Bonus = bonus;
                this.TrxLines[lineIndex].Tickets = tickets;
                this.TrxLines[lineIndex].LoyaltyPoints = loyaltyPoints;
            }

            log.LogMethodExit();
        }

        public void SaveCustomer(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry();
            if (this.customerDTO != null && (this.customerDTO.Id == -1 || this.customerDTO.IsChangedRecursive))
            {
                CustomerBL customerBL = new CustomerBL(Utilities.ExecutionContext, customerDTO);
                customerBL.Save(sqlTrx);
            }
            log.LogMethodExit();
        }


        /// <summary>
        /// LoadRegistrationBonus - Load Registraction Bonus when a customer registers
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="cardId">account to link customer to</param>
        /// <param name="SQLTrx">SQL Transaction Object</param>
        /// <param name="macAddress">MAC Address of machine</param>
        public void LoadRegistrationBonus(int customerId, int cardId, System.Data.SqlClient.SqlTransaction SQLTrx, string macAddress)
        {
            log.LogMethodEntry(customerId, cardId, SQLTrx, macAddress);
            string strProdId = ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "LOAD_PRODUCT_ON_REGISTRATION");
            int productId = -1;

            if (int.TryParse(strProdId, out productId) && productId != -1)
            {
                if (ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "REGISTRATION_BONUS_ON_VERIFICATION").Equals("N"))
                {
                    log.Debug("Call load bonus");
                    LoadBonusOnCustomerRegistration(customerId, cardId, productId, SQLTrx);
                }
                else
                {
                    Parafait.Customer.CustomerVerificationBL customerVerificationBL = new Parafait.Customer.CustomerVerificationBL(Utilities.ExecutionContext, customerId);
                    customerVerificationBL.GenerateVerificationRecord(customerId, Utilities.ParafaitEnv.LoginID, macAddress, true, SQLTrx);
                }
            }
            log.LogMethodExit();
        }


        private void LoadBonusOnCustomerRegistration(int customerId, int cardId, int productId, System.Data.SqlClient.SqlTransaction SQLTrx)
        {
            log.LogMethodEntry(customerId, cardId, SQLTrx);
            if (ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "REGISTRATION_BONUS_ON_VERIFICATION").Equals("N"))
            {
                if (productId != -1)
                {
                    string message = "";
                    Card card = new Card(cardId, Utilities.ParafaitEnv.LoginID, Utilities, SQLTrx);
                    card.getCardDetails(cardId, SQLTrx);

                    createTransactionLine(card, productId, 1, ref message);

                    PaymentModeList paymentModeListBL = new PaymentModeList(Utilities.ExecutionContext);
                    List<KeyValuePair<PaymentModeDTO.SearchByParameters, string>> searchPaymentModeParameters = new List<KeyValuePair<PaymentModeDTO.SearchByParameters, string>>();
                    searchPaymentModeParameters.Add(new KeyValuePair<PaymentModeDTO.SearchByParameters, string>(PaymentModeDTO.SearchByParameters.SITE_ID, (Utilities.ParafaitEnv.IsCorporate ? Utilities.ParafaitEnv.SiteId : -1).ToString()));
                    searchPaymentModeParameters.Add(new KeyValuePair<PaymentModeDTO.SearchByParameters, string>(PaymentModeDTO.SearchByParameters.ISCASH, "Y"));
                    List<PaymentModeDTO> paymentModeDTOList = paymentModeListBL.GetPaymentModeList(searchPaymentModeParameters);
                    if (paymentModeDTOList != null)
                    {
                        TransactionPaymentsDTO trxPaymentDTO = new TransactionPaymentsDTO(-1, -1, paymentModeDTOList[0].PaymentModeId, Net_Transaction_Amount,
                                                                                            "", "", "", "", "", -1, "", -1, 0, -1, "", "", false, -1, -1, "", Utilities.getServerTime(),
                                                                                            Utilities.ParafaitEnv.LoginID, -1, null, 0, -1, Utilities.ParafaitEnv.POSMachine, -1, "", null);
                        trxPaymentDTO.paymentModeDTO = paymentModeDTOList[0];

                        if (TransactionPaymentsDTOList == null)
                            TransactionPaymentsDTOList = new List<TransactionPaymentsDTO>();

                        TransactionPaymentsDTOList.Add(trxPaymentDTO);
                    }

                    int retVal = SaveTransacation(SQLTrx, ref message);
                    if (retVal != 0)
                    {
                        log.Error("Error while loading customer bonus " + message);
                        throw new Exception("Unable to Load Registration Bonus!");
                    }
                }
            }
            log.LogMethodExit();
        }

        internal void LoadAttendeeDetails(SqlTransaction sqlTrx = null)
        {
            log.LogMethodEntry();
            if (this.Trx_id > 0)
            {
                BookingAttendeeList bookingAttendeeList = new BookingAttendeeList(Utilities.ExecutionContext);
                List<KeyValuePair<BookingAttendeeDTO.SearchByParameters, string>> attendeeSearch = new List<KeyValuePair<BookingAttendeeDTO.SearchByParameters, string>>();
                attendeeSearch.Add(new KeyValuePair<BookingAttendeeDTO.SearchByParameters, string>(BookingAttendeeDTO.SearchByParameters.TRX_ID, this.Trx_id.ToString()));
                attendeeSearch.Add(new KeyValuePair<BookingAttendeeDTO.SearchByParameters, string>(BookingAttendeeDTO.SearchByParameters.SITE_ID, Utilities.ExecutionContext.GetSiteId().ToString()));
                this.bookingAttendeeList = bookingAttendeeList.GetAllBookingAttendeeList(attendeeSearch, sqlTrx);
            }
            log.LogMethodExit();
        }

        internal void SaveReservationAttendees(int bookingId, string bookingGuid, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(bookingId, sqlTrx);
            bool someRecordsSaved = false;
            someRecordsSaved = SaveTransactionAttendees(sqlTrx, bookingId);
            if (someRecordsSaved && bookingId > -1 && string.IsNullOrWhiteSpace(bookingGuid) == false)
            {
                //Attendee Details have changed
                Core.GenericUtilities.EventLog audit = new Core.GenericUtilities.EventLog(Utilities.ExecutionContext);
                audit.logEvent(MessageContainerList.GetMessage(Utilities.ExecutionContext, "Reservation"), 'D', Utilities.ExecutionContext.GetUserId(), MessageContainerList.GetMessage(Utilities.ExecutionContext, 2132), MessageContainerList.GetMessage(Utilities.ExecutionContext, "Book Reservation"), 0, "", bookingGuid.ToString(), sqlTrx);
            }
            log.LogMethodExit();
        }
        /// <summary>
        /// Save Transaction Attendees
        /// </summary>
        /// <param name="sqlTrx"></param>
        /// <param name="bookingId"></param>
        /// <returns></returns>
        public bool SaveTransactionAttendees(SqlTransaction sqlTrx, int bookingId = -1)
        {
            log.LogMethodEntry(sqlTrx, bookingId);
            bool someRecordsSaved = false;
            if (this.bookingAttendeeList != null && this.bookingAttendeeList.Count > 0)
            {
                foreach (BookingAttendeeDTO bookingAttendeeDTO in this.bookingAttendeeList)
                {
                    if (bookingId > -1 && bookingId != bookingAttendeeDTO.BookingId)
                    {
                        bookingAttendeeDTO.BookingId = bookingId;
                    }
                    if (bookingAttendeeDTO.TrxId != this.Trx_id)
                    {
                        bookingAttendeeDTO.TrxId = this.Trx_id;
                    }
                }
                if (bookingAttendeeList.Exists(ba => ba.IsChanged))
                {
                    BookingAttendeeList bookingAttendee = new BookingAttendeeList(Utilities.ExecutionContext, bookingAttendeeList);
                    this.bookingAttendeeList = bookingAttendee.Save(sqlTrx);
                    someRecordsSaved = true;
                }
            }
            log.LogMethodExit(someRecordsSaved);
            return someRecordsSaved;
        }

        /// <summary>
        /// Add Update Customer As Transaction Attendees
        /// </summary>
        /// <param name="customerDTO"></param>
        public void AddUpdateCustomerAsTransactionAttendees(CustomerDTO customerDTO)
        {
            log.LogMethodEntry(customerDTO);
            BookingAttendeeDTO bookingAttendeeDTO = null;
            string gender = (string.IsNullOrEmpty(customerDTO.Gender) ? String.Empty : (customerDTO.Gender == "M" ? "Male" : (customerDTO.Gender == "F" ? "Female" : String.Empty)));
            if (this.bookingAttendeeList == null || this.bookingAttendeeList.Any() == false)
            {
                this.bookingAttendeeList = new List<BookingAttendeeDTO>();
                bookingAttendeeDTO = new BookingAttendeeDTO(-1, -1, customerDTO.FirstName, null, gender, string.Empty, customerDTO.PhoneNumber,
                                                      customerDTO.Email, false, customerDTO.DateOfBirth, true, string.Empty, customerDTO.Id, Trx_id);

                this.bookingAttendeeList.Add(bookingAttendeeDTO);
            }
            else
            {
                BookingAttendeeDTO editedBADTO = this.bookingAttendeeList.Find(baDTO => (string.IsNullOrEmpty(baDTO.Name) == false && baDTO.Name.ToLower() == customerDTO.FirstName.ToLower())
                                                                                         && ((string.IsNullOrEmpty(baDTO.PhoneNumber) == false
                                                                                                 && baDTO.PhoneNumber == customerDTO.PhoneNumber)
                                                                                                 || (string.IsNullOrEmpty(baDTO.Email) == false
                                                                                                     && baDTO.Email.ToLower() == customerDTO.Email.ToLower())
                                                                                                 || customerDTO.Id == baDTO.CustomerId)
                                                                                             );
                var index = this.bookingAttendeeList.IndexOf(editedBADTO);
                if (index != -1)
                {
                    this.bookingAttendeeList[index].CustomerId = customerDTO.Id;
                    this.bookingAttendeeList[index].Email = customerDTO.Email;
                    this.bookingAttendeeList[index].PhoneNumber = customerDTO.PhoneNumber;
                    this.bookingAttendeeList[index].Name = customerDTO.FirstName;
                    this.bookingAttendeeList[index].Gender = gender;
                    this.bookingAttendeeList[index].DateofBirth = customerDTO.DateOfBirth;
                    this.bookingAttendeeList[index].IsActive = true;
                }
                else
                {
                    bookingAttendeeDTO = new BookingAttendeeDTO(-1, -1, customerDTO.FirstName, null, gender, string.Empty, customerDTO.PhoneNumber,
                                                      customerDTO.Email, false, customerDTO.DateOfBirth, true, string.Empty, customerDTO.Id, Trx_id);

                    this.bookingAttendeeList.Add(bookingAttendeeDTO);
                }
            }
            log.LogMethodExit();
        }

        internal void AddUpdateReservationAttendees(BookingAttendeeDTO bookingAttendeesDTO)
        {
            log.LogMethodEntry(bookingAttendeesDTO);
            if (this.bookingAttendeeList == null || this.bookingAttendeeList.Any() == false)
            {
                this.bookingAttendeeList = new List<BookingAttendeeDTO>();
                this.bookingAttendeeList.Add(bookingAttendeesDTO);
            }
            else
            {
                BookingAttendeeDTO editedBADTO = this.bookingAttendeeList.Find(baDTO => //baDTO.BookingId == bookingAttendeesDTO.BookingId && 
                                                                                        baDTO.TrxId == bookingAttendeesDTO.TrxId
                                                                                        && baDTO.Id == bookingAttendeesDTO.Id
                                                                                        && (string.IsNullOrEmpty(baDTO.Name) == false && baDTO.Name == bookingAttendeesDTO.Name));
                var index = this.bookingAttendeeList.IndexOf(editedBADTO);
                if (index != -1)
                {
                    this.bookingAttendeeList[index] = bookingAttendeesDTO;
                }
                else
                {
                    this.bookingAttendeeList.Add(bookingAttendeesDTO);
                }
            }
            log.LogMethodExit();
        }

        public void RemoveReservationAttendees(BookingAttendeeDTO bookingAttendeesDTO)
        {
            log.LogMethodEntry(bookingAttendeesDTO);
            if (this.bookingAttendeeList == null || this.bookingAttendeeList.Any() == false)
            {
                throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2154, MessageContainerList.GetMessage(Utilities.ExecutionContext, "Attendee")));//"Sorry, cannot proceed. &1 details are missing"
            }
            if (this.bookingAttendeeList != null && this.bookingAttendeeList.Any())
            {
                BookingAttendeeDTO editedBADTO = this.bookingAttendeeList.Where(baDTO => //baDTO.BookingId == bookingAttendeesDTO.BookingId && 
                                                                                         baDTO.TrxId == bookingAttendeesDTO.TrxId
                                                                                         && baDTO.Id == bookingAttendeesDTO.Id
                                                                                         && (string.IsNullOrEmpty(baDTO.Name) == false && baDTO.Name == bookingAttendeesDTO.Name)).First();
                var index = this.bookingAttendeeList.IndexOf(editedBADTO);
                if (index != -1)
                {
                    if (bookingAttendeesDTO.Id == -1)
                    {
                        this.bookingAttendeeList.RemoveAt(index);
                    }
                    else
                    {
                        if (bookingAttendeesDTO.CustomerId > -1)
                        {
                            List<int> customerIdList = GetMappedCustomerIdListForWaiver();
                            if (customerIdList != null && customerIdList.Any())
                            {
                                if (customerIdList.Exists(custId => custId == bookingAttendeesDTO.CustomerId))
                                {
                                    throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2358));//'Cannot deactivate the attendee. Signed waiver by attendee is mapped to transaction line(s)
                                }
                            }
                        }
                        bookingAttendeesDTO.IsActive = false;
                        this.bookingAttendeeList[index] = bookingAttendeesDTO;
                    }
                }
            }
            log.LogMethodExit();
        }

        internal void SaveReservationAttendeesOnly(int bookingId, string bookingGuId, SqlTransaction sqlTrx = null)
        {
            log.LogMethodEntry(bookingId, bookingGuId, sqlTrx);
            if (this.bookingAttendeeList == null || this.bookingAttendeeList.Any() == false)
            {
                throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2154, MessageContainerList.GetMessage(Utilities.ExecutionContext, "Attendee")));//"Sorry, cannot proceed. &1 details are missing"
            }
            ParafaitDBTransaction dBTransaction = null;
            try
            {
                if (sqlTrx == null)
                {
                    dBTransaction = new ParafaitDBTransaction();
                    dBTransaction.BeginTransaction();
                    sqlTrx = dBTransaction.SQLTrx;
                }
                SaveReservationAttendees(bookingId, bookingGuId, sqlTrx);
                if (dBTransaction != null)
                {
                    dBTransaction.EndTransaction();
                    sqlTrx = null;
                    dBTransaction.Dispose();
                }
            }
            catch (Exception ex)
            {
                log.Error(ex);
                if (dBTransaction != null)
                {
                    dBTransaction.RollBack();
                    dBTransaction.Dispose();
                    sqlTrx = null;
                }
                throw;
            }
            log.LogMethodExit();
        }

        /// <summary>
        /// Check whether Transaction has any active attendees
        /// </summary>
        /// <returns></returns>
        public bool HasActiveAttendeeList()
        {
            log.LogMethodEntry();
            bool hasList = false;
            if (this.bookingAttendeeList != null && this.bookingAttendeeList.Exists(at => at.IsActive == true))
            {
                hasList = true;
            }
            log.LogMethodExit(hasList);
            return hasList;
        }
        /// <summary>
        /// Is Waiver Signature Pending
        /// </summary>
        /// <returns></returns>
        public bool IsWaiverSignaturePending()
        {
            log.LogMethodEntry();
            bool waiverSignaturePending = false;
            if (this.TrxLines != null)
            {
                waiverSignaturePending = this.TrxLines.Exists(tl => tl.LineValid && tl.WaiverSignedDTOList != null && tl.WaiverSignedDTOList.Any() && tl.WaiverSignedDTOList.Exists(ws => ws.CustomerSignedWaiverId == -1 && ws.IsActive == true));
            }
            log.LogMethodExit(waiverSignaturePending);
            return waiverSignaturePending;
        }

        /// <summary>
        /// Is Waiver Signature Pending
        /// </summary>
        /// <returns></returns>
        public bool IsWaiverSignaturePending(int lineId)
        {
            log.LogMethodEntry(lineId);
            bool waiverSignaturePending = false;
            if (this.TrxLines != null)
            {
                waiverSignaturePending = (this.TrxLines[lineId].WaiverSignedDTOList != null && this.TrxLines[lineId].WaiverSignedDTOList.Any() && this.TrxLines[lineId].WaiverSignedDTOList.Exists(ws => ws.CustomerSignedWaiverId == -1 && ws.IsActive == true));
            }
            log.LogMethodExit(waiverSignaturePending);
            return waiverSignaturePending;
        }
        /// <summary>
        /// Waiver Signature Required is true if there are product lines with waiver needs
        /// </summary>
        /// <returns></returns>
        public bool WaiverSignatureRequired()
        {
            log.LogMethodEntry();
            bool waiverSignatureRequired = false;
            if (this.TrxLines != null)
            {
                waiverSignatureRequired = this.TrxLines.Exists(tl => tl.LineValid && tl.WaiverSignedDTOList != null && tl.WaiverSignedDTOList.Any());
            }
            log.LogMethodExit(waiverSignatureRequired);
            return waiverSignatureRequired;
        }
        /// <summary>
        /// Get Waivers DTO List
        /// </summary>
        /// <returns></returns>
        public List<WaiversDTO> GetWaiversDTOList()
        {
            log.LogMethodEntry();
            List<WaiversDTO> waiversDTOList = new List<WaiversDTO>();
            if (this.TrxLines != null)
            {

                List<Transaction.TransactionLine> trxLineWithWaivers = this.TrxLines.Where(tl => tl.LineValid && tl.WaiverSignedDTOList != null && tl.WaiverSignedDTOList.Any() == true).ToList();
                if (trxLineWithWaivers != null && trxLineWithWaivers.Any())
                {
                    List<int> waiversIdList = new List<int>();
                    for (int i = 0; i < trxLineWithWaivers.Count; i++)
                    {
                        waiversIdList.AddRange(trxLineWithWaivers[i].WaiverSignedDTOList.Select(ws => ws.WaiverSetDetailId).Distinct().ToList());
                    }
                    if (waiversIdList != null && waiversIdList.Any())
                    {
                        waiversIdList = waiversIdList.Distinct().ToList();
                        string waiversIDListString = string.Empty;
                        for (int i = 0; i < waiversIdList.Count; i++)
                        {
                            waiversIDListString = waiversIDListString + waiversIdList[i].ToString() + ",";
                        }
                        waiversIDListString = waiversIDListString.Substring(0, waiversIDListString.Length - 1);
                        WaiversListBL waiversListBL = new WaiversListBL(Utilities.ExecutionContext);
                        List<KeyValuePair<WaiversDTO.SearchByWaivers, string>> searchParam = new List<KeyValuePair<WaiversDTO.SearchByWaivers, string>>();
                        searchParam.Add(new KeyValuePair<WaiversDTO.SearchByWaivers, string>(WaiversDTO.SearchByWaivers.WAIVERSETDETAIL_ID_LIST, waiversIDListString));
                        searchParam.Add(new KeyValuePair<WaiversDTO.SearchByWaivers, string>(WaiversDTO.SearchByWaivers.SITE_ID, Utilities.ExecutionContext.GetSiteId().ToString()));
                        waiversDTOList = waiversListBL.GetWaiversDTOList(searchParam);
                        if (waiversDTOList == null)
                        {
                            waiversDTOList = new List<WaiversDTO>();
                        }
                    }
                }
            }
            List<WaiversDTO> waiversDTOListFinal = new List<WaiversDTO>(waiversDTOList);
            log.LogMethodExit(waiversDTOListFinal);
            return waiversDTOListFinal;
        }

        /// <summary>
        /// Get Pending Waivers DTO List 
        /// </summary>
        /// <returns></returns>
        public List<WaiversDTO> GetPendingWaiversDTOList()
        {
            log.LogMethodEntry();
            List<WaiversDTO> waiversDTOList = new List<WaiversDTO>();
            if (this.TrxLines != null)
            {

                List<Transaction.TransactionLine> trxLineWithWaivers = this.TrxLines.Where(tl => tl.WaiverSignedDTOList != null && tl.WaiverSignedDTOList.Any() == true).ToList();
                if (trxLineWithWaivers != null && trxLineWithWaivers.Any())
                {
                    List<int> waiversIdList = new List<int>();
                    for (int i = 0; i < trxLineWithWaivers.Count; i++)
                    {
                        waiversIdList.AddRange(trxLineWithWaivers[i].WaiverSignedDTOList.Where(ws => ws.CustomerSignedWaiverId == -1 && ws.IsActive).Select(ws => ws.WaiverSetDetailId).Distinct().ToList());
                    }
                    if (waiversIdList != null && waiversIdList.Any())
                    {
                        waiversIdList = waiversIdList.Distinct().ToList();
                        string waiversIDListString = string.Empty;
                        for (int i = 0; i < waiversIdList.Count; i++)
                        {
                            waiversIDListString = waiversIDListString + waiversIdList[i].ToString() + ",";
                        }
                        waiversIDListString = waiversIDListString.Substring(0, waiversIDListString.Length - 1);
                        WaiversListBL waiversListBL = new WaiversListBL(Utilities.ExecutionContext);
                        List<KeyValuePair<WaiversDTO.SearchByWaivers, string>> searchParam = new List<KeyValuePair<WaiversDTO.SearchByWaivers, string>>();
                        searchParam.Add(new KeyValuePair<WaiversDTO.SearchByWaivers, string>(WaiversDTO.SearchByWaivers.WAIVERSETDETAIL_ID_LIST, waiversIDListString));
                        searchParam.Add(new KeyValuePair<WaiversDTO.SearchByWaivers, string>(WaiversDTO.SearchByWaivers.SITE_ID, Utilities.ExecutionContext.GetSiteId().ToString()));
                        waiversDTOList = waiversListBL.GetWaiversDTOList(searchParam);
                        if (waiversDTOList == null)
                        {
                            waiversDTOList = new List<WaiversDTO>();
                        }
                    }
                }
            }
            List<WaiversDTO> waiversDTOListFinal = new List<WaiversDTO>(waiversDTOList);
            log.LogMethodExit(waiversDTOListFinal);
            return waiversDTOListFinal;
        }

        /// <summary>
        /// Get Waivers DTO List
        /// </summary>
        /// <returns></returns>
        public List<WaiversDTO> GetWaiversDTOList(int lineId)
        {
            log.LogMethodEntry(lineId);
            List<WaiversDTO> waiversDTOList = null;
            if (this.TrxLines != null)
            {

                if (this.TrxLines[lineId].WaiverSignedDTOList != null && this.TrxLines[lineId].WaiverSignedDTOList.Any())
                {
                    List<int> waiversIdList = new List<int>();
                    waiversIdList = this.TrxLines[lineId].WaiverSignedDTOList.Select(ws => ws.WaiverSetDetailId).Distinct().ToList();
                    if (waiversIdList != null && waiversIdList.Any())
                    {
                        waiversIdList = waiversIdList.Distinct().ToList();
                        string waiversIDListString = string.Empty;
                        for (int i = 0; i < waiversIdList.Count; i++)
                        {
                            waiversIDListString = waiversIDListString + waiversIdList[i].ToString() + ",";
                        }
                        waiversIDListString = waiversIDListString.Substring(0, waiversIDListString.Length - 1);
                        WaiversListBL waiversListBL = new WaiversListBL(Utilities.ExecutionContext);
                        List<KeyValuePair<WaiversDTO.SearchByWaivers, string>> searchParam = new List<KeyValuePair<WaiversDTO.SearchByWaivers, string>>();
                        searchParam.Add(new KeyValuePair<WaiversDTO.SearchByWaivers, string>(WaiversDTO.SearchByWaivers.WAIVERSETDETAIL_ID_LIST, waiversIDListString));
                        searchParam.Add(new KeyValuePair<WaiversDTO.SearchByWaivers, string>(WaiversDTO.SearchByWaivers.SITE_ID, Utilities.ExecutionContext.GetSiteId().ToString()));
                        waiversDTOList = waiversListBL.GetWaiversDTOList(searchParam);
                    }
                }
            }
            log.LogMethodExit(waiversDTOList);
            return waiversDTOList;
        }

        public List<CustomerDTO> GetAttendeeCustomers()
        {
            log.LogMethodEntry();
            List<CustomerDTO> customerDTOList = new List<CustomerDTO>();
            if (bookingAttendeeList != null && bookingAttendeeList.Any())
            {
                List<int> customerIdList = this.bookingAttendeeList.Where(attendee => attendee.IsActive == true && attendee.CustomerId > -1).Select(attendee => attendee.CustomerId).Distinct().ToList();
                if (customerIdList != null && customerIdList.Any())
                {
                    CustomerListBL customerListBL = new CustomerListBL(Utilities.ExecutionContext);
                    customerDTOList = customerListBL.GetCustomerDTOList(customerIdList, true);
                }
            }

            log.LogMethodExit(customerDTOList);
            return customerDTOList;
        }

        public List<int> GetAttendeeCustomerIds()
        {
            log.LogMethodEntry();
            List<int> customerIdList = new List<int>();
            if (bookingAttendeeList != null && bookingAttendeeList.Any())
            {
                customerIdList = this.bookingAttendeeList.Where(attendee => attendee.IsActive == true && attendee.CustomerId > -1).Select(attendee => attendee.CustomerId).Distinct().ToList();
            }

            log.LogMethodExit(customerIdList);
            return customerIdList;
        }
        public List<Transaction.TransactionLine> GetWaiverTransactionLines()
        {
            log.LogMethodEntry();
            List<Transaction.TransactionLine> waiverTrxLines = new List<TransactionLine>();
            if (this.TrxLines != null)
            {
                waiverTrxLines = TrxLines.Where(tl => tl.LineValid == true && tl.WaiverSignedDTOList != null && tl.WaiverSignedDTOList.Any() && tl.WaiverSignedDTOList.Exists(ws => ws.IsActive)).ToList();
                if (waiverTrxLines == null)
                {
                    waiverTrxLines = new List<TransactionLine>();
                }
            }
            log.LogMethodExit(waiverTrxLines);
            return waiverTrxLines;
        }

        public List<TransactionLine> GetTransactionLinesPendingWaiverSign()
        {
            log.LogMethodEntry();
            List<Transaction.TransactionLine> waiverTrxLines = new List<TransactionLine>();
            if (this.TrxLines != null)
            {
                waiverTrxLines = new List<TransactionLine>(GetWaiverTransactionLines());
                if (waiverTrxLines != null && waiverTrxLines.Any())
                {
                    waiverTrxLines = waiverTrxLines.Where(tl => tl.LineValid && tl.WaiverSignedDTOList != null && tl.WaiverSignedDTOList.Exists(ws => ws.IsActive == true && ws.CustomerSignedWaiverId == -1)).ToList();
                    if (waiverTrxLines == null)
                    {
                        waiverTrxLines = new List<TransactionLine>();
                    }
                }
            }
            log.LogMethodExit(waiverTrxLines);
            return waiverTrxLines;
        }
        /// <summary>
        /// Get Mapped Customer For Waiver
        /// </summary>
        /// <param name="lineId"></param>
        /// <returns></returns>
        public CustomerDTO GetMappedCustomerForWaiver(int lineId)
        {
            log.LogMethodEntry(lineId);
            CustomerDTO customerDTO = null;
            if (TrxLines != null && lineId >= 0 && lineId < TrxLines.Count)
            {
                int customerSignedWaiverId = -1;
                if (this.TrxLines[lineId].WaiverSignedDTOList != null && this.TrxLines[lineId].WaiverSignedDTOList.Any())
                {
                    customerSignedWaiverId = (this.TrxLines[lineId].WaiverSignedDTOList.Find(ws => ws.IsActive == true && ws.CustomerSignedWaiverId > -1) == null ? -1
                                              : this.TrxLines[lineId].WaiverSignedDTOList.Find(ws => ws.IsActive == true && ws.CustomerSignedWaiverId > -1).CustomerSignedWaiverId);
                    if (customerSignedWaiverId > -1)
                    {
                        CustomerSignedWaiverBL customerSignedWaiverBL = new CustomerSignedWaiverBL(Utilities.ExecutionContext, customerSignedWaiverId);
                        if (customerSignedWaiverBL.GetCustomerSignedWaiverDTO != null)
                        {
                            CustomerBL customerBL = new CustomerBL(Utilities.ExecutionContext, customerSignedWaiverBL.GetCustomerSignedWaiverDTO.SignedFor);
                            if (customerBL.CustomerDTO != null && customerBL.CustomerDTO.Id > -1)
                            {
                                customerDTO = customerBL.CustomerDTO;
                            }
                        }
                        else
                        {
                            throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2317,
                                                        MessageContainerList.GetMessage(Utilities.ExecutionContext, "Customer Signed Waiver"))); //Unable to find record for the &1
                        }
                    }


                }
            }
            log.LogMethodExit(customerDTO);
            return customerDTO;
        }
        /// <summary>
        /// Get Mapped Customer DTO List For Waiver
        /// </summary>
        /// <returns></returns>
        public List<CustomerDTO> GetMappedCustomerDTOListForWaiver()
        {
            log.LogMethodEntry();
            List<CustomerDTO> customerDTOList = new List<CustomerDTO>();
            List<int> customerSignedWaiverIdList = new List<int>();
            if (TrxLines != null)
            {
                for (int i = 0; i < TrxLines.Count; i++)
                {
                    if (TrxLines[i].LineValid && this.TrxLines[i].WaiverSignedDTOList != null && this.TrxLines[i].WaiverSignedDTOList.Any())
                    {
                        int customerSignedWaiverId = (this.TrxLines[i].WaiverSignedDTOList.Find(ws => ws.IsActive == true && ws.CustomerSignedWaiverId > -1) == null ? -1
                                                  : this.TrxLines[i].WaiverSignedDTOList.Find(ws => ws.IsActive == true && ws.CustomerSignedWaiverId > -1).CustomerSignedWaiverId);
                        if (customerSignedWaiverId > -1)
                        {
                            customerSignedWaiverIdList.Add(customerSignedWaiverId);
                        }
                    }
                }
                if (customerSignedWaiverIdList != null && customerSignedWaiverIdList.Any())
                {
                    customerSignedWaiverIdList = customerSignedWaiverIdList.Distinct().ToList();
                    string signedIDList = string.Empty;
                    for (int i = 0; i < customerSignedWaiverIdList.Count; i++)
                    {
                        signedIDList = signedIDList + customerSignedWaiverIdList[i] + ",";
                    }
                    signedIDList = signedIDList.Substring(0, signedIDList.Length - 1);
                    CustomerSignedWaiverListBL customerSignedWaiverListBL = new CustomerSignedWaiverListBL(Utilities.ExecutionContext);
                    List<KeyValuePair<CustomerSignedWaiverDTO.SearchByCSWParameters, string>> searchParam = new List<KeyValuePair<CustomerSignedWaiverDTO.SearchByCSWParameters, string>>();
                    //searchParam.Add(new KeyValuePair<CustomerSignedWaiverDTO.SearchByCSWParameters, string>(CustomerSignedWaiverDTO.SearchByCSWParameters.SITE_ID, Utilities.ExecutionContext.GetSiteId().ToString()));
                    searchParam.Add(new KeyValuePair<CustomerSignedWaiverDTO.SearchByCSWParameters, string>(CustomerSignedWaiverDTO.SearchByCSWParameters.CUSTOMER_SIGNED_WAIVER_ID_LIST, signedIDList));
                    List<CustomerSignedWaiverDTO> customerSignedWaiverDTOList = customerSignedWaiverListBL.GetAllCustomerSignedWaiverList(searchParam);
                    if (customerSignedWaiverDTOList != null && customerSignedWaiverDTOList.Any())
                    {
                        List<int> customerIdList = new List<int>();
                        for (int i = 0; i < customerSignedWaiverDTOList.Count; i++)
                        {
                            customerIdList.Add(customerSignedWaiverDTOList[i].SignedFor);
                        }
                        if (customerIdList != null)
                        {
                            customerIdList = customerIdList.Distinct().ToList();
                        }
                        CustomerListBL customerListBL = new CustomerListBL(Utilities.ExecutionContext);
                        customerDTOList = customerListBL.GetCustomerDTOList(customerIdList, true);
                    }
                }
            }
            log.LogMethodExit(customerDTOList);
            return customerDTOList;
        }

        /// <summary>
        /// Get Mapped Customer Id List For Waiver
        /// </summary>
        /// <returns></returns>
        public List<int> GetMappedCustomerIdListForWaiver()
        {
            log.LogMethodEntry();
            List<int> customerIdList = new List<int>();
            List<int> customerSignedWaiverIdList = new List<int>();
            if (TrxLines != null)
            {
                for (int i = 0; i < TrxLines.Count; i++)
                {
                    if (TrxLines[i].LineValid && this.TrxLines[i].WaiverSignedDTOList != null && this.TrxLines[i].WaiverSignedDTOList.Any())
                    {
                        int customerSignedWaiverId = (this.TrxLines[i].WaiverSignedDTOList.Find(ws => ws.IsActive == true && ws.CustomerSignedWaiverId > -1) == null ? -1
                                                  : this.TrxLines[i].WaiverSignedDTOList.Find(ws => ws.IsActive == true && ws.CustomerSignedWaiverId > -1).CustomerSignedWaiverId);
                        if (customerSignedWaiverId > -1)
                        {
                            customerSignedWaiverIdList.Add(customerSignedWaiverId);
                        }
                    }
                }
                if (customerSignedWaiverIdList != null && customerSignedWaiverIdList.Any())
                {
                    customerSignedWaiverIdList = customerSignedWaiverIdList.Distinct().ToList();
                    string signedIDList = string.Empty;
                    for (int i = 0; i < customerSignedWaiverIdList.Count; i++)
                    {
                        signedIDList = signedIDList + customerSignedWaiverIdList[i] + ",";
                    }
                    signedIDList = signedIDList.Substring(0, signedIDList.Length - 1);
                    CustomerSignedWaiverListBL customerSignedWaiverListBL = new CustomerSignedWaiverListBL(Utilities.ExecutionContext);
                    List<KeyValuePair<CustomerSignedWaiverDTO.SearchByCSWParameters, string>> searchParam = new List<KeyValuePair<CustomerSignedWaiverDTO.SearchByCSWParameters, string>>();
                    //searchParam.Add(new KeyValuePair<CustomerSignedWaiverDTO.SearchByCSWParameters, string>(CustomerSignedWaiverDTO.SearchByCSWParameters.SITE_ID, Utilities.ExecutionContext.GetSiteId().ToString()));
                    searchParam.Add(new KeyValuePair<CustomerSignedWaiverDTO.SearchByCSWParameters, string>(CustomerSignedWaiverDTO.SearchByCSWParameters.CUSTOMER_SIGNED_WAIVER_ID_LIST, signedIDList));
                    List<CustomerSignedWaiverDTO> customerSignedWaiverDTOList = customerSignedWaiverListBL.GetAllCustomerSignedWaiverList(searchParam);
                    if (customerSignedWaiverDTOList != null && customerSignedWaiverDTOList.Any())
                    {
                        //List<int> customerIdList = new List<int>();
                        for (int i = 0; i < customerSignedWaiverDTOList.Count; i++)
                        {
                            customerIdList.Add(customerSignedWaiverDTOList[i].SignedFor);
                        }
                        if (customerIdList != null)
                        {
                            customerIdList = customerIdList.Distinct().ToList();
                        }
                        //CustomerListBL customerListBL = new CustomerListBL(Utilities.ExecutionContext);
                        //customerDTOList = customerListBL.GetCustomerDTOList(customerIdList, true);
                    }
                }
            }
            log.LogMethodExit(customerIdList);
            return customerIdList;
        }
        /// <summary>
        /// Remove Mapped Waivers
        /// </summary>
        /// <param name="lineId"></param>
        public void RemoveMappedWaivers(int lineId)
        {
            log.LogMethodEntry();
            if (this.TrxLines != null)
            {
                if (this.TrxLines[lineId].WaiverSignedDTOList != null && this.TrxLines[lineId].WaiverSignedDTOList.Any())
                {
                    //CustomerDTO mappedCustomerDTO = GetMappedCustomerForWaiver(lineId);
                    for (int i = 0; i < this.TrxLines[lineId].WaiverSignedDTOList.Count; i++)
                    {
                        if (this.TrxLines[lineId].WaiverSignedDTOList[i].IsActive)
                        {
                            this.TrxLines[lineId].WaiverSignedDTOList[i].CustomerSignedWaiverId = -1;
                            this.TrxLines[lineId].WaiverSignedDTOList[i].CustomerSignedWaiverFileName = string.Empty;
                            this.TrxLines[lineId].WaiverSignedDTOList[i].SignedMode = string.Empty;
                        }
                    }

                }
            }
            log.LogMethodExit();
        }
        /// <summary>
        /// GetWaiverSetDTOList
        /// </summary>
        /// <returns></returns>
        public List<WaiverSetDTO> GetWaiverSetDTOList()
        {
            log.LogMethodEntry();
            List<WaiverSetDTO> returnWaiverSetDTOList = new List<WaiverSetDTO>();
            if (TrxLines != null)
            {
                List<Transaction.TransactionLine> trxLinesWithWaivers = this.TrxLines.Where(tl => tl.LineValid && tl.WaiverSignedDTOList != null && tl.WaiverSignedDTOList.Any()).ToList();
                if (trxLinesWithWaivers != null && trxLinesWithWaivers.Any())
                {
                    List<int> waiversIdList = new List<int>();
                    for (int i = 0; i < trxLinesWithWaivers.Count; i++)
                    {
                        List<int> lineWaiversIdList = trxLinesWithWaivers[i].WaiverSignedDTOList.Where(ws => ws.IsActive).Select(ws => ws.WaiverSetDetailId).ToList();
                        if (lineWaiversIdList != null && lineWaiversIdList.Any())
                        {
                            waiversIdList.AddRange(lineWaiversIdList);
                        }
                    }
                    waiversIdList = waiversIdList.Distinct().ToList();
                    if (waiversIdList != null && waiversIdList.Any())
                    {
                        WaiverSetContainer waiverSetContainer = null;
                        try
                        {
                            waiverSetContainer = WaiverSetContainer.GetInstance;
                        }
                        catch (Exception ex)
                        {
                            log.Error(ex);
                            throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2435));//Unexpected error while getting waiver file details. Please check the setup
                        }
                        List<WaiverSetDTO> waiverSetDTOList = waiverSetContainer.GetWaiverSetDTOList(Utilities.ExecutionContext.GetSiteId());
                        if (waiverSetDTOList != null && waiverSetDTOList.Any())
                        {
                            for (int i = 0; i < waiverSetDTOList.Count; i++)
                            {
                                if (waiverSetDTOList[i].WaiverSetDetailDTOList != null && waiverSetDTOList[i].WaiverSetDetailDTOList.Any())
                                {
                                    for (int j = 0; j < waiversIdList.Count; j++)
                                    {
                                        if (waiverSetDTOList[i].WaiverSetDetailDTOList.Exists(ws => ws.IsActive && ws.WaiverSetDetailId == waiversIdList[j]))
                                        {
                                            if (returnWaiverSetDTOList.Contains(waiverSetDTOList[i]) == false)
                                            {
                                                returnWaiverSetDTOList.Add(waiverSetDTOList[i]);
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            log.LogMethodExit(returnWaiverSetDTOList);
            return returnWaiverSetDTOList;
        }

        public void MapCustomerWaiversToLine(int lineId, CustomerDTO customerDTO)
        {
            log.LogMethodEntry(lineId, customerDTO);
            if (TrxLines != null)
            {
                if (TrxLines.Count > lineId && lineId > -1)
                {
                    if (TrxLines[lineId].WaiverSignedDTOList != null && TrxLines[lineId].WaiverSignedDTOList.Any()
                       && TrxLines[lineId].WaiverSignedDTOList.Exists(ws => ws.IsActive))
                    {
                        bool hasSignedAllWaivers = true;
                        CustomerBL customerBL = new CustomerBL(Utilities.ExecutionContext, customerDTO);
                        DateTime trxDatevalue = (this.TrxDate == DateTime.MinValue ?
                                   (this.TransactionDate == DateTime.MinValue ? Utilities.getServerTime() : this.TransactionDate)
                                   : this.TrxDate);

                        for (int i = 0; i < TrxLines[lineId].WaiverSignedDTOList.Count; i++)
                        {
                            if (TrxLines[lineId].WaiverSignedDTOList[i].IsActive)
                            {
                                DateTime lineScheduleDate = DateTime.MinValue;

                                if (this.TrxLines[lineId].LineAtb != null && this.TrxLines[lineId].LineAtb.AttractionBookingDTO != null)
                                {
                                    lineScheduleDate = this.TrxLines[lineId].LineAtb.AttractionBookingDTO.ScheduleFromDate;
                                    log.Info("Taking attraction schedule date: " + lineScheduleDate.ToString(Utilities.ParafaitEnv.DATETIME_FORMAT));
                                }
                                trxDatevalue = (lineScheduleDate == DateTime.MinValue ? trxDatevalue : lineScheduleDate);
                                if (customerBL.HasSigned(TrxLines[lineId].WaiverSignedDTOList[i].WaiverSetDetailId, trxDatevalue)
                                    && String.IsNullOrEmpty(CheckLicenseForCustomerAndCard(null, TrxLines[lineId].LicenseType, trxDatevalue, customerDTO.Id)))
                                {
                                    TrxLines[lineId].WaiverSignedDTOList[i].CustomerSignedWaiverId = customerBL.GetCustomerSignedWaiverId(TrxLines[lineId].WaiverSignedDTOList[i].WaiverSetDetailId, trxDatevalue);
                                }
                                else
                                {
                                    hasSignedAllWaivers = false;
                                }
                            }
                        }
                        if (hasSignedAllWaivers
                            && TrxLines.Exists(tl => tl.LineValid && (tl.ProductTypeCode == ProductTypeValues.BOOKINGS || tl.ProductTypeCode == ProductTypeValues.ATTRACTION)))
                        {
                            AddUpdateCustomerAsTransactionAttendees(customerDTO);
                        }
                    }
                }
            }

            log.LogMethodExit();
        }
        /// <summary>
        /// ValidateCustomerSignedWaiverExpiryDate
        /// </summary>
        /// <param name="mappedCustomerDTO"></param>
        /// <param name="lineId"></param>
        /// <returns>List<ValidationError></returns>
        public List<ValidationError> ValidateCustomerSignedWaiverExpiryDate(CustomerDTO mappedCustomerDTO, int lineId)
        {
            log.LogMethodEntry(lineId);
            List<ValidationError> validationErrorList = new List<ValidationError>();
            if (mappedCustomerDTO != null && mappedCustomerDTO.CustomerSignedWaiverDTOList != null
                && mappedCustomerDTO.CustomerSignedWaiverDTOList.Any() && lineId > -1)
            {
                if (this.TrxLines[lineId].WaiverSignedDTOList != null && this.TrxLines[lineId].WaiverSignedDTOList.Exists(ws => ws.IsActive && ws.CustomerSignedWaiverId == -1))
                {
                    List<int> waiverIdList = this.TrxLines[lineId].WaiverSignedDTOList.Where(ws => ws.IsActive && ws.CustomerSignedWaiverId == -1).Select(ws => ws.WaiverSetDetailId).ToList();
                    if (waiverIdList != null && waiverIdList.Any())
                    {
                        waiverIdList = waiverIdList.Distinct().ToList();
                        DateTime trxDateValue = (this.TrxDate == DateTime.MinValue ?
                                                 (this.TransactionDate == DateTime.MinValue ? Utilities.getServerTime() : this.TransactionDate)
                                       : this.TrxDate);
                        DateTime lineScheduleDate = DateTime.MinValue;

                        if (this.TrxLines[lineId].LineAtb != null
                            && this.TrxLines[lineId].LineAtb.AttractionBookingDTO != null)
                        {
                            lineScheduleDate = this.TrxLines[lineId].LineAtb.AttractionBookingDTO.ScheduleFromDate;
                        }
                        trxDateValue = (lineScheduleDate == DateTime.MinValue ? trxDateValue : lineScheduleDate);
                        for (int i = 0; i < waiverIdList.Count(); i++)
                        {
                            CustomerSignedWaiverDTO cswDTO = mappedCustomerDTO.CustomerSignedWaiverDTOList.Find(csw => csw.WaiverSetDetailId == waiverIdList[i]
                                                                                            && csw.IsActive && csw.ExpiryDate != null
                                                                                            && csw.ExpiryDate < trxDateValue);
                            if (cswDTO != null)
                            {
                                string custName = (string.IsNullOrEmpty(mappedCustomerDTO.FirstName) ? "" : mappedCustomerDTO.FirstName);
                                DateTime wsExpiryDate = (DateTime)cswDTO.ExpiryDate;
                                // "&1: Customer signed copy for &2 expires (&3) before Transaction/Schedule date (&4)"
                                string errorMessage = MessageContainerList.GetMessage(Utilities.ExecutionContext, 2615, custName, cswDTO.WaiverName, wsExpiryDate.ToString(Utilities.ParafaitEnv.DATETIME_FORMAT),
                                                                                                            trxDateValue.ToString(Utilities.ParafaitEnv.DATETIME_FORMAT));
                                validationErrorList.Add(new ValidationError(MessageContainerList.GetMessage(Utilities.ExecutionContext, "Waiver"),
                                                                            MessageContainerList.GetMessage(Utilities.ExecutionContext, "Expiry Date"), errorMessage));
                            }
                        }
                    }
                }

            }
            log.LogMethodExit(validationErrorList);
            return validationErrorList;
        }

        /// <summary>
        /// Map Customer Signed Waiver for waiversDTO
        /// </summary>
        /// <param name="waiversDTO"></param>
        /// <param name="customerSignedWaiverId"></param>
        public void MapCustomerSignedWaiver(WaiversDTO waiversDTO, int customerSignedWaiverId)
        {
            log.LogMethodEntry(waiversDTO, customerSignedWaiverId);
            if (TrxLines != null && waiversDTO != null && customerSignedWaiverId > -1)
            {
                for (int lineIndex = 0; lineIndex < TrxLines.Count; lineIndex++)
                {
                    if (TrxLines[lineIndex].WaiverSignedDTOList != null && TrxLines[lineIndex].WaiverSignedDTOList.Any())
                    {
                        for (int i = 0; i < TrxLines[lineIndex].WaiverSignedDTOList.Count; i++)
                        {
                            if (TrxLines[lineIndex].WaiverSignedDTOList[i].WaiverSetDetailId == waiversDTO.WaiverSetDetailId
                                && TrxLines[lineIndex].WaiverSignedDTOList[i].CustomerSignedWaiverId == -1 && TrxLines[lineIndex].WaiverSignedDTOList[i].IsActive)
                            {
                                TrxLines[lineIndex].WaiverSignedDTOList[i].CustomerSignedWaiverId = customerSignedWaiverId;
                            }
                        }
                    }
                }

            }

            log.LogMethodExit();
        }
        public void SavePrimaryCardCustomer(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry();
            if (this.PrimaryCard != null)
            {
                this.PrimaryCard.SaveCustomer(sqlTrx);
            }
            log.LogMethodExit();
        }

        /// <summary>
        /// Over ride Pending Waivers
        /// </summary>
        /// <param name="mgrId"></param>
        /// <param name="approvalTime"></param>
        public void OverridePendingWaivers(int mgrId, DateTime approvalTime)
        {
            log.LogMethodEntry(mgrId, approvalTime);
            if (TrxLines != null)
            {
                string managerLoginId = string.Empty;
                if (ParafaitDefaultContainerList.GetParafaitDefault<bool>(Utilities.ExecutionContext, "WAIVER_OVERRIDE_NEEDS_MANAGER_APPROVAL"))
                {
                    if (mgrId == -1)
                    {
                        throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, "Manager Approval Required"));
                    }
                }
                if (mgrId > -1)
                {
                    Users approveUser = new Users(Utilities.ExecutionContext, mgrId);
                    managerLoginId = approveUser.UserDTO.LoginId;
                }
                for (int lineIndex = 0; lineIndex < TrxLines.Count; lineIndex++)
                {
                    if (TrxLines[lineIndex].WaiverSignedDTOList != null && TrxLines[lineIndex].WaiverSignedDTOList.Any())
                    {
                        for (int i = 0; i < TrxLines[lineIndex].WaiverSignedDTOList.Count; i++)
                        {
                            if (TrxLines[lineIndex].WaiverSignedDTOList[i].CustomerSignedWaiverId == -1
                                && TrxLines[lineIndex].WaiverSignedDTOList[i].IsActive)
                            {
                                TrxLines[lineIndex].WaiverSignedDTOList[i].IsActive = false;
                                TrxLines[lineIndex].WaiverSignedDTOList[i].IsOverriden = true;
                                TrxLines[lineIndex].AddApproval(ApprovalAction.GetApprovalActionType(ApprovalAction.ApprovalActionType.OVERRIDE_WAIVER), managerLoginId, approvalTime);
                                if (this.Trx_id > 0 && TrxLines[lineIndex].DBLineId > 0)
                                {
                                    SaveWaiverSignedData(this.Trx_id, TrxLines[lineIndex], null);
                                }
                            }
                        }
                    }
                }
            }
            log.LogMethodExit();
        }
        internal void UpdateReservationTrxDate(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry();
            if (this.Trx_id > 0 && this.TrxDate != DateTime.MinValue)
            {
                log.LogVariableState("this.TrxDate", this.TrxDate);
                DateTime dbTrxDate = Convert.ToDateTime(Utilities.executeScalar(@"select trxdate
                                                                                             from trx_header where trxid = @trxId",
                                                                                        sqlTrx, new SqlParameter("@trxId", Trx_id)));
                log.LogVariableState("dbTrxDate", dbTrxDate);
                if (this.TrxDate != dbTrxDate)
                {
                    Utilities.executeNonQuery(@"update trx_Header 
                                                  set trxdate = @trxDate, LastUpdateTime = getdate(), LastUpdatedBy = @loginId
                                               where TrxId = @TrxId",
                                                 sqlTrx,
                                               new SqlParameter[] { new SqlParameter("@TrxId", Trx_id),
                                                                   new SqlParameter("@trxDate", TrxDate),
                                                                   new SqlParameter("@loginId",Utilities.ParafaitEnv.LoginID)});

                    DBReadTime = Utilities.getServerTime();
                }

            }
            log.LogMethodExit();
        }

        public void ReschduleCurrentLineEntitlements(Utilities Utilities, int trxId, TransactionLine tl, double minutesToAdd, DateTime scheduleEndDate, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry();
            Utilities.executeNonQuery(@"update cardGames 
                                                    set ExpiryDate = DATEADD(minute, @minutesToAdd, ExpiryDate),
                                                        FromDate = DATEADD(minute, @minutesToAdd, FromDate),
                                                        LastUpdatedBy = @userId,
                                                        Last_update_date = getdate()
                                                  where TrxId = @trxId 
                                                        and TrxLineId = @trxLineId",
                                            sqlTrx,
                                            new SqlParameter("@trxId", trxId),
                                            new SqlParameter("@trxLineId", tl.DBLineId),
                                            new SqlParameter("@minutesToAdd", minutesToAdd),
                                            new SqlParameter("@userId", Utilities.ParafaitEnv.LoginID));

            Utilities.executeNonQuery(@"update cardCreditPlus 
                                                    set PeriodFrom = DATEADD(minute, @minutesToAdd, PeriodFrom), 
                                                        PeriodTo = DATEADD(minute, @minutesToAdd, PeriodTo),
                                                        LastUpdatedBy = @userId,
                                                        LastUpdatedDate = getdate()
                                                  where TrxId = @trxId
                                                        and LineId = @trxLineId",
                                            sqlTrx,
                                            new SqlParameter("@trxId", trxId),
                                            new SqlParameter("@trxLineId", tl.DBLineId),
                                            new SqlParameter("@minutesToAdd", minutesToAdd),
                                            new SqlParameter("@userId", Utilities.ParafaitEnv.LoginID));

            Utilities.executeNonQuery(@"update cardDiscounts 
                                                    set Expiry_Date = DATEADD(minute, @minutesToAdd, Expiry_Date),
                                                        last_updated_user = @userId,
                                                        last_updated_date = getdate()
                                                  where TransactionId = @trxId
                                                        and LineId = @trxLineId",
                                            sqlTrx,
                                            new SqlParameter("@trxId", trxId),
                                            new SqlParameter("@trxLineId", tl.DBLineId),
                                            new SqlParameter("@minutesToAdd", minutesToAdd),
                                            new SqlParameter("@userId", Utilities.ParafaitEnv.LoginID));

            log.LogMethodEntry();
            Utilities.executeNonQuery(@"update cards
                                        set ExpiryDate = DateAdd(MINUTE, @diff, cards.ExpiryDate), 
                                            LastUpdatedBy = @userId,
                                            Last_update_time = getdate()
                                        from trx_lines tl, products p
                                        where tl.product_id = p.product_id
                                        and tl.card_id = cards.card_id
                                        and (cards.ExpiryDate is not null and cards.ExpiryDate < @scheduleEndDate)
                                        and p.CardValidFor > 0
                                        and tl.TrxId = @trxId
                                        and tl.LineId = @lineId",
                            sqlTrx,
                            new SqlParameter("@trxId", trxId),
                            new SqlParameter("@lineId", tl.DBLineId),
                            new SqlParameter("@diff", minutesToAdd),
                            new SqlParameter("@scheduleEndDate", scheduleEndDate),
                            new SqlParameter("@userId", Utilities.ParafaitEnv.LoginID));

            log.LogMethodExit();
        }

        /// <summary>
        /// check for minimum required credits played.
        /// </summary>
        /// <returns></returns>
        public decimal GetMinimumCreditsPlayed()
        {
            log.LogMethodEntry();
            decimal maxCreditsPlayed = 0;
            bool trxCardFound = false;
            if (TrxLines != null)
            {
                for (int i = 0; i < TrxLines.Count; i++) // check for the max of credits_played on all cards in trx
                {
                    if (TrxLines[i].card != null &&
                        string.IsNullOrEmpty(TrxLines[i].card.CardNumber) == false &&
                        Convert.ToDecimal(TrxLines[i].card.credits_played) > maxCreditsPlayed)
                    {
                        maxCreditsPlayed = Convert.ToDecimal(TrxLines[i].card.credits_played);
                        trxCardFound = true;
                    }
                }
            }
            if (!trxCardFound && PrimaryCard != null)
                maxCreditsPlayed = Convert.ToDecimal(PrimaryCard.credits_played);

            log.LogMethodExit(maxCreditsPlayed);
            return maxCreditsPlayed;
        }

        /// <summary>
        /// Get Consolidate Card From Transaction
        /// </summary>
        /// <param name="productsDTO"></param>
        /// <param name="ParentProductId"></param>
        /// <param name="loadToParentCard"></param>
        /// <returns></returns>
        public string GetConsolidateCardFromTransaction(ProductsDTO productsDTO, int ParentProductId = -1, bool loadToParentCard = false)
        {
            Transaction.TransactionLine trx;
            if (this.TrxLines != null)
            {
                if (productsDTO.ProductType == "COMBO")//To fetch the caard number from transaction if Product type is Combo
                {
                    trx = this.TrxLines.FirstOrDefault(p => (!String.IsNullOrEmpty(p.CardNumber) && p.ParentLine != null && p.ParentLine.ProductID == productsDTO.ProductId));
                    if (trx != null)
                    {
                        return trx.CardNumber;
                    }
                    else
                    {
                        return null;
                    }
                }
                else if (ParentProductId != -1)//If the ParentProduct ID is not -1 and loadToParentCard is true, Below code fetches if the transaction has same product and returns the card number
                {
                    if (loadToParentCard)
                    {
                        trx = this.TrxLines.FirstOrDefault(p => !String.IsNullOrEmpty(p.CardNumber) && p.ParentLine != null && p.ParentLine.ProductID == ParentProductId);
                        if (trx != null)
                        {
                            return trx.CardNumber;
                        }
                        else
                        {
                            return null;
                        }
                    }
                    else
                    {
                        trx = this.TrxLines.FirstOrDefault(p => p.ProductID == productsDTO.ProductId
                                                           && p.ParentLine != null
                                                           && p.ParentLine.ProductID == ParentProductId
                                                           );
                        if (trx != null)
                        {
                            return trx.CardNumber;
                        }
                        else
                        {
                            return null;
                        }
                    }
                }
                else//Individual product's cardnumber in the transaction will be fetched through below code
                {
                    trx = this.TrxLines.FirstOrDefault(p => p.ProductID == productsDTO.ProductId && p.ParentLine == null);
                    if (trx != null)
                    {
                        return trx.CardNumber;
                    }
                    else
                    {
                        return null;
                    }

                }
            }
            else
            {
                return null;
            }
        }
        /// <summary>
        /// Clear UnSaved Reservation Schedules
        /// </summary>
        /// <param name="sqlTrx"></param>
        public void ClearUnSavedReservationSchedules(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(sqlTrx);
            if (TrxLines != null && TrxLines.Count > 0)
            {
                for (int lineId = 0; lineId < TrxLines.Count; lineId++)
                {
                    if (TrxLines[lineId].TransactionReservationScheduleDTOList != null && TrxLines[lineId].TransactionReservationScheduleDTOList.Any()
                        && TrxLines[lineId].TransactionReservationScheduleDTOList.Exists(trs => trs.TrxId == -1))
                    {
                        TrxLines[lineId].ExpireUnSavedTrxReservationSchedule(Utilities.ExecutionContext, sqlTrx);
                    }
                }
            }
            log.LogMethodExit();
        }

        /// <summary>
        /// Clear UnSaved Reservation Schedules/ Attraction schedules
        /// </summary>
        /// <param name="sqlTrx"></param>
        public void ClearUnSavedSchedules(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(sqlTrx);
            ClearUnSavedReservationSchedules(sqlTrx);
            ClearUnSavedAttractionSchedules();
            log.LogMethodExit();
        }


        /// <summary>
        /// Reservation Reschedule Exception Checks
        /// </summary>
        public void ReservationRescheduleExceptionChecks()
        {
            log.LogMethodEntry();
            if (TrxLines == null || TrxLines.Any() == false)
            {
                throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2656));
                //Please save the Transaction first
            }
            if (this.Status == TrxStatus.CANCELLED || this.Status == TrxStatus.SYSTEMABANDONED || this.Status == TrxStatus.CLOSED)
            {
                throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2656, this.Status));
                // Transaction is not yet saved or Transaction status is &1
            }
            int daysTillReservationRescheduleIsAllowed = ParafaitDefaultContainerList.GetParafaitDefault<int>(Utilities.ExecutionContext, DAYSTILLRESERVATIONRESCHEDULE, 0);
            if (daysTillReservationRescheduleIsAllowed < 0)
            {
                throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2696, DAYSTILLRESERVATIONRESCHEDULE, daysTillReservationRescheduleIsAllowed));
                //Please check &1 setup. &2 is not valid value for the setup 
            }
            if (daysTillReservationRescheduleIsAllowed > 0)
            {
                TimeSpan timeSpan = this.TrxDate - Utilities.getServerTime();
                if (timeSpan.Days < daysTillReservationRescheduleIsAllowed)
                {
                    throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2697, daysTillReservationRescheduleIsAllowed));
                    // "Sorry, cannot reschedule now. Days limit (&1) has crossed"
                }
            }
            if (TrxLines != null && TrxLines.Any()
                && TrxLines.Exists(tl => tl.LineValid
                                          && tl.TransactionReservationScheduleDTOList != null
                                          && tl.TransactionReservationScheduleDTOList.Any()
                                          && tl.TransactionReservationScheduleDTOList.Exists(trs => trs.Cancelled == false)) == false)
            {
                throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2698));
                //"Sorry, Transaction does not have any active reservation schedule"
            }

            log.LogMethodExit();
        }

        private void AddToRescheduleReservationValidationList(TransactionLine trxLine, List<ValidationError> trxLineValidationErrorList)
        {
            log.LogMethodEntry();
            if (rescheduleReservationValidationList != null)
            {
                int trxLineEntryIndex = rescheduleReservationValidationList.FindIndex(kvPair => kvPair.Key == trxLine);
                if (trxLineEntryIndex > -1)
                {
                    if (trxLineValidationErrorList != null && trxLineValidationErrorList.Any())
                    {
                        rescheduleReservationValidationList[trxLineEntryIndex].Value.AddRange(new List<ValidationError>(trxLineValidationErrorList));
                    }
                }
                else
                {
                    if (trxLineValidationErrorList != null && trxLineValidationErrorList.Any())
                    {
                        rescheduleReservationValidationList.Add(new KeyValuePair<TransactionLine, List<ValidationError>>(trxLine, new List<ValidationError>(trxLineValidationErrorList)));
                    }
                    else
                    {
                        rescheduleReservationValidationList.Add(new KeyValuePair<TransactionLine, List<ValidationError>>(trxLine, new List<ValidationError>()));
                    }
                }
            }
            log.LogMethodExit();
        }
        /// <summary>
        ///  Validate Reschedule Reservation
        /// </summary> 
        /// <param name="allowOverride"></param>
        /// <returns></returns>
        public List<KeyValuePair<Transaction.TransactionLine, List<ValidationError>>> ValidateRescheduleReservation
            (bool allowOverride)
        {
            log.LogMethodEntry(allowOverride);
            ReservationRescheduleExceptionChecks();
            rescheduleReservationValidationList = new List<KeyValuePair<TransactionLine, List<ValidationError>>>();
            Transaction.TransactionLine bookingProductLine = GetBookingProductTransactionLine();
            Transaction.TransactionLine bookingProductScheduleLine = GetBookingProductParentScheduleLine();
            TransactionReservationScheduleDTO oldBookingProductScheduleTRSDTO = bookingProductScheduleLine.TransactionReservationScheduleDTOList.Find(trs => trs.Cancelled == false && trs.TrxId > -1);
            // DateTime OldScheduleFromDateTime = oldTRSDTO.ScheduleFromDate;
            //DateTime oldScheduleToDateTime = oldTRSDTO.ScheduleToDate;
            int oldFacilityMapId = oldBookingProductScheduleTRSDTO.FacilityMapId;
            TransactionReservationScheduleDTO newBookingProductScheduleTRSDTO = bookingProductScheduleLine.TransactionReservationScheduleDTOList.Find(trs => trs.Cancelled == false && trs.TrxId == -1);
            DateTime newScheduleFromDate = newBookingProductScheduleTRSDTO.ScheduleFromDate;
            //DateTime newScheduleToDate = newTRSDTO.ScheduleToDate;
            MasterScheduleList masterScheduleList = new MasterScheduleList(Utilities.ExecutionContext);
            if (masterScheduleBLList == null)
            {
                masterScheduleBLList = masterScheduleList.GetAllMasterScheduleBLList();
            }
            for (int lineId = 0; lineId < TrxLines.Count; lineId++)
            {
                if (TrxLines[lineId].LineValid
                    && rescheduleReservationValidationList.Exists(kvPair => kvPair.Key == TrxLines[lineId]) == false)
                {
                    List<ValidationError> lineValidationErrorList = ProductSetupValidation(TrxLines[lineId].ProductID, newScheduleFromDate, allowOverride);
                    AddToRescheduleReservationValidationList(TrxLines[lineId], lineValidationErrorList);
                    List<ValidationError> lineValidationErrorList1 = BookingProductSetupValidation(TrxLines[lineId].ComboproductId, allowOverride);
                    AddToRescheduleReservationValidationList(TrxLines[lineId], lineValidationErrorList1);
                    List<ValidationError> lineValidationErrorList2 = TrxLines[lineId].ValidateRescheduleReservationLine(Utilities.ExecutionContext, masterScheduleBLList, TrxLines,
                                                                                                                       oldBookingProductScheduleTRSDTO,
                                                                                                                       newBookingProductScheduleTRSDTO);
                    AddToRescheduleReservationValidationList(TrxLines[lineId], lineValidationErrorList2);
                }
            }
            List<KeyValuePair<TransactionLine, List<ValidationError>>> returnValidationErrorList = new List<KeyValuePair<TransactionLine, List<ValidationError>>>(rescheduleReservationValidationList);
            log.LogMethodExit(returnValidationErrorList);
            return returnValidationErrorList;
        }

        ///// <summary>
        ///// Validate Reschedule Reservation
        ///// </summary>
        ///// <param name="transactionReservationScheduleDTOList"></param>
        ///// <param name="allowOverride"></param>
        ///// <returns></returns>
        //public List<KeyValuePair<Transaction.TransactionLine, List<ValidationError>>> ValidateRescheduleReservation
        //    (List<TransactionReservationScheduleDTO> transactionReservationScheduleDTOList, bool allowOverride)
        //{
        //    log.LogMethodEntry(transactionReservationScheduleDTOList, allowOverride);
        //    ReservationRescheduleExceptionChecks();
        //    rescheduleReservationValidationList = new List<KeyValuePair<TransactionLine, List<ValidationError>>>();
        //    Transaction.TransactionLine bookingProductLine = GetBookingProductTransactionLine();
        //    DateTime newScheduleFromDate = transactionReservationScheduleDTOList.Min(rTRS => rTRS.ScheduleFromDate);
        //    TransactionReservationScheduleDTO rescheduledBookingProductSchedule = GetRescheduledBookingProductScheduleDTO(transactionReservationScheduleDTOList);
        //    for (int lineId = 0; lineId < TrxLines.Count; lineId++)
        //    {
        //        if (TrxLines[lineId].LineValid && rescheduleReservationValidationList.Exists(kvPair => kvPair.Key == TrxLines[lineId]) == false)
        //        {
        //            List<ValidationError> lineValidationErrorList = ProductSetupValidation(TrxLines[lineId].ProductID, newScheduleFromDate, allowOverride);
        //            AddToRescheduleReservationValidationList(TrxLines[lineId], lineValidationErrorList);

        //            List<ValidationError> lineValidationErrorList2 = BookingProductSetupValidation(TrxLines[lineId].ComboproductId, allowOverride);
        //            AddToRescheduleReservationValidationList(TrxLines[lineId], lineValidationErrorList2);

        //            List<ValidationError> lineValidationErrorList3 = TrxLines[lineId].ValidateRescheduleReservationLine();
        //            AddToRescheduleReservationValidationList(TrxLines[lineId], lineValidationErrorList3);
        //        }

        //    }
        //    List<KeyValuePair<TransactionLine, List<ValidationError>>> returnValidationErrorList = new List<KeyValuePair<TransactionLine, List<ValidationError>>>(rescheduleReservationValidationList);
        //    log.LogMethodExit(returnValidationErrorList);
        //    return returnValidationErrorList;
        //}

        private List<ValidationError> ProductSetupValidation(int productId, DateTime reservationdateTime, bool allowOverride)
        {
            log.LogMethodEntry(productId, reservationdateTime, allowOverride);
            List<ValidationError> validationErrorList = new List<ValidationError>();
            if (allowOverride == false)
            {
                ProductsDTO productsDTO = GetProductsDTO(productId);
                if (productsDTO.ProductType != ProductTypeValues.CARDDEPOSIT
                    && productsDTO.ProductType != ProductTypeValues.CASHREFUND
                    && productsDTO.ProductType != ProductTypeValues.CREDITCARDSURCHARGE
                    && productsDTO.ProductType != ProductTypeValues.DEPOSIT
                    && productsDTO.ProductType != ProductTypeValues.EXCESSVOUCHERVALUE
                    && productsDTO.ProductType != ProductTypeValues.EXTERNALPOS
                    && productsDTO.ProductType != ProductTypeValues.GAMEPLAYCREDIT
                    && productsDTO.ProductType != ProductTypeValues.GENERICSALE
                    && productsDTO.ProductType != ProductTypeValues.LOADTICKETS
                    && productsDTO.ProductType != ProductTypeValues.LOCKERDEPOSIT
                    && productsDTO.ProductType != ProductTypeValues.LOYALTY
                    && productsDTO.ProductType != ProductTypeValues.REFUND
                    && productsDTO.ProductType != ProductTypeValues.REFUNDCARDDEPOSIT
                    && productsDTO.ProductType != ProductTypeValues.SERVICECHARGE)
                {
                    if (productsDTO.ActiveFlag == false)
                    {
                        validationErrorList.Add(new ValidationError("Product", "Inactive", MessageContainerList.GetMessage(Utilities.ExecutionContext, 2708, productsDTO.ProductName)));//&1 is an inactive product. Please verify
                    }
                    //ProductExpiryDate
                    if (productsDTO.ExpiryDate != DateTime.MinValue && productsDTO.ExpiryDate < reservationdateTime)
                    {
                        validationErrorList.Add(new ValidationError("Product", "ExpiryDate", MessageContainerList.GetMessage(Utilities.ExecutionContext, "Product is not available") + MessageContainerList.GetMessage(Utilities.ExecutionContext, ": ") + productsDTO.ProductName));
                    }
                    //ProductStartDate
                    if (productsDTO.StartDate != DateTime.MinValue && productsDTO.StartDate > reservationdateTime)
                    {
                        validationErrorList.Add(new ValidationError("Product", "StartDate", MessageContainerList.GetMessage(Utilities.ExecutionContext, "Product is not available") + MessageContainerList.GetMessage(Utilities.ExecutionContext, ": ") + productsDTO.ProductName));
                    }
                }
            }
            log.LogMethodExit(validationErrorList);
            return validationErrorList;
        }

        private List<ValidationError> BookingProductSetupValidation(int comboproductId, bool allowOverride)
        {
            log.LogMethodEntry(comboproductId, allowOverride);
            List<ValidationError> validationErrorList = new List<ValidationError>();
            if (allowOverride == false && comboproductId > -1)
            {
                ComboProductDTO comboProductDTO = GetComboProductDTO(comboproductId);
                if (comboProductDTO != null && comboProductDTO.IsActive == false)
                {
                    validationErrorList.Add(new ValidationError("Product", "Inactive", MessageContainerList.GetMessage(Utilities.ExecutionContext, 2699, comboProductDTO.ChildProductName)));
                    //Product &1 is no longer part of Booking Product setup
                }
            }
            log.LogMethodExit(validationErrorList);
            return validationErrorList;
        }

        //private List<ValidationError> AdditionalTimeSlotValidation(int lineIndex, List<TransactionReservationScheduleDTO> transactionReservationScheduleDTOList, Transaction.TransactionLine bookingProductLine)
        //{
        //    log.LogMethodEntry(lineIndex, transactionReservationScheduleDTOList, bookingProductLine);
        //    List<ValidationError> validationErrorList = new List<ValidationError>();
        //    if (IsAdditionalTimeSlotScheduleLineForReservation(lineIndex))
        //    {
        //        TransactionReservationScheduleDTO rescheduledAdditionalSlot = null;
        //        for (int i = 0; i < transactionReservationScheduleDTOList.Count; i++)
        //        {
        //            if (transactionReservationScheduleDTOList[i].LineId == (TrxLines[lineIndex].DBLineId > 0 ? TrxLines[lineIndex].DBLineId : lineIndex + 1))
        //            {
        //                rescheduledAdditionalSlot = transactionReservationScheduleDTOList[i];
        //                break;
        //            }
        //        }
        //        if (rescheduledAdditionalSlot != null)
        //        {
        //            validationErrorList = ValidateReservationScheduleSlotAvailablity(lineIndex, rescheduledAdditionalSlot.TrxReservationScheduleId, rescheduledAdditionalSlot.ScheduleFromDate, rescheduledAdditionalSlot.ScheduleToDate);
        //        }
        //        else
        //        {
        //            throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2701));
        //            //Unable to find reservation schedule details 
        //        }
        //    }
        //    log.LogMethodExit(validationErrorList);
        //    return validationErrorList;
        //}


        //private void ComboProductSetupValidation(Transaction.TransactionLine trxLine, TransactionReservationScheduleDTO transactionReservationScheduleDTO, Transaction.TransactionLine bookingProductLine, bool allowOverride)
        //{
        //    log.LogMethodEntry(trxLine, transactionReservationScheduleDTO, bookingProductLine, allowOverride);
        //    int lineIndex = TrxLines.IndexOf(trxLine);
        //    DateTime newScheduleFromDate = transactionReservationScheduleDTO.ScheduleFromDate;
        //    List<ValidationError> validationErrorList = ProductSetupValidation(trxLine.ProductID, newScheduleFromDate, allowOverride);
        //    AddToRescheduleReservationValidationList(trxLine, validationErrorList);
        //    if (trxLine.ProductTypeCode == ProductTypeValues.COMBO)
        //    {
        //        foreach (Transaction.TransactionLine childLine in TrxLines.Where(tl => tl.LineValid && tl.ParentLine != null && tl.ParentLine == trxLine))
        //        {
        //            ComboProductSetupValidation(childLine, transactionReservationScheduleDTO, bookingProductLine, allowOverride);
        //        }
        //    }
        //    else
        //    {
        //        List<ValidationError> lineValidationErrorList2 = AttractionProductSetupValidation(lineIndex, transactionReservationScheduleDTO, bookingProductLine);
        //        AddToRescheduleReservationValidationList(trxLine, lineValidationErrorList2);
        //    }
        //    log.LogMethodExit();
        //}


        private ProductsDTO GetProductsDTO(int productId)
        {
            log.LogMethodEntry(productId);
            ProductsDTO productsDTO = null;
            if (productDTODictionary.ContainsKey(productId) == false)
            {
                Products productsBl = new Products(productId);
                productDTODictionary.Add(productId, productsBl.GetProductsDTO);
            }
            productsDTO = productDTODictionary[productId];

            log.LogMethodExit(productsDTO);
            return productsDTO;
        }

        private ComboProductDTO GetComboProductDTO(int comboProductId)
        {
            log.LogMethodEntry(comboProductId);
            ComboProductDTO comboProductsDTO = null;
            if (comboProductDTODictionary.ContainsKey(comboProductId) == false)
            {
                ComboProductBL comboProductsBl = new ComboProductBL(Utilities.ExecutionContext, comboProductId);
                comboProductDTODictionary.Add(comboProductId, comboProductsBl.ComboProductDTO);
            }
            comboProductsDTO = comboProductDTODictionary[comboProductId];
            log.LogMethodExit(comboProductsDTO);
            return comboProductsDTO;
        }

        //private TransactionReservationScheduleDTO GetRescheduledBookingProductScheduleDTO(List<TransactionReservationScheduleDTO> transactionReservationScheduleDTOList)
        //{
        //    log.LogMethodEntry(transactionReservationScheduleDTOList);
        //    TransactionReservationScheduleDTO rescheduledBookingProductSchedule = null;
        //    Transaction.TransactionLine bookingProductTrxLine = GetBookingProductTransactionLine();
        //    List<Transaction.TransactionLine> scheduleTrxLineList = GetScheduleTransactionLines();
        //    Transaction.TransactionLine bookingProductScheduleLine = scheduleTrxLineList.Find(tl => tl == bookingProductTrxLine.ParentLine);
        //    int scheduleLineIndex = TrxLines.IndexOf(bookingProductScheduleLine);
        //    rescheduledBookingProductSchedule =
        //        transactionReservationScheduleDTOList.Find(rTRS => rTRS.LineId == (bookingProductScheduleLine.DBLineId > 0 ?
        //                                                                              bookingProductScheduleLine.DBLineId : scheduleLineIndex + 1) && rTRS.Cancelled == false);
        //    log.LogMethodExit(rescheduledBookingProductSchedule);
        //    return rescheduledBookingProductSchedule;
        //}


        /// <summary>
        /// Can Reschedule Reservation - throws exception if any validation fails
        /// </summary> 
        /// <param name="allowOverride"></param>
        public void CanRescheduleReservation(bool allowOverride)
        {
            log.LogMethodEntry(allowOverride);
            //TransactionReservationScheduleDTO rescheduledBookingProductSchedule = GetRescheduledBookingProductScheduleDTO(transactionReservationScheduleDTOList);
            List<KeyValuePair<Transaction.TransactionLine, List<ValidationError>>> validationList = ValidateRescheduleReservation(allowOverride);
            List<ValidationError> validationErrorList = new List<ValidationError>();
            if (validationList != null && validationList.Any())
            {
                for (int i = 0; i < validationList.Count; i++)
                {
                    if (validationList[i].Value != null && validationList[i].Value.Any())
                    {
                        validationErrorList.AddRange(validationList[i].Value);
                    }
                }
            }
            if (validationErrorList.Any())
            {
                throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, "Validation Error"), validationErrorList);
            }
            log.LogMethodExit();
        }
        /// <summary>
        /// Can Reschedule Reservation - throws exception if any validation fails
        /// </summary> 
        /// <param name="allowOverride"></param>
        /// <param name="sqlTrx"></param>
        public void RescheduleReservation(bool allowOverride, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(allowOverride, sqlTrx);
            CanRescheduleReservation(allowOverride);
            List<Transaction.TransactionLine> scheduleLines = GetScheduleTransactionLines();
            Transaction.TransactionLine bookingProductLine = GetBookingProductTransactionLine();
            Transaction.TransactionLine bookingProductScheduleLine = GetBookingProductParentScheduleLine();
            if (scheduleLines != null && scheduleLines.Any())
            {
                List<Transaction.TransactionLine> activeScheduleLines = scheduleLines.Where(tl => tl.LineValid == true).ToList();
                //List<Transaction.TransactionLine> additionalScheduleLines = new List<TransactionLine>();
                if (activeScheduleLines != null && activeScheduleLines.Any())
                {
                    //if (activeScheduleLines != null && activeScheduleLines.Count > 1)
                    //{
                    //    for (int i = 0; i < activeScheduleLines.Count; i++)
                    //    {
                    //        int lineIndex = TrxLines.IndexOf(activeScheduleLines[i]);
                    //        if (activeScheduleLines[i] != bookingProductLine.ParentLine)
                    //        {
                    //            additionalScheduleLines.Add(activeScheduleLines[i]);
                    //        }
                    //    }
                    //}
                    TransactionReservationScheduleDTO rescheduledTRSDTOForBookingProduct = bookingProductScheduleLine.TransactionReservationScheduleDTOList.Find(trs => trs.Cancelled == false && trs.TrxId == -1);
                    TransactionReservationScheduleDTO oldScheduleTRSDTOForBookingProduct = bookingProductScheduleLine.TransactionReservationScheduleDTOList.Find(trs => trs.Cancelled == false && trs.TrxId > -1);

                    //Card products
                    List<Transaction.TransactionLine> cardLinesList = TrxLines.Where(tl => tl.LineValid && string.IsNullOrWhiteSpace(tl.CardNumber) == false).ToList();
                    if (cardLinesList != null && cardLinesList.Any())
                    {
                        DateTime oldScheduleFromDate = activeScheduleLines.Min(tl => tl.TransactionReservationScheduleDTOList.Find(trs => trs.Cancelled == false && trs.TrxId == this.Trx_id).ScheduleFromDate);
                        DateTime oldScheduleToDate = activeScheduleLines.Max(tl => tl.TransactionReservationScheduleDTOList.Find(trs => trs.Cancelled == false && trs.TrxId == this.Trx_id).ScheduleToDate);
                        DateTime newMinScheduleFromDate = activeScheduleLines.Min(tl => tl.TransactionReservationScheduleDTOList.Find(trs => trs.Cancelled == false && trs.TrxId == -1).ScheduleFromDate);

                        double minutesToAdd = (newMinScheduleFromDate - oldScheduleFromDate).TotalMinutes;
                        for (int i = 0; i < cardLinesList.Count; i++)
                        {
                            ReschduleCurrentLineEntitlements(Utilities, this.Trx_id, cardLinesList[i], minutesToAdd, oldScheduleToDate, sqlTrx);
                        }
                    }

                    MasterScheduleList masterScheduleList = new MasterScheduleList(Utilities.ExecutionContext);
                    if (masterScheduleBLList == null)
                    {
                        masterScheduleBLList = masterScheduleList.GetAllMasterScheduleBLList();
                    }
                    //Atraction Products
                    List<Transaction.TransactionLine> attractionLinesList = TrxLines.Where(tl => tl.LineValid && tl.ProductTypeCode == ProductTypeValues.ATTRACTION).ToList();
                    if (attractionLinesList != null && attractionLinesList.Any())
                    {
                        for (int i = 0; i < attractionLinesList.Count; i++)
                        {
                            int lineIndex = TrxLines.IndexOf(attractionLinesList[i]);
                            attractionLinesList[i].RescheduleReservationAttraction(Utilities.ExecutionContext, masterScheduleBLList, oldScheduleTRSDTOForBookingProduct,
                                                                                  rescheduledTRSDTOForBookingProduct, lineIndex, sqlTrx);
                        }
                    }
                    //Reservation time slots 
                    for (int i = 0; i < activeScheduleLines.Count; i++)
                    {
                        activeScheduleLines[i].SaveRescheduledReservationSlot(Utilities.ExecutionContext, sqlTrx);
                    }
                    //Update trxdate and entitlement date
                    DateTime newScheduleFromDate = activeScheduleLines.Min(tl => tl.TransactionReservationScheduleDTOList.Find(trs => trs.Cancelled == false && trs.TrxId == this.Trx_id).ScheduleFromDate);
                    this.TrxDate = newScheduleFromDate;
                    this.EntitlementReferenceDate = this.TrxDate;
                    //Call update amount to refresh discounts
                    updateAmounts(true, sqlTrx);
                    string msg = string.Empty;
                    //Save transaction changes
                    if (SaveOrder(ref msg, sqlTrx) != 0)
                    {
                        log.Error(msg);
                        throw new ValidationException(msg);
                    }
                    UpdateReservationTrxDate(sqlTrx);
                }
                else
                {
                    throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 1824, MessageContainerList.GetMessage(Utilities.ExecutionContext, 2701)));
                    //Unable to find reservation schedule details
                }
            }
            else
            {
                throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 1824, MessageContainerList.GetMessage(Utilities.ExecutionContext, 2701)));
                //Unable to find reservation schedule details
            }
            log.LogMethodExit();
        }
        /// <summary>
        /// Get Booking Product Parent ScheduleLine
        /// </summary>
        /// <returns></returns>
        public Transaction.TransactionLine GetBookingProductParentScheduleLine()
        {
            log.LogMethodEntry();
            Transaction.TransactionLine bookingScheduleTrxLine = null;
            try
            {
                if (this.TrxLines != null)
                {
                    List<Transaction.TransactionLine> selectedTrxLines = this.GetScheduleTransactionLines();
                    if (selectedTrxLines != null && selectedTrxLines.Any())
                    {
                        Transaction.TransactionLine bookingProductTrxLine = this.GetBookingProductTransactionLine();
                        if (bookingProductTrxLine != null)
                        {
                            bookingScheduleTrxLine = selectedTrxLines.Find(tl => tl.LineValid && tl.CancelledLine == false && tl == bookingProductTrxLine.ParentLine);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                log.Error(ex);
                log.LogMethodExit(ex.Message);
                throw;
            }
            log.LogMethodExit(bookingScheduleTrxLine);
            return bookingScheduleTrxLine;
        }

        /// <summary>
        /// GenerateTransactionBasedToken
        /// </summary>
        /// <returns></returns>
        public string GenerateTransactionBasedToken()
        {
            log.LogMethodEntry();
            string securityToken = string.Empty;
            SecurityTokenListBL securityTokenListBL = new SecurityTokenListBL();
            List<KeyValuePair<SecurityTokenDTO.SearchByParameters, string>> searchParm = new List<KeyValuePair<SecurityTokenDTO.SearchByParameters, string>>();
            searchParm.Add(new KeyValuePair<SecurityTokenDTO.SearchByParameters, string>(SecurityTokenDTO.SearchByParameters.OBJECT_GUID, this.TrxGuid));
            searchParm.Add(new KeyValuePair<SecurityTokenDTO.SearchByParameters, string>(SecurityTokenDTO.SearchByParameters.OBJECT, TRXTOKENOBJECTCODE));
            searchParm.Add(new KeyValuePair<SecurityTokenDTO.SearchByParameters, string>(SecurityTokenDTO.SearchByParameters.ACTIVE_FLAG, "Y"));
            searchParm.Add(new KeyValuePair<SecurityTokenDTO.SearchByParameters, string>(SecurityTokenDTO.SearchByParameters.IS_EXPIRED, "N"));
            List<SecurityTokenDTO> securityTokenDTOList = securityTokenListBL.GetSecurityTokenDTOList(searchParm);
            if (securityTokenDTOList != null && securityTokenDTOList.Any())
            {
                securityToken = securityTokenDTOList[0].Token;
            }
            else
            {
                try
                {
                    SecurityTokenBL securityTokenBL = new SecurityTokenBL(Utilities.ExecutionContext);
                    securityTokenBL.GenerateToken(this.TrxGuid, TRXTOKENOBJECTCODE, expiry: TrxDate == DateTime.MinValue ? ServerDateTime.Now.AddYears(10) : TrxDate.AddYears(10));
                    //securityTokenBL.GenerateToken("127CC2F5-8D34-4510-B3D1-B5CC4DA3029D", "TRX_HEADER");
                    //securityTokenBL.GenerateNewJWTToken(utilities.ExecutionContext.GetUserId(),this.transaction.TrxGuid, utilities.ExecutionContext.GetSiteId().ToString(), utilities.ExecutionContext.GetLanguageId().ToString(), utilities.ParafaitEnv.RoleId.ToString(), "TRANSACTION", utilities.ExecutionContext.GetMachineId().ToString()); 
                    securityToken = securityTokenBL.GetSecurityTokenDTO.Token;
                }
                catch (Exception ex)
                {
                    log.Error(ex);
                    string msg = MessageContainerList.GetMessage(Utilities.ExecutionContext, "Unexpected error while generating security token");
                    throw new Exception(msg);
                }
            }
            log.LogMethodExit(securityToken);
            return securityToken;
        }

        /// <summary>
        /// This methods returns true if the transaction reversed else return false
        /// </summary>
        /// <returns></returns>
        public bool IsReversedTransaction(SqlTransaction sqlTransaction = null)
        {
            log.LogMethodEntry(sqlTransaction);
            bool isReversed = false;
            List<KeyValuePair<TransactionDTO.SearchByParameters, string>> searchParameters = new List<KeyValuePair<TransactionDTO.SearchByParameters, string>>();
            searchParameters.Add(new KeyValuePair<TransactionDTO.SearchByParameters, string>(TransactionDTO.SearchByParameters.ORIGINAL_TRX_ID, this.Trx_id.ToString()));
            searchParameters.Add(new KeyValuePair<TransactionDTO.SearchByParameters, string>(TransactionDTO.SearchByParameters.SITE_ID, Utilities.ExecutionContext.GetSiteId().ToString()));
            TransactionListBL transactionListBL = new TransactionListBL(Utilities.ExecutionContext);
            List<TransactionDTO> transactionDTOList = transactionListBL.GetTransactionDTOList(searchParameters, Utilities, sqlTransaction, 0, 1, false, false, false);
            if (transactionDTOList != null && transactionDTOList.Any())
            {
                isReversed = true;
            }
            log.LogMethodExit(isReversed);
            return isReversed;
        }
        /// <summary>
        /// Has Subscription Products
        /// </summary>
        /// <returns></returns>
        public bool HasSubscriptionProducts()
        {
            log.LogMethodEntry();
            bool hasSubscriptionProducts = false;
            if (TrxLines != null && TrxLines.Exists(tl => tl.LineValid && tl.CancelledLine == false && tl.SubscriptionHeaderDTO != null))
            {
                hasSubscriptionProducts = true;
            }
            log.LogMethodExit(hasSubscriptionProducts);
            return hasSubscriptionProducts;
        }
        private int SaveCustomerCreditCardDetailsForSubscription(TransactionLine transactionLine, bool closeTransaction, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(transactionLine, closeTransaction, sqlTrx);
            int customerCreditCardsId = -1;
            if (closeTransaction)
            {
                if (this.TransactionPaymentsDTOList != null && this.TransactionPaymentsDTOList.Any())
                {
                    //Get credit card payment record
                    TransactionPaymentsDTO subscriptionCardDTO = this.TransactionPaymentsDTOList.Find(tp => ((tp.SubscriptionAuthorizationMode == SubscriptionAuthorizationMode.I
                                                                                                               || string.IsNullOrWhiteSpace(tp.CustomerCardProfileId) == false))
                                                                                                              && tp.paymentModeDTO != null && tp.paymentModeDTO.IsCreditCard);
                    if (subscriptionCardDTO != null)
                    {
                        CCTransactionsPGWListBL cCTransactionsPGWListBL = new CCTransactionsPGWListBL();
                        List<KeyValuePair<CCTransactionsPGWDTO.SearchByParameters, string>> searchParamCCT = new List<KeyValuePair<CCTransactionsPGWDTO.SearchByParameters, string>>();
                        searchParamCCT.Add(new KeyValuePair<CCTransactionsPGWDTO.SearchByParameters, string>(CCTransactionsPGWDTO.SearchByParameters.RESPONSE_ID, subscriptionCardDTO.CCResponseId.ToString()));
                        searchParamCCT.Add(new KeyValuePair<CCTransactionsPGWDTO.SearchByParameters, string>(CCTransactionsPGWDTO.SearchByParameters.SITE_ID, Utilities.ExecutionContext.GetSiteId().ToString()));
                        List<CCTransactionsPGWDTO> cCTransactionsPGWDTOList = cCTransactionsPGWListBL.GetCCTransactionsPGWDTOList(searchParamCCT, sqlTrx);
                        if (cCTransactionsPGWDTOList != null && cCTransactionsPGWDTOList.Any())
                        {
                            CustomerDTO customerDTO = (this.customerDTO != null && this.customerDTO.Id > -1 ? this.customerDTO
                                                       : (this.PrimaryCard != null && this.PrimaryCard.customerDTO != null && this.PrimaryCard.customerDTO.Id > -1 ? this.PrimaryCard.customerDTO : null));
                            if (customerDTO == null)
                            {
                                throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2157));//Valid Customer is required
                            }
                            CustomerCreditCardsDTO customerCreditCardsDTO = new CustomerCreditCardsDTO(-1, customerDTO.Id, cCTransactionsPGWDTOList[0].CustomerCardProfileId, subscriptionCardDTO.PaymentModeId, cCTransactionsPGWDTOList[0].TokenID,
                                subscriptionCardDTO.NameOnCreditCard, subscriptionCardDTO.CreditCardNumber, subscriptionCardDTO.CreditCardExpiry, null, null);
                            CustomerCreditCardsListBL customerCreditCardsListBL = new CustomerCreditCardsListBL(Utilities.ExecutionContext);
                            List<KeyValuePair<CustomerCreditCardsDTO.SearchByParameters, string>> searchParamsCCC = new List<KeyValuePair<CustomerCreditCardsDTO.SearchByParameters, string>>();
                            searchParamsCCC.Add(new KeyValuePair<CustomerCreditCardsDTO.SearchByParameters, string>(CustomerCreditCardsDTO.SearchByParameters.CUSTOMER_ID, customerCreditCardsDTO.CustomerId.ToString()));
                            //searchParamsCCC.Add(new KeyValuePair<CustomerCreditCardsDTO.SearchByParameters, string>(CustomerCreditCardsDTO.SearchByParameters.CARD_PROFILE_ID, customerCreditCardsDTO.CardProfileId));
                            searchParamsCCC.Add(new KeyValuePair<CustomerCreditCardsDTO.SearchByParameters, string>(CustomerCreditCardsDTO.SearchByParameters.TOKEN_ID, customerCreditCardsDTO.TokenId));
                            List<CustomerCreditCardsDTO> customerCreditCardsDTOList = customerCreditCardsListBL.GetCustomerCreditCardsDTOList(searchParamsCCC, Utilities, sqlTrx);
                            if (customerCreditCardsDTOList != null && customerCreditCardsDTOList.Any())
                            {
                                //if record exists then use the same
                                customerCreditCardsDTO = customerCreditCardsDTOList[0];
                                customerCreditCardsDTO.CardProfileId = cCTransactionsPGWDTOList[0].CustomerCardProfileId; //retain latest profile instead of creating new record
                                customerCreditCardsDTO.CardExpiry = subscriptionCardDTO.CreditCardExpiry;
                            }
                            CustomerCreditCardsBL customerCreditCardsBL = new CustomerCreditCardsBL(Utilities.ExecutionContext, customerCreditCardsDTO);
                            customerCreditCardsBL.Save(sqlTrx);
                            customerCreditCardsId = customerCreditCardsBL.CustomerCreditCardsDTO.CustomerCreditCardsId;
                        }
                        else
                        {
                            throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2880));//Unable to fetch credit card payment gateway transaction details
                        }
                    }
                    else
                    {
                        throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2878));//Customer credit card details are required for Subscription billing
                    }

                }
                else
                {
                    throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 526));//Payment incomplete. Cannot close transaction
                }
            }
            log.LogMethodExit(customerCreditCardsId);
            return customerCreditCardsId;
        }
        internal void SendSubscriptionPurchaseMessage(MessagingClientDTO.MessagingChanelType messagingChanelType, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(messagingChanelType, sqlTrx);
            if (HasSubscriptionProducts())
            {
                log.Info("HasSubscriptionProducts proceed with messages");
                log.Debug(this.Status);
                if (this.TrxLines != null && this.Status != TrxStatus.CANCELLED && this.Status != TrxStatus.PENDING && this.Status != TrxStatus.BOOKING)// && (this.Status == TrxStatus.CLOSED || this.Status == TrxStatus.RESERVED))
                {
                    List<Transaction.TransactionLine> subscriptionLines = this.TrxLines.Where(tl => tl.LineValid && tl.SubscriptionHeaderDTO != null && tl.SubscriptionHeaderDTO.SubscriptionHeaderId > -1 && tl.SubscriptionHeaderDTO.SourceSubscriptionHeaderId == -1).ToList();
                    log.Debug(subscriptionLines);
                    if (subscriptionLines != null && subscriptionLines.Any())
                    {
                        for (int i = 0; i < subscriptionLines.Count; i++)
                        {

                            SubscriptionEventsBL subscriptionEventsBL = new SubscriptionEventsBL(Utilities, ParafaitFunctionEvents.SUBSCRIPTION_PURCHASE_EVENT,
                                                                                                 subscriptionLines[i].SubscriptionHeaderDTO, this, sqlTrx);
                            subscriptionEventsBL.SendMessage(messagingChanelType, sqlTrx);
                        }
                    }
                }
            }
            log.LogMethodExit();
        }
        public void SendTransactionPurchaseMessage(MessagingClientDTO.MessagingChanelType messagingChanelType, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(messagingChanelType, sqlTrx);
            string printReceipt = ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "ALLOW_TRX_PRINT_BEFORE_SAVING");
            if (printReceipt == "Y" || (this.Status == Transaction.TrxStatus.CLOSED) && (this.customerDTO != null | (!string.IsNullOrEmpty(this.customerIdentifier))))
            {
                TransactionEventsBL transactionEventsBL = new TransactionEventsBL(Utilities.ExecutionContext, Utilities, ParafaitFunctionEvents.PURCHASE_EVENT, this, null, null, sqlTrx);
                transactionEventsBL.SendMessage(messagingChanelType, null, sqlTrx);
            }
            log.LogMethodExit();
        }
        /// <summary>
        /// createTransactionLine
        /// </summary>
        /// <param name="inCard"></param>
        /// <param name="productId"></param>
        /// <param name="in_quantity"></param>
        /// <param name="message"></param>
        /// <param name="subscriptionHeaderDTO"></param>
        /// <returns></returns>
        public int createTransactionLine(Card inCard, int productId, decimal in_quantity, ref string message, SubscriptionHeaderDTO subscriptionHeaderDTO)
        {
            log.LogMethodEntry(inCard, productId, in_quantity, message, subscriptionHeaderDTO);
            log.LogVariableState("message", message);
            int returnValueNew = createTransactionLine(inCard, productId, -1, in_quantity, ref message, null, true, null, -1, null, subscriptionHeaderDTO);
            log.LogMethodExit(returnValueNew);
            return returnValueNew;
        }
        /// <summary>
        /// createTransactionLine
        /// </summary>
        /// <param name="inCard"></param>
        /// <param name="productId"></param>
        /// <param name="in_price"></param>
        /// <param name="in_quantity"></param>
        /// <param name="message"></param>
        /// <param name="subscriptionHeaderDTO"></param>
        /// <returns></returns>
        public int createTransactionLine(Card inCard, int productId, double in_price, decimal in_quantity, ref string message, SubscriptionHeaderDTO subscriptionHeaderDTO)
        {
            log.LogMethodEntry(inCard, productId, in_price, in_quantity, message, subscriptionHeaderDTO);
            log.LogVariableState("message", message);
            int returnValueNew = createTransactionLine(inCard, productId, in_price, in_quantity, ref message, null, true, null, -1, null, subscriptionHeaderDTO);
            log.LogMethodExit(returnValueNew);
            return returnValueNew;
        }

        /// <summary>
        /// UpdateCheckInLine
        /// </summary>
        /// <param name="trxLine"></param>
        /// <param name="lineNumber"></param>
        /// <param name="TrxTransacation"></param>
        public bool UpdateCheckInLine(Transaction.TransactionLine trxLine, int lineNumber, SqlTransaction TrxTransacation = null)
        {
            log.LogMethodEntry(trxLine, lineNumber, TrxTransacation);
            try
            {
                if (trxLine.DBLineId > -1 && trxLine.card != null)
                {
                    if (trxLine.LineCheckInDetailDTO != null && trxLine.LineValid)
                    {

                        if (trxLine.card != null && trxLine.card.card_id == -1
                        || (trxLine.card.CardStatus == "NEW"
                            && Utilities.executeScalar(@"select top 1 1 
                                                        from cards 
                                                        where card_id = @cardId",
                                                        TrxTransacation,
                                                        new SqlParameter("@cardId", trxLine.card.card_id)) == null))
                        {
                            trxLine.card.face_value = trxLine.face_value;
                            trxLine.card.createCard(TrxTransacation);
                        }
                        CheckInDetailBL checkInDetailBLa = new CheckInDetailBL(Utilities.ExecutionContext, trxLine.LineCheckInDetailDTO.CheckInDetailId, false, false, TrxTransacation);
                        // Load card entitlements from the products
                        // If already loaded then skip // Save order from POS will create duplicate cardgames because save will load enttilements and status by default is pending
                        if (trxLine.LineCheckInDetailDTO.Status == CheckInStatus.PENDING)
                        {
                            CreateCardGames(TrxTransacation, trxLine.card.card_id, trxLine.ProductID, Trx_id, lineNumber, trxLine, null, false);
                            CreateCardCreditPlus(TrxTransacation, trxLine.card.card_id, trxLine.ProductID, Trx_id, lineNumber, trxLine, null, false);
                            CreateCardDiscounts(TrxTransacation, Trx_id, trxLine.DBLineId, trxLine.card.card_id, lineNumber, trxLine, null, false);
                            trxLine.LineCheckInDetailDTO.Status = CheckInStatus.ORDERED;
                        }
                        SqlCommand Linecmd = Utilities.getCommand(TrxTransacation);
                        Linecmd.CommandText = @"update trx_lines 
                                                    set card_number = @CardNumber, 
                                                        card_id = @card_id, 
                                                        GamePlayId= @gamePlayId
                                                where TrxId = @TrxId and LineId = @LineId";
                        Linecmd.Parameters.Clear();
                        Linecmd.Parameters.AddWithValue("@CardNumber", trxLine.CardNumber);
                        Linecmd.Parameters.AddWithValue("@card_id", trxLine.card.card_id);
                        Linecmd.Parameters.AddWithValue("@GamePlayId", trxLine.GameplayId == -1 ? DBNull.Value : (object)trxLine.GameplayId);
                        Linecmd.Parameters.AddWithValue("@TrxId", Trx_id);
                        Linecmd.Parameters.AddWithValue("@LineId", trxLine.DBLineId);
                        Linecmd.ExecuteNonQuery();
                        trxLine.LineCheckInDetailDTO.CardId = trxLine.card.card_id;
                        trxLine.LineCheckInDetailDTO.AccountNumber = trxLine.card.CardNumber;
                        CheckInDetailBL checkInDetailBL = new CheckInDetailBL(Utilities.ExecutionContext, trxLine.LineCheckInDetailDTO);
                        checkInDetailBL.Save(TrxTransacation);
                        trxLine.LineCheckInDetailDTO = checkInDetailBL.CheckInDetailDTO;
                    }
                }
            }
            catch (Exception ex)
            {
                log.Error(ex);
                log.LogMethodExit(false);
                return false;
            }
            log.LogMethodExit(true);
            return true;
        }
        /// <summary>
        /// UpdateNotificationTagIssued
        /// </summary>
        /// <param name="trxLine"></param>
        /// <param name="lineNumber"></param>
        /// <param name="TrxTransacation"></param>
        public bool UpdateNotificationTagIssuedLine(Transaction.TransactionLine trxLine, int lineNumber, SqlTransaction TrxTransacation = null)
        {
            log.LogMethodEntry(trxLine, lineNumber, TrxTransacation);
            try
            {
                if (trxLine.DBLineId > -1 && trxLine.LineValid && trxLine.card != null)
                {
                    if (trxLine.NotificationTagIssuedDTO != null && trxLine.NotificationTagIssuedDTO.StartDate == DateTime.MinValue
                        && trxLine.LineCheckInDetailDTO != null)
                    {
                        // Get NotificationTagIssued record for the current card. If exists then update the start date and assign to line
                        List<KeyValuePair<NotificationTagIssuedDTO.SearchByParameters, string>> tagIssuedSearchParameters = new List<KeyValuePair<NotificationTagIssuedDTO.SearchByParameters, string>>();
                        tagIssuedSearchParameters.Add(new KeyValuePair<NotificationTagIssuedDTO.SearchByParameters, string>(NotificationTagIssuedDTO.SearchByParameters.SITE_ID, Utilities.ExecutionContext.GetSiteId().ToString()));
                        tagIssuedSearchParameters.Add(new KeyValuePair<NotificationTagIssuedDTO.SearchByParameters, string>(NotificationTagIssuedDTO.SearchByParameters.CARDID, trxLine.card.card_id.ToString()));
                        NotificationTagIssuedListBL notificationTagIssuedListBL = new NotificationTagIssuedListBL(Utilities.ExecutionContext);
                        List<NotificationTagIssuedDTO> notificationTagIssuedListDTO = notificationTagIssuedListBL.GetAllNotificationTagIssuedDTOList(tagIssuedSearchParameters);
                        log.LogVariableState("notificationTagIssuedListDTO", notificationTagIssuedListDTO);
                        NotificationTagIssuedDTO notificationTagIssuedDTO = null;
                        if (notificationTagIssuedListDTO != null && notificationTagIssuedListDTO.Any()
                                            && notificationTagIssuedListDTO.Exists(tag => tag.StartDate == DateTime.MinValue))
                        {
                            notificationTagIssuedListDTO = notificationTagIssuedListDTO.OrderBy(x => x.IssueDate).ToList(); // get latest record 
                            notificationTagIssuedDTO = notificationTagIssuedListDTO
                                                                        .Where(tag => tag.StartDate == DateTime.MinValue
                                                                                     && (tag.ExpiryDate == DateTime.MinValue || tag.ExpiryDate > Utilities.getServerTime())).FirstOrDefault();
                            log.LogVariableState("notificationTagIssuedDTO", notificationTagIssuedDTO);
                        }
                        log.Debug("TransactionLine has  notificationTagIssuedDTO");
                        trxLine.NotificationTagIssuedDTO = notificationTagIssuedDTO;
                        trxLine.NotificationTagIssuedDTO.StartDate = trxLine.LineCheckInDetailDTO.CheckInTime.HasValue ? Convert.ToDateTime(trxLine.LineCheckInDetailDTO.CheckInTime) : DateTime.MinValue;
                        NotificationTagIssuedBL notificationTagIssuedBL = new NotificationTagIssuedBL(Utilities.ExecutionContext, trxLine.NotificationTagIssuedDTO);
                        notificationTagIssuedBL.Save(TrxTransacation);
                        InsertTrxLogs(Trx_id, trxLine.DBLineId, Utilities.ParafaitEnv.LoginID, "RADIAN", "Radian data saved. Tag Number: " + trxLine.CardNumber, TrxTransacation);
                    }
                }
            }
            catch (Exception ex)
            {
                log.Error(ex);
                log.LogMethodExit(false);
                return false;
            }
            log.LogMethodExit(true);
            return true;
        }
        private void SaveSubscriptionDetails(Transaction.TransactionLine trxLine, int lineNumber, bool closeTransaction, SqlTransaction TrxTransacation)
        {
            log.LogMethodEntry(trxLine, lineNumber, closeTransaction, TrxTransacation);
            if (trxLine.SubscriptionHeaderDTO != null)
            {
                trxLine.SubscriptionHeaderDTO.TransactionId = this.Trx_id;
                trxLine.SubscriptionHeaderDTO.TransactionLineId = lineNumber;// trxLine.DBLineId;
                if (trxLine.SubscriptionHeaderDTO.SelectedPaymentCollectionMode == SubscriptionPaymentCollectionMode.FULL)
                {
                    //Mark all cycles as billed
                    for (int j = 0; j < trxLine.SubscriptionHeaderDTO.SubscriptionBillingScheduleDTOList.Count; j++)
                    {
                        trxLine.SubscriptionHeaderDTO.SubscriptionBillingScheduleDTOList[j].TransactionId = this.Trx_id;
                        trxLine.SubscriptionHeaderDTO.SubscriptionBillingScheduleDTOList[j].TransactionLineId = lineNumber;// trxLine.DBLineId;
                    }
                }
                else
                {
                    if (trxLine.SubscriptionHeaderDTO.SourceSubscriptionHeaderId == -1)//Skip for renewal scenario
                    {
                        //Mark first cycle as billed
                        trxLine.SubscriptionHeaderDTO.SubscriptionBillingScheduleDTOList[0].TransactionId = this.Trx_id;
                        trxLine.SubscriptionHeaderDTO.SubscriptionBillingScheduleDTOList[0].TransactionLineId = lineNumber;// trxLine.DBLineId;
                    }
                }

                CustomerDTO unsavedCustomerDTO = (this.PrimaryCard != null && this.PrimaryCard.customerDTO != null && this.PrimaryCard.customerDTO.Id == -1
                                                  ? this.PrimaryCard.customerDTO
                                                 : this.customerDTO != null && this.customerDTO.Id == -1 ? this.customerDTO : null);

                if (closeTransaction && unsavedCustomerDTO != null && unsavedCustomerDTO.Id == -1)
                {
                    SaveCustomer(TrxTransacation);
                }
                if (trxLine.SubscriptionHeaderDTO.SourceSubscriptionHeaderId == -1)//Skip for renewal scenario
                {
                    int customerCreditCardsId = SaveCustomerCreditCardDetailsForSubscription(trxLine, closeTransaction, TrxTransacation);
                    trxLine.SubscriptionHeaderDTO.CustomerCreditCardsId = customerCreditCardsId;
                }

                CustomerDTO tempDTO = (this.PrimaryCard != null && this.PrimaryCard.customerDTO != null && this.PrimaryCard.customerDTO.Id > -1 ? this.PrimaryCard.customerDTO
                                           : this.customerDTO != null && this.customerDTO.Id > -1 ? this.customerDTO : null);

                if (trxLine.SubscriptionHeaderDTO.CustomerId == -1)
                {
                    trxLine.SubscriptionHeaderDTO.CustomerId = (tempDTO != null ? tempDTO.Id : -1);
                }
                if (trxLine.SubscriptionHeaderDTO.CustomerContactId == -1)
                {
                    ContactDTO tempContactDTO = (tempDTO != null && tempDTO.ContactDTOList != null && tempDTO.ContactDTOList.Any()
                                                   ? tempDTO.ContactDTOList.Find(cont => cont.IsActive && cont.ContactType == ContactType.EMAIL
                                                                                          && string.IsNullOrWhiteSpace(cont.Attribute1) == false) : null);
                    if (tempContactDTO == null)
                    {
                        tempContactDTO = (tempDTO != null && tempDTO.ContactDTOList != null && tempDTO.ContactDTOList.Any()
                                                   ? tempDTO.ContactDTOList.Find(cont => cont.IsActive && cont.ContactType == ContactType.PHONE
                                                                                          && string.IsNullOrWhiteSpace(cont.Attribute1) == false) : null);
                    }
                    trxLine.SubscriptionHeaderDTO.CustomerContactId = (tempContactDTO != null ? tempContactDTO.Id : -1);
                }
                if (closeTransaction)
                {
                    if (trxLine.SubscriptionHeaderDTO.CustomerId == -1)
                    {
                        throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2157));//2157
                    }
                }
                SubscriptionHeaderBL subscriptionHeaderBL = new SubscriptionHeaderBL(Utilities.ExecutionContext, trxLine.SubscriptionHeaderDTO);
                subscriptionHeaderBL.Save(TrxTransacation);
            }
            log.LogMethodExit();
        }
        /// <summary>
        /// HasSubScriptionPaymentDetails
        /// </summary>
        /// <param name="sqlTrx"></param>
        public void HasSubScriptionPaymentDetails(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(sqlTrx);
            if (HasSubscriptionProducts())
            {
                if (this.TransactionPaymentsDTOList != null && this.TransactionPaymentsDTOList.Any())
                {
                    //Get credit card payment record
                    TransactionPaymentsDTO subscriptionCardDTO = this.TransactionPaymentsDTOList.Find(tp => tp.paymentModeDTO != null && tp.paymentModeDTO.IsCreditCard &&
                                                                                                            (tp.SubscriptionAuthorizationMode == SubscriptionAuthorizationMode.I
                                                                                                               || string.IsNullOrWhiteSpace(tp.CustomerCardProfileId) == false)
                                                                                                              );
                    if (subscriptionCardDTO != null)
                    {
                        CCTransactionsPGWListBL cCTransactionsPGWListBL = new CCTransactionsPGWListBL();
                        List<KeyValuePair<CCTransactionsPGWDTO.SearchByParameters, string>> searchParamCCT = new List<KeyValuePair<CCTransactionsPGWDTO.SearchByParameters, string>>();
                        searchParamCCT.Add(new KeyValuePair<CCTransactionsPGWDTO.SearchByParameters, string>(CCTransactionsPGWDTO.SearchByParameters.RESPONSE_ID, subscriptionCardDTO.CCResponseId.ToString()));
                        searchParamCCT.Add(new KeyValuePair<CCTransactionsPGWDTO.SearchByParameters, string>(CCTransactionsPGWDTO.SearchByParameters.SITE_ID, Utilities.ExecutionContext.GetSiteId().ToString()));
                        List<CCTransactionsPGWDTO> cCTransactionsPGWDTOList = cCTransactionsPGWListBL.GetCCTransactionsPGWDTOList(searchParamCCT, sqlTrx);
                        if (cCTransactionsPGWDTOList == null || cCTransactionsPGWDTOList.Any() == false)
                        {
                            throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2880));//Unable to fetch credit card payment gateway transaction details
                        }
                    }
                    else
                    {
                        throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2878));//Customer credit card details are required for Subscription billing
                    }

                }
                else
                {
                    throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 526));//Payment incomplete. Cannot close transaction
                }
            }
            log.LogMethodExit();
        }

        /// <summary>
        /// GetInvoiceType
        /// </summary>
        /// <param name="sqlTrx"></param>
        /// <returns></returns>
        public string GetInvoiceType(SqlTransaction sqlTrx = null)
        {
            log.LogMethodEntry();
            string invoicType = string.Empty;
            try
            {
                if (this.TrxPOSPrinterOverrideRulesDTOList != null &&
                    this.TrxPOSPrinterOverrideRulesDTOList.Any() &&
                    this.TrxPOSPrinterOverrideRulesDTOList[0].POSPrinterOverrideOptionId > -1)
                {
                    POSPrinterOverrideOptionsBL pOSPrinterOverrideOptionsBL = new POSPrinterOverrideOptionsBL(Utilities.ExecutionContext, this.TrxPOSPrinterOverrideRulesDTOList[0].POSPrinterOverrideOptionId, sqlTrx);
                    POSPrinterOverrideOptionsDTO pOSPrinterOverrideOptionsDTO = pOSPrinterOverrideOptionsBL.POSPrinterOverrideOptionsDTO;
                    invoicType = pOSPrinterOverrideOptionsDTO.OptionName;
                }
            }
            catch (Exception ex)
            {
                log.Error("Get Invoice Type Error", ex);
                log.LogMethodExit(null, "Throwing Exception in Get Invoice Type-" + ex.Message);
                throw;
            }
            log.LogMethodExit(invoicType);
            return invoicType;
        }
        /// <summary>
        /// Saves the pOSPrinterOverrideRulesDTO List 
        /// </summary> 
        public void SaveTrxPOSPrinterOverrideRulesDTOList(SqlTransaction sqlTransaction)
        {
            log.LogMethodEntry(trxPOSPrinterOverrideRulesDTOList, sqlTransaction);
            if (trxPOSPrinterOverrideRulesDTOList != null && trxPOSPrinterOverrideRulesDTOList.Any())
            {
                for (int i = 0; i < trxPOSPrinterOverrideRulesDTOList.Count; i++)
                {
                    ValidateTrxPosPrinterOverride(trxPOSPrinterOverrideRulesDTOList[i].POSPrinterOverrideOptionId, sqlTransaction);
                    if (trxPOSPrinterOverrideRulesDTOList[i].TransactionId != this.Trx_id)
                    {
                        trxPOSPrinterOverrideRulesDTOList[i].TransactionId = this.Trx_id;
                    }
                }
                TrxPOSPrinterOverrideRulesListBL trxPOSPrinterOverrideRulesListBL = new TrxPOSPrinterOverrideRulesListBL(Utilities.ExecutionContext, trxPOSPrinterOverrideRulesDTOList, sqlTransaction);
                trxPOSPrinterOverrideRulesListBL.Save(sqlTransaction);
            }
            log.LogMethodExit();
        }

        /// <summary>
        /// AddTrxPOSPrinterOverrideRulesDTO
        /// </summary>
        /// <param name="trxPOSPrinterOverrideRulesDTO"></param>
        /// <param name="sqlTransaction"></param>
        public void AddTrxPOSPrinterOverrideRulesDTO(TrxPOSPrinterOverrideRulesDTO trxPOSPrinterOverrideRulesDTO, SqlTransaction sqlTransaction)
        {
            log.LogMethodEntry(trxPOSPrinterOverrideRulesDTO, sqlTransaction);
            TrxPOSPrinterOverrideRulesBL trxPOSPrinterOverrideRulesBL = new TrxPOSPrinterOverrideRulesBL(Utilities.ExecutionContext, trxPOSPrinterOverrideRulesDTO);
            trxPOSPrinterOverrideRulesBL.Validate();
            ValidateTrxPosPrinterOverride(trxPOSPrinterOverrideRulesDTO.POSPrinterOverrideOptionId, sqlTransaction);
            if (this.trxPOSPrinterOverrideRulesDTOList != null && this.trxPOSPrinterOverrideRulesDTOList.Any())
            {
                if (trxPOSPrinterOverrideRulesDTOList.Exists(tppor => tppor.POSPrinterOverrideOptionId == trxPOSPrinterOverrideRulesDTO.POSPrinterOverrideOptionId
                                                                        && tppor.OptionItemCode == trxPOSPrinterOverrideRulesDTO.OptionItemCode) == false)
                {
                    trxPOSPrinterOverrideRulesDTOList.Add(trxPOSPrinterOverrideRulesDTO);
                }
            }
            else
            {
                trxPOSPrinterOverrideRulesDTOList = new List<TrxPOSPrinterOverrideRulesDTO>();
                trxPOSPrinterOverrideRulesDTOList.Add(trxPOSPrinterOverrideRulesDTO);
            }
            log.LogMethodExit();
        }

        /// <summary>
        /// ValidateTrxPosPrinterOverride
        /// </summary>
        /// <param name="posPrinterOverrideOptionId"></param>
        /// <param name="sqlTransaction"></param>
        private void ValidateTrxPosPrinterOverride(int posPrinterOverrideOptionId, SqlTransaction sqlTransaction)
        {
            log.LogMethodEntry(posPrinterOverrideOptionId, sqlTransaction);
            if (posPrinterOverrideOptionId > -1)
            {
                LoadValidationFromLookup(sqlTransaction);
                POSPrinterOverrideOptionsDTO pOSPrinterOverrideOptionsDTO = null;
                POSPrinterOverrideOptionsBL pOSPrinterOverrideOptionsBL = new POSPrinterOverrideOptionsBL(Utilities.ExecutionContext, posPrinterOverrideOptionId, sqlTransaction);
                pOSPrinterOverrideOptionsDTO = pOSPrinterOverrideOptionsBL.POSPrinterOverrideOptionsDTO;
                CustomerDTO customerDTO = (this.customerDTO != null ? this.customerDTO : (this.PrimaryCard != null && this.PrimaryCard.customerDTO != null ? this.PrimaryCard.customerDTO : null));
                if (pOSPrinterOverrideOptionsDTO != null && customerDTO == null)
                {
                    AssignDefaultCustomer(pOSPrinterOverrideOptionsDTO.OptionName, sqlTransaction);
                }
                if (pOSPrinterOverrideOptionsDTO != null && peruValidationLookupValuesDTOList != null &&
                    peruValidationLookupValuesDTOList.Any() && pOSPrinterOverrideOptionsDTO != null
                    && peruValidationLookupValuesDTOList.Exists(vld => vld.LookupValue == pOSPrinterOverrideOptionsDTO.OptionName))
                {
                    LookupValuesDTO lookupValuesDTO = peruValidationLookupValuesDTOList.First(vld => vld.LookupValue == pOSPrinterOverrideOptionsDTO.OptionName);
                    string[] validationItems = lookupValuesDTO.Description.Split('|');
                    foreach (string item in validationItems)
                    {
                        ValidateItem(item);
                    }
                }
            }
            log.LogMethodExit();
        }

        /// <summary>
        /// validationItems
        /// </summary>
        /// <param name="validationItem"></param>
        private void ValidateItem(string validationItem)
        {
            log.LogMethodEntry(validationItem);
            string[] validationParams = validationItem.Split('-');
            if (validationParams != null && validationParams.Count() >= 2)
            {
                CustomerDTO customerDTO = (this.customerDTO != null ? this.customerDTO : (this.PrimaryCard != null && this.PrimaryCard.customerDTO != null ? this.PrimaryCard.customerDTO : null));
                if (customerDTO != null)
                {
                    if (validationParams[0] == "Profile")
                    {
                        if (!(customerDTO.ProfileDTO != null))
                        {
                            log.Error("Customer profile is empty. Please enter a value.");
                            throw new Exception(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2934));
                        }
                        else
                        {
                            ValidateProperty(validationParams[1], customerDTO.ProfileDTO);
                        }
                    }
                    else if (validationParams[0] == "Address")
                    {
                        if (!(customerDTO.ProfileDTO.AddressDTOList != null && customerDTO.ProfileDTO.AddressDTOList.Any()))
                        {
                            log.Error("Address is mandatory. Please enter a value.");
                            throw new Exception(MessageContainerList.GetMessage(Utilities.ExecutionContext, 249, "AddressLine"));
                        }
                        else
                        {
                            ValidateProperty(validationParams[1], customerDTO.ProfileDTO.AddressDTOList[0]);
                        }
                    }
                }
                else
                {
                    log.Error("Customer must be selected for the transaction");
                    throw new Exception(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2934));
                }
            }
            else
            {
                log.Error("Invalid setup for FISCAL_OPTION_VALIDATION_LOOKUP");
                throw new Exception(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2933, FISCAL_OPTION_VALIDATION_LOOKUP));
            }
            log.LogMethodExit();
        }

        /// <summary>
        /// ValidateProperty
        /// </summary>
        /// <param name="validationItems"></param>
        /// <param name="profileDTO"></param>
        private void ValidateProperty(string validationItems, ProfileDTO profileDTO)
        {
            log.LogMethodEntry(validationItems, profileDTO);
            Type t = this.customerDTO.ProfileDTO.GetType();
            PropertyInfo p = t.GetProperty(validationItems);
            if (p == null || string.IsNullOrEmpty(p.GetValue(this.customerDTO.ProfileDTO).ToString()))
            {
                throw new Exception(MessageContainerList.GetMessage(Utilities.ExecutionContext, 249, validationItems));
            }
            log.LogMethodExit();
        }

        /// <summary>
        /// ValidateProperty
        /// </summary>
        /// <param name="validationItems"></param>
        /// <param name="addressDTO"></param>
        private void ValidateProperty(string validationItems, AddressDTO addressDTO)
        {
            log.LogMethodEntry(validationItems, addressDTO);
            Type t = addressDTO.GetType();
            PropertyInfo p = t.GetProperty(validationItems);
            if (p == null || string.IsNullOrEmpty(p.GetValue(addressDTO).ToString()))
            {
                throw new Exception(MessageContainerList.GetMessage(Utilities.ExecutionContext, 249, validationItems));
            }
            log.LogMethodExit();
        }
        private void LoadValidationFromLookup(SqlTransaction sqlTransaction = null)
        {
            log.LogMethodEntry(sqlTransaction);
            if (peruValidationLookupValuesDTOList == null || peruValidationLookupValuesDTOList.Any() == false)
            {
                LookupValuesList lookupValuesList = new LookupValuesList(Utilities.ExecutionContext);
                List<KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>> searchParameters = new List<KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>>();
                searchParameters.Add(new KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>(LookupValuesDTO.SearchByLookupValuesParameters.SITE_ID, Utilities.ExecutionContext.GetSiteId().ToString()));
                searchParameters.Add(new KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>(LookupValuesDTO.SearchByLookupValuesParameters.LOOKUP_NAME, FISCAL_OPTION_VALIDATION_LOOKUP));
                peruValidationLookupValuesDTOList = lookupValuesList.GetAllLookupValues(searchParameters, sqlTransaction);
            }
            log.LogMethodExit();
        }

        private bool TransactionIsPartiallyReversed(TransactionDTO originalTransactionDTO, TransactionDTO reversalTransactionDTO, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry((originalTransactionDTO != null ? originalTransactionDTO.TransactionId : -1),
                               (reversalTransactionDTO != null ? reversalTransactionDTO.TransactionId : -1), sqlTrx);
            bool isPartialReveresal = true;
            List<int> linesPendingReversalList = new List<int>();
            if (originalTransactionDTO != null)
            {
                List<TransactionLineDTO> lineDTOList = originalTransactionDTO.TransactionLinesDTOList.Where(tl => tl.CancelledTime == null).ToList();
                if (lineDTOList != null && lineDTOList.Any())
                {
                    //Get all active lines from original transaction lines
                    linesPendingReversalList = lineDTOList.Select(tl => tl.LineId).Distinct().ToList();
                }
                if (linesPendingReversalList != null && linesPendingReversalList.Any())
                {
                    TransactionListBL transactionList = new TransactionListBL(Utilities.ExecutionContext);
                    List<KeyValuePair<TransactionDTO.SearchByParameters, string>> searchParam = new List<KeyValuePair<TransactionDTO.SearchByParameters, string>>();
                    searchParam.Add(new KeyValuePair<TransactionDTO.SearchByParameters, string>(TransactionDTO.SearchByParameters.ORIGINAL_TRX_ID, originalTransactionDTO.TransactionId.ToString()));
                    //get reversed transactions for the original transaction. sql session not passed so that reversalTransactionDTO is gets skipped
                    List<TransactionDTO> reversedTransactionDTOList = transactionList.GetTransactionDTOList(searchParam, Utilities, null, 0, 500, true);
                    if (reversedTransactionDTOList == null)
                    {
                        reversedTransactionDTOList = new List<TransactionDTO>();
                    }
                    if (reversalTransactionDTO != null && reversedTransactionDTOList.Exists(th => th.TransactionId == reversalTransactionDTO.TransactionId) == false)
                    {
                        reversedTransactionDTOList.Add(reversalTransactionDTO);
                    }
                    if (reversedTransactionDTOList != null && reversedTransactionDTOList.Any())
                    {
                        for (int i = 0; i < reversedTransactionDTOList.Count; i++)
                        {
                            TransactionDTO reversedDTO = reversedTransactionDTOList[i];
                            //if (reversedDTO.TransactionId == reversalTransactionDTO.TransactionId)
                            //{
                            //    //current reversal transaction is not fully saved to db yet
                            //    reversedDTO.TransactionLinesDTOList = new List<TransactionLineDTO>(reversalTransactionDTO.TransactionLinesDTOList);
                            //}
                            if (reversedDTO.TransactionLinesDTOList != null)
                            {
                                for (int j = 0; j < reversedDTO.TransactionLinesDTOList.Count; j++)
                                {
                                    TransactionLineDTO reversedLineDTO = reversedDTO.TransactionLinesDTOList[j];
                                    if (reversedLineDTO.OriginalLineId > -1 && linesPendingReversalList != null && linesPendingReversalList.Any())
                                    {
                                        //if found map the lines against original trx lines and remove from pending list
                                        linesPendingReversalList.Remove(reversedLineDTO.OriginalLineId);
                                    }
                                }
                            }
                        }
                        if (linesPendingReversalList == null || linesPendingReversalList.Any() == false)
                        {
                            //We still have pending lines
                            isPartialReveresal = false;
                        }
                    }
                }
                else
                {
                    isPartialReveresal = false;
                }
            }
            log.LogMethodExit(isPartialReveresal);
            return isPartialReveresal;
        }
        /// <summary>
        /// Assign Default Customer
        /// </summary> 
        private void AssignDefaultCustomer(string posPrinterOverrideOptionName, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(posPrinterOverrideOptionName, sqlTrx);
            LookupsContainerDTO lookupsContainerDTO = LookupsContainerList.GetLookupsContainerDTO(Utilities.ExecutionContext.GetSiteId(), FISCAL_CUSTOMER_VALIDATION_LOOKUP, Utilities.ExecutionContext);
            if (lookupsContainerDTO.LookupValuesContainerDTOList != null && lookupsContainerDTO.LookupValuesContainerDTOList.Any())
            {
                log.LogVariableState("LookupValuesContainerDTOList", lookupsContainerDTO.LookupValuesContainerDTOList);
                LookupValuesContainerDTO lookupValuesContainerDTO = lookupsContainerDTO.LookupValuesContainerDTOList.FirstOrDefault(x => x.LookupValue.Equals(posPrinterOverrideOptionName));
                if (lookupValuesContainerDTO != null && !string.IsNullOrEmpty(lookupValuesContainerDTO.Description))
                {
                    List<KeyValuePair<CustomerSearchByParameters, string>> searchParam = new List<KeyValuePair<CustomerSearchByParameters, string>>();
                    searchParam.Add(new KeyValuePair<CustomerSearchByParameters, string>(CustomerSearchByParameters.CUSTOMER_GUID, lookupValuesContainerDTO.Description.ToString()));
                    CustomerListBL customerListBL = new CustomerListBL(Utilities.ExecutionContext);
                    List<CustomerDTO> customerDTOList = customerListBL.GetCustomerDTOList(searchParam, true, true);
                    if (customerDTOList != null && customerDTOList.Count > 0)
                    {
                        this.customerDTO = customerDTOList.FirstOrDefault();
                        if (this.Trx_id > 0)
                        {
                            log.Info("Updating customer Id: " + this.customerDTO.Id.ToString() + " into Trx Header");
                            Utilities.executeNonQuery(@"update trx_header 
                                                               set CustomerId = @customerId
                                                             where TrxId = @TrxId",
                                               sqlTrx, new SqlParameter[]  { new SqlParameter("@trxId", this.Trx_id),
                                                new SqlParameter("@customerId",  this.customerDTO.Id) });
                        }
                    }
                }
            }
            log.LogMethodExit();
        }
        /// <summary>
        /// Reset Overriden Waiver mappings
        /// </summary>
        /// <param name="mgrId"></param>
        /// <param name="approvalTime"></param>
        public void ResetOverridenWaivers(int mgrId, DateTime approvalTime)
        {
            log.LogMethodEntry(mgrId, approvalTime);
            if (TrxLines != null)
            {
                string managerLoginId = string.Empty;
                if (ParafaitDefaultContainerList.GetParafaitDefault<bool>(Utilities.ExecutionContext, "WAIVER_OVERRIDE_NEEDS_MANAGER_APPROVAL"))
                {
                    if (mgrId == -1)
                    {
                        throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, "Manager Approval Required"));
                    }
                }
                LookupValuesList serverTimeObject = new LookupValuesList(Utilities.ExecutionContext);
                if (this.TransactionDate < serverTimeObject.GetServerDateTime().Date.AddDays(-1))
                {
                    throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 2355));
                    //Cannot map waivers for past date transaction 
                }
                if (mgrId > -1)
                {
                    Users approveUser = new Users(Utilities.ExecutionContext, mgrId);
                    managerLoginId = approveUser.UserDTO.LoginId;
                }
                for (int lineIndex = 0; lineIndex < TrxLines.Count; lineIndex++)
                {
                    if (TrxLines[lineIndex].LineValid && TrxLines[lineIndex].WaiverSignedDTOList != null && TrxLines[lineIndex].WaiverSignedDTOList.Any())
                    {
                        for (int i = 0; i < TrxLines[lineIndex].WaiverSignedDTOList.Count; i++)
                        {
                            if (TrxLines[lineIndex].WaiverSignedDTOList[i].CustomerSignedWaiverId == -1
                                && TrxLines[lineIndex].WaiverSignedDTOList[i].IsOverriden)
                            {
                                TrxLines[lineIndex].WaiverSignedDTOList[i].IsActive = true;
                                TrxLines[lineIndex].WaiverSignedDTOList[i].IsOverriden = false;
                                TrxLines[lineIndex].AddApproval(ApprovalAction.GetApprovalActionType(ApprovalAction.ApprovalActionType.RESET_OVERRIDEN_WAIVER), managerLoginId, approvalTime);
                                if (this.Trx_id > 0 && TrxLines[lineIndex].DBLineId > 0)
                                {
                                    SaveWaiverSignedData(this.Trx_id, TrxLines[lineIndex], null);
                                }
                            }
                        }
                    }
                }
            }
            log.LogMethodExit();
        }

        private bool IsQueueSetupRequiredForGames(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry();
            bool queueSetupRequired = false;
            if (queueSetupReqForGames == null)
            {
                int siteId = -1;
                if (Utilities.ParafaitEnv.IsCorporate == false || Utilities.ParafaitEnv.SiteId <= 0)
                {
                    siteId = -1;
                }
                else
                {
                    siteId = Utilities.ParafaitEnv.SiteId;
                }
                object o = Utilities.executeScalar(@"SELECT ISNULL((SELECT top 1 gpav.AttributeValue
			                                                          FROM GameProfileAttributes gpa, 
				                                                           GameProfileAttributeValues gpav
			                                                         WHERE gpa.Attribute='QUEUE_SETUP_REQUIRED'
                                                                       AND (gpa.site_id = @siteId OR @siteId = -1)
			                                                           AND gpa.AttributeId = gpav.attributeId ), 0)",
                                                  sqlTrx, new SqlParameter("@siteId", siteId));
                if (o != null)
                {
                    queueSetupReqForGames = o.ToString() == "1" ? true : false;
                }
            }
            queueSetupRequired = (bool)queueSetupReqForGames;
            log.LogMethodExit(queueSetupRequired);
            return queueSetupRequired;
        }
        /// <summary>
        /// GetEmailIdFromCustomerIdentifier
        /// </summary>
        /// <returns></returns>
        public string GetEmailIdFromCustomerIdentifier()
        {
            log.LogMethodEntry();
            string emailAddress = string.Empty;
            if (!string.IsNullOrEmpty(this.customerIdentifier))
            {
                string decryptedCustomerReference = Encryption.Decrypt(this.customerIdentifier);
                string[] customerIdentifierStringArray = decryptedCustomerReference.Split(new[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
                for (int i = 0; i < customerIdentifierStringArray.Length; i++)
                {
                    if (Regex.IsMatch(customerIdentifierStringArray[i], @"^((([\w]+\.[\w]+)+)|([\w]+))@(([\w]+\.)+)([A-Za-z]{1,9})$"))
                    {
                        emailAddress = customerIdentifierStringArray[i];
                    }
                }
            }
            log.LogVariableState("emailAddress", emailAddress);
            log.LogMethodExit();
            return emailAddress;
        }

        /// <summary>
        /// SetServiceCharges
        /// </summary>
        /// <param name="sqlTrx"></param>
        public void SetServiceCharges(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(sqlTrx);
            KeyValuePair<bool, List<string>> canAdd = CanProceedWithServiceChargeLineCreation(sqlTrx);
            if (canAdd.Key == true)
            {
                TransactionLine serviceChargeLine = GetActiveLineForType(ProductTypeValues.SERVICECHARGE, sqlTrx);
                if (serviceChargeLine == null)
                {
                    if (TransactionHasCancelledLineForType(ProductTypeValues.SERVICECHARGE, sqlTrx))
                    {
                        log.LogMethodExit("Found cancelled service charge lines. No action to be taken");
                        return;
                    }
                }
                double serviceChargeAmount = ComputeServiceCharges(sqlTrx);
                ProductsContainerDTO serviceChargeProductDTO = ProductsContainerList.GetSystemProductContainerDTO(Utilities.ExecutionContext.GetSiteId(), ProductTypeValues.SERVICECHARGE);
                if (serviceChargeProductDTO == null)
                {
                    throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 4498, ProductTypeValues.SERVICECHARGE));
                    // "Please check the product setup for &1"
                }
                CreateOrUpdateGratuityOrServiceChargeProductLine(sqlTrx, serviceChargeLine, serviceChargeAmount, serviceChargeProductDTO);
            }
            log.LogMethodExit();
        }

        private KeyValuePair<bool, List<string>> CanProceedWithServiceChargeLineCreation(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(sqlTrx);
            KeyValuePair<bool, List<string>> returnValue = new KeyValuePair<bool, List<string>>(true, new List<string>());
            if (ParafaitDefaultContainerList.GetParafaitDefault<bool>(Utilities.ExecutionContext, "AUTO_APPLY_SERVICE_CHARGE", false) == false)
            {
                string msg = MessageContainerList.GetMessage(Utilities.ExecutionContext, 4499);//"Sorry, auto apply service charge option is not enabled"
                returnValue = BuildMsgList(msg);
                log.LogMethodExit("false - AUTO_APPLY_SERVICE_CHARGE is set as No");
                return returnValue;
            }
            //if (ParafaitDefaultContainerList.GetParafaitDefault<decimal>(Utilities.ExecutionContext, "SERVICE_CHARGE_PERCENTAGE", 0) <= 0)
            //{
            //    string msg = MessageContainerList.GetMessage(Utilities.ExecutionContext, "Sorry, service charge percentage is zero or not set");
            //    returnValue = BuildMsgList(msg);
            //    log.LogMethodExit("false - SERVICECHARGE_PERCENTAGE is Zero");
            //    return returnValue;
            //}
            bool isReservationTransation = IsReservationTransaction(sqlTrx);
            log.LogVariableState("isReservationTransation", isReservationTransation);
            int minGuestQty = ParafaitDefaultContainerList.GetParafaitDefault<int>(Utilities.ExecutionContext, "MINIMUM_GUEST_QTY_FOR_SERVICE_CHARGE", 0);
            int trxGuestQty = (Order != null && Order.OrderHeaderDTO != null) ? (Order.OrderHeaderDTO.GuestCount != 0 ? Order.OrderHeaderDTO.GuestCount : 1) : 1;
            if (isReservationTransation)
            {
                minGuestQty = ParafaitDefaultContainerList.GetParafaitDefault<int>(Utilities.ExecutionContext, "MINIMUM_GUEST_QTY_FOR_RESERVATION_SERVICE_CHARGE", 0);
                trxGuestQty = GetReservationTransactionGuestQuantity();
            }
            log.LogVariableState("minGuestQty", minGuestQty);
            log.LogVariableState("trxGuestQty", trxGuestQty);
            if (minGuestQty > 0 && trxGuestQty < minGuestQty)
            {
                string msg = MessageContainerList.GetMessage(Utilities.ExecutionContext, 4500, trxGuestQty, minGuestQty);
                //'Sorry, cannot add service charges. Order guest count (&1) is less than minimum guest quantity &2'
                returnValue = BuildMsgList(msg);
                log.LogMethodExit("false - Order guest count is less than minimum guest quantity then do nothing");
                return returnValue;
            }
            log.LogMethodExit(true);
            return returnValue;

        }
        private KeyValuePair<bool, List<string>> BuildMsgList(string msg)
        {
            log.LogMethodEntry(msg);
            KeyValuePair<bool, List<string>> returnValue;
            List<string> msgList = new List<string>();
            msgList.Add(msg);
            returnValue = new KeyValuePair<bool, List<string>>(false, msgList);
            log.LogMethodExit();
            return returnValue;
        }
        /// <summary>
        /// GetActiveLineForType - For Service Charge or Gratuity only
        /// </summary>
        /// <param name="productTypeValue"></param>
        /// <param name="sqlTrx"></param>
        /// <returns></returns>
        public TransactionLine GetActiveLineForType(string productTypeValue, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(productTypeValue, sqlTrx);
            TransactionLine transactionLine = null;
            if (this.TrxLines != null && this.TrxLines.Any())
            {
                transactionLine = this.TrxLines.FindLast(tl => tl.LineValid == true && tl.ProductTypeCode == productTypeValue);
            }
            log.LogVariableState("service charge Line", transactionLine);
            log.LogMethodExit();
            return transactionLine;
        }
        private bool TransactionHasCancelledLineForType(string productTypeValue, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(productTypeValue, sqlTrx);
            bool hasCancelledLine = false;
            if (this.TrxLines != null && this.TrxLines.Any())
            {
                var transactionLine = this.TrxLines.FindLast(tl => tl.LineValid == true && tl.ProductTypeCode == productTypeValue);
                if (transactionLine != null)
                {
                    hasCancelledLine = false;
                }
                else
                {
                    if (transactionLine == null  //no active lines. Now check for cancelled lines 
                      && this.TrxLines.Exists(tl => tl.LineValid == false && tl.ProductTypeCode == productTypeValue))
                    {
                        hasCancelledLine = true;
                    }
                    if (hasCancelledLine == false)
                    {
                        hasCancelledLine = DoDBCheckForCancelledLineForProductType(productTypeValue, sqlTrx);
                    }
                }
            }
            log.LogVariableState("hasCancelledServiceChargeLine", hasCancelledLine);
            log.LogMethodExit();
            return hasCancelledLine;
        }

        private bool DoDBCheckForCancelledLineForProductType(string productTypeValue, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry();
            bool dnHasCancelledLine = false;
            if (this.Trx_id > 0)
            {
                if (dbHasCancelledLineForProductType.ContainsKey(productTypeValue))
                {
                    dnHasCancelledLine = dbHasCancelledLineForProductType[productTypeValue];
                }
                else
                {
                    List<SqlParameter> sqlParameterList = new List<SqlParameter>();
                    string sqlCmd = @"SELECT ISNULL((SELECT top 1 1 
                                                       FROM trx_lines tl, products p, product_type pt 
                                                      WHERE tl.TrxId = @trxId 
                                                        AND tl.CancelledTime is not null
                                                        AND tl.product_id = p.product_id 
                                                        AND p.product_type_id = pt.product_type_id 
                                                        AND pt.Product_Type = @productType), 0) ";
                    sqlParameterList.Add(new SqlParameter("@productType", productTypeValue));
                    sqlParameterList.Add(new SqlParameter("@trxId", this.Trx_id));
                    bool dbHasCancelledLineValue = Convert.ToBoolean(Utilities.executeScalar(sqlCmd, sqlTrx, sqlParameterList.ToArray()));
                    dbHasCancelledLineForProductType.Add(productTypeValue, dbHasCancelledLineValue);
                    dnHasCancelledLine = dbHasCancelledLineForProductType[productTypeValue];
                }
            }
            log.LogMethodExit(dnHasCancelledLine);
            return dnHasCancelledLine;
        }

        private double ComputeServiceCharges(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(sqlTrx);
            double serviceChargeAmount = 0;
            if (this.TrxLines != null && this.TrxLines.Any())
            {
                List<TransactionLine> activeLineList = this.TrxLines.Where(tl => tl.LineValid == true && tl.CancelledLine == false).ToList();
                if (activeLineList != null && activeLineList.Any())
                {
                    List<int> productIdList = activeLineList.Select(tl => tl.ProductID).Distinct().ToList();
                    if (productIdList != null && productIdList.Any())
                    {
                        List<ProductsContainerDTO> prodForServiceChargeList = new List<ProductsContainerDTO>();
                        for (int i = 0; i < productIdList.Count; i++)
                        {
                            ProductsContainerDTO containerDTO = ProductsContainerList.GetProductsContainerDTO(Utilities.ExecutionContext, productIdList[i]);
                            if (containerDTO != null && containerDTO.ServiceChargeIsApplicable)
                            {
                                prodForServiceChargeList.Add(containerDTO);
                            }
                        }
                        if (prodForServiceChargeList != null && prodForServiceChargeList.Any())
                        {
                            double serviceChargePercentage = ParafaitDefaultContainerList.GetParafaitDefault<double>(Utilities.ExecutionContext, "SERVICE_CHARGE_PERCENTAGE", 0);
                            for (int i = 0; i < prodForServiceChargeList.Count; i++)
                            {
                                List<TransactionLine> linesForServiceChargeList = this.TrxLines.Where(tl => tl.LineValid && tl.CancelledLine == false
                                                                              && prodForServiceChargeList[i].ProductId == tl.ProductID).ToList();
                                if (linesForServiceChargeList != null && linesForServiceChargeList.Any())
                                {
                                    double applicableServiceChargePercentage = (prodForServiceChargeList[i].ServiceChargePercentage != null
                                                                                  ? (double)prodForServiceChargeList[i].ServiceChargePercentage : serviceChargePercentage);
                                    double totalApplicableLineAmount = 0;
                                    double serviceChargeAmountForProduct = 0;
                                    for (int j = 0; j < linesForServiceChargeList.Count; j++)
                                    {
                                        List<TransactionLine> forDiscountCheck = new List<TransactionLine>();
                                        forDiscountCheck.Add(linesForServiceChargeList[j]);
                                        double applicableDiscountAmount = GetLineDisountAmountSum(forDiscountCheck);
                                        double applicableLineAmount = (linesForServiceChargeList[j].LineAmount - linesForServiceChargeList[j].tax_amount) - applicableDiscountAmount;
                                        totalApplicableLineAmount = totalApplicableLineAmount + (applicableLineAmount > 0 ? applicableLineAmount : 0);
                                    }
                                    serviceChargeAmountForProduct = totalApplicableLineAmount * (applicableServiceChargePercentage / 100);
                                    log.LogVariableState("serviceChargeAmountForProduct", serviceChargeAmountForProduct);
                                    serviceChargeAmount = serviceChargeAmount + serviceChargeAmountForProduct;
                                }
                            }
                        }
                    }
                }
            }
            log.LogVariableState("service charge amount", serviceChargeAmount);
            log.LogMethodExit();
            return serviceChargeAmount;
        }

        private double GetLineDisountAmountSum(List<TransactionLine> linesForChargeList)
        {
            log.LogMethodEntry(linesForChargeList);
            double applicableDiscountAmount = 0;
            if (linesForChargeList != null)
            {
                for (int i = 0; i < linesForChargeList.Count; i++)
                {
                    TransactionLine line = linesForChargeList[i];
                    if (line.TransactionDiscountsDTOList != null && line.TransactionDiscountsDTOList.Any())
                    {
                        applicableDiscountAmount = applicableDiscountAmount + (double)line.TransactionDiscountsDTOList.Sum(td => td.DiscountAmount);
                    }
                }
            }
            log.LogMethodExit(applicableDiscountAmount);
            return applicableDiscountAmount;
        }

        private void CreateOrUpdateGratuityOrServiceChargeProductLine(SqlTransaction sqlTrx, TransactionLine trxLine, double newAmount, ProductsContainerDTO productDTO)
        {
            log.LogMethodEntry(sqlTrx, trxLine, newAmount, productDTO);
            if (trxLine != null)
            {
                trxLine = MatchAndUpdateLineAmounts(trxLine, newAmount, productDTO.TaxInclusivePrice, sqlTrx);
            }
            else
            {
                string msg = string.Empty;
                if (newAmount != 0)
                {
                    int retValue = createTransactionLine(null, productDTO.ProductId, newAmount, 1, ref msg, null, true, sqlTrx);
                    if (retValue != 0)
                    {
                        log.Error(msg);
                        throw new ValidationException(msg);
                    }
                    updateAmounts(true, sqlTrx);
                }
                else
                {
                    log.Info(MessageContainerList.GetMessage(Utilities.ExecutionContext,
                                                       4501, productDTO.ProductName, newAmount));
                    // "Unable to add &1 to the transaction. Amount cannot be &2"
                }
            }
            log.LogMethodExit();
        }

        private TransactionLine MatchAndUpdateLineAmounts(TransactionLine trxLine, double newAmount, string taxInclusiveProductPrice, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(trxLine, newAmount, taxInclusiveProductPrice, sqlTrx);
            log.LogVariableState("Before update:", trxLine);
            double priceValue = (taxInclusiveProductPrice == "Y") ? (newAmount / (1.0 + trxLine.tax_percentage / 100.0))
                                                                 : newAmount;
            if (Math.Round(trxLine.Price, 4) != Math.Round(priceValue, 4))
            {
                log.LogVariableState("Amount miss match, update line amount", priceValue);
                if (taxInclusiveProductPrice == "Y")
                {
                    trxLine.Price = newAmount / (1.0 + trxLine.tax_percentage / 100.0);
                }
                else
                {
                    trxLine.Price = newAmount;
                }
                trxLine.LineAmount = trxLine.Price * (double)trxLine.quantity;
                trxLine.tax_amount = (trxLine.LineAmount * trxLine.tax_percentage / 100.0);
                trxLine.LineAmount += trxLine.tax_amount;
                updateAmounts(true, sqlTrx);
            }
            log.LogVariableState("After update:", trxLine);
            log.LogMethodExit();
            return trxLine;
        }
        /// <summary>
        /// SetAutoGratuityAmount
        /// </summary>
        /// <param name="sqlTrx"></param>
        public void SetAutoGratuityAmount(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry();

            KeyValuePair<bool, List<string>> canAdd = CanProceedWithGratuityLineCreation(sqlTrx);
            if (canAdd.Key == true)
            {
                if (TransactionHasCancelledLineForType(ProductTypeValues.GRATUITY, sqlTrx))
                {
                    log.LogMethodExit("Found cancelled Gratuity line. No action to be taken");
                    return;
                }
                TransactionLine gratuityLine = GetActiveLineForType(ProductTypeValues.GRATUITY, sqlTrx);
                double gratuityAmount = ComputeGratuityAmount(sqlTrx);
                ProductsContainerDTO gratuityProductDTO = ProductsContainerList.GetSystemProductContainerDTO(Utilities.ExecutionContext.GetSiteId(), ProductTypeValues.GRATUITY);
                if (gratuityProductDTO == null)
                {
                    throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 4498, ProductTypeValues.GRATUITY));
                    // "Please check the product setup for &1"
                }
                CreateOrUpdateGratuityOrServiceChargeProductLine(sqlTrx, gratuityLine, gratuityAmount, gratuityProductDTO);
            }
            log.LogMethodExit();
        }

        private KeyValuePair<bool, List<string>> CanProceedWithGratuityLineCreation(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(sqlTrx);
            KeyValuePair<bool, List<string>> returnValue = new KeyValuePair<bool, List<string>>(true, new List<string>());
            if (ParafaitDefaultContainerList.GetParafaitDefault<bool>(Utilities.ExecutionContext, "AUTO_APPLY_GRATUITY", false) == false)
            {
                string msg = MessageContainerList.GetMessage(Utilities.ExecutionContext, 4502);
                // "Sorry, auto apply gratuity option is not enabled"
                returnValue = BuildMsgList(msg);
                log.LogMethodExit("false - AUTO_APPLY_GRATUITY is set as No");
                return returnValue;
            }
            bool isReservationTransation = IsReservationTransaction(sqlTrx);
            log.LogVariableState("isReservationTransation", isReservationTransation);
            int minGuestQty = ParafaitDefaultContainerList.GetParafaitDefault<int>(Utilities.ExecutionContext, "MINIMUM_GUEST_QTY_FOR_GRATUITY", 0);
            int trxGuestQty = (Order != null && Order.OrderHeaderDTO != null) ? (Order.OrderHeaderDTO.GuestCount != 0 ? Order.OrderHeaderDTO.GuestCount : 1) : 1;
            if (isReservationTransation)
            {
                minGuestQty = ParafaitDefaultContainerList.GetParafaitDefault<int>(Utilities.ExecutionContext, "MINIMUM_GUEST_QTY_FOR_RESERVATION_GRATUITY", 0);
                trxGuestQty = GetReservationTransactionGuestQuantity();
            }
            log.LogVariableState("minGuestQty", minGuestQty);
            log.LogVariableState("trxGuestQty", trxGuestQty);
            if (minGuestQty > 0 && trxGuestQty < minGuestQty)
            {
                string msg = MessageContainerList.GetMessage(Utilities.ExecutionContext, 4503, trxGuestQty, minGuestQty);
                //'Sorry, cannot add gratuity amount. Order guest count (&1) is less than minimum guest quantity &2'
                returnValue = BuildMsgList(msg);
                log.LogMethodExit("false - Order guest count is less than minimum guest quantity then do nothing");
                return returnValue;
            }
            log.LogMethodExit(true);
            return returnValue;

        }
        private double ComputeGratuityAmount(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry();
            double gratuityAmount = 0;
            if (this.TrxLines != null && this.TrxLines.Any())
            {
                List<TransactionLine> activeLineList = this.TrxLines.Where(tl => tl.LineValid == true && tl.CancelledLine == false).ToList();
                if (activeLineList != null && activeLineList.Any())
                {
                    List<int> productIdList = activeLineList.Select(tl => tl.ProductID).Distinct().ToList();
                    if (productIdList != null && productIdList.Any())
                    {
                        List<ProductsContainerDTO> prodForGratuityList = new List<ProductsContainerDTO>();
                        for (int i = 0; i < productIdList.Count; i++)
                        {
                            ProductsContainerDTO containerDTO = ProductsContainerList.GetProductsContainerDTO(Utilities.ExecutionContext, productIdList[i]);
                            if (containerDTO != null && containerDTO.GratuityIsApplicable)
                            {
                                prodForGratuityList.Add(containerDTO);
                            }
                        }
                        if (prodForGratuityList != null && prodForGratuityList.Any())
                        {
                            double gratuityPercentage = ParafaitDefaultContainerList.GetParafaitDefault<double>(Utilities.ExecutionContext, "GRATUITY_AMOUNT_PERCENTAGE", 0);

                            for (int i = 0; i < prodForGratuityList.Count; i++)
                            {
                                List<TransactionLine> linesForGratuityAmountList = this.TrxLines.Where(tl => tl.LineValid && tl.CancelledLine == false
                                                                                  && prodForGratuityList[i].ProductId == tl.ProductID).ToList();
                                if (linesForGratuityAmountList != null && linesForGratuityAmountList.Any())
                                {
                                    double gratuityAmountForPrd = 0;
                                    double applicableGratuityPercentage = (prodForGratuityList[i].GratuityPercentage != null
                                                                                ? (double)prodForGratuityList[i].GratuityPercentage : gratuityPercentage);

                                    for (int j = 0; j < linesForGratuityAmountList.Count; j++)
                                    {
                                        List<TransactionLine> forDiscountCheck = new List<TransactionLine>();
                                        forDiscountCheck.Add(linesForGratuityAmountList[j]);
                                        double applicableDiscountAmount = GetLineDisountAmountSum(linesForGratuityAmountList);
                                        double applicableLineAmount = (linesForGratuityAmountList[j].LineAmount - linesForGratuityAmountList[j].tax_amount) - applicableDiscountAmount;
                                        gratuityAmountForPrd = gratuityAmountForPrd + (applicableLineAmount > 0 ? applicableLineAmount : 0);
                                    }
                                    //double applicableDiscountAmount = GetLineDisountAmountSum(linesForGratuityAmountList);
                                    gratuityAmountForPrd = (gratuityAmountForPrd * (double)(applicableGratuityPercentage / 100));
                                    log.LogVariableState("gratuityAmountForPrd", gratuityAmountForPrd);
                                    gratuityAmount = gratuityAmount + gratuityAmountForPrd;
                                }
                            }
                        }
                    }
                }
            }
            log.LogVariableState("Gratuity amount", gratuityAmount);
            log.LogMethodExit();
            return gratuityAmount;
        }
        /// <summary>
        /// GetServiceChargeAmountForTransaction
        /// </summary>
        /// <returns></returns>
        public double GetServiceChargeAmountForTransaction()
        {
            log.LogMethodEntry();
            double trxServiceChargeAmount = GetActiveLineAmount(ProductTypeValues.SERVICECHARGE);
            log.LogMethodExit(trxServiceChargeAmount);
            return trxServiceChargeAmount;
        }
        /// <summary>
        /// GetGratuityAmountForTransaction
        /// </summary>
        /// <returns></returns>
        public double GetGratuityAmountForTransaction()
        {
            log.LogMethodEntry();
            double trxGratuityAmount = GetActiveLineAmount(ProductTypeValues.GRATUITY);
            log.LogMethodExit(trxGratuityAmount);
            return trxGratuityAmount;
        }

        private double GetActiveLineAmount(string productType)
        {
            log.LogMethodEntry();
            double trxServiceChargeAmount = 0;
            TransactionLine transactionLine = GetActiveLineForType(productType, null);
            if (transactionLine != null)
            {
                trxServiceChargeAmount = transactionLine.LineAmount;
            }
            log.LogMethodExit();
            return trxServiceChargeAmount;
        }
        /// <summary>
        /// ApplyServiceCharges
        /// </summary>
        /// <param name="sqlTrx"></param>
        public void ApplyServiceCharges(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(sqlTrx);
            KeyValuePair<bool, List<string>> canAdd = CanProceedWithServiceChargeLineCreation(sqlTrx);
            if (canAdd.Key == true)
            {
                TransactionLine serviceChargeLine = GetActiveLineForType(ProductTypeValues.SERVICECHARGE, sqlTrx);
                if (serviceChargeLine != null)
                {
                    throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 4504));
                    // "Sorry, cannot add Service charges. Transaction alredy has active service charge entry"
                }
                double serviceChargeAmount = ComputeServiceCharges(sqlTrx);
                ProductsContainerDTO serviceChargeProductDTO = ProductsContainerList.GetSystemProductContainerDTO(Utilities.ExecutionContext.GetSiteId(), ProductTypeValues.SERVICECHARGE);
                if (serviceChargeProductDTO == null)
                {
                    throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 4498, ProductTypeValues.SERVICECHARGE));
                    // "Please check the product setup for &1"
                }
                CreateOrUpdateGratuityOrServiceChargeProductLine(sqlTrx, serviceChargeLine, serviceChargeAmount, serviceChargeProductDTO);
            }
            else
            {
                string msg = (canAdd.Value != null && canAdd.Value.Any())
                                  ? string.Join(",", canAdd.Value)
                                  : MessageContainerList.GetMessage(Utilities.ExecutionContext, "Sorry unexpected error");
                throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, msg));
            }

            log.LogMethodExit();
        }
        /// <summary>
        /// ApplyAutoGratuityAmount
        /// </summary>
        /// <param name="sqlTrx"></param>
        public void ApplyAutoGratuityAmount(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry();
            KeyValuePair<bool, List<string>> canAdd = CanProceedWithGratuityLineCreation(sqlTrx);
            if (canAdd.Key == true)
            {
                TransactionLine gratuityLine = GetActiveLineForType(ProductTypeValues.GRATUITY, sqlTrx);
                if (gratuityLine != null)
                {
                    throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 4505));
                    //"Sorry, cannot add gratuity amount. Transaction alredy has active gratuity amount entry"
                }
                double gratuityAmount = ComputeGratuityAmount(sqlTrx);
                ProductsContainerDTO gratuityProductDTO = ProductsContainerList.GetSystemProductContainerDTO(Utilities.ExecutionContext.GetSiteId(), ProductTypeValues.GRATUITY);
                if (gratuityProductDTO == null)
                {
                    throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 4498, ProductTypeValues.GRATUITY));
                    // "Please check the product setup for &1"
                }
                CreateOrUpdateGratuityOrServiceChargeProductLine(sqlTrx, gratuityLine, gratuityAmount, gratuityProductDTO);
            }
            else
            {
                string msg = (canAdd.Value != null && canAdd.Value.Any())
                                  ? string.Join(",", canAdd.Value)
                                  : MessageContainerList.GetMessage(Utilities.ExecutionContext, "Sorry unexpected error");
                throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, msg));
            }
            log.LogMethodExit();
        }
        /// <summary>
        /// CancelServiceChargeLine
        /// </summary>
        /// <param name="sqlTrx"></param>
        public void CancelServiceChargeLine(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(sqlTrx);
            try
            {
                TransactionLine serviceChargeLine = GetActiveLineForType(ProductTypeValues.SERVICECHARGE, sqlTrx);
                if (serviceChargeLine == null)
                {
                    throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 4506));
                    //'Transaction does not have active service charge entry'
                }
                else
                {
                    int lineIndex = this.TrxLines.IndexOf(serviceChargeLine);

                    if (lineIndex == -1)
                    {
                        throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 4507));
                        // "Unexpected error, unable to fetch active service charge entry"
                    }
                    else
                    {
                        if (cancelTransactionLine(lineIndex, sqlTrx, true) == false)
                        {
                            throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 4508));
                            //"Unexpected error, unable to cancel service charge entry"
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                log.Error(ex);
                throw;
            }
            log.LogMethodExit();
        }
        /// <summary>
        /// CancelAutoGratuityLine
        /// </summary>
        /// <param name="sqlTrx"></param>
        public void CancelAutoGratuityLine(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(sqlTrx);
            try
            {
                TransactionLine gratuityLine = GetActiveLineForType(ProductTypeValues.GRATUITY, sqlTrx);
                if (gratuityLine == null)
                {
                    throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 4509));
                    // "Transaction does not have active gratuity entry"
                }
                else
                {
                    int lineIndex = this.TrxLines.IndexOf(gratuityLine);

                    if (lineIndex == -1)
                    {
                        throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 4510));
                        // "Unexpected error, unable to fetch active gratuity entry"
                    }
                    else
                    {
                        if (cancelTransactionLine(lineIndex, sqlTrx, true) == false)
                        {
                            throw new ValidationException(MessageContainerList.GetMessage(Utilities.ExecutionContext, 4511));
                            // "Unexpected error, unable to cancel gratuity entry"
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                log.Error(ex);
                throw;
            }
            log.LogMethodExit();
        }

        /// <summary>
        /// HasAutoGratuityAmount
        /// </summary>
        internal bool HasAutoGratuityAmount()
        {
            log.LogMethodEntry();
            bool hasGratuity = false;
            Transaction.TransactionLine gratuityTrxLine = GetActiveLineForType(ProductTypeValues.GRATUITY, null);
            if (gratuityTrxLine != null)
            {
                hasGratuity = true;
            }
            log.LogMethodExit(hasGratuity);
            return hasGratuity;
        }
        private ExecutionContext GetExecutionContextForMembershipCheck()
        {
            log.LogMethodEntry(Utilities.ExecutionContext.IsCorporate);
            ExecutionContext executionContext = Utilities.ExecutionContext;
            if (Utilities.ExecutionContext.IsCorporate)
            {
                executionContext = GetMasterSiteExecutionContext();
            }
            log.LogMethodExit(executionContext);
            return executionContext;
        }

        private ExecutionContext GetMasterSiteExecutionContext()
        {
            log.LogMethodEntry(Utilities.ExecutionContext.IsCorporate);
            if (masterSiteExecutionContext == null)
            {
                List<SiteContainerDTO> siteContainerDTOs = SiteContainerList.GetSiteContainerDTOList();
                if (siteContainerDTOs != null && siteContainerDTOs.Any())
                {
                    SiteContainerDTO masterSiteDTO = siteContainerDTOs.Find(s => s.IsMasterSite);
                    if (masterSiteDTO != null)
                    {
                        UserContainerDTO userContainerDTO = GetUserContainerCurrentOrExternalPOSUser(masterSiteDTO);
                        POSMachineContainerDTO pOSMachineContainerDTO = GetPOSMachineForMasterSite(masterSiteDTO);
                        LanguageContainerDTO langContainerDTO = GetLanugageCodeForMasterSite(masterSiteDTO);
                        masterSiteExecutionContext = new ExecutionContext(userContainerDTO.LoginId, masterSiteDTO.SiteId, masterSiteDTO.SiteId, pOSMachineContainerDTO.POSMachineId,
                                                                         userContainerDTO.UserId, Utilities.ExecutionContext.IsCorporate, langContainerDTO.LanguageId,
                                                                         string.Empty, pOSMachineContainerDTO.Guid, pOSMachineContainerDTO.POSName, langContainerDTO.LanguageCode);
                    }
                    else
                    {
                        throw new Exception(MessageContainerList.GetMessage(Utilities.ExecutionContext, 4517));
                        //Unexpected error, unable to fetch master site record
                    }
                }
                else
                {
                    throw new Exception(MessageContainerList.GetMessage(Utilities.ExecutionContext, 4518));
                    // 'Unexpected error, unable to fetch site records'
                }
            }
            log.LogMethodExit(masterSiteExecutionContext);
            return masterSiteExecutionContext;
        }

        private UserContainerDTO GetUserContainerCurrentOrExternalPOSUser(SiteContainerDTO masterSiteDTO)
        {
            log.LogMethodEntry(masterSiteDTO);
            UserContainerDTO userContainerDTO;
            UserContainerDTOCollection userContainerDTOCollection = UserContainerList.GetUserContainerDTOCollection(masterSiteDTO.SiteId);
            if (userContainerDTOCollection != null && userContainerDTOCollection.UserContainerDTOList != null)
            {
                userContainerDTO = userContainerDTOCollection.UserContainerDTOList.Find(u => u.LoginId == Utilities.ExecutionContext.GetUserId());
                if (userContainerDTO == null)
                {
                    userContainerDTO = userContainerDTOCollection.UserContainerDTOList.Find(u => u.LoginId == EXTERNALPOSUSER);
                    if (userContainerDTO == null)
                    {
                        throw new Exception(MessageContainerList.GetMessage(Utilities.ExecutionContext, 730) + " " + EXTERNALPOSUSER);
                        //Unable to get user details. User not found.
                    }
                }
            }
            else
            {
                throw new Exception(MessageContainerList.GetMessage(Utilities.ExecutionContext, 4519,
                                   MessageContainerList.GetMessage(Utilities.ExecutionContext, "user"), masterSiteDTO.SiteName));
                //'Unexpected error, Unable to fetch &1 data for &2'
            }
            log.LogMethodExit(userContainerDTO);
            return userContainerDTO;
        }
        private POSMachineContainerDTO GetPOSMachineForMasterSite(SiteContainerDTO masterSiteDTO)
        {
            log.LogMethodEntry(masterSiteDTO);
            POSMachineContainerDTO pOSMachineContainerDTO = null;
            pOSMachineContainerDTO = POSMachineContainerList.GetPOSMachineContainerDTOOrDefault(masterSiteDTO.SiteId, Utilities.ExecutionContext.POSMachineName, null, -1);
            if (pOSMachineContainerDTO == null)
            {
                pOSMachineContainerDTO = POSMachineContainerList.GetPOSMachineContainerDTOOrDefault(masterSiteDTO.SiteId, Environment.MachineName, null, -1);
                if (pOSMachineContainerDTO == null)
                {
                    throw new Exception(MessageContainerList.GetMessage(Utilities.ExecutionContext, 4519,
                                   MessageContainerList.GetMessage(Utilities.ExecutionContext, "POS Machine"), Environment.MachineName));
                    //'Unexpected error, Unable to fetch &1 data for &2'
                }
            }
            log.LogMethodExit(pOSMachineContainerDTO);
            return pOSMachineContainerDTO;
        }


        private LanguageContainerDTO GetLanugageCodeForMasterSite(SiteContainerDTO masterSiteDTO)
        {
            log.LogMethodEntry(masterSiteDTO);
            LanguageContainerDTO languageContainerDTO = null;
            LanguageContainerDTOCollection languageContainerDTOCollection = LanguageContainerList.GetLanguageContainerDTOCollection(masterSiteDTO.SiteId);
            if (languageContainerDTOCollection != null && languageContainerDTOCollection.LanguageContainerDTOList != null)
            {
                languageContainerDTO = languageContainerDTOCollection.LanguageContainerDTOList.Find(l => l.LanguageCode == Utilities.ExecutionContext.LanguageCode);
                if (languageContainerDTO == null)
                {
                    languageContainerDTO = languageContainerDTOCollection.LanguageContainerDTOList.Find(l => l.LanguageCode.ToUpper() == USLANGUAGECODE.ToUpper());
                    if (languageContainerDTO == null)
                    {
                        throw new Exception(MessageContainerList.GetMessage(Utilities.ExecutionContext, 4519,
                                       MessageContainerList.GetMessage(Utilities.ExecutionContext, "Language"), USLANGUAGECODE));
                        //'Unexpected error, Unable to fetch &1 data for &2'
                    }
                }
            }
            else
            {
                throw new Exception(MessageContainerList.GetMessage(Utilities.ExecutionContext, 4519,
                               MessageContainerList.GetMessage(Utilities.ExecutionContext, "Language"), masterSiteDTO.SiteName));
                //'Unexpected error, Unable to fetch &1 data for &2'
            }
            log.LogMethodExit(languageContainerDTO);
            return languageContainerDTO;
        }
        private void SendMessageToStatusMsgQueue(string processMsg, int totalCount, int currentCount)
        {
            //log.LogMethodEntry();
            if (statusProgressMsgQueue != null)
            {
                statusProgressMsgQueue.Enqueue(new KeyValuePair<int, string>(((currentCount * 100) / totalCount), processMsg));
            }
            //log.LogMethodExit();
        }
        private void SetReceiptPrintedStatus(int trxLineId)
        {
            log.LogMethodEntry(trxLineId);
            if (this.TrxLines != null)
            {
                for (int i = 0; i < TrxLines.Count; i++)
                {
                    if (TrxLines[i].DBLineId == trxLineId)
                    {
                        TrxLines[i].ReceiptPrinted = true;
                        break;
                    }
                }
            }
            log.LogMethodExit();
        }
        /// <summary>
        /// AddManuallyAppliedServiceCharges
        /// </summary>
        /// <param name="card"></param>
        /// <param name="chargeAmount"></param>
        /// <param name="chargePercentage"></param>
        public void AddManuallyAppliedServiceCharges(Card card, double chargeAmount, double chargePercentage, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(chargeAmount, chargePercentage, sqlTrx);
            try
            {
                string msg = "";
                if (chargeAmount == 0 && chargePercentage == 0 || chargeAmount != 0 && chargePercentage != 0)
                {
                    msg = MessageContainerList.GetMessage(Utilities.ExecutionContext, "Please provide service charge amount or percentage");
                    log.Error(msg);
                    throw new ValidationException(msg);
                }

                ProductsList productsListBL = new ProductsList(Utilities.ExecutionContext);
                List<KeyValuePair<ProductsDTO.SearchByProductParameters, string>> searchParameters = new List<KeyValuePair<ProductsDTO.SearchByProductParameters, string>>();
                searchParameters.Add(new KeyValuePair<ProductsDTO.SearchByProductParameters, string>(ProductsDTO.SearchByProductParameters.PRODUCT_TYPE_NAME, ProductTypeValues.SERVICECHARGE));
                searchParameters.Add(new KeyValuePair<ProductsDTO.SearchByProductParameters, string>(ProductsDTO.SearchByProductParameters.SITEID, Utilities.ExecutionContext.GetSiteId().ToString()));
                List<ProductsDTO> serviceChargeProductList = productsListBL.GetProductsDTOList(searchParameters);
                if (serviceChargeProductList == null || serviceChargeProductList.Count == 0)
                {
                    msg = MessageContainerList.GetMessage(Utilities.ExecutionContext, 1825);
                    log.Error(msg);
                    throw new ValidationException(msg);
                }
                else
                {

                    Transaction.TransactionLine serviceChargeLine = null;
                    if (this.TrxLines != null)
                    {
                        serviceChargeLine = this.TrxLines.Find(tl => tl.LineValid == true
                                                                     && tl.CancelledLine == false
                                                                     && tl.ProductID == serviceChargeProductList[0].ProductId);
                    }
                    double existingServiceCharge = 0;
                    if (serviceChargeLine != null)
                    {
                        existingServiceCharge = serviceChargeLine.LineAmount;
                    }
                    decimal serviceAmount = 0;
                    if (chargePercentage != 0)
                    {
                        serviceAmount = Convert.ToDecimal((this.Transaction_Amount - this.Tax_Amount - existingServiceCharge) * (chargePercentage / 100));
                    }
                    else
                    {
                        serviceAmount = (decimal)chargeAmount;
                    }
                    if (serviceChargeLine != null && Math.Round(serviceChargeLine.Price, ParafaitEnv.RoundingPrecision, MidpointRounding.AwayFromZero) == Math.Round((double)serviceAmount, ParafaitEnv.RoundingPrecision, MidpointRounding.AwayFromZero))
                    {
                        log.LogMethodExit("serviceChargeLine.Price == serviceAmount");
                        return;
                    }
                    if (serviceChargeLine != null && Math.Round(serviceChargeLine.Price, ParafaitEnv.RoundingPrecision, MidpointRounding.AwayFromZero) != Math.Round((double)serviceAmount, ParafaitEnv.RoundingPrecision, MidpointRounding.AwayFromZero))
                    {
                        this.cancelLine(this.TrxLines.IndexOf(serviceChargeLine), sqlTrx);
                    }
                    if (this.createTransactionLine(card, serviceChargeProductList[0].ProductId, (double)serviceAmount, 1, ref msg) != 0)
                    {
                        log.Error(msg);
                        log.LogMethodExit(msg);
                        throw new ValidationException(msg);
                    }
                    serviceChargeLine = this.TrxLines.Find(tl => tl.LineValid == true
                                                                     && tl.CancelledLine == false
                                                                     && tl.ProductID == serviceChargeProductList[0].ProductId);
                    if (serviceChargeLine != null && serviceChargeLine.TransactionDiscountsDTOList != null)
                    {
                        serviceChargeLine.TransactionDiscountsDTOList = null;
                    }
                    this.updateAmounts(false);
                }
            }
            catch (Exception ex)
            {
                log.Error(ex);
                throw;
            }
            log.LogMethodExit();
        }


        private void ConvertCreditsForTimeForEligibleTrxLines(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(sqlTrx);
            if (TrxLines != null && TrxLines.Any()
                && TrxLines.Exists(tl => tl.LineValid && tl.MultiPointConversionRequired && string.IsNullOrWhiteSpace(tl.CardNumber) == false))
            {
                TaskProcs tp = new TaskProcs(Utilities);
                List<string> convertToTimeGuidList = TrxLines.Where(tl => tl.LineValid
                                                       && tl.MultiPointConversionRequired).Select(tl => tl.ConvertToTimeGuid).Distinct().ToList();
                if (convertToTimeGuidList != null && convertToTimeGuidList.Any())
                {
                    for (int i = 0; i < convertToTimeGuidList.Count; i++)
                    {
                        int each = 0;
                        double firstEach = 0;
                        double TotalTokens = 0;
                        bool newCards = false;
                        int dispensedCardCount = TrxLines.Where(tl => tl.LineValid && tl.MultiPointConversionRequired
                                                                    && string.IsNullOrWhiteSpace(tl.CardNumber) == false).Select(tl => tl.CardNumber).Distinct().Count();
                        Card firstCard = null;
                        foreach (Semnox.Parafait.Transaction.Transaction.TransactionLine tl in this.TrxLines)
                        {
                            if (tl.MultiPointConversionRequired && tl.ConvertToTimeGuid == convertToTimeGuidList[i])
                            {
                                if (tl.ProductType == ProductTypeValues.NEW)
                                {
                                    newCards = true;
                                }
                                if (firstCard == null)
                                {
                                    firstCard = tl.card;
                                }
                                TotalTokens += tl.Credits;
                                tl.LineProcessed = false;
                            }
                        }
                        if (newCards)
                        {
                            each = (int)(TotalTokens / dispensedCardCount);
                            firstEach = TotalTokens - (each * dispensedCardCount);
                        }
                        else
                        { each = (int)(TotalTokens); }
                        foreach (TransactionLine tl in this.TrxLines)
                        {
                            if (!tl.LineProcessed && tl.card != null)
                            {
                                string message = string.Empty;
                                Card convertCard = new Card(tl.card.CardNumber, Utilities.ParafaitEnv.LoginID, Utilities);
                                bool sv = tp.ConvertCreditsForTime(convertCard, (firstCard.Equals(tl.card)) ? (firstEach + each) : each, this.Trx_id, tl.DBLineId, tl.MultiPointConversionRequired, "Trx: convert Credit to Time", ref message, sqlTrx);
                                if (!sv)
                                {
                                    log.Error(message);
                                    throw new ValidationException(message);
                                }
                                //callSaveTrx = true;
                                foreach (TransactionLine tlc in this.TrxLines)
                                {
                                    if (tl.card.Equals(tlc.card))
                                        tlc.LineProcessed = true;
                                }
                            }
                        }
                    }
                }
            }
            log.LogMethodExit();
        }
        /// <summary>
        /// UpdateLoyaltyCardNumber
        /// </summary>
        /// <param name="loyaltyCardNumber"></param>
        /// <param name="sqlTrx"></param>
        public void UpdateLoyaltyCardNumber(string loyaltyCardNumber, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(loyaltyCardNumber, sqlTrx);
            if (string.IsNullOrWhiteSpace(loyaltyCardNumber) == false)
            {
                try
                {
                    if (this.Trx_id > 0)
                    {
                        Utilities.executeNonQuery("update trx_header set External_System_Reference = @loyaltyCardNumber where trxId = @trxId",
                                                 sqlTrx, new SqlParameter[] { new SqlParameter("@trxId", this.Trx_id),
                                                                             new SqlParameter("@loyaltyCardNumber", loyaltyCardNumber) });
                        this.externalSystemReference = loyaltyCardNumber;
                    }
                }
                catch (Exception ex)
                {
                    log.Error(ex);
                    throw;
                }
            }
            log.LogMethodExit();
        }
        /// <summary>
        /// GetCCSurchargeAmount
        /// </summary> s
        public double GetCCSurchargeAmount(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry();
            double ccSurchargeAmount = 0;
            if (this.TrxLines != null && this.TrxLines.Any())
            {
                if (this.Trx_id > 0 && this.TrxLines.Exists(tl => tl.LineValid
                        && tl.ProductID == this.Utilities.ParafaitEnv.CreditCardSurchargeProductId) == false)
                {
                    ccSurchargeAmount = Convert.ToDouble(Utilities.executeScalar(@"select isnull(sum(tl.amount), 0) 
                                                                                from trx_lines tl, trx_header th 
                                                                                where th.trxId = tl.trxId  
                                                                                and tl.product_id = @productId
                                                                                and tl.CancelledTime is null
                                                                                and th.trxId = @trxId",
                                          new SqlParameter[] { new SqlParameter("@productId", this.Utilities.ParafaitEnv.CreditCardSurchargeProductId),
                                                               new SqlParameter("@trxId", this.Trx_id)}));
                }
                else
                {
                    for (int i = 0; i < this.TrxLines.Count; i++)
                    {
                        if (this.TrxLines[i].LineValid
                            && this.TrxLines[i].ProductID == this.Utilities.ParafaitEnv.CreditCardSurchargeProductId)
                        {
                            ccSurchargeAmount = ccSurchargeAmount + this.TrxLines[i].LineAmount;
                        }
                    }
                }
                if (this.PaymentCreditCardSurchargeAmount > 0)
                {
                    ccSurchargeAmount = ccSurchargeAmount + PaymentCreditCardSurchargeAmount;
                }
            }
            log.LogMethodExit(ccSurchargeAmount);
            return ccSurchargeAmount;
        }
        /// <summary>
        /// CreateTransactionLineForCreditCardSurcharge
        /// </summary>
        /// <param name="sqlTrx"></param>
        public void CreateTransactionLineForCreditCardSurcharge(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(sqlTrx);
            string errMsg = string.Empty;
            if (this.Trx_id > 0)
            {
                if (CreateCreditCardSurcharge(this.PaymentCreditCardSurchargeAmount, sqlTrx, ref errMsg) == false)
                {
                    ValidationException vException = new ValidationException(errMsg);
                    log.Error("Error in CreateTransactionLineForCreditCardSurcharge", vException);
                    throw vException;
                }
            }
            else
            {
                errMsg = MessageContainerList.GetMessage(Utilities.ExecutionContext, 2656);
                //Please save the Transaction first
                ValidationException vException = new ValidationException(errMsg);
                log.Error("Error in CreateTransactionLineForCreditCardSurcharge", vException);
                throw vException;
            }
            log.LogMethodExit();
        }
        /// <summary>
        /// SetGuestContactInfo
        /// </summary> 
        public void SetGuestContactInfo(string emailId, string phoneNumber)
        {
            log.LogMethodEntry(emailId);
            if (string.IsNullOrWhiteSpace(emailId))
            {
                string errorMessage = MessageContainerList.GetMessage(Utilities.ExecutionContext, 572);
                ValidationException validationException = new ValidationException(errorMessage);
                log.Error(validationException);
                throw validationException;
            }
            else if (!System.Text.RegularExpressions.Regex.IsMatch(emailId.Trim(), @"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,})+)$"))
            {
                string errorMessage = MessageContainerList.GetMessage(Utilities.ExecutionContext, 572);
                ValidationException validationException = new ValidationException(errorMessage);
                log.Error(validationException);
                throw validationException;
            }
            this.customerIdentifier = emailId + (string.IsNullOrWhiteSpace(phoneNumber) ? "" : "|" + phoneNumber);
            string[] customerIdentifierStringArray = this.customerIdentifier.Split(new[] { '|' });
            this.customerIdentifiersList = new List<string>();
            foreach (string identifier in customerIdentifierStringArray)
            {
                this.customerIdentifiersList.Add(identifier);
            }

            if (string.IsNullOrEmpty(this.customerIdentifier) == false && this.Trx_id > 0) //Save the info into trx header if trx header entry is already created
            {
                List<SqlParameter> sqlParameterList = new List<SqlParameter>();
                String guestEmail = null;
                String guestPhone = null;

                string encryptedCustomerIdentifier = Encryption.Encrypt(customerIdentifier);
                if (customerIdentifier.Contains("|"))
                {
                    String[] emailPhone = customerIdentifier.Split('|');
                    for (int i = 0; i < emailPhone.Length; i++)
                    {
                        if (!string.IsNullOrWhiteSpace(emailPhone[i]))
                        {
                            if (Regex.IsMatch(emailPhone[i], @"^(\+\d{1,3}[- ]?)?[0-9]+$"))
                            {
                                guestPhone = emailPhone[i];
                            }
                            else
                            {
                                guestEmail = emailPhone[i];
                            }
                        }
                    }
                    log.Debug("Guest Email" + guestEmail);
                    log.Debug("Guest Phone" + guestEmail);
                }
                else
                {
                    if (Regex.IsMatch(customerIdentifier, @"^[0-9]+$"))
                    {
                        guestPhone = customerIdentifier;
                    }
                    else
                    {
                        guestEmail = customerIdentifier;
                    }
                }

                if (!string.IsNullOrWhiteSpace(guestEmail))
                {
                    sqlParameterList.Add(new SqlParameter("@GuestContactEmail", guestEmail));
                    sqlParameterList.Add(new SqlParameter("@GuestContactEmailHash", guestEmail));
                    log.LogVariableState("@GuestContactEmail", guestEmail);
                }
                else
                {
                    sqlParameterList.Add(new SqlParameter("@GuestContactEmail", (object)DBNull.Value));
                    sqlParameterList.Add(new SqlParameter("@GuestContactEmailHash", (object)DBNull.Value));
                    log.LogVariableState("@GuestContactEmail", (object)DBNull.Value);
                }

                if (!string.IsNullOrWhiteSpace(guestPhone))
                {
                    sqlParameterList.Add(new SqlParameter("@GuestContactNumber", guestPhone));
                    sqlParameterList.Add(new SqlParameter("@GuestContactNumberHash", guestPhone));
                    log.LogVariableState("@GuestContactNumber", guestPhone);
                }
                else
                {
                    sqlParameterList.Add(new SqlParameter("@GuestContactNumber", (object)DBNull.Value));
                    sqlParameterList.Add(new SqlParameter("@GuestContactNumberHash", (object)DBNull.Value));
                    log.LogVariableState("@GuestContactNumber", (object)DBNull.Value);
                }
                sqlParameterList.Add(new SqlParameter("@CustomerIdentifier", encryptedCustomerIdentifier));
                sqlParameterList.Add(new SqlParameter("@passPhrase", Semnox.Core.Utilities.ParafaitDefaultContainerList.GetParafaitDefault(Utilities.ExecutionContext, "CUSTOMER_ENCRYPTION_PASS_PHRASE")));

                sqlParameterList.Add(new SqlParameter("@TrxId", this.Trx_id));
                string trxUpdCommandText = @"update trx_header set  
	                                             CustomerIdentifier= @CustomerIdentifier,
	                                             GuestContactEmail = ENCRYPTBYPASSPHRASE(@passPhrase, @GuestContactEmail), 
	                                             GuestContactEmailHash = hashbytes('SHA2_256',convert(nvarchar(max), upper(@GuestContactEmailHash))),
	                                             GuestContactNumber= ENCRYPTBYPASSPHRASE(@passPhrase, @GuestContactNumber), 
	                                             GuestContactNumberHash = hashbytes('SHA2_256',convert(nvarchar(max), upper(@GuestContactNumberHash)))
                                          where TrxId = @TrxId";
                Utilities.executeNonQuery(trxUpdCommandText, sqlParameterList.ToArray());
            }
            log.LogMethodExit();
        }

        private double GetProductCardCreditPlusBalance(int productID, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(productID, sqlTrx);
            double productCardCreditPlusBalanceValue = 0;
            if (productCardCreditPlusBalanceData.ContainsKey(productID))
            {
                productCardCreditPlusBalanceValue = productCardCreditPlusBalanceData[productID];
            }
            else
            {
                productCardCreditPlusBalanceValue = Convert.ToDouble(Utilities.executeScalar(@"SELECT isnull(sum(CreditPlus), 0) 
                                                                                                 FROM ProductCreditPlus 
                                                                                                WHERE product_Id = @productId 
                                                                                                  AND CreditPlusType in ('A', 'G') ",
                                                                                            sqlTrx,
                                                                                            new SqlParameter("@productId", productID)));
                productCardCreditPlusBalanceData.Add(productID, productCardCreditPlusBalanceValue);
            }
            log.LogMethodExit(productCardCreditPlusBalanceValue);
            return productCardCreditPlusBalanceValue;

        }
        /// <summary>
        /// AutoAssignSingleTrxPOSPrinterOverrideRule
        /// </summary>
        /// <param name="sqlTrx"></param>
        public void AutoAssignSingleTrxPOSPrinterOverrideRule(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(sqlTrx);
            if (this.trxPOSPrinterOverrideRulesDTOList == null || this.trxPOSPrinterOverrideRulesDTOList.Any() == false)
            {
                //override option is not set
                //if there is only one option then auto assign the option
                POSMachines posMachine = new POSMachines(Utilities.ExecutionContext, Utilities.ParafaitEnv.POSMachineId);
                List<POSPrinterDTO> posPrintersDTOList = posMachine.PopulatePrinterDetails();
                if (posPrintersDTOList != null && posPrintersDTOList.Any())
                {
                    List<POSPrinterDTO> eligiblePosPrinterDtoList = posPrintersDTOList.FindAll(x => x.POSPrinterOverrideRulesDTOList != null
                                                                                   && (x.OrderTypeGroupId == this.OrderTypeGroupId
                                                                                   || x.OrderTypeGroupId <= -1 && this.OrderTypeGroupId <= -1));
                    if (eligiblePosPrinterDtoList != null
                         && eligiblePosPrinterDtoList.Any()
                         && eligiblePosPrinterDtoList.Exists(x => x.POSPrinterOverrideRulesDTOList != null && x.POSPrinterOverrideRulesDTOList.Count > 0))
                    {
                        foreach (POSPrinterDTO posPrinterDTO in eligiblePosPrinterDtoList)
                        {
                            List<POSPrinterOverrideRulesDTO> POSPrinterOverrideRulesDTOList = posPrinterDTO.POSPrinterOverrideRulesDTOList.GroupBy(ppordl => ppordl.POSPrinterOverrideOptionId).Select(ppor => ppor.First()).ToList();
                            if (POSPrinterOverrideRulesDTOList != null && POSPrinterOverrideRulesDTOList.Any() && POSPrinterOverrideRulesDTOList.Count == 1)
                            {
                                //only one option. Autoassign 
                                SetOverrideOption(posPrinterDTO, POSPrinterOverrideRulesDTOList[0], sqlTrx);
                            }
                        }
                    }
                }
            }
            log.LogMethodExit();
        }
        private void SetOverrideOption(POSPrinterDTO posPrinterDTO, POSPrinterOverrideRulesDTO pOSSelectedPrinterOverrideRulesDTO, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(posPrinterDTO, pOSSelectedPrinterOverrideRulesDTO, sqlTrx);
            try
            {
                if (pOSSelectedPrinterOverrideRulesDTO != null && posPrinterDTO != null && posPrinterDTO.POSPrinterOverrideRulesDTOList != null)
                {
                    List<POSPrinterOverrideRulesDTO> selectedSetOfPPORDTOList = posPrinterDTO.POSPrinterOverrideRulesDTOList.Where(ppor => ppor.IsActive && ppor.POSPrinterOverrideOptionId == pOSSelectedPrinterOverrideRulesDTO.POSPrinterOverrideOptionId
                                                                                && ppor.POSPrinterId == pOSSelectedPrinterOverrideRulesDTO.POSPrinterId).ToList();
                    if (selectedSetOfPPORDTOList != null && selectedSetOfPPORDTOList.Any())
                    {
                        for (int i = 0; i < selectedSetOfPPORDTOList.Count; i++)
                        {
                            POSPrinterOverrideRulesDTO selectedDTO = selectedSetOfPPORDTOList[i];
                            TrxPOSPrinterOverrideRulesDTO trxPOSPrinterOverrideRulesDTO = new TrxPOSPrinterOverrideRulesDTO(-1, this.Trx_id, selectedDTO.POSPrinterId, selectedDTO.POSPrinterOverrideRuleId, selectedDTO.POSPrinterOverrideOptionId,
                                (POSPrinterOverrideOptionItemCode)Enum.Parse(typeof(POSPrinterOverrideOptionItemCode), selectedDTO.OptionItemCode),
                                selectedDTO.ItemSourceColumnGuid, true);
                            this.AddTrxPOSPrinterOverrideRulesDTO(trxPOSPrinterOverrideRulesDTO, sqlTrx);
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                log.Error(ex);
                throw;
            }
            log.LogMethodExit();
        }
        /// <summary>
        /// AutomaticWaiverMapping
        /// </summary> 
        public void AutomaticWaiverMapping(SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(sqlTrx);
            bool autoWaiverMap = ParafaitDefaultContainerList.GetParafaitDefault<bool>(Utilities.ExecutionContext, "ENABLE_AUTOMATIC_WAIVER_MAPPING", false);
            if (autoWaiverMap)
            {
                if (IsWaiverSignaturePending())
                {
                    List<KeyValuePair<int, int>> lineIdCustIdPair = new List<KeyValuePair<int, int>>();
                    for (int i = 0; i < TrxLines.Count; i++)
                    {
                        TransactionLine trxLine = TrxLines[i];
                        if (trxLine.LineValid && trxLine.WaiverSignedDTOList != null &&
                            trxLine.WaiverSignedDTOList.Exists(ws => ws.CustomerSignedWaiverId == -1 && ws.IsActive == true))
                        {
                            int customerId = GetLineCustomerId(trxLine);
                            if (customerId != -1)
                            {
                                lineIdCustIdPair.Add(new KeyValuePair<int, int>(i, customerId));
                                //MapCustomerWaiversToLine(i, customerDTO);
                            }
                        }
                    }
                    if (lineIdCustIdPair != null && lineIdCustIdPair.Any())
                    {
                        List<int> custIdList = new List<int>();
                        foreach (KeyValuePair<int, int> item in lineIdCustIdPair)
                        {
                            if (custIdList.Exists(id => id == item.Value) == false)
                            {
                                custIdList.Add(item.Value);
                            }
                        }
                        if (custIdList != null && custIdList.Any())
                        {
                            CustomerListBL customerListBL = new CustomerListBL(Utilities.ExecutionContext);
                            List<CustomerDTO> customerDTOList = customerListBL.GetCustomerDTOList(custIdList, true);
                            if (customerDTOList != null && customerDTOList.Any())
                            {
                                foreach (KeyValuePair<int, int> item in lineIdCustIdPair)
                                {
                                    CustomerDTO custDTO = customerDTOList.Find(c => c.Id == item.Value);
                                    MapCustomerWaiversToLine(item.Key, custDTO);
                                }
                            }
                        }
                    }
                }
            }
            log.LogMethodExit();
        }

        private int GetLineCustomerId(TransactionLine trxLine)
        {
            log.LogMethodEntry(trxLine);
            int custId = -1;
            if (trxLine != null && trxLine.LineAtb != null && trxLine.LineAtb.cardList != null)
            {
                foreach (Card cardItem in trxLine.LineAtb.cardList)
                {
                    if (cardItem.customer_id > -1)
                    {
                        custId = cardItem.customer_id;
                        break;
                    }
                }
            }
            if (custId == -1 && trxLine != null && trxLine.card != null && trxLine.card.customer_id > -1)
            {
                custId = trxLine.card.customer_id;
            }
            if (custId == -1 && this.PrimaryCard != null && this.PrimaryCard.customer_id > -1)
            {
                custId = this.PrimaryCard.customer_id;
            }
            if (custId == -1 && this.customerDTO != null && this.customerDTO.Id > -1)
            {
                custId = this.customerDTO.Id;
            }
            log.LogMethodExit(custId);
            return custId;
        }

        private DateTime GetTrxDate(int lineId)
        {
            log.LogMethodEntry(lineId);
            DateTime lineScheduleDate = DateTime.MinValue;
            if (lineId > -1 && this.TrxLines != null && this.TrxLines.Count > lineId)
            {
                if (this.TrxLines[lineId].LineAtb != null && this.TrxLines[lineId].LineAtb.AttractionBookingDTO != null)
                {
                    lineScheduleDate = this.TrxLines[lineId].LineAtb.AttractionBookingDTO.ScheduleFromDate;
                }
            }
            log.LogVariableState("lineScheduleDate", lineScheduleDate);
            log.LogVariableState("this.transaction.TrxDate", this.TrxDate);
            DateTime trxDatevalue = (lineScheduleDate == DateTime.MinValue ? ((this.TrxDate == DateTime.MinValue ?
                                     (this.TransactionDate == DateTime.MinValue ? Utilities.getServerTime() : this.TransactionDate)
                                     : this.TrxDate)) : lineScheduleDate);
            log.LogMethodExit(trxDatevalue);
            return trxDatevalue;
        }
    }
}

