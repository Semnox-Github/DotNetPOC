/********************************************************************************************
* Project Name - Inventory Receive Lines
* Description  - Bussiness logic of receive lines
* 
**************
**Version Log
**************
*Version     Date            Modified By        Remarks          
*********************************************************************************************
*1.00        10-08-2016      Raghuveera          Created 
********************************************************************************************
*2.60        11-Apr-2019     Girish Kundar       Updated: Added method DeleteAndAddReceiveTaxes
*                                                Which inserts multiple taxlines to the Table PurchaseOrderReceiveTaxLine
*2.70.2        21-Jul-2019     Deeksha             Modified: Save method returns DTO instead of ID.
*2.70.2       25-Oct-2019      Jinto Thomas        The receipt generated by DPL date with current server date
*2.110.0      28-Dec-2020     Mushahid Faizan      Modified : Web Inventory Changes
*2.130        04-Jun-2021     Girish Kundar        Modified - POS stock changes
* *******************************************************************************************/
using System;
using Semnox.Core.Utilities;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using Semnox.Parafait.Communication;
using System.Windows;
using Semnox.Parafait.Languages;
using Semnox.Parafait.Product;

namespace Semnox.Parafait.Inventory
{
    /// <summary>
    /// Inventory receive lines will creates and modifies the inventory receive lines
    /// </summary>
    public class InventoryReceiveLinesBL
    {
        private InventoryReceiveLinesDTO inventoryReceiveLinesDTO;
        private static readonly logging.Logger log = new logging.Logger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        private Utilities _utilities;
        private ExecutionContext executionContext;//= ExecutionContext.GetExecutionContext();

        /// <summary>
        /// Default constructor
        /// </summary>
        private InventoryReceiveLinesBL(ExecutionContext executionContext)
        {
            log.LogMethodEntry(executionContext);
            this.executionContext = executionContext;
            log.LogMethodExit();
        }

        /// <summary>
        /// Constructor with the Requsition Line id as the parameter
        /// Would fetch the Templates object from the database based on the id passed. 
        /// </summary>
        /// <param name="inventoryReceiveLinesId">Req Template id</param>
        /// <param name="sqlTransaction">sqlTransaction</param>
        public InventoryReceiveLinesBL(ExecutionContext executionContext, int inventoryReceiveLinesId, SqlTransaction sqlTransaction = null)
            : this(executionContext)
        {
            log.LogMethodEntry(inventoryReceiveLinesId, sqlTransaction);
            InventoryReceiveLinesDataHandler inventoryReceiveLinesDataHandler = new InventoryReceiveLinesDataHandler(sqlTransaction);
            inventoryReceiveLinesDTO = inventoryReceiveLinesDataHandler.GetInventoryReceiveLines(inventoryReceiveLinesId);
            if (inventoryReceiveLinesDTO == null)
            {
                string message = MessageContainerList.GetMessage(executionContext, 2196, " Inventory Receive Lines ", inventoryReceiveLinesId);
                log.LogMethodExit(null, "Throwing Exception - " + message);
                throw new EntityNotFoundException(message);
            }
            log.LogMethodExit();
        }

        /// <summary>
        /// Constructor with the DTO parameter
        /// </summary>
        /// <param name="inventoryReceiveLinesDTO">Parameter of the type InventoryReceiveLinesDTO</param>
        /// <param name="executionContext">Execution context</param>
        public InventoryReceiveLinesBL(InventoryReceiveLinesDTO inventoryReceiveLinesDTO, ExecutionContext executionContext)
            : this(executionContext)
        {
            log.LogMethodEntry(inventoryReceiveLinesDTO, executionContext);
            this.inventoryReceiveLinesDTO = inventoryReceiveLinesDTO;
            log.LogMethodExit();
        }

        /// <summary>
        ///Constructor with the utilities and DTO parameter 
        /// </summary>
        /// <param name="utilities">Parameter of the type utilities</param>
        /// <param name="inventoryReceiveLinesDTO">Parameter of the type InventoryReceiveLinesDTO</param>
        public InventoryReceiveLinesBL(Utilities utilities, InventoryReceiveLinesDTO inventoryReceiveLinesDTO)
        {
            log.LogMethodEntry(utilities, inventoryReceiveLinesDTO);
            _utilities = utilities;
            this.executionContext = utilities.ExecutionContext;
            this.inventoryReceiveLinesDTO = inventoryReceiveLinesDTO;
            log.LogMethodExit();
        }

        /// <summary>
        /// Saves the Inventory recieve line
        /// Inventory Receipt will be inserted if InventoryReceiveLineId is less than or equal to
        /// zero else updates the records based on primary key
        /// </summary>
        public void Save(SqlTransaction sqlTransaction = null)
        {
            log.LogMethodEntry(sqlTransaction);
            if (inventoryReceiveLinesDTO.IsChangedRecursive == false
                && inventoryReceiveLinesDTO.PurchaseOrderReceiveLineId > -1)
            {
                log.LogMethodExit(null, "Nothing to save.");
                return;
            }
            InventoryReceiveLinesDataHandler inventoryReceiveLinesDataHandler = new InventoryReceiveLinesDataHandler(sqlTransaction);
            LookupValuesList lookupValuesList = new LookupValuesList(executionContext);
            Validate(sqlTransaction);
            bool createUpdateInventory = inventoryReceiveLinesDTO.InventoryRequired;

            if (inventoryReceiveLinesDTO.PurchaseOrderReceiveLineId < 0)
            {
                inventoryReceiveLinesDTO = inventoryReceiveLinesDataHandler.Insert(inventoryReceiveLinesDTO, executionContext.GetUserId(), executionContext.GetSiteId());
                PurchaseOrderReceiveTaxLineBL purchaseOrderReceiveTaxLineBL = new PurchaseOrderReceiveTaxLineBL(this.executionContext);
                inventoryReceiveLinesDTO.PurchaseOrderReceiveTaxLineListDTO = purchaseOrderReceiveTaxLineBL.BuildTaxLines(inventoryReceiveLinesDTO, sqlTransaction);
                inventoryReceiveLinesDTO.AcceptChanges();
                InventoryActivityLogDTO inventoryActivityLogDTO = new InventoryActivityLogDTO(lookupValuesList.GetServerDateTime(), "ReceiveLines Inserted",
                                                            inventoryReceiveLinesDTO.Guid, false, executionContext.GetSiteId(), "PurchaseOrderReceive_Line", -1,
                                                            inventoryReceiveLinesDTO.PurchaseOrderReceiveLineId.ToString(), -1, executionContext.GetUserId(),
                                                            lookupValuesList.GetServerDateTime(), executionContext.GetUserId(), lookupValuesList.GetServerDateTime());
                InventoryActivityLogBL inventoryActivityLogBL = new InventoryActivityLogBL(executionContext, inventoryActivityLogDTO);
                inventoryActivityLogBL.Save(sqlTransaction);
            }
            else
            {
                if (inventoryReceiveLinesDTO.IsChanged)
                {
                    inventoryReceiveLinesDTO = inventoryReceiveLinesDataHandler.Update(inventoryReceiveLinesDTO, executionContext.GetUserId(), executionContext.GetSiteId());
                    PurchaseOrderReceiveTaxLineBL purchaseOrderReceiveTaxLineBL = new PurchaseOrderReceiveTaxLineBL(this.executionContext);
                    inventoryReceiveLinesDTO.PurchaseOrderReceiveTaxLineListDTO = purchaseOrderReceiveTaxLineBL.BuildTaxLines(inventoryReceiveLinesDTO, sqlTransaction);
                    inventoryReceiveLinesDTO.AcceptChanges();
                    InventoryActivityLogDTO inventoryActivityLogDTO = new InventoryActivityLogDTO(lookupValuesList.GetServerDateTime(), "ReceiveLines Updated",
                                                             inventoryReceiveLinesDTO.Guid, false, executionContext.GetSiteId(), "PurchaseOrderReceive_Line", -1,
                                                             inventoryReceiveLinesDTO.PurchaseOrderReceiveLineId.ToString(), -1, executionContext.GetUserId(),
                                                             lookupValuesList.GetServerDateTime(), executionContext.GetUserId(), lookupValuesList.GetServerDateTime());
                    InventoryActivityLogBL inventoryActivityLogBL = new InventoryActivityLogBL(executionContext, inventoryActivityLogDTO);
                    inventoryActivityLogBL.Save(sqlTransaction);

                }
            }
            if (inventoryReceiveLinesDTO.PurchaseOrderReceiveTaxLineListDTO != null &&
                inventoryReceiveLinesDTO.PurchaseOrderReceiveTaxLineListDTO.Any())
            {
                List<PurchaseOrderReceiveTaxLineDTO> purchaseOrderReceiveTaxLineDTOList = new List<PurchaseOrderReceiveTaxLineDTO>();
                foreach (var purchaseOrderReceiveTaxLinesDTO in inventoryReceiveLinesDTO.PurchaseOrderReceiveTaxLineListDTO)
                {

                    if (purchaseOrderReceiveTaxLinesDTO.IsChanged)
                    {
                        purchaseOrderReceiveTaxLineDTOList.Add(purchaseOrderReceiveTaxLinesDTO);
                    }
                }
                if (purchaseOrderReceiveTaxLineDTOList.Any())
                {
                    PurchaseOrderReceiveTaxLineListBL purchaseOrderReceiveTaxLineBL = new PurchaseOrderReceiveTaxLineListBL(this.executionContext, purchaseOrderReceiveTaxLineDTOList);
                    purchaseOrderReceiveTaxLineBL.Save(sqlTransaction);
                }
            }


            if (createUpdateInventory)
            {
                ProductContainer productContainer = new ProductContainer(executionContext);
                int inventoryUomId = ProductContainer.productDTOList.Find(x => x.ProductId == inventoryReceiveLinesDTO.ProductId).InventoryUOMId;
                UOM uOM = new UOM(executionContext, inventoryReceiveLinesDTO.UOMId);
                double factor = 1;
                if (uOM.getUOMDTO != null)
                {
                    factor = uOM.GetConversionFactor(inventoryUomId);
                }
                if (inventoryReceiveLinesDTO.InventoryLotListDTO != null && inventoryReceiveLinesDTO.InventoryLotListDTO.Count > 0)
                {
                    foreach (InventoryLotDTO inventoryLotDTO in inventoryReceiveLinesDTO.InventoryLotListDTO)
                    {
                        if (inventoryLotDTO.PurchaseOrderReceiveLineId == -1)
                            inventoryLotDTO.PurchaseOrderReceiveLineId = inventoryReceiveLinesDTO.PurchaseOrderReceiveLineId;
                        if (inventoryLotDTO.IsChanged == true)
                        {
                            if (uOM.getUOMDTO != null)
                            {
                                inventoryLotDTO.OriginalQuantity = inventoryLotDTO.OriginalQuantity * factor;
                                inventoryLotDTO.BalanceQuantity = inventoryLotDTO.BalanceQuantity * factor;
                            }
                            inventoryLotDTO.UOMId = inventoryUomId;
                            InventoryLotBL inventoryLotBl = new InventoryLotBL(inventoryLotDTO, executionContext);
                            inventoryLotBl.Save(sqlTransaction);
                        }
                        //Create new InventoryDTO with LotID and details from inventoryReceiveLinesDTO

                        InventoryDTO inventoryDTO = new InventoryDTO();
                        inventoryDTO.ProductId = inventoryReceiveLinesDTO.ProductId;
                        inventoryDTO.LocationId = inventoryReceiveLinesDTO.LocationId;
                        inventoryDTO.ReceivePrice = inventoryReceiveLinesDTO.Price;
                        inventoryDTO.LotId = inventoryLotDTO.LotId;
                        inventoryDTO.UOMId = inventoryReceiveLinesDTO.UOMId;
                        inventoryDTO.Quantity = inventoryLotDTO.BalanceQuantity;
                        inventoryDTO.Timestamp = ServerDateTime.Now;
                        Inventory inventoryBL = new Inventory(inventoryDTO, executionContext);
                        inventoryBL.Save(sqlTransaction);
                        //Create new InventoryTransactionDTO with lotId and other required details.
                        //Call InventoryTransactionBL.Save() to save the InventoryTransactionDTO record.}
                        CreateInventoryTransactionDTO(inventoryReceiveLinesDTO, inventoryLotDTO.LotId, executionContext.GetUserId(), executionContext.GetSiteId(), sqlTransaction);
                    }
                }
                else
                {
                    List<InventoryDTO> inventoryListDTO = new List<InventoryDTO>();
                    List<KeyValuePair<InventoryDTO.SearchByInventoryParameters, string>> inventorySearchParams = new List<KeyValuePair<InventoryDTO.SearchByInventoryParameters, string>>();
                    inventorySearchParams.Add(new KeyValuePair<InventoryDTO.SearchByInventoryParameters, string>(InventoryDTO.SearchByInventoryParameters.LOCATION_ID, inventoryReceiveLinesDTO.LocationId.ToString()));
                    inventorySearchParams.Add(new KeyValuePair<InventoryDTO.SearchByInventoryParameters, string>(InventoryDTO.SearchByInventoryParameters.PRODUCT_ID, inventoryReceiveLinesDTO.ProductId.ToString()));
                    InventoryList inventoryListBL = new InventoryList();
                    inventoryListDTO = inventoryListBL.GetAllInventory(inventorySearchParams, false, sqlTransaction);

                    InventoryDTO inventoryDTO = new InventoryDTO();
                    inventoryDTO.ProductId = inventoryReceiveLinesDTO.ProductId;
                    inventoryDTO.LocationId = inventoryReceiveLinesDTO.LocationId;
                    inventoryDTO.ReceivePrice = inventoryReceiveLinesDTO.Price;
                    inventoryDTO.Timestamp = ServerDateTime.Now;

                    if (inventoryListDTO == null)
                    {
                        inventoryDTO.Quantity = inventoryReceiveLinesDTO.Quantity * factor;
                        inventoryDTO.UOMId = inventoryReceiveLinesDTO.UOMId;
                    }
                    else
                    {
                        inventoryDTO = inventoryListDTO[0];
                        inventoryDTO.Timestamp = ServerDateTime.Now;
                        inventoryDTO.ReceivePrice = inventoryReceiveLinesDTO.Price;
                        inventoryDTO.Quantity = inventoryListDTO[0].Quantity + (inventoryReceiveLinesDTO.Quantity * factor);
                    }
                    Inventory inventoryBL = new Inventory(inventoryDTO, executionContext);
                    inventoryBL.Save(sqlTransaction);
                    //Call InventoryTransactionBL.Save() to save the InventoryTransactionDTO record.
                    //Create new InventoryDTO with details from inventoryReceiveLinesDTO
                    CreateInventoryTransactionDTO(inventoryReceiveLinesDTO, -1, executionContext.GetUserId(), executionContext.GetSiteId(), sqlTransaction);
                }
            }
            //UpdateRequisition(inventoryReceiveLinesDTO.PurchaseOrderId, inventoryReceiveLinesDTO.PurchaseOrderLineId, Convert.ToDecimal(inventoryReceiveLinesDTO.Quantity), sqlTransaction);
            log.LogMethodExit();
        }
        private void UpdateRequisition(int purchaseOrderId, int purchaseOrderLineId, decimal receivedQuantity, SqlTransaction sqlTransaction)
        {
            try
            {
                log.LogMethodEntry(purchaseOrderId, purchaseOrderLineId, receivedQuantity, sqlTransaction);
                PurchaseOrder purchaseOrder = new PurchaseOrder(purchaseOrderId, executionContext, sqlTransaction, true, true);
                PurchaseOrderDTO purchaseOrderDTO = purchaseOrder.getPurchaseOrderDTO;
                if (purchaseOrderDTO == null)
                {
                    log.Error("Unable to find the purchase order with id : " + purchaseOrderId);
                    throw new Exception("Unable to find the purchase order with id : " + purchaseOrderId);
                }
                PurchaseOrderLineDTO purchaseOrderLineDTO = purchaseOrderDTO.PurchaseOrderLineListDTO.Where(x => x.PurchaseOrderLineId == purchaseOrderLineId).FirstOrDefault();
                if (purchaseOrderLineDTO != null && purchaseOrderLineDTO.RequisitionId > -1 && purchaseOrderLineDTO.RequisitionLineId > -1)
                {
                    string result = string.Empty;
                    RequisitionBL requisitionBL = new RequisitionBL(executionContext, purchaseOrderLineDTO.RequisitionId, sqlTransaction, true, true);
                    if (requisitionBL.GetRequisitionsDTO == null)
                    {
                        log.Error("Unable to find the Requisition with id : " + purchaseOrderLineDTO.RequisitionId);
                        throw new Exception("Unable to find the Requisition with id : " + purchaseOrderLineDTO.RequisitionId);
                    }
                    RequisitionDTO requisitionDTO = requisitionBL.GetRequisitionsDTO;
                    if (requisitionDTO.RequisitionLinesListDTO != null && requisitionDTO.RequisitionLinesListDTO.Any())
                    {
                        bool isClosed = true;
                        RequisitionLinesDTO requisitionLinesDTO = requisitionDTO.RequisitionLinesListDTO.Where(req => req.RequisitionLineId == purchaseOrderLineDTO.RequisitionLineId).FirstOrDefault();
                        if (requisitionLinesDTO != null)
                        {
                            double approvedQty = (requisitionLinesDTO.ApprovedQuantity == -1) ? 0 : requisitionLinesDTO.ApprovedQuantity;
                            approvedQty = approvedQty + Convert.ToDouble(receivedQuantity);
                            requisitionLinesDTO.ApprovedQuantity = approvedQty;
                            if (approvedQty < requisitionLinesDTO.RequestedQuantity)
                            {
                                requisitionLinesDTO.Status = PurchaseOrderDTO.PurchaseOrderStatus.INPROGRESS;
                            }
                            else if (approvedQty == requisitionLinesDTO.RequestedQuantity)
                            {
                                requisitionLinesDTO.Status = "Closed";
                            }
                            foreach (RequisitionLinesDTO reqLinesDTO in requisitionDTO.RequisitionLinesListDTO)
                            {
                                if (reqLinesDTO.ApprovedQuantity < reqLinesDTO.RequestedQuantity)
                                {
                                    isClosed = false;
                                }
                            }
                        }
                        if (isClosed)
                        {
                            requisitionDTO.Status = "Closed";
                        }
                        else
                        {
                            requisitionDTO.Status = "InProgress";
                        }
                        requisitionBL = new RequisitionBL(executionContext, requisitionDTO);
                        requisitionBL.Save(sqlTransaction);
                    }
                }
            }
            catch (Exception ex)
            {
                log.Error(ex);
                throw ex;
            }
            log.LogMethodExit();
        }
        /// <summary>
        /// Validate errors
        /// </summary>
        /// <param name="sqlTransaction">sqlTransaction</param>
        /// <returns></returns>
        public void Validate(SqlTransaction sqlTransaction)
        {
            log.LogMethodEntry(sqlTransaction);
            if (string.IsNullOrWhiteSpace(inventoryReceiveLinesDTO.VendorBillNumber))
            {
                string errorMessage = MessageContainerList.GetMessage(executionContext, 851);
                throw new ValidationException(errorMessage);
            }
            PurchaseOrder purchaseOrder = new PurchaseOrder(inventoryReceiveLinesDTO.PurchaseOrderId, executionContext, sqlTransaction);
            if (purchaseOrder.getPurchaseOrderDTO.VendorId < 0)
            {
                string errorMessage = MessageContainerList.GetMessage(executionContext, 850);
                throw new ValidationException(errorMessage);
            }
            if (inventoryReceiveLinesDTO == null)
            {
                string errorMessage = MessageContainerList.GetMessage(executionContext, 852);
                throw new ValidationException(errorMessage);
            }
            LocationBL locationBL = new LocationBL(executionContext, inventoryReceiveLinesDTO.LocationId, sqlTransaction);
            if (locationBL.GetLocationDTO != null && locationBL.GetLocationDTO.IsActive == false)
            {
                string errorMessage = MessageContainerList.GetMessage(executionContext, 5069);
                throw new ValidationException(errorMessage);
            }
            ProductBL productBL = new ProductBL(executionContext, inventoryReceiveLinesDTO.ProductId);
            if (productBL.getProductDTO != null && productBL.getProductDTO.IsActive == false)
            {
                string errorMessage = MessageContainerList.GetMessage(executionContext, 858);
                throw new ValidationException(errorMessage);
            }
            UOM uOM = new UOM(executionContext, inventoryReceiveLinesDTO.UOMId);
            if (uOM.getUOMDTO != null && uOM.getUOMDTO.IsActive == false)
            {
                string errorMessage = MessageContainerList.GetMessage(executionContext, 5070);
                throw new ValidationException(errorMessage);
            }
            PurchaseOrder purchaseOrderBL = new PurchaseOrder(inventoryReceiveLinesDTO.PurchaseOrderId, executionContext, sqlTransaction, true, true);
            PurchaseOrderLineDTO purchaseOrderLineDTO = purchaseOrderBL.getPurchaseOrderDTO.PurchaseOrderLineListDTO.Where(x => x.PurchaseOrderLineId == inventoryReceiveLinesDTO.PurchaseOrderLineId).FirstOrDefault();
            if (purchaseOrderLineDTO != null)
            {
                decimal POlineQuantityAlreadyReceived = 0;
                foreach (InventoryReceiptDTO inventoryReceiptDTO in purchaseOrderBL.getPurchaseOrderDTO.InventoryReceiptListDTO)
                {
                    POlineQuantityAlreadyReceived += Convert.ToDecimal(inventoryReceiptDTO.InventoryReceiveLinesListDTO.Where(x => x.PurchaseOrderLineId == purchaseOrderLineDTO.PurchaseOrderLineId && x.PurchaseOrderId == purchaseOrderLineDTO.PurchaseOrderId && x.IsReceived == "Y").Sum(line => line.Quantity));
                    log.Debug("quantityAlreadyReceived : " + POlineQuantityAlreadyReceived);
                }
                if (Convert.ToDecimal(purchaseOrderLineDTO.Quantity) == POlineQuantityAlreadyReceived)
                {
                    log.Error("The purchase order line product &1 is already received ");
                    throw new ValidationException(MessageContainerList.GetMessage(executionContext, 3080, purchaseOrderLineDTO.ItemCode));
                }
                decimal balanceToReceive = Convert.ToDecimal(purchaseOrderLineDTO.Quantity) - Convert.ToDecimal(POlineQuantityAlreadyReceived);
                if (Convert.ToDecimal(inventoryReceiveLinesDTO.Quantity) > balanceToReceive)
                {
                    log.Error("Cannot receive!. The purchase order line balance quantity of &1 is &2" + purchaseOrderLineDTO.ItemCode + "," + balanceToReceive);
                    throw new ValidationException(MessageContainerList.GetMessage(executionContext, 3085, purchaseOrderLineDTO.ItemCode, balanceToReceive, inventoryReceiveLinesDTO.Quantity));
                }
            }
            log.LogMethodExit();
        }
        /// <summary>
        /// Creates and saves the Inventory transaction record 
        /// </summary>
        private void CreateInventoryTransactionDTO(InventoryReceiveLinesDTO inventoryReceiveLinesDTO, int lotId, string userId, int siteId, SqlTransaction sqlTransaction)
        {
            log.LogMethodEntry(inventoryReceiveLinesDTO, lotId, userId, siteId, sqlTransaction);
            LookupValuesList lookupValuesList = new LookupValuesList(executionContext);
            List<KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>> searchLVParameters;
            int inventoryTransactionTypeId = -1;
            searchLVParameters = new List<KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>>();
            searchLVParameters.Add(new KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>(LookupValuesDTO.SearchByLookupValuesParameters.LOOKUP_NAME, "INVENTORY_TRANSACTION_TYPE"));
            searchLVParameters.Add(new KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>(LookupValuesDTO.SearchByLookupValuesParameters.LOOKUP_VALUE, "Receipt"));
            List<LookupValuesDTO> lookupValuesListDTO = lookupValuesList.GetAllLookupValues(searchLVParameters);
            if (lookupValuesListDTO != null)
            {
                inventoryTransactionTypeId = lookupValuesListDTO[0].LookupValueId;
            }

            InventoryTransactionDTO inventoryTransactionDTO = new InventoryTransactionDTO();
            //inventoryTransactionDTO.ParafaitTransactionId = null;
            inventoryTransactionDTO.TransactionDate = lookupValuesList.GetServerDateTime();
            inventoryTransactionDTO.UserName = userId;
            inventoryTransactionDTO.POSMachine = executionContext.POSMachineName;
            inventoryTransactionDTO.POSMachineId = executionContext.MachineId;
            inventoryTransactionDTO.UOMId = inventoryReceiveLinesDTO.UOMId;
            inventoryTransactionDTO.ProductId = inventoryReceiveLinesDTO.ProductId;
            inventoryTransactionDTO.LocationId = inventoryReceiveLinesDTO.LocationId;
            inventoryTransactionDTO.Quantity = inventoryReceiveLinesDTO.Quantity;
            inventoryTransactionDTO.SalePrice = inventoryReceiveLinesDTO.Price;
            inventoryTransactionDTO.SiteId = siteId;
            inventoryTransactionDTO.TaxInclusivePrice = inventoryReceiveLinesDTO.TaxInclusive;
            inventoryTransactionDTO.TaxPercentage = inventoryReceiveLinesDTO.TaxPercentage;
            inventoryTransactionDTO.LineId = inventoryReceiveLinesDTO.PurchaseOrderReceiveLineId;
            inventoryTransactionDTO.LotId = lotId;
            inventoryTransactionDTO.InventoryTransactionTypeId = inventoryTransactionTypeId;
            InventoryTransactionBL inventoryTransactionBL = new InventoryTransactionBL(inventoryTransactionDTO, executionContext);
            inventoryTransactionBL.Save(sqlTransaction);
            log.LogMethodExit();
        }


        /// <summary>
        /// Gets the DTO
        /// </summary>
        public InventoryReceiveLinesDTO InventoryReceiveLinesDTO { get { return inventoryReceiveLinesDTO; } }

    }
    /// <summary>
    /// Manages the list of Inventory Receipt List
    /// </summary>
    public class InventoryReceiptLineList
    {
        private static readonly logging.Logger log = new logging.Logger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        private ExecutionContext executionContext;
        private List<InventoryReceiveLinesDTO> inventoryReceiveLinesDTOList = new List<InventoryReceiveLinesDTO>();

        /// <summary>
        /// Default constructor with executionContext
        /// </summary>
        public InventoryReceiptLineList(ExecutionContext executionContext)
        {
            log.LogMethodEntry();
            this.executionContext = executionContext;
            log.LogMethodExit();
        }

        /// <summary>
        /// Gets the InventoryReceiveLinesDTO by passing inventoryReceiveLineId
        /// Returns the Inventory Receive Lines
        /// </summary>
        public InventoryReceiveLinesDTO GetReceipt(int inventoryReceiveLineId, SqlTransaction sqlTransaction = null)
        {
            log.LogMethodEntry(inventoryReceiveLineId, sqlTransaction);
            InventoryReceiveLinesDataHandler inventoryReceiveLinesDataHandler = new InventoryReceiveLinesDataHandler(sqlTransaction);
            InventoryReceiveLinesDTO inventoryReceiveLinesDTO = inventoryReceiveLinesDataHandler.GetInventoryReceiveLines(inventoryReceiveLineId);
            log.LogMethodExit(inventoryReceiveLinesDTO);
            return inventoryReceiveLinesDTO;
        }
        /// <summary>
        /// Returns the Inventory Receive Lines list
        /// </summary>
        public List<InventoryReceiveLinesDTO> GetAllInventoryReceiveLines(List<KeyValuePair<InventoryReceiveLinesDTO.SearchByInventoryReceiveLinesParameters, string>> searchParameters, SqlTransaction sqlTransaction = null)
        {
            log.LogMethodEntry(searchParameters, sqlTransaction);
            InventoryReceiveLinesDataHandler inventoryReceiveLinesDataHandler = new InventoryReceiveLinesDataHandler(sqlTransaction);
            List<InventoryReceiveLinesDTO> inventoryReceiveLinesDTOList = inventoryReceiveLinesDataHandler.GetInventoryReceiveLinesList(searchParameters);
            log.LogMethodExit(inventoryReceiveLinesDTOList);
            return inventoryReceiveLinesDTOList;
        }

        /// <summary>
        /// Returns the Inventory Receive Lines list along with Child
        /// </summary>
        public List<InventoryReceiveLinesDTO> GetAllInventoryReceiveLine(List<KeyValuePair<InventoryReceiveLinesDTO.SearchByInventoryReceiveLinesParameters, string>> searchParameters,
                                 int currentPage = 0, int pageSize = 0, bool loadChildRecords = false, bool activeChildRecords = false, SqlTransaction sqlTransaction = null) //added
        {
            log.LogMethodEntry(searchParameters, sqlTransaction);
            InventoryReceiveLinesDataHandler inventoryReceiveLinesDataHandler = new InventoryReceiveLinesDataHandler(sqlTransaction);
            List<InventoryReceiveLinesDTO> inventoryReceiveLinesDTOList = inventoryReceiveLinesDataHandler.GetInventoryReceiveLinesListDTO(searchParameters, currentPage, pageSize);
            if (inventoryReceiveLinesDTOList != null && inventoryReceiveLinesDTOList.Count > 0 && loadChildRecords)
                Build(inventoryReceiveLinesDTOList, activeChildRecords, sqlTransaction);
            log.LogMethodExit(inventoryReceiveLinesDTOList);
            return inventoryReceiveLinesDTOList;
        }

        private void Build(List<InventoryReceiveLinesDTO> inventoryReceiveLineDTOList, bool activeChildRecords, SqlTransaction sqlTransaction)
        {
            Dictionary<int, InventoryReceiveLinesDTO> inventoryReceiveLineDTODictionary = new Dictionary<int, InventoryReceiveLinesDTO>();
            List<int> inventoryReceiveLineIdList = new List<int>();
            for (int i = 0; i < inventoryReceiveLineDTOList.Count; i++)
            {
                if (inventoryReceiveLineDTODictionary.ContainsKey(inventoryReceiveLineDTOList[i].PurchaseOrderReceiveLineId))
                {
                    continue;
                }
                inventoryReceiveLineDTODictionary.Add(inventoryReceiveLineDTOList[i].PurchaseOrderReceiveLineId, inventoryReceiveLineDTOList[i]);
                inventoryReceiveLineIdList.Add(inventoryReceiveLineDTOList[i].PurchaseOrderReceiveLineId);
            }
            PurchaseOrderReceiveTaxLineListBL purchaseOrderReceiveTaxLineListBL = new PurchaseOrderReceiveTaxLineListBL(executionContext);
            List<PurchaseOrderReceiveTaxLineDTO> purchaseOrderReceiveTaxLineDTOList = purchaseOrderReceiveTaxLineListBL.GetAllPurchaseOrderReceiveTaxLineDTOList(inventoryReceiveLineIdList, activeChildRecords, sqlTransaction);
            if (purchaseOrderReceiveTaxLineDTOList != null && purchaseOrderReceiveTaxLineDTOList.Any())
            {
                for (int i = 0; i < purchaseOrderReceiveTaxLineDTOList.Count; i++)
                {
                    if (inventoryReceiveLineDTODictionary.ContainsKey(purchaseOrderReceiveTaxLineDTOList[i].PurchaseOrderReceiveLineId) == false)
                    {
                        continue;
                    }
                    InventoryReceiveLinesDTO inventoryReceiveLineDTO = inventoryReceiveLineDTODictionary[purchaseOrderReceiveTaxLineDTOList[i].PurchaseOrderReceiveLineId];
                    if (inventoryReceiveLineDTO.PurchaseOrderReceiveTaxLineListDTO == null)
                    {
                        inventoryReceiveLineDTO.PurchaseOrderReceiveTaxLineListDTO = new List<PurchaseOrderReceiveTaxLineDTO>();
                    }
                    inventoryReceiveLineDTO.PurchaseOrderReceiveTaxLineListDTO.Add(purchaseOrderReceiveTaxLineDTOList[i]);
                }
            }
            InventoryLotList inventoryLotList = new InventoryLotList(executionContext);
            List<InventoryLotDTO> inventoryLotDTOList = inventoryLotList.GetAllInventoryLotDTOList(inventoryReceiveLineIdList, activeChildRecords, sqlTransaction);
            if (inventoryLotDTOList != null && inventoryLotDTOList.Any())
            {
                for (int i = 0; i < inventoryLotDTOList.Count; i++)
                {
                    if (inventoryReceiveLineDTODictionary.ContainsKey(inventoryLotDTOList[i].PurchaseOrderReceiveLineId) == false)
                    {
                        continue;
                    }
                    InventoryReceiveLinesDTO inventoryReceiveLineDTO = inventoryReceiveLineDTODictionary[inventoryLotDTOList[i].PurchaseOrderReceiveLineId];
                    if (inventoryReceiveLineDTO.InventoryLotListDTO == null)
                    {
                        inventoryReceiveLineDTO.InventoryLotListDTO = new List<InventoryLotDTO>();
                    }
                    inventoryReceiveLineDTO.InventoryLotListDTO.Add(inventoryLotDTOList[i]);
                }
            }
        }

        /// <summary>
        /// Returns the no of InventoryReceiveLines matching the search Parameters
        /// </summary>
        /// <param name="searchParameters"> search criteria</param>
        /// <param name="sqlTransaction">Optional sql transaction</param>
        /// <returns></returns>
        public int GetInventoryReceiveLinesCount(List<KeyValuePair<InventoryReceiveLinesDTO.SearchByInventoryReceiveLinesParameters, string>> searchParameters, SqlTransaction sqlTransaction = null)//added
        {
            log.LogMethodEntry(searchParameters, sqlTransaction);
            InventoryReceiveLinesDataHandler inventoryReceiveLinesDataHandler = new InventoryReceiveLinesDataHandler(sqlTransaction);
            int inventoryReceiveLinesCount = inventoryReceiveLinesDataHandler.GetInventoryReceiveLinesCount(searchParameters);
            log.LogMethodExit(inventoryReceiveLinesCount);
            return inventoryReceiveLinesCount;
        }

        /// <summary>
        /// Returns the Inventory Receive Lines list which are in non market list
        /// </summary>
        public List<InventoryReceiveLinesDTO> GetNonMarketInventoryReceiveLines(int receiptId, SqlTransaction sqlTransaction = null)
        {
            log.LogMethodEntry(receiptId, sqlTransaction);
            InventoryReceiveLinesDataHandler inventoryReceiveLinesDataHandler = new InventoryReceiveLinesDataHandler(sqlTransaction);
            List<InventoryReceiveLinesDTO> inventoryReceiveLinesDTOList = inventoryReceiveLinesDataHandler.GetNonMarketlistInventoryReceiveLines(receiptId);
            log.LogMethodExit(inventoryReceiveLinesDTOList);
            return inventoryReceiveLinesDTOList;
        }

        /// <summary>
        /// Gets the InventoryReceiveLinesDTO List for InventoryReceiptsIdList
        /// </summary>
        /// <param name="inventoryReceiptsIdList">integer list parameter</param>
        /// <param name="sqlTransaction">sqlTransaction</param>
        /// <returns>Returns List of InventoryReceiveLinesDTOList</returns>
        public List<InventoryReceiveLinesDTO> GetInventoryReceiveLinesDTOList(List<int> inventoryReceiptsIdList, bool loadChildRecords = false, bool activeChildRecords = false, SqlTransaction sqlTransaction = null)
        {
            log.LogMethodEntry(inventoryReceiptsIdList);
            InventoryReceiveLinesDataHandler inventoryReceiveLinesDataHandler = new InventoryReceiveLinesDataHandler(sqlTransaction);
            this.inventoryReceiveLinesDTOList = inventoryReceiveLinesDataHandler.GetInventoryReceiveLinesDTOList(inventoryReceiptsIdList, sqlTransaction);
            if (inventoryReceiveLinesDTOList != null && inventoryReceiveLinesDTOList.Count > 0 && loadChildRecords)
                Build(inventoryReceiveLinesDTOList, activeChildRecords, sqlTransaction);
            log.LogMethodExit(inventoryReceiveLinesDTOList);
            return inventoryReceiveLinesDTOList;
        }
    }
}
