/********************************************************************************************
*Project Name -                                                                           
*Description  -
*************
**Version Log
*************
*Version     Date                   Modified By         Remarks          
*********************************************************************************************
*2.60        13-04-2019            Girish               Modified
*2.60.2      06-Jun-2019           Akshay Gulaganji     Code merge from Development to WebManagementStudio

*2.70.2      16-07-2019            Deeksha              Modified save method
*2.70.2      25-Oct-2019           Jinto Thomas         The receipt generated by DPL date with current server date
*2.70.2      15-Nov-2019           Archana              Added GetNextPONumber() method
*2.70.2      18-Dec-2019           Jinto Thomas         Added parameter execution context for userrolrbl declaration with userid 
*2.100.0     13-Sep-2020           Deeksha              Modified to handle UOMID in the constructor
*2.110.0     28-Dec-2020           Mushahid Faizan      Web Inventory Changes with Rest API.
*2.110.0     20-Feb-2021           Dakshakh Raj         Modified to handle Get Sequence method changes
*2.130.0     04-Jun-2021           Girish Kundar        Modified - POS stock changes 
 **********************************************************************************************/

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Collections.Concurrent;
using Semnox.Parafait.Transaction;
using Semnox.Core.Utilities;
using Semnox.Parafait.Product;
using Semnox.Parafait.User;
using Semnox.Parafait.Vendor;
using Semnox.Parafait.Communication;
using Semnox.Parafait.Customer;
using Semnox.Parafait.Languages;
using Semnox.Core.GenericUtilities.Excel;

namespace Semnox.Parafait.Inventory
{
    /// <summary>
    /// Is used to retrive the purchase orders
    /// </summary>
    public class PurchaseOrderList
    {
        private readonly ExecutionContext executionUserContext;
        private static readonly Semnox.Parafait.logging.Logger log = new Semnox.Parafait.logging.Logger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        private List<PurchaseOrderDTO> purchaseOrderDTOList = new List<PurchaseOrderDTO>();
        private Dictionary<int, string> keyValuePairs = new Dictionary<int, string>(); // used for InventoryUI to display validation error in the excel

        /// <summary>
        /// Parameterized constructor
        /// </summary>
        public PurchaseOrderList(ExecutionContext executionUserContext)
        {
            log.LogMethodEntry(executionUserContext);
            this.executionUserContext = executionUserContext;
            log.LogMethodExit();
        }

        /// <summary>
        /// Parameterized constructor with List<PurchaseOrderDTO>
        /// </summary>
        public PurchaseOrderList(ExecutionContext executionUserContext, List<PurchaseOrderDTO> purchaseOrderDTOList) : this(executionUserContext)
        {
            log.LogMethodEntry(executionUserContext);
            this.purchaseOrderDTOList = purchaseOrderDTOList;
            log.LogMethodExit();
        }

        /// <summary>
        /// 
        /// Returns the purchase order
        /// </summary>
        /// 
        public PurchaseOrderDTO GetPurchaseOrder(int purchaseOrderId, ExecutionContext executionUserContext, SqlTransaction sqlTransaction = null)
        {
            log.LogMethodEntry(purchaseOrderId, executionUserContext, sqlTransaction);
            PurchaseOrderDataHandler purchaseOrderDataHandler = new PurchaseOrderDataHandler(sqlTransaction);
            PurchaseOrderDTO purchaseOrderDTO = purchaseOrderDataHandler.GetPurchaseOrder(purchaseOrderId, executionUserContext.GetUserId(), executionUserContext.GetSiteId());
            log.LogMethodExit(purchaseOrderDTO);
            return purchaseOrderDTO;
        }
        /// <summary>
        /// Returns the purchase order List
        /// </summary>
        public List<PurchaseOrderDTO> GetAllPurchaseOrder(List<KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>> searchParameters, string loginId, SqlTransaction sqlTransaction = null)
        {
            log.LogMethodEntry(searchParameters, loginId, sqlTransaction);
            PurchaseOrderDataHandler purchaseOrderDataHandler = new PurchaseOrderDataHandler(sqlTransaction);
            List<PurchaseOrderDTO> purchaseOrderDTOList = purchaseOrderDataHandler.GetPurchaseOrderList(searchParameters, loginId);
            log.LogMethodExit(purchaseOrderDTOList);
            return purchaseOrderDTOList;
        }
        /// <summary> 
        /// Returns the purchase order List
        /// </summary>
        public List<PurchaseOrderDTO> GetAllPurchaseOrder(List<KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>> searchParameters, Boolean fetchLinkedData,
                                                          SqlTransaction sqlTransaction = null, int currentPage = 0, int pageSize = 0, bool mostRepeated = false)
        {
            log.LogMethodEntry(searchParameters, fetchLinkedData);
            PurchaseOrderDataHandler purchaseOrderDataHandler = new PurchaseOrderDataHandler(sqlTransaction);
            if (mostRepeated)
            {
                purchaseOrderDTOList = purchaseOrderDataHandler.GetMostRepeatedPurchaseOrderList(searchParameters, executionUserContext.GetUserId(), currentPage, pageSize);
            }
            else
            {
                purchaseOrderDTOList = purchaseOrderDataHandler.GetPurchaseOrderList(searchParameters, executionUserContext.GetUserId(), currentPage, pageSize);
            }
            if (fetchLinkedData)
            {
                BuildLinkedPurchaseOrderDTO(purchaseOrderDTOList, sqlTransaction);
            }
            log.LogMethodExit(purchaseOrderDTOList);
            return purchaseOrderDTOList;
        }
        /// <summary>
        /// Returns the complex purchase order List
        /// </summary>
        internal void BuildLinkedPurchaseOrderDTO(List<PurchaseOrderDTO> purchaseOrderListDTOList, SqlTransaction sqlTransaction = null)
        {
            log.LogMethodEntry(purchaseOrderListDTOList);
            string purchaseOrderIds = string.Empty;
            Dictionary<int, PurchaseOrderDTO> mapPODTO = new Dictionary<int, PurchaseOrderDTO>();
            if (purchaseOrderListDTOList != null)
            {
                foreach (PurchaseOrderDTO purchaseOrderDTO in purchaseOrderListDTOList)
                {
                    if (string.IsNullOrEmpty(purchaseOrderIds))
                        purchaseOrderIds = purchaseOrderDTO.PurchaseOrderId.ToString();
                    else
                        purchaseOrderIds = purchaseOrderIds + " , " + purchaseOrderDTO.PurchaseOrderId.ToString();
                    if(mapPODTO.ContainsKey(purchaseOrderDTO.PurchaseOrderId) == false)
                    {
                        mapPODTO.Add(purchaseOrderDTO.PurchaseOrderId, purchaseOrderDTO);
                    }
                }
                if (!string.IsNullOrEmpty(purchaseOrderIds))
                {
                    PurchaseOrderLineList purchaseOrderLineListBL = new PurchaseOrderLineList();
                    List<KeyValuePair<PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters, string>> poLineSearchParams;
                    poLineSearchParams = new List<KeyValuePair<PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters, string>>();
                    poLineSearchParams.Add(new KeyValuePair<PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters, string>(PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters.PURCHASE_ORDER_IDS, purchaseOrderIds));
                    poLineSearchParams.Add(new KeyValuePair<PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters, string>(PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters.IS_ACTIVE, "Y"));
                    List<PurchaseOrderLineDTO> purchaseOrderLineListDTO = purchaseOrderLineListBL.GetAllPurchaseOrderLine(poLineSearchParams, sqlTransaction);
                    if (purchaseOrderLineListDTO != null)
                    {
                        foreach (PurchaseOrderLineDTO purchaseOrderLineDTO in purchaseOrderLineListDTO)
                        {
                            if (mapPODTO.ContainsKey(purchaseOrderLineDTO.PurchaseOrderId))
                            { mapPODTO[purchaseOrderLineDTO.PurchaseOrderId].PurchaseOrderLineListDTO.Add(purchaseOrderLineDTO); }
                        }

                    }

                    InventoryReceiptList inventoryReceiptListBL = new InventoryReceiptList(executionUserContext);
                    List<KeyValuePair<InventoryReceiptDTO.SearchByInventoryReceiptParameters, string>> invReceiptSearchParams;
                    invReceiptSearchParams = new List<KeyValuePair<InventoryReceiptDTO.SearchByInventoryReceiptParameters, string>>();
                    invReceiptSearchParams.Add(new KeyValuePair<InventoryReceiptDTO.SearchByInventoryReceiptParameters, string>(InventoryReceiptDTO.SearchByInventoryReceiptParameters.PURCHASE_ORDER_IDS, purchaseOrderIds));
                    List<InventoryReceiptDTO> inventoryReceiptListDTO = inventoryReceiptListBL.GetAllInventoryReceipts(invReceiptSearchParams, true, sqlTransaction);
                    if (inventoryReceiptListDTO != null)
                    {
                        foreach (InventoryReceiptDTO inventoryReceiptDTO in inventoryReceiptListDTO)
                        {
                            if (mapPODTO.ContainsKey(inventoryReceiptDTO.PurchaseOrderId))
                            { mapPODTO[inventoryReceiptDTO.PurchaseOrderId].InventoryReceiptListDTO.Add(inventoryReceiptDTO); }
                        }
                    }
                }
            }
            log.LogMethodExit();
        }
        /// <summary>
        /// This method is will return Sheet object for PurchaseOrderDTO.
        /// <returns></returns>
        public List<Sheet> BuildTemplate(bool loadPurchaseOrderLines = true, SqlTransaction sqlTransaction = null)
        {
            log.LogMethodEntry();
            List<Sheet> sheets = new List<Sheet>();
            Sheet purchaseOrderSheet = new Sheet();
            Sheet purchaseOrderLinesSheet = new Sheet();
            Row headerRow = new Row();
            Row headerRowLines = new Row();

            PurchaseOrderDataHandler purchaseOrderDataHandler = new PurchaseOrderDataHandler(sqlTransaction);
            PurchaseOrderList purchaseOrderList = new PurchaseOrderList(executionUserContext);
            List<KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>> searchParameters = new List<KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>>();
            searchParameters.Add(new KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>(PurchaseOrderDTO.SearchByPurchaseOrderParameters.SITE_ID, executionUserContext.GetSiteId().ToString()));
            purchaseOrderDTOList = purchaseOrderList.GetAllPurchaseOrder(searchParameters, true, sqlTransaction, 0, 0);

            Row defaultValueRow = new Row();
            defaultValueRow.AddCell(new Cell());
            defaultValueRow.AddCell(new Cell(""));
            defaultValueRow.AddCell(new Cell("Please Enter PurchaseOrderId < 0 to add new Records."));
            purchaseOrderSheet.AddRow(defaultValueRow);

            Row defaultEmptyValueRow = new Row();
            purchaseOrderSheet.AddRow(defaultEmptyValueRow);

            PurchaseOrderExcelDTODefinition purchaseOrderExcelDTODefinition = new PurchaseOrderExcelDTODefinition(executionUserContext, "");
            purchaseOrderExcelDTODefinition.BuildHeaderRow(headerRow);
            purchaseOrderSheet.AddRow(headerRow);

            if (purchaseOrderDTOList != null && purchaseOrderDTOList.Any())
            {
                foreach (PurchaseOrderDTO purchaseOrderDTO in purchaseOrderDTOList)
                {
                    purchaseOrderExcelDTODefinition.Configure(purchaseOrderDTO);
                    Row row = new Row();
                    purchaseOrderExcelDTODefinition.Serialize(row, purchaseOrderDTO);
                    purchaseOrderSheet.AddRow(row);
                }
                sheets.Add(purchaseOrderSheet);
            }
            if (loadPurchaseOrderLines)
            {
                Row defaultFileNameValueRow = new Row();
                defaultFileNameValueRow.AddCell(new Cell());
                defaultFileNameValueRow.AddCell(new Cell(""));
                defaultFileNameValueRow.AddCell(new Cell("Please Enter PurchaseOrderLineId < 0 to add new Records."));
                purchaseOrderLinesSheet.AddRow(defaultFileNameValueRow);

                Row defaultEmptyRow = new Row();
                purchaseOrderSheet.AddRow(defaultEmptyRow);

                PurchaseOrderLineExcelDTODefinition purchaseOrderLineExcelDTODefinition = new PurchaseOrderLineExcelDTODefinition(executionUserContext, "");
                purchaseOrderLineExcelDTODefinition.BuildHeaderRow(headerRowLines);
                purchaseOrderLinesSheet.AddRow(headerRowLines);

                if (purchaseOrderDTOList != null && purchaseOrderDTOList.Any())
                {
                    foreach (PurchaseOrderDTO purchaseOrderDTO in purchaseOrderDTOList)
                    {
                        if (purchaseOrderDTO.PurchaseOrderLineListDTO != null && purchaseOrderDTO.PurchaseOrderLineListDTO.Any())
                        {
                            foreach (PurchaseOrderLineDTO purchaseOrderLineDTO in purchaseOrderDTO.PurchaseOrderLineListDTO)
                            {
                                purchaseOrderLineExcelDTODefinition.Configure(purchaseOrderLineDTO);
                                Row rowForLines = new Row();
                                purchaseOrderLineExcelDTODefinition.Serialize(rowForLines, purchaseOrderLineDTO);
                                purchaseOrderLinesSheet.AddRow(rowForLines);
                            }
                        }
                    }
                    sheets.Add(purchaseOrderLinesSheet);

                }
            }

            log.LogMethodExit(sheets);
            return sheets;
        }



        public Dictionary<int, string> BulkUpload(List<Sheet> sheetList, SqlTransaction sqlTransaction = null)
        {
            log.LogMethodEntry(sheetList, sqlTransaction);

            Sheet purchaseOrdersheet = new Sheet();
            Sheet purhaseOrderLinesheet = new Sheet();
            purchaseOrdersheet = sheetList[0]; // Asssigning sheet[0] as PO sheet
            purhaseOrderLinesheet = sheetList[1];

            PurchaseOrderExcelDTODefinition purchaseOrderExcelDTODefinition = new PurchaseOrderExcelDTODefinition(executionUserContext, "");
            PurchaseOrderLineExcelDTODefinition purchaseOrderLineExcelDTODefinition = new PurchaseOrderLineExcelDTODefinition(executionUserContext, "");
            List<PurchaseOrderDTO> puchaseOrderDTOList = new List<PurchaseOrderDTO>();
            List<PurchaseOrderLineDTO> purchaseOrderLineDTOList = new List<PurchaseOrderLineDTO>();

            for (int i = 1; i < purchaseOrdersheet.Rows.Count; i++)
            {
                int index = 0;
                try
                {
                    PurchaseOrderDTO purchaseOrderDTO = (PurchaseOrderDTO)purchaseOrderExcelDTODefinition.Deserialize(purchaseOrdersheet[0], purchaseOrdersheet[i], ref index);
                    puchaseOrderDTOList.Add(purchaseOrderDTO);
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                for (int j = 1; j < purhaseOrderLinesheet.Rows.Count; j++)
                {

                    int indexj = 0;
                    try
                    {
                        PurchaseOrderLineDTO purchaseOrderLineDTO = (PurchaseOrderLineDTO)purchaseOrderLineExcelDTODefinition.Deserialize(purhaseOrderLinesheet[0], purhaseOrderLinesheet[j], ref indexj);
                        purchaseOrderLineDTOList.Add(purchaseOrderLineDTO);
                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }
                }

                foreach (PurchaseOrderDTO purchaseOrderDTO in puchaseOrderDTOList)
                {
                    purchaseOrderDTO.PurchaseOrderLineListDTO = purchaseOrderLineDTOList;
                }

                try
                {
                    if (puchaseOrderDTOList != null && puchaseOrderDTOList.Any())
                    {
                        PurchaseOrderList purchaseOrderList = new PurchaseOrderList(executionUserContext, puchaseOrderDTOList);
                        purchaseOrderList.Save(sqlTransaction);
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
            log.LogMethodExit(keyValuePairs);
            return keyValuePairs;
        }

        /// <summary>
        /// Returns the no of Purchase Order matching the search Parameters
        /// </summary>
        /// <param name="searchParameters"> search criteria</param>
        /// <param name="sqlTransaction">Optional sql transaction</param>
        /// <returns></returns>
        public int GetPurchaseOrderCount(List<KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>> searchParameters, SqlTransaction sqlTransaction = null)
        {
            log.LogMethodEntry(searchParameters, sqlTransaction);
            PurchaseOrderDataHandler purchaseOrderDataHandler = new PurchaseOrderDataHandler(sqlTransaction);
            int count = purchaseOrderDataHandler.GetPurchaseOrderCount(searchParameters, executionUserContext.GetUserId());
            log.LogMethodExit(count);
            return count;
        }



        /// <summary>
        /// Saves PurchaseOrderDTO
        /// </summary>
        public void Save(SqlTransaction sqlTransaction = null)
        {
            if (purchaseOrderDTOList == null || purchaseOrderDTOList.Any() == false)
            {
                log.LogMethodExit(null, "List is empty");
                return;
            }

            for (int i = 0; i < purchaseOrderDTOList.Count; i++)
            {
                var purchaseOrderDTO = purchaseOrderDTOList[i];
                if (purchaseOrderDTO.IsChanged == false)
                {
                    continue;
                }
                try
                {
                    PurchaseOrder purchaseOrder = new PurchaseOrder(executionUserContext, purchaseOrderDTO);
                    //List<ValidationError> validationErrors = purchaseOrder.Validate(sqlTransaction);
                    //if (validationErrors.Any())
                    //{
                    //    validationErrors.ToList().ForEach(c => c.RecordIndex = i + 1);
                    //    log.LogMethodExit(null, "Validation failed. " + Environment.NewLine + string.Join(Environment.NewLine, validationErrors.Select(x => x.Message)));
                    //    throw new ValidationException("Validation failed for purchaseOrder.", validationErrors, i);
                    //}
                    purchaseOrder.Save(sqlTransaction);
                }
                catch (SqlException sqlEx)
                {
                    log.Error(sqlEx);
                    log.LogMethodExit(null, "Throwing Validation Exception : " + sqlEx.Message);
                    if (sqlEx.Number == 547)
                    {
                        throw new ValidationException(MessageContainerList.GetMessage(executionUserContext, 1869));
                    }
                    else
                    {
                        throw;
                    }
                }
                catch (ValidationException valEx)
                {
                    log.Error(valEx);
                    log.LogMethodExit(null, "Throwing Validation Exception : " + valEx.Message);
                    throw;
                }
                catch (Exception ex)
                {
                    log.Error("Error occurred while saving purchaseOrderDTO.", ex);
                    log.LogVariableState("Record Index ", i);
                    log.LogVariableState("purchaseOrderDTO", purchaseOrderDTO);
                    throw;
                }
            }
            log.LogMethodExit();
        }


        ///// <summary>
        ///// 
        ///// Returns the open Qty for the Product
        ///// </summary>
        //public double GetOpenQty(PurchaseOrderDTO purchaseOrderDTO, int productId)
        //{
        //    log.Debug("Starts-GetOpenQty.");
        //    int purchaseOrderId = purchaseOrderDTO.PurchaseOrderId;
        //    double lineQty = 0;
        //    double receivedQty = 0;
        //    List<PurchaseOrderLineDTO> purchaseOrderLineList = new List<PurchaseOrderLineDTO>();
        //    List<InventoryReceiptDTO> inventoryReceiptList = new List<InventoryReceiptDTO>();
        //    List<InventoryReceiveLinesDTO> inventoryReceiveLineList = new List<InventoryReceiveLinesDTO>();
        //    if (purchaseOrderDTO.PurchaseOrderLineListDTO != null)
        //    {
        //        purchaseOrderLineList = purchaseOrderDTO.PurchaseOrderLineListDTO.Where(poLine => poLine.ProductId == productId).ToList();
        //        if (purchaseOrderLineList != null)
        //        {
        //            foreach (PurchaseOrderLineDTO purchaseOrderLine in purchaseOrderLineList)
        //            {
        //                lineQty = lineQty + purchaseOrderLine.Quantity;

        //                if (purchaseOrderDTO.InventoryReceiptListDTO != null)
        //                {
        //                    foreach (InventoryReceiptDTO inventoryReceiptDTO in purchaseOrderDTO.InventoryReceiptListDTO)
        //                    {
        //                        foreach (InventoryReceiveLinesDTO inventoryReceiveLinesDTO in inventoryReceiptDTO.InventoryReceiveLinesListDTO)
        //                        {
        //                            if (inventoryReceiveLinesDTO.ProductId == purchaseOrderLine.ProductId && (inventoryReceiveLinesDTO.PurchaseOrderLineId == purchaseOrderLine.PurchaseOrderLineId || inventoryReceiveLinesDTO.POLineIdTag == purchaseOrderLine.Guid))
        //                            {
        //                                receivedQty = receivedQty + inventoryReceiveLinesDTO.Quantity;
        //                            }
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //    }
        //    log.Debug("Ends-GetOpenQty.");
        //    return (lineQty - receivedQty);
        //}
        ///// <summary>
        ///// 
        ///// Checks whether receiveInventory data can be received against the order provided
        ///// </summary>
        //public void ValidateOrderProvided(int purchaseOrderID, List<DPLFileLinesDTO> receiveInventoryListDTO, List<PurchaseOrderDTO> purchaseOrderListDTO)
        //{

        //    if (purchaseOrderListDTO != null)
        //    {
        //       if (purchaseOrderListDTO.Count > 1)
        //        {
        //           throw new Exception("More than one record for Purchase Order Number " + purchaseOrderListDTO[0].OrderNumber + ", abort operation. ");
        //        }

        //        if (purchaseOrderListDTO[0].PurchaseOrderLineListDTO != null)
        //        {
        //            PurchaseOrderDTO purchaseOrderDTO = purchaseOrderListDTO[0];
        //            PurchaseOrderList purchaseOrderListBL = new PurchaseOrderList();
        //            foreach (DPLFileLinesDTO receiveInventoryDTO in receiveInventoryListDTO)
        //            {
        //                double productQtyInDPL = receiveInventoryListDTO.Where(receiveLines => receiveLines.ProductId == receiveInventoryDTO.ProductId).Sum(receiveLines => receiveLines.ProductQuantity);
        //                double openQty = purchaseOrderListBL.GetOpenQty(purchaseOrderDTO, receiveInventoryDTO.ProductId);
        //                if (productQtyInDPL > openQty)
        //                { throw new Exception("DPL file Product:"+ receiveInventoryDTO.ProductDescription+ " quantity "+ productQtyInDPL.ToString()+ " is more than the open quantity "+ openQty.ToString()+ " on Purchase Order " + purchaseOrderDTO.OrderNumber + ", abort operation."); }
        //            }
        //        }
        //        else
        //            throw new Exception("No Purchase Order line records for Purchase Order " + purchaseOrderID.ToString() + ", abort operation. ");
        //    }
        //    else
        //    {
        //        throw new Exception("No Open/Inprogress Order with Purchase Order Id " + purchaseOrderID.ToString() + ", abort operation. ");
        //    }
        //}


    }

    /// <summary>
    /// Bussiness logic for the PurchaseOrder
    /// </summary>
    public class PurchaseOrder
    {
        private PurchaseOrderDTO purchaseOrderDTO;
        private ExecutionContext executionContext;//= ExecutionContext.GetExecutionContext();
        private static readonly Semnox.Parafait.logging.Logger log = new Semnox.Parafait.logging.Logger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);



        //private PurchaseOrderDTO purchaseOrderDTO;
        private Product.ProductBL product;
        private List<PurchaseOrderLineDTO> purchaseOrderLineDTOList = new List<PurchaseOrderLineDTO>();
        private static readonly ConcurrentDictionary<int, UOMContainer> uomContainerDictionary = new ConcurrentDictionary<int, UOMContainer>();

        /// <summary>
        /// Default constructor of PurchaseOrder class
        /// </summary>
        public PurchaseOrder(ExecutionContext executionUserContext)
        {
            log.LogMethodEntry(executionUserContext);
            this.executionContext = executionUserContext;
            log.LogMethodExit();
        }

        /// <summary>
        /// Constructor with the DTO parameter
        /// </summary>
        /// <param name="purchaseOrderDTO">Parameter of the type PurchaseOrderDTO</param>
        /// <param name="executionUserContext">executionUserContext</param>
        public PurchaseOrder(PurchaseOrderDTO purchaseOrderDTO, ExecutionContext executionUserContext)
            : this(executionUserContext)
        {
            log.LogMethodEntry(purchaseOrderDTO, executionUserContext);
            this.purchaseOrderDTO = purchaseOrderDTO;
            log.LogMethodExit();
        }


        /// <summary>
        /// Constructor with the DTO parameter
        /// </summary>
        /// <param name="purchaseOrderDTO">Parameter of the type PurchaseOrderDTO</param>
        /// <param name="executionUserContext">executionUserContext</param>
        public PurchaseOrder(ExecutionContext executionUserContext, PurchaseOrderDTO purchaseOrderDTO)
            : this(executionUserContext)
        {
            log.LogMethodEntry(purchaseOrderDTO, executionUserContext);
            this.purchaseOrderDTO = purchaseOrderDTO;
            log.LogMethodExit();
        }

        /// <summary>
        /// Loads the purchaseOrder DTO of the passed purchaseOrderId
        /// </summary>
        /// <param name="purchaseOrderId">PurchaseOrder Id of the purchaseOrder</param>
        /// <param name="executionUserContext">ExecutionContext</param>
        /// <param name="sqlTransaction">SqlTransction object</param>
        public PurchaseOrder(int purchaseOrderId, ExecutionContext executionUserContext, SqlTransaction sqlTransaction = null,
                             bool loadChildRecords = false, bool activeChildRecords = false)
            : this(executionUserContext)
        {
            log.LogMethodEntry(purchaseOrderId, executionUserContext, sqlTransaction);
            PurchaseOrderDataHandler purchaseOrderDataHandler = new PurchaseOrderDataHandler(sqlTransaction);
            purchaseOrderDTO = purchaseOrderDataHandler.GetPurchaseOrder(purchaseOrderId, executionUserContext.GetUserId(), executionUserContext.GetSiteId());
            if (purchaseOrderDTO == null)
            {
                string message = MessageContainerList.GetMessage(executionUserContext, 2196, " Purchase Order ", purchaseOrderId);
                log.LogMethodExit(null, "Throwing Exception - " + message);
                throw new EntityNotFoundException(message);
            }
            if (loadChildRecords)
            {
                Build(activeChildRecords, sqlTransaction);
                PurchaseOrderList purchaseOrderList = new PurchaseOrderList(executionUserContext);
                purchaseOrderList.BuildLinkedPurchaseOrderDTO(new List<PurchaseOrderDTO> { purchaseOrderDTO }, sqlTransaction);
            }
            log.LogMethodExit(purchaseOrderDTO);
        }
        /// <summary>
        /// Contructor which gets the purchaseOrderDTO of passed guid
        /// </summary>
        /// <param name="guid"> guid of the purchaseOrder</param>
        /// <param name="executionUserContext"> ExecutionContext</param>
        /// <param name="sqltrxn"> sqlTransction object</param>
        public PurchaseOrder(string guid, ExecutionContext executionUserContext, SqlTransaction sqltrxn = null)
            : this(executionUserContext)
        {
            log.LogMethodEntry(guid, executionUserContext, sqltrxn);
            PurchaseOrderDataHandler purchaseOrderDataHandler = new PurchaseOrderDataHandler(sqltrxn);
            log.LogMethodExit();
            List<KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>> searchByPurchaseOrderParameters = new List<KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>>();
            searchByPurchaseOrderParameters.Add(new KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>(PurchaseOrderDTO.SearchByPurchaseOrderParameters.GUID, guid));
            List<PurchaseOrderDTO> PurchaseOrderDTOList = purchaseOrderDataHandler.GetPurchaseOrderList(searchByPurchaseOrderParameters, executionUserContext.GetUserId());
            if (PurchaseOrderDTOList == null || (PurchaseOrderDTOList != null && PurchaseOrderDTOList.Count == 0))
            {
                purchaseOrderDTO = new PurchaseOrderDTO();
            }
            else
            {
                purchaseOrderDTO = PurchaseOrderDTOList[0];
            }
        }

        /// <summary>
        /// Gets the ProductDisplayGroupFormat based on the DisplayGroup id.
        /// </summary>
        /// <param name="activeChildRecords">activeChildRecords</param>
        /// <param name="sqlTransaction">sqlTransaction</param>
        private void Build(bool activeChildRecords = true, SqlTransaction sqlTransaction = null)//added
        {
            log.LogMethodEntry(activeChildRecords, sqlTransaction);

            // load child records for - PurchaseOrderLineListDTO
            PurchaseOrderLineList purchaseOrderLineList = new PurchaseOrderLineList();
            List<KeyValuePair<PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters, string>> searchByPurchaseOrderLineParams = new List<KeyValuePair<PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters, string>>();
            searchByPurchaseOrderLineParams.Add(new KeyValuePair<PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters, string>(PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters.PURCHASE_ORDER_ID, purchaseOrderDTO.PurchaseOrderId.ToString()));
            if (activeChildRecords)
            {
                searchByPurchaseOrderLineParams.Add(new KeyValuePair<PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters, string>(PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters.IS_ACTIVE, "1"));
            }
            purchaseOrderDTO.PurchaseOrderLineListDTO = purchaseOrderLineList.GetAllPurchaseOrderLine(searchByPurchaseOrderLineParams, sqlTransaction);
            log.LogMethodExit();
        }
        /// <summary>
        /// 
        /// Insert/Updates PurchaseOrderDTO record passed -guru
        /// </summary>
        public void Save(SqlTransaction sqlTransaction = null)
        {
            log.LogMethodEntry(sqlTransaction);
            PurchaseOrderDataHandler purchaseOrderDataHandler = new PurchaseOrderDataHandler(sqlTransaction);

            if (purchaseOrderDTO == null || purchaseOrderDTO.IsChangedRecursive == false)
            {
                log.LogMethodExit(null, "Nothing to save.");
                return;
            }
            List<ValidationError> validationErrors = Validate(sqlTransaction);
            if (validationErrors.Any())
            {
                string message = MessageContainerList.GetMessage(executionContext, "Validation Error");
                log.LogMethodExit(null, "Throwing Exception - " + message + Environment.NewLine + string.Join(Environment.NewLine, validationErrors.Select(x => x.Message)));
                throw new ValidationException(message, validationErrors);
            }

            if (purchaseOrderDTO.PurchaseOrderId < 0)
            {
                if (string.IsNullOrEmpty(purchaseOrderDTO.OrderNumber))
                {
                    purchaseOrderDTO.OrderNumber = GetSequenceNumber(sqlTransaction, executionContext, "PurchaseOrder");
                }
                purchaseOrderDTO = purchaseOrderDataHandler.InsertPurchaseOrder(purchaseOrderDTO, executionContext.GetUserId(), executionContext.GetSiteId());
                purchaseOrderDTO.AcceptChanges();

                InventoryActivityLogDTO inventoryActivityLogDTO = new InventoryActivityLogDTO(ServerDateTime.Now, "Purchase Order Inserted",
                                                             purchaseOrderDTO.Guid, false, executionContext.GetSiteId(), "PurchaseOrder", -1,
                                                             purchaseOrderDTO.PurchaseOrderId + ":" + purchaseOrderDTO.OrderNumber.ToString(), -1, executionContext.GetUserId(),
                                                             ServerDateTime.Now, executionContext.GetUserId(), ServerDateTime.Now);
                InventoryActivityLogBL inventoryActivityLogBL = new InventoryActivityLogBL(executionContext, inventoryActivityLogDTO);
                inventoryActivityLogBL.Save(sqlTransaction);
            }
            else
            {
                if (purchaseOrderDTO.IsChanged)
                {
                    purchaseOrderDTO = purchaseOrderDataHandler.UpdatePurchaseOrder(purchaseOrderDTO, executionContext.GetUserId(), executionContext.GetSiteId());
                    purchaseOrderDTO.AcceptChanges();

                    InventoryActivityLogDTO inventoryActivityLogDTO = new InventoryActivityLogDTO(ServerDateTime.Now, "Purchase Order Updated",
                                                         purchaseOrderDTO.Guid, false, executionContext.GetSiteId(), "PurchaseOrder", -1,
                                                         purchaseOrderDTO.PurchaseOrderId + ":" + purchaseOrderDTO.OrderNumber.ToString(), -1, executionContext.GetUserId(),
                                                         ServerDateTime.Now, executionContext.GetUserId(), ServerDateTime.Now);
                    InventoryActivityLogBL inventoryActivityLogBL = new InventoryActivityLogBL(executionContext, inventoryActivityLogDTO);
                    inventoryActivityLogBL.Save(sqlTransaction);
                }

            }
            if (purchaseOrderDTO.PurchaseOrderLineListDTO != null && purchaseOrderDTO.PurchaseOrderLineListDTO.Count > 0)
            {
                Dictionary<string, PurchaseOrderLineDTO> mapPOLineDTO = new Dictionary<string, PurchaseOrderLineDTO>();
                PurchaseOrderLine purchaseOrderLineBL;
                foreach (PurchaseOrderLineDTO purchaseOrderLineDTO in purchaseOrderDTO.PurchaseOrderLineListDTO)
                {
                    if (purchaseOrderLineDTO.PurchaseOrderId == -1)
                    {
                        purchaseOrderLineDTO.PurchaseOrderId = purchaseOrderDTO.PurchaseOrderId;
                    }
                    string tagGuid = purchaseOrderLineDTO.Guid; //Used by DPL auto po creation scenario
                    if (purchaseOrderLineDTO.IsChanged == true)
                    {
                        purchaseOrderLineBL = new PurchaseOrderLine(purchaseOrderLineDTO, executionContext);
                        purchaseOrderLineBL.Save(sqlTransaction);
                    }
                    if (tagGuid != null)
                        mapPOLineDTO.Add(tagGuid, purchaseOrderLineDTO);
                }
                if (purchaseOrderDTO.InventoryReceiptListDTO != null && purchaseOrderDTO.InventoryReceiptListDTO.Count > 0)
                {
                    InventoryReceiptsBL inventoryReceiptsBL;
                    foreach (InventoryReceiptDTO inventoryReceiptDTO in purchaseOrderDTO.InventoryReceiptListDTO)
                    {
                        if (inventoryReceiptDTO.PurchaseOrderId == -1)
                            inventoryReceiptDTO.PurchaseOrderId = purchaseOrderDTO.PurchaseOrderId;
                        if (inventoryReceiptDTO.InventoryReceiveLinesListDTO != null && inventoryReceiptDTO.InventoryReceiveLinesListDTO.Count > 0)
                        {
                            foreach (InventoryReceiveLinesDTO inventoryReceiveLinesDTO in inventoryReceiptDTO.InventoryReceiveLinesListDTO)
                            {
                                if (inventoryReceiveLinesDTO.PurchaseOrderId == -1)
                                    inventoryReceiveLinesDTO.PurchaseOrderId = purchaseOrderDTO.PurchaseOrderId;
                                if (inventoryReceiveLinesDTO.PurchaseOrderLineId == -1)
                                {
                                    if (mapPOLineDTO.Count > 0)
                                        inventoryReceiveLinesDTO.PurchaseOrderLineId = mapPOLineDTO[inventoryReceiveLinesDTO.POLineIdTag].PurchaseOrderLineId;
                                }
                            }
                        }
                        inventoryReceiptsBL = new InventoryReceiptsBL(inventoryReceiptDTO, executionContext);
                        inventoryReceiptsBL.Save(sqlTransaction);
                    }
                }
            }

            log.LogMethodExit();
        }

        public PurchaseOrderDTO ReceiveLines(List<InventoryReceiptDTO> inventoryReceiptDTOList, SqlTransaction sqlTransaction)
        {
            //try
            //{
                log.LogMethodEntry(inventoryReceiptDTOList, sqlTransaction);
                ValidatePO(inventoryReceiptDTOList, sqlTransaction);
                foreach (InventoryReceiptDTO inventoryReceiptDTO in inventoryReceiptDTOList)
                {
                    InventoryReceiptsBL inventoryReceiptsBL = new InventoryReceiptsBL(inventoryReceiptDTO, executionContext);//note
                    inventoryReceiptsBL.Save(sqlTransaction);
                }
                List<KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>> searchParams = new List<KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>>
                                {
                                    new KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>(PurchaseOrderDTO.SearchByPurchaseOrderParameters.PURCHASEORDERID, purchaseOrderDTO.PurchaseOrderId.ToString()),
                                    new KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>(PurchaseOrderDTO.SearchByPurchaseOrderParameters.SITE_ID, executionContext.GetSiteId().ToString())
                                };
                PurchaseOrderList purchaseOrderList = new PurchaseOrderList(executionContext);
                List<PurchaseOrderDTO> purchaseOrderListDTO = purchaseOrderList.GetAllPurchaseOrder(searchParams, true, sqlTransaction);
                purchaseOrderDTO = purchaseOrderListDTO.FirstOrDefault();

                InventoryDocumentTypeList inventoryDocumentType = new InventoryDocumentTypeList(executionContext);
                InventoryDocumentTypeDTO inventoryDocumentTypeDTO = inventoryDocumentType.GetInventoryDocumentType(purchaseOrderDTO.DocumentTypeID, sqlTransaction);
                if (inventoryDocumentTypeDTO != null && inventoryDocumentTypeDTO.Description != "Contract Purchase Order")
                {
                    purchaseOrderDTO.LastModDttm = ServerDateTime.Now;
                    UpdatePOStatus(sqlTransaction);
                    if (purchaseOrderDTO.OrderStatus == PurchaseOrderDTO.PurchaseOrderStatus.RECEIVED)
                    {
                        purchaseOrderDTO.ReceivedDate = ServerDateTime.Now;
                    }
                }
                Save(sqlTransaction);
            //}
            //catch (ValidationException valEx)
            //{
            //    log.Error(valEx);
            //    throw ;
            //}
            //catch (Exception ex)
            //{
            //    log.Error(ex);
            //    log.LogMethodExit(null, "Throwing Exception : " + ex.Message);
            //    throw ;
            //}
            log.LogMethodExit(purchaseOrderDTO);
            return purchaseOrderDTO;
        }

        private void ValidatePO(List<InventoryReceiptDTO> inventoryReceiptDTOList, SqlTransaction sqlTransaction)
        {
            log.LogMethodEntry(inventoryReceiptDTOList, sqlTransaction);

            if (purchaseOrderDTO.OrderStatus == PurchaseOrderDTO.PurchaseOrderStatus.RECEIVED)
            {
                log.Error("The purchase order with id : " + purchaseOrderDTO.PurchaseOrderId + "already received");
                throw new Exception(MessageContainerList.GetMessage(executionContext, 3079, purchaseOrderDTO.OrderNumber));
            }
            if (inventoryReceiptDTOList.Exists(x => x.ReceiptId > -1))
            {
                throw new ValidationException("Invalid Input.Cannot update receipts");
            }
            log.LogMethodExit(purchaseOrderDTO);
        }


        private void UpdateUserMessages(SqlTransaction sqlTransaction)
        {
            log.LogMethodEntry(sqlTransaction);
            UserMessagesList userMessagesList = new UserMessagesList();
            List<UserMessagesDTO> userMessagesDTOList;
            List<KeyValuePair<UserMessagesDTO.SearchByUserMessagesParameters, string>> userMessagesSearchParams = new List<KeyValuePair<UserMessagesDTO.SearchByUserMessagesParameters, string>>();
            userMessagesSearchParams.Add(new KeyValuePair<UserMessagesDTO.SearchByUserMessagesParameters, string>(UserMessagesDTO.SearchByUserMessagesParameters.ACTIVE_FLAG, "1"));
            userMessagesSearchParams.Add(new KeyValuePair<UserMessagesDTO.SearchByUserMessagesParameters, string>(UserMessagesDTO.SearchByUserMessagesParameters.OBJECT_GUID, purchaseOrderDTO.Guid));
            userMessagesSearchParams.Add(new KeyValuePair<UserMessagesDTO.SearchByUserMessagesParameters, string>(UserMessagesDTO.SearchByUserMessagesParameters.OBJECT_TYPE, "RGPO"));
            userMessagesSearchParams.Add(new KeyValuePair<UserMessagesDTO.SearchByUserMessagesParameters, string>(UserMessagesDTO.SearchByUserMessagesParameters.MODULE_TYPE, "Inventory"));
            userMessagesDTOList = userMessagesList.GetAllUserMessages(userMessagesSearchParams);
            if (userMessagesDTOList != null && userMessagesDTOList.Count == 1 && userMessagesDTOList[0].ApprovalRuleID == -1)
            {
                userMessagesDTOList[0].ActedByUser = executionContext.GetUserPKId();
                userMessagesDTOList[0].Status = UserMessagesDTO.UserMessagesStatus.APPROVED.ToString();
                UserMessages userMessages = new UserMessages(userMessagesDTOList[0], executionContext);
                userMessages.Save(sqlTransaction);
            }
            log.LogMethodExit(purchaseOrderDTO);
        }

        public List<ValidationError> Validate(SqlTransaction sqlTransaction = null)
        {
            log.LogMethodEntry();
            List<ValidationError> validationErrorList = new List<ValidationError>();

            if (purchaseOrderDTO.VendorId == -1)
            {
                log.Debug("Please select a vendor before proceeding");
                validationErrorList.Add(new ValidationError("PO", "VendorId", MessageContainerList.GetMessage(executionContext, 850, MessageContainerList.GetMessage(executionContext, "VendorId"))));
            }
            //if (purchaseOrderDTO.DocumentTypeID == -1)
            //{
            //    log.Debug("Please select a document type before proceeding.");
            //    validationErrorList.Add(new ValidationError("PO", "DocumentTypeID", MessageContainerList.GetMessage(executionUserContext, 1542, MessageContainerList.GetMessage(executionUserContext, "DocumentTypeID"))));
            //}

            if (purchaseOrderDTO.Fromdate == DateTime.MinValue)
            {
                log.Debug("Select a value for From date");
                validationErrorList.Add(new ValidationError("PO", "Fromdate", MessageContainerList.GetMessage(executionContext, 1097, MessageContainerList.GetMessage(executionContext, "Fromdate"))));
            }
            if (purchaseOrderDTO.ToDate == DateTime.MinValue)
            {
                log.Debug("Select a value for To date");
                validationErrorList.Add(new ValidationError("PO", "ToDate", MessageContainerList.GetMessage(executionContext, 1098, MessageContainerList.GetMessage(executionContext, "ToDate"))));
            }
            log.LogMethodExit(validationErrorList);
            return validationErrorList;
        }


        public void SavePurchaseOrderForInbox(SqlTransaction sqlTransaction = null)
        {
            ApprovalRuleDTO approvalRuleDTO = new ApprovalRuleDTO();
            ApprovalRule approvalRule = new ApprovalRule(executionContext, approvalRuleDTO);
            List<UserMessagesDTO> userMessagesDTOList = new List<UserMessagesDTO>();
            UserMessages userMessages;
            UserMessagesList userMessagesList = new UserMessagesList(executionContext);
            PurchaseOrderLineList purchaseOrderLinesList = new PurchaseOrderLineList();
            List<InventoryDocumentTypeDTO> inventoryDocumentTypeListOnDisplay = new List<InventoryDocumentTypeDTO>();

            InventoryDocumentTypeList inventoryDocumentTypeList = new InventoryDocumentTypeList(executionContext);

            List<KeyValuePair<InventoryDocumentTypeDTO.SearchByInventoryDocumentTypeParameters, string>> inventoryDocumentTypeSearchParams = new List<KeyValuePair<InventoryDocumentTypeDTO.SearchByInventoryDocumentTypeParameters, string>>();
            inventoryDocumentTypeSearchParams = new List<KeyValuePair<InventoryDocumentTypeDTO.SearchByInventoryDocumentTypeParameters, string>>();
            inventoryDocumentTypeSearchParams.Add(new KeyValuePair<InventoryDocumentTypeDTO.SearchByInventoryDocumentTypeParameters, string>(InventoryDocumentTypeDTO.SearchByInventoryDocumentTypeParameters.ACTIVE_FLAG, "1"));
            inventoryDocumentTypeSearchParams.Add(new KeyValuePair<InventoryDocumentTypeDTO.SearchByInventoryDocumentTypeParameters, string>(InventoryDocumentTypeDTO.SearchByInventoryDocumentTypeParameters.SITE_ID, executionContext.GetSiteId().ToString()));
            inventoryDocumentTypeSearchParams.Add(new KeyValuePair<InventoryDocumentTypeDTO.SearchByInventoryDocumentTypeParameters, string>(InventoryDocumentTypeDTO.SearchByInventoryDocumentTypeParameters.APPLICABILITY, "PO"));
            inventoryDocumentTypeListOnDisplay = inventoryDocumentTypeList.GetAllInventoryDocumentTypes(inventoryDocumentTypeSearchParams, sqlTransaction);

            string code = inventoryDocumentTypeListOnDisplay.Where(x => (bool)(x.DocumentTypeId == ((purchaseOrderDTO.DocumentTypeID == -1) ? -1 : (int)purchaseOrderDTO.DocumentTypeID))).ToList<InventoryDocumentTypeDTO>()[0].Code;
            if (!string.IsNullOrWhiteSpace(code))
            {
                List<PurchaseOrderLineDTO> purchaseOrderLinesListOnDisplay = new List<PurchaseOrderLineDTO>();
                List<ValidationError> validationErrors = Validate(sqlTransaction);
                if (validationErrors.Any())
                {
                    string message = MessageContainerList.GetMessage(executionContext, "Validation Error");
                    log.LogMethodExit(null, "Throwing Exception - " + message + Environment.NewLine + string.Join(Environment.NewLine, validationErrors.Select(x => x.Message)));
                    throw new ValidationException(message, validationErrors);
                }
                if (purchaseOrderDTO.PurchaseOrderId > 0)
                {
                    purchaseOrderDTO.PurchaseOrderId = Convert.ToInt32(purchaseOrderDTO.PurchaseOrderId);
                }

                switch (code)
                {
                    case "RGPO":
                        break;
                    case "CPPO":
                        break;
                }
                try
                {
                    PurchaseOrder purchaseOrderBL = new PurchaseOrder(executionContext, purchaseOrderDTO);
                    purchaseOrderBL.Save(sqlTransaction);
                    purchaseOrderBL = new PurchaseOrder(purchaseOrderDTO.PurchaseOrderId, executionContext, sqlTransaction);

                    purchaseOrderLinesListOnDisplay = purchaseOrderDTO.PurchaseOrderLineListDTO;
                    purchaseOrderDTO = purchaseOrderBL.getPurchaseOrderDTO;

                    if (purchaseOrderDTO.PurchaseOrderId > -1)
                    {
                        PurchaseOrderLineDTO purchaseOrderLineDTO = new PurchaseOrderLineDTO();
                        for (int i = 0; i < purchaseOrderLinesListOnDisplay.Count; i++)
                        {
                            purchaseOrderLineDTO = purchaseOrderLinesListOnDisplay[i];
                            if (purchaseOrderLineDTO.Quantity == 0 && purchaseOrderLineDTO.PurchaseOrderLineId == -1)
                            {
                                continue;
                            }
                            purchaseOrderLineDTO.PurchaseOrderId = purchaseOrderDTO.PurchaseOrderId;
                            product = new Product.ProductBL(purchaseOrderLineDTO.ProductId);
                            purchaseOrderLineDTO.UnitPrice = product.GetProductPrice(purchaseOrderLineDTO.Quantity);
                            PurchaseOrderLine purchaseOrderLines = new PurchaseOrderLine(executionContext, purchaseOrderLineDTO);
                            purchaseOrderLines.Save(sqlTransaction);
                            if (purchaseOrderDTO.OrderStatus.ToUpper().Equals("OPEN"))
                            //if (purchaseOrderDTO.OrderStatus.ToUpper().Equals("SUBMITTED"))
                            {
                                purchaseOrderBL = new PurchaseOrder(purchaseOrderDTO.PurchaseOrderId, executionContext, sqlTransaction);

                                UserContainerDTO user = UserContainerList.GetUserContainerDTOOrDefault(executionContext.GetUserId(), "", executionContext.GetSiteId());
                                int roleId = user.RoleId;
                                approvalRuleDTO = approvalRule.GetApprovalRule(roleId, purchaseOrderBL.getPurchaseOrderDTO.DocumentTypeID, executionContext.GetSiteId(), sqlTransaction);
                                if (approvalRuleDTO != null)
                                {
                                    if (approvalRuleDTO.NumberOfApprovalLevels > 0)
                                    {
                                        List<KeyValuePair<UserMessagesDTO.SearchByUserMessagesParameters, string>> userMessagesSearchParams = new List<KeyValuePair<UserMessagesDTO.SearchByUserMessagesParameters, string>>();
                                        userMessagesSearchParams.Add(new KeyValuePair<UserMessagesDTO.SearchByUserMessagesParameters, string>(UserMessagesDTO.SearchByUserMessagesParameters.ACTIVE_FLAG, "1"));
                                        userMessagesSearchParams.Add(new KeyValuePair<UserMessagesDTO.SearchByUserMessagesParameters, string>(UserMessagesDTO.SearchByUserMessagesParameters.OBJECT_GUID, purchaseOrderBL.getPurchaseOrderDTO.Guid));
                                        userMessagesSearchParams.Add(new KeyValuePair<UserMessagesDTO.SearchByUserMessagesParameters, string>(UserMessagesDTO.SearchByUserMessagesParameters.OBJECT_TYPE, code));
                                        userMessagesSearchParams.Add(new KeyValuePair<UserMessagesDTO.SearchByUserMessagesParameters, string>(UserMessagesDTO.SearchByUserMessagesParameters.MODULE_TYPE, "Inventory"));
                                        userMessagesDTOList = userMessagesList.GetAllUserMessages(userMessagesSearchParams, sqlTransaction);
                                        if (userMessagesDTOList == null)
                                        {
                                            userMessages = new UserMessages(executionContext);
                                            userMessages.CreateUserMessages(approvalRuleDTO, "Inventory", code, purchaseOrderBL.getPurchaseOrderDTO.Guid, user.UserId, "Approval", "Pending for approval", sqlTransaction);
                                        }
                                    }
                                }
                                userMessagesDTOList = userMessagesList.GetPendingApprovalUserMessage("Inventory", code, purchaseOrderBL.getPurchaseOrderDTO.Guid, -1, -1, executionContext.GetSiteId(), sqlTransaction);
                                if (purchaseOrderDTO.ToSiteId == executionContext.GetSiteId() && (userMessagesDTOList != null && userMessagesDTOList.Count == 1 && userMessagesDTOList[0].ApprovalRuleID == -1))
                                {
                                    userMessagesDTOList[0].Status = UserMessagesDTO.UserMessagesStatus.APPROVED.ToString();
                                    userMessagesDTOList[0].ActedByUser = Convert.ToInt32(executionContext.GetUserId());
                                    userMessages = new UserMessages(userMessagesDTOList[0], executionContext);
                                    userMessages.Save(sqlTransaction);
                                    userMessagesDTOList = userMessagesList.GetPendingApprovalUserMessage("Inventory", code, purchaseOrderBL.getPurchaseOrderDTO.Guid, -1, -1, executionContext.GetSiteId(), sqlTransaction);
                                }
                            }
                        }
                        //if (purchaseOrderDTO != null && purchaseOrderDTO.OrderStatus.ToUpper().Equals("OPEN") && purchaseOrderLinesListOnDisplay.Count > 0)
                        //{
                        //    if (purchaseOrderBL.getPurchaseOrderDTO != null)
                        //    {
                        //        purchaseOrderBL.getPurchaseOrderDTO.OrderStatus = "Complete";
                        //        purchaseOrderBL.Save(sqlTransaction);
                        //    }
                        //}
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        /// <summary>
        /// This method processes the approval or reject requests
        /// </summary>
        /// <param name="userMessagesDTO">UserMessagesDTO object</param>
        /// <param name="userMessagesStatus">UserMessagesDTO.UserMessagesStatus type data</param>
        /// <param name="utilities">The utilities object</param>
        /// <param name="sqlTransaction">SqlTransaction object.</param>
        public void ProcessRequests(UserMessagesDTO userMessagesDTO, UserMessagesDTO.UserMessagesStatus userMessagesStatus, Utilities utilities, SqlTransaction sqlTransaction)
        {
            log.LogMethodEntry(userMessagesDTO, userMessagesStatus, sqlTransaction);
            bool isMasterSite = (utilities.ParafaitEnv.IsCorporate && utilities.ParafaitEnv.IsMasterSite);
            PurchaseOrderList purchaseOrderList = new PurchaseOrderList(executionContext);
            PurchaseOrderLineList purchaseOrderLinesList = new PurchaseOrderLineList();
            UserMessages userMessages = new UserMessages(executionContext);
            List<KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>> searchByPurchaseOrderParameters = new List<KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>>();
            List<KeyValuePair<PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters, string>> searchByPurchaseOrderLinesParameters = new List<KeyValuePair<PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters, string>>();
            UserMessagesList userMessagesList = new UserMessagesList();
            List<UserMessagesDTO> userMessagesDTOList = userMessagesList.GetPendingApprovalUserMessage(userMessagesDTO.ModuleType, userMessagesDTO.ObjectType, userMessagesDTO.ObjectGUID, -1, -1, executionContext.GetSiteId(), sqlTransaction);

            if (userMessagesDTOList != null && userMessagesDTOList.Count > 0)
            {
                UserMessagesDTO approvedUserMessagesDTO = userMessages.GetHighestApprovedUserMessage(userMessagesDTO.ApprovalRuleID, -1, -1, userMessagesDTO.ModuleType, userMessagesDTO.ObjectType, userMessagesDTO.ObjectGUID, executionContext.GetSiteId(), sqlTransaction);
                foreach (UserMessagesDTO higherUserMessagesDTO in userMessagesDTOList)
                {
                    if (approvedUserMessagesDTO != null)
                    {
                        if (approvedUserMessagesDTO.Level < higherUserMessagesDTO.Level)
                        {
                            log.LogMethodExit("Ends-ProcessRequests(userMessagesDTO,userMessagesStatus,siteId,isMasterSite,sqlTransaction) method.");
                            return;
                        }
                    }
                }
            }

            searchByPurchaseOrderParameters.Add(new KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>(PurchaseOrderDTO.SearchByPurchaseOrderParameters.ISACTIVE, "1"));
            searchByPurchaseOrderParameters.Add(new KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>(PurchaseOrderDTO.SearchByPurchaseOrderParameters.GUID, userMessagesDTO.ObjectGUID));

            List<PurchaseOrderDTO> purchaseOrderDTOList = purchaseOrderList.GetAllPurchaseOrder(searchByPurchaseOrderParameters, false);
            if (purchaseOrderDTOList == null || (purchaseOrderDTOList != null && purchaseOrderDTOList.Count == 0))
            {
                throw new Exception("There is no Purchase Order record found.");
            }

            searchByPurchaseOrderLinesParameters.Add(new KeyValuePair<PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters, string>(PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters.IS_ACTIVE, "1"));
            searchByPurchaseOrderLinesParameters.Add(new KeyValuePair<PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters, string>(PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters.PURCHASE_ORDER_ID, purchaseOrderDTOList[0].PurchaseOrderId.ToString()));

            List<PurchaseOrderLineDTO> purchaseOrderLinesDTOList = purchaseOrderLinesList.GetAllPurchaseOrderLine(searchByPurchaseOrderLinesParameters);
            if (purchaseOrderLinesDTOList == null || (purchaseOrderLinesDTOList != null && purchaseOrderLinesDTOList.Count == 0))
            {
                throw new Exception("There is no PurchaseOrder line records found.");
            }
            if (userMessagesStatus.Equals(UserMessagesDTO.UserMessagesStatus.APPROVED))
            {
                InventoryDocumentTypeList inventoryDocumentType = new InventoryDocumentTypeList(executionContext);
                InventoryDocumentTypeDTO inventoryDocumentTypeDTO = inventoryDocumentType.GetInventoryDocumentType(purchaseOrderDTOList[0].DocumentTypeID);
                executionContext.SetSiteId(purchaseOrderDTOList[0].site_id);
                purchaseOrderDTOList[0].IsChanged = true;
                purchaseOrderDTOList[0].OrderStatus = "Received";
                this.purchaseOrderDTO = purchaseOrderDTOList[0];
                Save(sqlTransaction);
            }
            else if (userMessagesStatus.Equals(UserMessagesDTO.UserMessagesStatus.REJECTED))
            {
                purchaseOrderDTOList[0].OrderStatus = "Cancelled";
                this.purchaseOrderDTO = purchaseOrderDTOList[0];
                Save(sqlTransaction);
            }
            else
            {
                throw new Exception("Invalid request to process.");
            }

            log.LogMethodExit();
        }

        /// <summary>
        /// Get Sequence Number
        /// </summary>
        /// <param name="sqlTransaction"></param>
        /// <param name="executionContext"></param>
        private string GetSequenceNumber(SqlTransaction sqlTransaction,
             ExecutionContext executionContext, string sequenceName)
        {
            log.LogMethodEntry(sqlTransaction, executionContext, sequenceName);
            string sequenceNumber = string.Empty;
            SequencesListBL sequencesListBL = new SequencesListBL(executionContext);
            SequencesDTO sequencesDTO = null;
            List<KeyValuePair<SequencesDTO.SearchByParameters, string>> searchBySeqParameters = new List<KeyValuePair<SequencesDTO.SearchByParameters, string>>();
            searchBySeqParameters.Add(new KeyValuePair<SequencesDTO.SearchByParameters, string>(SequencesDTO.SearchByParameters.SEQUENCE_NAME, "PurchaseOrder"));
            searchBySeqParameters.Add(new KeyValuePair<SequencesDTO.SearchByParameters, string>(SequencesDTO.SearchByParameters.SITE_ID, executionContext.GetSiteId().ToString()));
            List<SequencesDTO> sequencesDTOList = sequencesListBL.GetAllSequencesList(searchBySeqParameters);
            if (sequencesDTOList != null && sequencesDTOList.Any())
            {
                if (sequencesDTOList.Count == 1)
                {
                    sequencesDTO = sequencesDTOList[0];
                }
                else
                {
                    foreach (SequencesDTO sequenceDTO in sequencesDTOList)
                    {
                        if (sequenceDTO.POSMachineId == executionContext.GetMachineId())
                        {
                            sequencesDTO = sequenceDTO;
                            break;
                        }
                    }
                    if (sequencesDTO == null)
                    {
                        sequencesDTO = sequencesDTOList.FirstOrDefault(seq => seq.POSMachineId == -1);
                        if (sequencesDTO == null)
                        {
                            throw new ValidationException(MessageContainerList.GetMessage(executionContext, 2956, executionContext.GetMachineId()));
                        }
                    }
                }
                SequencesBL sequenceBL = new SequencesBL(executionContext, sequencesDTO);
                sequenceNumber = sequenceBL.GetNextSequenceNo(sqlTransaction);
            }
            log.LogMethodExit(sequenceNumber);
            return sequenceNumber;
        }

        public bool IsPurchaseOrderAlreadyTransfferedToSite(SqlTransaction sqlTrxn)
        {
            log.LogMethodEntry(sqlTrxn);
            bool status = false;
            PurchaseOrderDataHandler purchaseOrderDataHandler = new PurchaseOrderDataHandler(sqlTrxn);
            List<KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>> searchByPurchaseOrderParameters = new List<KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>>();
            PurchaseOrderLineDataHandler purchaseOrderLineDataHandler = new PurchaseOrderLineDataHandler(sqlTrxn);
            List<KeyValuePair<PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters, string>> searchByPurchaseOrderLineParameters = new List<KeyValuePair<PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters, string>>();
            searchByPurchaseOrderParameters.Add(new KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>(PurchaseOrderDTO.SearchByPurchaseOrderParameters.ORIGINAL_REFERENCE_GUID, purchaseOrderDTO.OriginalReferenceGUID));
            searchByPurchaseOrderParameters.Add(new KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>(PurchaseOrderDTO.SearchByPurchaseOrderParameters.SITE_ID, executionContext.GetSiteId().ToString()));
            List<PurchaseOrderDTO> purchaseOrderDTOList = purchaseOrderDataHandler.GetPurchaseOrderList(searchByPurchaseOrderParameters, executionContext.GetUserId());
            if (purchaseOrderDTOList != null && purchaseOrderDTOList.Count > 0)
            {
                purchaseOrderDTO.PurchaseOrderId = purchaseOrderDTOList[0].PurchaseOrderId;
                purchaseOrderDTO.Guid = purchaseOrderDTOList[0].Guid;
                if (purchaseOrderDTO.PurchaseOrderLineListDTO != null && purchaseOrderDTO.PurchaseOrderLineListDTO.Count > 0)
                {
                    searchByPurchaseOrderLineParameters.Add(new KeyValuePair<PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters, string>(PurchaseOrderLineDTO.SearchByPurchaseOrderLineParameters.PURCHASE_ORDER_ID, purchaseOrderDTOList[0].PurchaseOrderId.ToString()));
                    List<PurchaseOrderLineDTO> purchaseOrderLineDTOList = purchaseOrderLineDataHandler.GetPurchaseOrderLineList(searchByPurchaseOrderLineParameters);
                    if (purchaseOrderLineDTOList != null && purchaseOrderLineDTOList.Count > 0)
                    {
                        foreach (PurchaseOrderLineDTO purchaseOrderLineDTO in purchaseOrderDTO.PurchaseOrderLineListDTO)
                        {
                            if (purchaseOrderLineDTOList.Exists(x => (bool)x.OriginalReferenceGUID.ToUpper().Equals(purchaseOrderLineDTO.OriginalReferenceGUID.ToUpper())))
                            {
                                purchaseOrderLineDTO.PurchaseOrderId = purchaseOrderDTOList[0].PurchaseOrderId;
                                purchaseOrderLineDTO.Guid = purchaseOrderLineDTOList.Where(x => (bool)x.OriginalReferenceGUID.ToUpper().Equals(purchaseOrderLineDTO.OriginalReferenceGUID.ToUpper())).ToList<PurchaseOrderLineDTO>()[0].Guid;
                                purchaseOrderLineDTO.PurchaseOrderLineId = purchaseOrderLineDTOList.Where(x => (bool)x.OriginalReferenceGUID.ToUpper().Equals(purchaseOrderLineDTO.OriginalReferenceGUID.ToUpper())).ToList<PurchaseOrderLineDTO>()[0].PurchaseOrderLineId;
                            }
                            else
                            {
                                status = false;
                            }
                        }
                    }
                }
                log.LogMethodExit(status);
                status = true;
                return status;
            }
            log.LogMethodExit(status);
            return status;
        }
        /// <summary>
        /// Process the drop ship request
        /// </summary> 
        /// <param name="utilities">parafait utilities</param>
        /// <param name="sqlTrxn">SqlTransaction object</param>
        public void ProcessDropShipRequest(Utilities utilities, SqlTransaction sqlTrxn = null)
        {
            log.LogMethodEntry(utilities, sqlTrxn);
            ExecutionContext executionUserContext = ExecutionContext.GetExecutionContext();
            log.LogMethodEntry(utilities, sqlTrxn);
            int envContextSiteId = executionUserContext.GetSiteId();
            string loginId = executionUserContext.GetUserId();
            InventoryDocumentTypeList inventoryDocumentTypeList = new InventoryDocumentTypeList(executionUserContext);
            List<InventoryDocumentTypeDTO> inventoryDocumentTypeListOnDisplay = new List<InventoryDocumentTypeDTO>();
            List<KeyValuePair<InventoryDocumentTypeDTO.SearchByInventoryDocumentTypeParameters, string>> inventoryDocumentTypeSearchParams = new List<KeyValuePair<InventoryDocumentTypeDTO.SearchByInventoryDocumentTypeParameters, string>>();
            Publish.Publish publish = new Publish.Publish();
            Vendor.Vendor vendor;
            ProductList productList = new ProductList();
            List<ProductDTO> productDTOList = new List<ProductDTO>();
            ProductDTO productDTO;
            List<KeyValuePair<ProductDTO.SearchByProductParameters, string>> searchByProductParameters = new List<KeyValuePair<ProductDTO.SearchByProductParameters, string>>();
            List<KeyValuePair<VendorDTO.SearchByVendorParameters, string>> searchByVendorParameters = new List<KeyValuePair<VendorDTO.SearchByVendorParameters, string>>();
            VendorList vendorList = new VendorList(executionUserContext);
            List<VendorDTO> vendorDTOList = new List<VendorDTO>();
            InventoryDocumentTypeDTO siteRegularPODocumentTypeDTO = new InventoryDocumentTypeDTO();
            ParafaitDBTransaction parafaitDBTrx = null;
            UserRolesList userRolesList;
            UserRolesDTO userRolesDTO;
            if (sqlTrxn == null)
            {
                parafaitDBTrx = new ParafaitDBTransaction();
            }

            try
            {
                if (parafaitDBTrx != null)
                {
                    parafaitDBTrx.BeginTransaction();
                }
                siteRegularPODocumentTypeDTO = inventoryDocumentTypeList.GetInventoryDocumentType("RGPO", purchaseOrderDTO.ToSiteId, null);
                if (siteRegularPODocumentTypeDTO == null || (siteRegularPODocumentTypeDTO != null && siteRegularPODocumentTypeDTO.DocumentTypeId == -1))
                {
                    publish = new Publish.Publish("InventoryDocumentType", utilities);
                    publish.PublishEntity(purchaseOrderDTO.DocumentTypeID, executionUserContext.GetSiteId(), purchaseOrderDTO.ToSiteId);
                    siteRegularPODocumentTypeDTO = inventoryDocumentTypeList.GetInventoryDocumentType("RGPO", purchaseOrderDTO.ToSiteId, null);
                    if (siteRegularPODocumentTypeDTO == null || (siteRegularPODocumentTypeDTO != null && siteRegularPODocumentTypeDTO.DocumentTypeId == -1))
                    {
                        log.Fatal("ProcessDropShipRequest(sqlTrxn) The document type Regular Purchase Order not published to the destination site.");
                        throw new Exception("The document type Regular Purchase Order is not published to the destination site.");
                    }
                }
                log.LogMethodExit("ProcessDropShipRequest(sqlTrxn) The document type is loaded.");
                if (purchaseOrderDTO == null || (purchaseOrderDTO.PurchaseOrderLineListDTO != null && purchaseOrderDTO.PurchaseOrderLineListDTO.Count == 0))
                {
                    log.Fatal("ProcessDropShipRequest(sqlTrxn) Problem in fetching the PO lines.");
                    throw new Exception("Problem in fetching the PO lines.");
                }
                purchaseOrderDTO.OrderRemarks = "Drop ship from HQ.Dated:" + purchaseOrderDTO.OrderDate.ToString("yyyy-MMM-dd HH:mm:ss") + "." + " ref hQ PO Id:" + purchaseOrderDTO.PurchaseOrderId;
                purchaseOrderDTO.PurchaseOrderId = -1;
                purchaseOrderDTO.DocumentTypeID = siteRegularPODocumentTypeDTO.DocumentTypeId;
                purchaseOrderDTO.OrderStatus = "Open";
                purchaseOrderDTO.LastModDttm = ServerDateTime.Now;
                purchaseOrderDTO.CancelledDate = DateTime.MinValue;
                purchaseOrderDTO.AmendmentNumber = 0;

                purchaseOrderDTO.ReprintCount = 0;
                purchaseOrderDTO.OriginalReferenceGUID = purchaseOrderDTO.Guid;

                vendor = new Vendor.Vendor(executionUserContext, purchaseOrderDTO.VendorId);

                searchByVendorParameters.Add(new KeyValuePair<VendorDTO.SearchByVendorParameters, string>(VendorDTO.SearchByVendorParameters.SITEID, purchaseOrderDTO.ToSiteId.ToString()));
                log.LogMethodEntry("ProcessDropShipRequest(sqlTrxn) Product fetching to publish Corporate:" + utilities.ParafaitEnv.IsCorporate.ToString() + " IsmasterSite:" + utilities.ParafaitEnv.IsMasterSite.ToString() + " vendor SiteId:" + vendor.getVendorDTO.SiteId + " utilities.ParafaitEnv.SiteId:" + utilities.ParafaitEnv.SiteId + " VendorDTO.MasterEntityId:" + vendor.getVendorDTO.MasterEntityId);
                if (utilities.ParafaitEnv.IsCorporate && utilities.ParafaitEnv.IsMasterSite && vendor.getVendorDTO.SiteId == utilities.ParafaitEnv.SiteId)
                {
                    searchByVendorParameters.Add(new KeyValuePair<VendorDTO.SearchByVendorParameters, string>(VendorDTO.SearchByVendorParameters.MASTERENTITYID, vendor.getVendorDTO.VendorId.ToString()));
                }
                else
                {
                    searchByVendorParameters.Add(new KeyValuePair<VendorDTO.SearchByVendorParameters, string>(VendorDTO.SearchByVendorParameters.MASTERENTITYID, vendor.getVendorDTO.MasterEntityId.ToString()));
                }
                vendorDTOList = vendorList.GetAllVendors(searchByVendorParameters);

                if (vendorDTOList == null || (vendorDTOList != null && vendorDTOList.Count == 0))
                {
                    publish = new Publish.Publish("Vendor", utilities);
                    publish.PublishEntity(vendor.getVendorDTO.MasterEntityId, executionUserContext.GetSiteId(), purchaseOrderDTO.ToSiteId);
                    vendorDTOList = vendorList.GetAllVendors(searchByVendorParameters);

                    if (vendorDTOList == null || (vendorDTOList != null && vendorDTOList.Count == 0))
                    {
                        log.Fatal("ProcessDropShipRequest(sqlTrxn) The vendor " + vendor.getVendorDTO.Name + ":" + vendor.getVendorDTO.VendorId + " is not published to the destination site.");
                        throw new Exception("The vendor " + vendor.getVendorDTO.Name + ":" + vendor.getVendorDTO.VendorId + " is not published to the destination site.");
                    }
                }
                purchaseOrderDTO.VendorId = vendorDTOList[0].VendorId;

                for (int i = 0; i < purchaseOrderDTO.PurchaseOrderLineListDTO.Count; i++)
                {
                    purchaseOrderDTO.PurchaseOrderLineListDTO[i].PurchaseOrderId = -1;
                    purchaseOrderDTO.PurchaseOrderLineListDTO[i].PurchaseOrderLineId = -1;
                    purchaseOrderDTO.PurchaseOrderLineListDTO[i].OriginalReferenceGUID = purchaseOrderDTO.PurchaseOrderLineListDTO[i].Guid;
                    productList = new ProductList();
                    productDTO = productList.GetProduct(purchaseOrderDTO.PurchaseOrderLineListDTO[i].ProductId);
                    if (productDTO.MasterEntityId == -1)
                    {
                        log.Fatal("ProcessDropShipRequest(sqlTrxn) The product " + productDTO.ProductName + ":" + productDTO.ProductId + " is not published. Please map right product in HQ to this product.");
                        throw new Exception("The product " + productDTO.ProductName + ":" + productDTO.ProductId + " is not published. Please map right product in HQ to this product.");
                    }
                    searchByProductParameters = new List<KeyValuePair<ProductDTO.SearchByProductParameters, string>>();
                    searchByProductParameters.Add(new KeyValuePair<ProductDTO.SearchByProductParameters, string>(ProductDTO.SearchByProductParameters.IS_ACTIVE, "Y"));
                    searchByProductParameters.Add(new KeyValuePair<ProductDTO.SearchByProductParameters, string>(ProductDTO.SearchByProductParameters.SITE_ID, purchaseOrderDTO.ToSiteId.ToString()));
                    log.LogMethodEntry("ProcessDropShipRequest(sqlTrxn) Product fetching to publish Corporate:" + utilities.ParafaitEnv.IsCorporate.ToString() + " IsmasterSite:" + utilities.ParafaitEnv.IsMasterSite.ToString() + " product SiteId:" + productDTO.SiteId + " utilities.ParafaitEnv.SiteId:" + utilities.ParafaitEnv.SiteId + " productDTO.MasterEntityId:" + productDTO.MasterEntityId);
                    if (utilities.ParafaitEnv.IsCorporate && utilities.ParafaitEnv.IsMasterSite && productDTO.SiteId == utilities.ParafaitEnv.SiteId)
                    {
                        searchByProductParameters.Add(new KeyValuePair<ProductDTO.SearchByProductParameters, string>(ProductDTO.SearchByProductParameters.MASTER_ENTITY_ID, productDTO.ProductId.ToString()));
                    }
                    else
                    {
                        searchByProductParameters.Add(new KeyValuePair<ProductDTO.SearchByProductParameters, string>(ProductDTO.SearchByProductParameters.MASTER_ENTITY_ID, productDTO.MasterEntityId.ToString()));
                    }
                    productDTOList = productList.GetAllProducts(searchByProductParameters);

                    if (productDTOList == null || (productDTOList != null && productDTOList.Count == 0))
                    {
                        publish = new Publish.Publish("product", utilities);
                        publish.PublishEntity(productDTO.MasterEntityId, executionUserContext.GetSiteId(), purchaseOrderDTO.ToSiteId);
                        productDTOList = productList.GetAllProducts(searchByProductParameters);

                        if (productDTOList == null || (productDTOList != null && productDTOList.Count == 0))
                        {
                            log.Fatal("ProcessDropShipRequest(sqlTrxn) The product " + productDTO.ProductName + ":" + productDTO.ProductId + " is not published to the destination site.");
                            throw new Exception("The product " + productDTO.ProductName + ":" + productDTO.ProductId + " is not published to the destination site.");
                        }
                    }
                    purchaseOrderDTO.PurchaseOrderLineListDTO[i].ProductId = productDTOList[0].ProductId;
                }
                utilities.ParafaitEnv.SiteId = purchaseOrderDTO.ToSiteId;
                string roleGuid = utilities.getParafaitDefaults("APPROVER_ROLE_FOR_INTER_STORE_ADJUSTMENT_RECEIVE");
                log.LogVariableState("roleGuid", roleGuid);
                if (string.IsNullOrEmpty(roleGuid) || (!string.IsNullOrEmpty(roleGuid) && roleGuid.Equals("00000000-0000-0000-0000-000000000000")))
                {
                    Users users = new Users(executionUserContext, "External POS", purchaseOrderDTO.ToSiteId);
                    if (users.UserDTO == null || (users.UserDTO != null && users.UserDTO.UserId == -1))
                    {
                        log.Fatal("ProcessDropShipRequest(sqlTrxn) There is no External POS user in site:" + purchaseOrderDTO.ToSiteId);
                        throw new Exception("There is no External POS user in site:" + purchaseOrderDTO.ToSiteId);
                    }
                    else
                    {
                        UserRoles userRoles = new UserRoles(utilities.ExecutionContext, users.UserDTO.RoleId);
                        if (userRoles.getUserRolesDTO == null || (userRoles.getUserRolesDTO != null && userRoles.getUserRolesDTO.RoleId == -1))
                        {
                            log.Fatal("ProcessDropShipRequest(sqlTrxn) Please select the APPROVER_ROLE_FOR_INTER_STORE_ADJUSTMENT_RECEIVE configuration in site:" + purchaseOrderDTO.ToSiteId);
                            throw new Exception("Please select the APPROVER_ROLE_FOR_INTER_STORE_ADJUSTMENT_RECEIVE configuration in site:" + purchaseOrderDTO.ToSiteId);
                        }
                        else
                        {
                            roleGuid = userRoles.getUserRolesDTO.Guid;
                        }
                    }
                }

                userRolesList = new UserRolesList();
                userRolesDTO = userRolesList.GetUserRole(roleGuid);
                if (userRolesDTO == null || (userRolesDTO != null && userRolesDTO.RoleId == -1))
                {
                    log.Fatal("ProcessDropShipRequest(sqlTrxn) Please select the APPROVER_ROLE_FOR_INTER_STORE_ADJUSTMENT_RECEIVE configuration in site:" + purchaseOrderDTO.ToSiteId);
                    throw new Exception("Please select the APPROVER_ROLE_FOR_INTER_STORE_ADJUSTMENT_RECEIVE configuration in site:" + purchaseOrderDTO.ToSiteId);
                }
                UsersList usersList = new UsersList(executionUserContext);
                List<KeyValuePair<UsersDTO.SearchByUserParameters, string>> searchParameter = new List<KeyValuePair<UsersDTO.SearchByUserParameters, string>>();
                searchParameter.Add(new KeyValuePair<UsersDTO.SearchByUserParameters, string>(UsersDTO.SearchByUserParameters.ROLE_ID, userRolesDTO.RoleId.ToString()));
                searchParameter.Add(new KeyValuePair<UsersDTO.SearchByUserParameters, string>(UsersDTO.SearchByUserParameters.SITE_ID, purchaseOrderDTO.ToSiteId.ToString()));
                List<UsersDTO> userDTOList = usersList.GetAllUsers(searchParameter, false, true, (parafaitDBTrx != null) ? parafaitDBTrx.SQLTrx : sqlTrxn);
                if (userDTOList == null || (userDTOList != null && userDTOList.Count == 0))
                {
                    log.Fatal("ProcessDropShipRequest(sqlTrxn) For the role " + userRolesDTO.Role + " user does not exists in site:" + purchaseOrderDTO.ToSiteId + ". If the inter store transfer happens with this users are unable to see the records");
                    throw new Exception("The user role " + userRolesDTO.Role + " user does not exists in site:" + purchaseOrderDTO.ToSiteId + ". If the inter store transfer happens with this users are unable to see the records");
                }
                executionUserContext.SetUserId(userDTOList[0].LoginId);
                executionUserContext.SetSiteId(purchaseOrderDTO.ToSiteId);
                if (!IsPurchaseOrderAlreadyTransfferedToSite((parafaitDBTrx != null) ? parafaitDBTrx.SQLTrx : sqlTrxn))
                {
                    Save((parafaitDBTrx != null) ? parafaitDBTrx.SQLTrx : sqlTrxn);
                }
                else
                {
                    log.Fatal("ProcessDropShipRequest(sqlTrxn) Purchase order " + purchaseOrderDTO.OriginalReferenceGUID + " is already exists in " + purchaseOrderDTO.ToSiteId + " site.");
                }
                if (purchaseOrderDTO.PurchaseOrderId == -1)
                {
                    log.Fatal("ProcessDropShipRequest(sqlTrxn) Failed to create Purchase order in site:" + purchaseOrderDTO.ToSiteId);
                    throw new Exception("Failed to create Purchase order in site:" + purchaseOrderDTO.ToSiteId);
                }
                else
                {
                    log.LogMethodExit(purchaseOrderDTO.ToSiteId);
                }
                //The following commented code will send the inbox alert to the destination site.
                //utilities.ParafaitEnv.IsCorporate = true;


                //PurchaseOrderDataHandler purchaseOrderDataHandler = new PurchaseOrderDataHandler();
                // purchaseOrderDTO = purchaseOrderDataHandler.GetPurchaseOrder(purchaseOrderDTO.PurchaseOrderId, (parafaitDBTrx != null) ? parafaitDBTrx.SQLTrx : sqlTrxn);
                //UserMessagesList userMessagesList = new UserMessagesList();
                //List<KeyValuePair<UserMessagesDTO.SearchByUserMessagesParameters, string>> userMessagesSearchParams = new List<KeyValuePair<UserMessagesDTO.SearchByUserMessagesParameters, string>>();
                //userMessagesSearchParams.Add(new KeyValuePair<UserMessagesDTO.SearchByUserMessagesParameters, string>(UserMessagesDTO.SearchByUserMessagesParameters.ACTIVE_FLAG, "1"));
                //userMessagesSearchParams.Add(new KeyValuePair<UserMessagesDTO.SearchByUserMessagesParameters, string>(UserMessagesDTO.SearchByUserMessagesParameters.SITE_ID, purchaseOrderDTO.ToSiteId.ToString()));
                //userMessagesSearchParams.Add(new KeyValuePair<UserMessagesDTO.SearchByUserMessagesParameters, string>(UserMessagesDTO.SearchByUserMessagesParameters.OBJECT_GUID, purchaseOrderDTO.Guid));
                //userMessagesSearchParams.Add(new KeyValuePair<UserMessagesDTO.SearchByUserMessagesParameters, string>(UserMessagesDTO.SearchByUserMessagesParameters.OBJECT_TYPE, "RGPO"));
                //userMessagesSearchParams.Add(new KeyValuePair<UserMessagesDTO.SearchByUserMessagesParameters, string>(UserMessagesDTO.SearchByUserMessagesParameters.MODULE_TYPE, "Inventory"));
                //List<UserMessagesDTO> userMessagesDTOList = userMessagesList.GetAllUserMessages(userMessagesSearchParams, (parafaitDBTrx != null) ? parafaitDBTrx.SQLTrx : sqlTrxn);
                //if (userMessagesDTOList == null)
                //{
                //    UserMessagesDTO userMessagesDTO = new UserMessagesDTO();
                //    userMessagesDTO.Level = 0;
                //    userMessagesDTO.Message = "Please receive the inter store drop ship purchase order.";
                //    userMessagesDTO.MessageType = "Information";
                //    userMessagesDTO.ModuleType = "Inventory";
                //    userMessagesDTO.ObjectGUID = purchaseOrderDTO.Guid;
                //    userMessagesDTO.ObjectType = "RGPO";
                //    userMessagesDTO.RoleId = userRolesDTO.RoleId;
                //    userMessagesDTO.UserId = userDTOList[0].UserId;
                //    executionUserContext.SetSiteId(purchaseOrderDTO.ToSiteId);
                //    UserMessages userMessages = new UserMessages(userMessagesDTO);
                //    userMessages.Save((parafaitDBTrx != null) ? parafaitDBTrx.SQLTrx : sqlTrxn);
                //}
                log.LogMethodExit();
                if (parafaitDBTrx != null)
                {
                    parafaitDBTrx.EndTransaction();
                }
            }
            catch (Exception ex)
            {
                log.Fatal("Ends ProcessDropShipRequest(sqlTrxn) Exception:" + ex.ToString());
                if (parafaitDBTrx != null)
                {
                    parafaitDBTrx.RollBack();
                }
                throw ex;
            }
            finally
            {
                utilities.ParafaitEnv.SiteId = purchaseOrderDTO.FromSiteId;
                executionUserContext.SetSiteId(purchaseOrderDTO.FromSiteId);
                executionUserContext.SetUserId(loginId);
            }

            log.LogMethodExit();
        }


        /// <summary>
        /// Returns the record requied for the grid view
        /// </summary>
        /// <param name="requistionId">integer parameter</param>
        /// <param name="siteId">integer parameter</param>
        /// <param name="requisitionType">Requistion Type</param>
        /// <param name="sqlTrx">sql transaction</param>
        /// <returns>Data Table of the required fields</returns>
        public DataTable GetPORecord(int requistionId, int siteId, string requisitionType, SqlTransaction sqlTrx)
        {
            log.LogMethodEntry(requistionId, siteId, requisitionType, sqlTrx);
            PurchaseOrderDataHandler purchaseOrderDataHandler = new PurchaseOrderDataHandler(sqlTrx);
            DataTable dataTable = purchaseOrderDataHandler.GetPORecord(requistionId, siteId, requisitionType, sqlTrx);
            log.LogMethodExit(dataTable);
            return dataTable;
        }
        /// <summary>
        /// 
        /// Checks whether purchase order can be marked as received or not
        /// </summary>
        public void UpdatePurchaseOrderReceivedStatus()
        {
            log.LogMethodEntry();
            Boolean stillOpenPO = false;
            //PurchaseOrderLineList purchaseOrderLineListBL = new PurchaseOrderLineList();
            if (purchaseOrderDTO.OrderStatus != "Received")
            {
                stillOpenPO = false;
                foreach (PurchaseOrderLineDTO purchaseOrderLineDTO in purchaseOrderDTO.PurchaseOrderLineListDTO)
                {
                    if (GetPOLineOpenQty(purchaseOrderLineDTO) > 0)
                    {
                        stillOpenPO = true;
                        break;
                    }
                }
                if (!stillOpenPO)
                    purchaseOrderDTO.OrderStatus = "Received";
            }
            log.LogMethodExit();
        }
        /// <summary>
        /// 
        /// Checks whether purchase order can accept the product qty to fulfill open lines
        /// </summary>
        public Boolean CanAcceptProductQty(int productId, double productQtyReceived)
        {
            log.LogMethodEntry(productId, productQtyReceived);
            Boolean canAcceptQty = false;
            if (purchaseOrderDTO.PurchaseOrderLineListDTO != null)
            {
                double openQty = GetOpenQty(productId);
                if (!(productQtyReceived > openQty))
                    canAcceptQty = true;
            }
            log.LogMethodExit(canAcceptQty);
            return canAcceptQty;
        }

        /// <summary>
        /// 
        /// Returns open qty that can be accepted by the order for the product id passed 
        /// </summary>
        public double GetOpenQty(int productId)
        {
            log.LogMethodEntry(productId);
            double lineQty = 0;
            double receivedQty = 0;
            if (purchaseOrderDTO.PurchaseOrderLineListDTO != null)
            {
                foreach (PurchaseOrderLineDTO purchaseOrderLine in purchaseOrderDTO.PurchaseOrderLineListDTO.Where(poLine => poLine.ProductId == productId).ToList())
                {
                    lineQty = lineQty + purchaseOrderLine.Quantity;

                    if (purchaseOrderDTO.InventoryReceiptListDTO != null)
                    {
                        foreach (InventoryReceiptDTO inventoryReceiptDTO in purchaseOrderDTO.InventoryReceiptListDTO)
                        {
                            foreach (InventoryReceiveLinesDTO inventoryReceiveLinesDTO in inventoryReceiptDTO.InventoryReceiveLinesListDTO)
                            {
                                if (inventoryReceiveLinesDTO.ProductId == purchaseOrderLine.ProductId && (inventoryReceiveLinesDTO.PurchaseOrderLineId == purchaseOrderLine.PurchaseOrderLineId || inventoryReceiveLinesDTO.POLineIdTag == purchaseOrderLine.Guid))
                                {
                                    receivedQty = receivedQty + inventoryReceiveLinesDTO.Quantity;
                                }
                            }
                        }
                    }
                }

            }
            log.LogMethodExit(lineQty - receivedQty);
            return (lineQty - receivedQty);
        }
        /// <summary>
        /// 
        /// Create receipt against the PO for the product and product qty details provided 
        /// </summary>
        public void FulFillOrderWithProductQty(ProductDTO productDTO, double productQty, double productPrice, double taxPercentage, DateTime prodExpiryDate, double priceInTicket, DateTime receivedDate, string vendorInvoiceNumber, double receiveMarkupPercent, string receiveRemarks)
        {
            log.LogMethodEntry(productDTO, productQty, productPrice, taxPercentage, prodExpiryDate, priceInTicket, receivedDate, vendorInvoiceNumber, receiveMarkupPercent, receiveRemarks);
            ExecutionContext executionUserContext = ExecutionContext.GetExecutionContext();
            LookupValuesList lookupValuesList = new LookupValuesList(executionUserContext);
            if (purchaseOrderDTO != null)
            {
                int documentTypeId = -1;
                InventoryDocumentTypeDTO inventoryDocumentTypeDTO = new InventoryDocumentTypeDTO();
                InventoryDocumentTypeList inventoryDocumentTypeList = new InventoryDocumentTypeList(executionUserContext);
                inventoryDocumentTypeDTO = inventoryDocumentTypeList.GetInventoryDocumentType("Receipt from Vendor");
                if (inventoryDocumentTypeDTO != null)
                    documentTypeId = inventoryDocumentTypeDTO.DocumentTypeId;
                else
                    documentTypeId = -1;
                purchaseOrderDTO.OrderStatus = "InProgress";
                //purchaseOrderDTO.ReceivedDate = receivedDate;
                purchaseOrderDTO.ReceivedDate = lookupValuesList.GetServerDateTime();
                List<InventoryReceiptDTO> newInventoryReceiptListDTO = purchaseOrderDTO.InventoryReceiptListDTO.Where(invReceipt => invReceipt.ReceiptId == -1).ToList();
                InventoryReceiptDTO inventoryReceiptDTO;
                if (newInventoryReceiptListDTO != null && newInventoryReceiptListDTO.Count > 0)
                {
                    inventoryReceiptDTO = newInventoryReceiptListDTO[0];
                }
                else
                {
                    inventoryReceiptDTO = new InventoryReceiptDTO(-1, vendorInvoiceNumber, "", "", purchaseOrderDTO.PurchaseOrderId, receiveRemarks,
                                                                   purchaseOrderDTO.ReceivedDate, executionUserContext.GetUserId(), "", -1, documentTypeId, true, "", executionUserContext.GetSiteId(), false,
                                                                  -1, "", "", 0, System.DateTime.MinValue, receiveMarkupPercent, new List<InventoryReceiveLinesDTO>(), executionUserContext.GetUserId(), ServerDateTime.Now, executionUserContext.GetUserId(), ServerDateTime.Now);
                    purchaseOrderDTO.InventoryReceiptListDTO.Add(inventoryReceiptDTO);
                }

                double detailQuantity = productQty;
                List<PurchaseOrderLineDTO> purchaseOrderLineListDTO = new List<PurchaseOrderLineDTO>();
                if (purchaseOrderDTO.PurchaseOrderLineListDTO != null && purchaseOrderDTO.PurchaseOrderLineListDTO.Count > 0)
                {
                    purchaseOrderLineListDTO = purchaseOrderDTO.PurchaseOrderLineListDTO.Where(poLine => poLine.ProductId == productDTO.ProductId).ToList();
                }

                //PurchaseOrderLineList purchaseOrderLinesList = new PurchaseOrderLineList();
                double taxAmount = 0;
                double price;
                foreach (PurchaseOrderLineDTO purchaseOrderLineDTO in purchaseOrderLineListDTO)
                {
                    if (detailQuantity <= 0)
                        break;
                    else
                    {
                        double poLineOpenQuantity = GetPOLineOpenQty(purchaseOrderLineDTO);
                        double newReceiveLineQty = 0;
                        if (detailQuantity >= poLineOpenQuantity)
                        {
                            newReceiveLineQty = poLineOpenQuantity;
                            detailQuantity = detailQuantity - poLineOpenQuantity;
                        }
                        else
                        {
                            newReceiveLineQty = detailQuantity;
                            detailQuantity = 0;
                        }
                        price = productPrice;
                        //Purchase order price to override receiving price when fullfiling existing PO's.
                        if ((purchaseOrderLineDTO.UnitPrice + purchaseOrderLineDTO.TaxAmount) != price)
                            price = purchaseOrderLineDTO.UnitPrice + purchaseOrderLineDTO.TaxAmount;
                        if (productDTO.TaxInclusiveCost == "Y")
                        {
                            price = price / (1 + taxPercentage / 100);
                            taxAmount = price * taxPercentage / 100;
                        }
                        else
                        {
                            taxAmount = price * taxPercentage / 100;
                        }

                        InventoryReceiveLinesDTO inventoryReceiveLinesDTO = new InventoryReceiveLinesDTO(-1, purchaseOrderLineDTO.PurchaseOrderId,
                                                                                                         productDTO.ProductId, productDTO.Description, "",
                                                                                                         newReceiveLineQty, productDTO.DefaultLocationId, "Y", purchaseOrderLineDTO.PurchaseOrderLineId,
                                                                                                         price, taxPercentage, (price + taxAmount) * newReceiveLineQty, productDTO.TaxInclusiveCost,
                                                                                                          -1, vendorInvoiceNumber, ServerDateTime.Now, "", executionUserContext.GetUserId(),
                                                                                                        "", executionUserContext.GetSiteId(), false, -1, -1, -1, "", 0, 0, 0, 0, 0, executionUserContext.GetUserId(),
                                                                                                        ServerDateTime.Now, executionUserContext.GetUserId(), ServerDateTime.Now, new List<InventoryLotDTO>(),
                                                                                                        (priceInTicket > 0 ? priceInTicket : productDTO.PriceInTickets), productDTO.PurchaseTaxId,
                                                                                                        Convert.ToDecimal(taxAmount), purchaseOrderLineDTO.UOMId, true);

                        if (productDTO.LotControlled)
                        {
                            InventoryLotDTO inventoryLotRecDTO = new InventoryLotDTO(-1, "", newReceiveLineQty, newReceiveLineQty, price, -1,
                                                                                     (prodExpiryDate == DateTime.MinValue ? DateTime.MinValue : prodExpiryDate),
                                                                                     true, executionUserContext.GetSiteId(), "", false, -1, "", ServerDateTime.Now, "", DateTime.Now, "", purchaseOrderLineDTO.UOMId);

                            inventoryReceiveLinesDTO.InventoryLotListDTO.Add(inventoryLotRecDTO);
                        }
                        inventoryReceiptDTO.InventoryReceiveLinesListDTO.Add(inventoryReceiveLinesDTO);
                    }
                }
            }
            log.LogMethodExit();

        }

        private void UpdatePOStatus(SqlTransaction sqlTransaction)
        {
            try
            {
                log.LogMethodEntry(purchaseOrderDTO, sqlTransaction);
                double OrderQty = 0;
                double receivedQty = 0;

                if (purchaseOrderDTO.PurchaseOrderLineListDTO != null && purchaseOrderDTO.PurchaseOrderLineListDTO.Any())
                {
                    OrderQty = purchaseOrderDTO.PurchaseOrderLineListDTO.Where(pl => pl.CancelledDate == DateTime.MinValue).Sum(pl => pl.Quantity);
                }
                if (purchaseOrderDTO.InventoryReceiptListDTO != null && purchaseOrderDTO.InventoryReceiptListDTO.Any())
                {
                    receivedQty = purchaseOrderDTO.InventoryReceiptListDTO.FindAll(receipt => receipt.InventoryReceiveLinesListDTO != null && receipt.InventoryReceiveLinesListDTO.Any())
                                          .Sum(receiptQty => receiptQty.InventoryReceiveLinesListDTO.Sum(receiptLine => receiptLine.Quantity));
                }
                if (OrderQty != receivedQty)
                {
                    log.Debug("isPartiallyReceive = true");
                    purchaseOrderDTO.OrderStatus = PurchaseOrderDTO.PurchaseOrderStatus.INPROGRESS;
                }
                else
                {
                    log.Debug("isPartiallyReceive = false");
                    purchaseOrderDTO.OrderStatus = PurchaseOrderDTO.PurchaseOrderStatus.RECEIVED;

                }
                log.LogMethodExit(purchaseOrderDTO);
            }
            catch (Exception exp)
            {
                log.Error(exp);
                throw exp;
            }
        }
        /// <summary>
        /// Returns the POLine Open Qty
        /// </summary>
        public double GetPOLineOpenQty(PurchaseOrderLineDTO purchaseOrderLineDTO)
        {
            log.LogMethodEntry(purchaseOrderLineDTO);
            double lineQty = 0;
            double receivedQty = 0;
            lineQty = purchaseOrderLineDTO.Quantity;
            if (purchaseOrderDTO != null && purchaseOrderLineDTO != null)
            {
                if (purchaseOrderDTO.InventoryReceiptListDTO != null && purchaseOrderDTO.PurchaseOrderId == purchaseOrderLineDTO.PurchaseOrderId)
                {
                    foreach (InventoryReceiptDTO inventoryReceiptDTO in purchaseOrderDTO.InventoryReceiptListDTO)
                    {
                        if (inventoryReceiptDTO.InventoryReceiveLinesListDTO != null)
                        {
                            List<InventoryReceiveLinesDTO> inventoryReceiveLinesListDTO = new List<InventoryReceiveLinesDTO>();
                            inventoryReceiveLinesListDTO = inventoryReceiptDTO.InventoryReceiveLinesListDTO.Where(receiveLine => receiveLine.PurchaseOrderLineId == purchaseOrderLineDTO.PurchaseOrderLineId).ToList();
                            if (inventoryReceiveLinesListDTO != null)
                            {
                                foreach (InventoryReceiveLinesDTO receiveLine in inventoryReceiveLinesListDTO)
                                {
                                    receivedQty = receivedQty + receiveLine.Quantity;
                                }
                            }
                        }
                    }
                }
            }
            log.LogMethodExit(lineQty - receivedQty);
            return (lineQty - receivedQty);
        }

        //private double ReturnMinimumNo(double productQty, double poLineQty, int reqisitionLineQty)
        //{
        //    if (productQty > 0 && poLineQty > 0 && reqisitionLineQty > 0)
        //        return Math.Min(productQty, Math.Min(poLineQty, reqisitionLineQty));
        //    else if (poLineQty == 0 && reqisitionLineQty > 0)
        //        return Math.Min(productQty, reqisitionLineQty);
        //    else if (reqisitionLineQty == 0 && poLineQty > 0)
        //        return Math.Min(productQty, poLineQty);
        //    else
        //        return 0;
        //}

        /// <summary>
        /// Geting purchaseOrder DTO object
        /// </summary>
        public PurchaseOrderDTO getPurchaseOrderDTO { get { return purchaseOrderDTO; } }
        /// <summary>
        /// Returns next purchase order sequence number
        /// </summary>
        /// <param name="sequenceName"></param>
        /// <param name="sqlTransaction"></param>
        /// <returns></returns>
        public string GetNextPurchaseOrderSequenceNo(string sequenceName, SqlTransaction sqlTransaction = null)
        {
            log.LogMethodExit(sequenceName);
            PurchaseOrderDataHandler purchaseOrderDataHandler = new PurchaseOrderDataHandler(sqlTransaction);
            string nextSequenceNumber = GetSequenceNumber(sqlTransaction, executionContext, sequenceName);
            log.LogMethodExit(nextSequenceNumber);
            return nextSequenceNumber;
        }
    }
}

