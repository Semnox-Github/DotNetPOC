/***********************************************************************************************************
 * DPLFile.cs  Date                 Modified By             Remarks
 *2.60.0       12-Apr-2019          Girish Kundar           Modified : Replaced Purchase Tax 3 tier with tax 3 tier
 *2.60.0       11-Apr-2019          Archana                 Include/Exclude for redeemable products changes 
 *2.70.0       25-Oct-2019          Jinto Thomas            The receipt generated by DPL date with current server date
 *2.70.2.      15-Nov-2019          Archana                 Modified to add auto word for Auto PO numbers
 *2.90.0       20-May-2020          Deeksha                 Modified :Bulk product publish for inventory products & weighted average costing changes.
 *2.120.0      07-Jun-2021         Mushahid Faizan          Modified :Issue fixes for - Ticket 27689 - DPL is giving an 'Index out of range' error if UOM is not set
 *                                                          and Ticket 27492 - Empty DTO is not handled in the GetTaxId().
 *********************************************************************************************************/

using Semnox.Core.Utilities;
using Semnox.Parafait.Category;
using Semnox.Parafait.Inventory;
using Semnox.Parafait.Product;
using Semnox.Parafait.Site;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Semnox.Parafait.Inventory
{
    public class DPLFile
    {
        public enum DPLFileFormat { DPLFILERI };
        private const string AutoPOText = " Auto";
        internal struct DPLHeader
        {
            internal string formatCode;
            internal int poSiteCode;
            internal string vendorCode;
            internal string vendorInvoiceNumber;
            internal DateTime receivedDate;
            internal string poNumber;
            internal int poSiteId;
            internal int vendorId;
            internal int poId;
            internal string dplRemarks;
            internal bool hasError;
            internal string errorMessage;
            internal double dplMarkupPercent;
        };

        internal struct DPLLine
        {
            //internal string prodUPCCode;
            internal string prodDescription;
            internal double prodQuantity;
            internal double remainQuantity;
            internal string prodUOM;
            internal int prodPackSize;
            internal double prodPrice;
            internal double prodPriceInTicket;
            internal DateTime prodExpiryDate;
            internal int productId;
            internal string ProductCode;
            //internal int uomId;
            internal bool hasError;
            internal string errorMessage;
            internal string otherMessage;
            //internal int defaultLocationId;
            //internal int taxId;
            internal double taxPercentage;
            //internal string taxInclusive;
            //internal bool lotControlled;
            internal ProductDTO productDTO;
        }

        internal DPLHeader dplHeader;
        internal List<DPLLine> dplLineList;
        internal bool dpsFileStatus;
        internal Semnox.Parafait.logging.Logger log = new Semnox.Parafait.logging.Logger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        internal Utilities utilities; 
        internal List<PurchaseOrder> purchaseOrderListBL = new List<PurchaseOrder>();
        internal List<RequisitionBL> RequisitionListBL = new List<RequisitionBL>();
        internal List<DPLFileLinesDTO> dplFileLinesListDTO; 

        internal int defaultCatagoryId = -1;
        internal int defaultLocationId = -1;
        internal int defaultOutBoundLocationId = -1;
        internal int defaultTaxId = -1;
        internal string defaultTaxInclusiveCost = "Y";
        internal string defaultLotExpiryType = "E";
        internal string defaultLotIssuingApproach = "FEFO";
        internal bool defaultCostIncludesTax = true;
        internal string defaultDisplayGroupName = "Parafait Inventory Products";
        public DPLFile(Utilities utilities)
        {
            log.LogMethodEntry(utilities);
            this.utilities = utilities; 
            log.LogMethodExit();
        }

        internal virtual void LoadHeader(string[] headerRow)
        {
        }

        internal virtual void LoadLine(string[] lineRow)
        {
        }

        internal virtual void ValidateHeaderData()
        {
        }

        internal virtual DPLLine ValidateLineData(DPLLine lineObj)
        {
            return lineObj;
        }

        internal virtual void DoProcessDPLFile()
        {
        }
        internal bool IsValidDPL()
        {
            if (dplHeader.hasError)
                return false;
            if (dplLineList.Exists(dplLineRec => dplLineRec.hasError == true))
                return false;
            return true;
        }

        public void Process()
        {
            log.LogMethodEntry();
            if (IsValidDPL())
            {
                DoProcessDPLFile();
            }
            else
            {
                dpsFileStatus = false;
            }
            log.LogMethodExit();
        }

        public bool GetDPLFileStatus()
        {
            return dpsFileStatus;
        }


        internal int getDocumentType()
        {
            log.LogMethodEntry();
            int documentType = -1;
            InventoryDocumentTypeDTO inventoryDocumentTypeDTO = new InventoryDocumentTypeDTO();
            InventoryDocumentTypeList inventoryDocumentTypeList = new InventoryDocumentTypeList(utilities.ExecutionContext);
            if (utilities.ExecutionContext.IsCorporate)
            {
                List<InventoryDocumentTypeDTO> inventoryDocumentTypeDTOList = inventoryDocumentTypeList.GetInventoryDocumentType("Receipt from Vendor", utilities.ExecutionContext.SiteId);
                if (inventoryDocumentTypeDTOList != null && inventoryDocumentTypeDTOList.Any())
                {
                    inventoryDocumentTypeDTO = inventoryDocumentTypeDTOList[0];
                }
            }
            else
            {
                inventoryDocumentTypeDTO = inventoryDocumentTypeList.GetInventoryDocumentType("Receipt from Vendor");
            }            
            if (inventoryDocumentTypeDTO != null)
                documentType = inventoryDocumentTypeDTO.DocumentTypeId;
            else
                documentType = -1;

            log.LogMethodExit(documentType);
            return documentType;
        }

        internal int GetSiteID(int siteCode)
        {
            log.LogMethodEntry(siteCode);
            int siteID = -1;
            SiteList siteListBL = new SiteList(utilities.ExecutionContext);
            List<KeyValuePair<SiteDTO.SearchBySiteParameters, string>> searchParameters;
            searchParameters = new List<KeyValuePair<SiteDTO.SearchBySiteParameters, string>>();
            searchParameters.Add(new KeyValuePair<SiteDTO.SearchBySiteParameters, string>(SiteDTO.SearchBySiteParameters.SITE_CODE, siteCode.ToString()));
            List<SiteDTO> siteListDTO = siteListBL.GetAllSites(searchParameters);
            if (siteListDTO == null)
            {
                throw new Exception(utilities.MessageUtils.getMessage(1258, siteCode.ToString()));
            }
            else if (siteListDTO.Count > 1)
            {
                throw new Exception(utilities.MessageUtils.getMessage(1259, siteCode.ToString()));
            }
            else
            {
                siteID = Convert.ToInt32(siteListDTO[0].SiteId);
            }
            log.LogMethodExit(siteID);
            return siteID;
        }
         
        /// <summary>
        /// 
        /// Perform receiving process for receiveInventoryListDTO
        /// </summary>
        public void ReceiveDPL()
        {
            log.LogMethodEntry();
            // this.requisitionListDTO = new List<RequisitionDTO>();
            //PurchaseOrderList purchaseOrderListBL = new PurchaseOrderList();
            if (purchaseOrderListBL == null || purchaseOrderListBL.Count == 0)
            {
                PurchaseOrderList purchaseOrderList = new PurchaseOrderList(utilities.ExecutionContext);
                List<KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>> purchaseOrderDTOSearchParams;
                purchaseOrderDTOSearchParams = new List<KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>>();
                purchaseOrderDTOSearchParams.Add(new KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>(PurchaseOrderDTO.SearchByPurchaseOrderParameters.VENDORID, dplHeader.vendorId.ToString()));
                purchaseOrderDTOSearchParams.Add(new KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>(PurchaseOrderDTO.SearchByPurchaseOrderParameters.ORDERSTATUS, "Open,InProgress"));
                if (utilities.ExecutionContext.IsCorporate)
                {
                    purchaseOrderDTOSearchParams.Add(new KeyValuePair<PurchaseOrderDTO.SearchByPurchaseOrderParameters, string>(PurchaseOrderDTO.SearchByPurchaseOrderParameters.SITE_ID, utilities.ExecutionContext.SiteId.ToString()));
                }
                List<PurchaseOrderDTO> purchaseOrderListDTO = purchaseOrderList.GetAllPurchaseOrder(purchaseOrderDTOSearchParams, true);
                if (purchaseOrderListDTO != null && purchaseOrderListDTO.Count > 0)
                {
                    foreach (PurchaseOrderDTO purchaseOrderDTO in purchaseOrderListDTO)
                    {
                        Boolean canProcess = false;
                        foreach (PurchaseOrderLineDTO purchaseOrderLineDTO in purchaseOrderDTO.PurchaseOrderLineListDTO)
                        {
                            if (dplFileLinesListDTO.Exists(dplFileLineRec => dplFileLineRec.ProductId == purchaseOrderLineDTO.ProductId))
                            {
                                canProcess = true;
                                break;
                            }
                        }
                        if (canProcess)
                        {
                            PurchaseOrder purchaseOrderBL = new PurchaseOrder(purchaseOrderDTO, utilities.ExecutionContext);
                            this.purchaseOrderListBL.Add(purchaseOrderBL);
                        }
                    }
                }
            }

            if (this.purchaseOrderListBL != null && this.purchaseOrderListBL.Count > 0)
            {
                foreach (DPLFileLinesDTO dplFileLinesDTO in dplFileLinesListDTO)
                {
                    double remainQuantity = dplFileLinesDTO.ProductQuantity;
                    double openQuantity = 0;
                    foreach (PurchaseOrder purchaseOrderBLObj in purchaseOrderListBL)
                    {
                        if (remainQuantity <= 0)
                            break;
                        else
                        {
                            openQuantity = purchaseOrderBLObj.GetOpenQty(dplFileLinesDTO.ProductId);
                            if (openQuantity == 0)
                                continue;
                            if (openQuantity >= remainQuantity)
                            {
                                purchaseOrderBLObj.FulFillOrderWithProductQty(dplFileLinesDTO.ProductDTORec, remainQuantity, dplFileLinesDTO.ProdPrice, dplFileLinesDTO.TaxPercentage, dplFileLinesDTO.ProdExpiryDate, dplFileLinesDTO.ProdPriceInTicket, dplFileLinesDTO.ReceivedDate, dplFileLinesDTO.VendorInvoiceNumber, dplFileLinesDTO.DPLMarkupPercent, dplFileLinesDTO.Remarks);
                                remainQuantity = 0;
                            }
                            else
                            {
                                purchaseOrderBLObj.FulFillOrderWithProductQty(dplFileLinesDTO.ProductDTORec, openQuantity, dplFileLinesDTO.ProdPrice, dplFileLinesDTO.TaxPercentage, dplFileLinesDTO.ProdExpiryDate, dplFileLinesDTO.ProdPriceInTicket, dplFileLinesDTO.ReceivedDate, dplFileLinesDTO.VendorInvoiceNumber, dplFileLinesDTO.DPLMarkupPercent, dplFileLinesDTO.Remarks);
                                remainQuantity = remainQuantity - openQuantity;
                            }
                        }
                    }

                    dplFileLinesDTO.RemainQuantity = remainQuantity;
                }
            }
            if (dplFileLinesListDTO.Exists(receiveInv => receiveInv.RemainQuantity > 0))
            {
                CreateAutoPO();
            }
            UpdateRequisitionDetails(); 

            using (ParafaitDBTransaction parafaitDBTrx = new ParafaitDBTransaction())
            {
                try
                {
                    parafaitDBTrx.BeginTransaction();
                    if (this.purchaseOrderListBL != null && this.purchaseOrderListBL.Count > 0)
                    {
                        foreach (PurchaseOrder purchaseOrderBL in this.purchaseOrderListBL)
                        {
                            purchaseOrderBL.UpdatePurchaseOrderReceivedStatus();
                            purchaseOrderBL.Save(parafaitDBTrx.SQLTrx);
                        }
                    }
                    if (this.RequisitionListBL != null && this.RequisitionListBL.Count > 0)
                    {
                        foreach (RequisitionBL requisitionBL in this.RequisitionListBL)
                        {
                            requisitionBL.UpdateRequisitionToClosedStatus();
                            requisitionBL.Save(parafaitDBTrx.SQLTrx);
                        }
                    } 
                    parafaitDBTrx.EndTransaction();
                }
                catch (Exception ex)
                {
                    parafaitDBTrx.RollBack();
                    throw new Exception(ex.Message);
                }
            }
            log.LogMethodExit();
        } 
        /// <summary>
        /// 
        /// Create fresh PO and fulfill it with receiveInventoryListDTO data.
        /// </summary>
        private void CreateAutoPO()
        {
            log.LogMethodEntry();
            //ExecutionContext executionUserContext = ExecutionContext.GetExecutionContext();
            if (dplFileLinesListDTO != null)
            {
                //if (purchaseOrderListDTO == null)
                //    purchaseOrderListDTO = new List<PurchaseOrderDTO>();
                int documentTypeId = -1;
                InventoryDocumentTypeDTO inventoryDocumentTypeDTO = new InventoryDocumentTypeDTO();
                InventoryDocumentTypeList inventoryDocumentTypeList = new InventoryDocumentTypeList(utilities.ExecutionContext);
                if (utilities.ExecutionContext.IsCorporate)
                {
                    List<InventoryDocumentTypeDTO> inventoryDocumentTypeDTOList = inventoryDocumentTypeList.GetInventoryDocumentType("Receipt from Vendor", utilities.ExecutionContext.SiteId);
                    if (inventoryDocumentTypeDTOList != null && inventoryDocumentTypeDTOList.Any())
                    {
                        inventoryDocumentTypeDTO = inventoryDocumentTypeDTOList[0];
                    }
                }
                else
                {
                    inventoryDocumentTypeDTO = inventoryDocumentTypeList.GetInventoryDocumentType("Receipt from Vendor");
                }
                if (inventoryDocumentTypeDTO != null)
                    documentTypeId = inventoryDocumentTypeDTO.DocumentTypeId;
                else
                    documentTypeId = -1;
                PurchaseOrderDTO purchaseOrderDTO = new PurchaseOrderDTO(-1, "Received", "", dplFileLinesListDTO[0].ReceivedDate, dplFileLinesListDTO[0].VendorID,
                                                                          "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", System.DateTime.MinValue, 0, utilities.ExecutionContext.GetUserId(), ServerDateTime.Now,
                                                                          utilities.getServerTime(), dplFileLinesListDTO[0].Remarks,utilities.ExecutionContext.GetSiteId(), "", false, DateTime.MinValue, -1,
                                                                          "N", -1, utilities.getServerTime(), utilities.getServerTime().AddDays(1),
                                                                          "", string.Empty,0, 0, "F", -1, -1, "", new List<PurchaseOrderLineDTO>(), new List<InventoryReceiptDTO>(), utilities.ExecutionContext.GetUserId(), ServerDateTime.Now, true, false);

                InventoryReceiptDTO inventoryReceiptDTO = new InventoryReceiptDTO(-1, dplFileLinesListDTO[0].VendorInvoiceNumber, "", "", -1, dplFileLinesListDTO[0].Remarks,
                                                                                  utilities.getServerTime(), utilities.ExecutionContext.GetUserId(), "", -1, documentTypeId, true,
                                                                                  "", utilities.ExecutionContext.GetSiteId(), false, -1, "", "", 0, DateTime.MinValue, dplFileLinesListDTO[0].DPLMarkupPercent, new List<InventoryReceiveLinesDTO>(), utilities.ExecutionContext.GetUserId(), ServerDateTime.Now, utilities.ExecutionContext.GetUserId(), ServerDateTime.Now);

                List<DPLFileLinesDTO> pendingDPLFileLineList = dplFileLinesListDTO.Where(receiveLine => receiveLine.RemainQuantity > 0).ToList();
                double ordertotal = 0;
                double detailQuantity;
                double price;
                double taxAmount;
                //RequisitionLinesList requisitionLineBL = new RequisitionLinesList();
                if (pendingDPLFileLineList != null)
                {
                    foreach (DPLFileLinesDTO dplFileLinesDTO in pendingDPLFileLineList)
                    {
                        detailQuantity = dplFileLinesDTO.RemainQuantity;
                        price = dplFileLinesDTO.ProdPrice;
                        if (dplFileLinesDTO.ProductDTORec.TaxInclusiveCost == "Y")
                        {
                            price = price / (1 + dplFileLinesDTO.TaxPercentage / 100);
                            taxAmount = price * dplFileLinesDTO.TaxPercentage / 100;
                        }
                        else
                        {
                            taxAmount = price * dplFileLinesDTO.TaxPercentage / 100;
                        }
                        PurchaseOrderLineDTO purchaseOrderLineDTO = new PurchaseOrderLineDTO(-1, -1, dplFileLinesDTO.ProductCode, dplFileLinesDTO.ProductDescription,
                                                                                             dplFileLinesDTO.RemainQuantity, price, dplFileLinesDTO.RemainQuantity * (price + taxAmount),
                                                                                             ServerDateTime.Now, taxAmount, 0, DateTime.MinValue, utilities.ExecutionContext.GetSiteId(), dplFileLinesDTO.ProductId, Guid.NewGuid().ToString(),
                                                                                             false, "Y", DateTime.MinValue, -1, -1, -1, 0, (dplFileLinesDTO.ProdPriceInTicket > 0 ?
                                                                                             dplFileLinesDTO.ProdPriceInTicket : dplFileLinesDTO.ProductDTORec.PriceInTickets), "",string.Empty,
                                                                                             dplFileLinesDTO.ProductDTORec.PurchaseTaxId, utilities.ExecutionContext.GetUserId(), ServerDateTime.Now,
                                                                                             utilities.ExecutionContext.GetUserId(), ServerDateTime.Now, dplFileLinesDTO.ProductDTORec.InventoryUOMId);

                        ordertotal += purchaseOrderLineDTO.SubTotal;

                        InventoryReceiveLinesDTO inventoryReceiveLinesDTO = new InventoryReceiveLinesDTO(-1, -1, purchaseOrderLineDTO.ProductId, purchaseOrderLineDTO.Description,
                                                                                                         "", detailQuantity, dplFileLinesDTO.ProductDTORec.DefaultLocationId, "Y", -1,
                                                                                                          purchaseOrderLineDTO.UnitPrice, dplFileLinesDTO.TaxPercentage, (detailQuantity * (purchaseOrderLineDTO.UnitPrice + purchaseOrderLineDTO.TaxAmount)),
                                                                                                          dplFileLinesDTO.ProductDTORec.TaxInclusiveCost, -1, dplFileLinesDTO.VendorInvoiceNumber, ServerDateTime.Now,
                                                                                                          "", utilities.ExecutionContext.GetUserId(), string.Empty, utilities.ExecutionContext.GetSiteId(), false, -1, -1, -1, "", 0, 0, 0, 0, 0,
                                                                                                         utilities.ExecutionContext.GetUserId(), ServerDateTime.Now, utilities.ExecutionContext.GetUserId(), ServerDateTime.Now, new List<InventoryLotDTO>(), (dplFileLinesDTO.ProdPriceInTicket > 0 ? dplFileLinesDTO.ProdPriceInTicket : dplFileLinesDTO.ProductDTORec.PriceInTickets),
                                                                                                          dplFileLinesDTO.ProductDTORec.PurchaseTaxId, Convert.ToDecimal(taxAmount), purchaseOrderLineDTO.UOMId, true, purchaseOrderLineDTO.Guid
                                                                                                          );
                        if (dplFileLinesDTO.ProductDTORec.LotControlled)
                        {
                            InventoryLotDTO inventoryLotRecDTO = new InventoryLotDTO(-1, "", inventoryReceiveLinesDTO.Quantity, inventoryReceiveLinesDTO.Quantity, price,
                                                                                     -1, ((dplFileLinesDTO.ProdExpiryDate != DateTime.MinValue) ? dplFileLinesDTO.ProdExpiryDate : DateTime.MinValue),
                                                                                     true, utilities.ExecutionContext.GetSiteId(), "", false, -1, "", ServerDateTime.Now, utilities.ExecutionContext.GetUserId(), ServerDateTime.Now, utilities.ExecutionContext.GetUserId(), inventoryReceiveLinesDTO.UOMId);
                            inventoryReceiveLinesDTO.InventoryLotListDTO.Add(inventoryLotRecDTO);
                        }
                        inventoryReceiptDTO.InventoryReceiveLinesListDTO.Add(inventoryReceiveLinesDTO);

                        purchaseOrderDTO.PurchaseOrderLineListDTO.Add(purchaseOrderLineDTO);
                    }
                }
                purchaseOrderDTO.OrderTotal = ordertotal;
                purchaseOrderDTO.InventoryReceiptListDTO.Add(inventoryReceiptDTO);
                //purchaseOrderListDTO.Add(purchaseOrderDTO);
                PurchaseOrder purchaseOrderBl = new PurchaseOrder(purchaseOrderDTO, utilities.ExecutionContext);
                purchaseOrderBl.getPurchaseOrderDTO.OrderNumber = purchaseOrderBl.GetNextPurchaseOrderSequenceNo("PurchaseOrder") + AutoPOText;
                this.purchaseOrderListBL.Add(purchaseOrderBl);
            }
            log.LogMethodExit();
        }

        private void UpdateRequisitionDetails()
        {
            log.LogMethodEntry();
            DateTime receivedDate = dplFileLinesListDTO[0].ReceivedDate;
            RequisitionList requisitionList = new RequisitionList(utilities.ExecutionContext);
            //List<RequisitionDTO> requisitionShortListDTO;
            List<KeyValuePair<RequisitionDTO.SearchByRequisitionParameters, string>> requisitionSearchParam;
            requisitionSearchParam = new List<KeyValuePair<RequisitionDTO.SearchByRequisitionParameters, string>>();
            requisitionSearchParam.Add(new KeyValuePair<RequisitionDTO.SearchByRequisitionParameters, string>(RequisitionDTO.SearchByRequisitionParameters.EXPECTED_RECEIPT_DATE, receivedDate.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)));
            requisitionSearchParam.Add(new KeyValuePair<RequisitionDTO.SearchByRequisitionParameters, string>(RequisitionDTO.SearchByRequisitionParameters.STATUS, "Submitted,InProgress"));
            if (utilities.ExecutionContext.IsCorporate)
            {
                requisitionSearchParam.Add(new KeyValuePair<RequisitionDTO.SearchByRequisitionParameters, string>(RequisitionDTO.SearchByRequisitionParameters.SITE_ID, utilities.ExecutionContext.SiteId.ToString()));
            }
            List<RequisitionDTO> requisitionListDTO = requisitionList.GetAllRequisitionByRequisitionLineInfo(requisitionSearchParam, null);
            if (requisitionListDTO != null && requisitionListDTO.Count > 0)
            {
                foreach (RequisitionDTO requisitionDTO in requisitionListDTO)
                {
                    Boolean canProcess = false;
                    foreach (RequisitionLinesDTO requisitionLinesDTO in requisitionDTO.RequisitionLinesListDTO)
                    {
                        if (dplFileLinesListDTO.Exists(dplFileLineRec => dplFileLineRec.ProductId == requisitionLinesDTO.ProductId))
                        {
                            canProcess = true;
                            break;
                        }
                    }
                    if (canProcess)
                    {
                        RequisitionBL requisitionBL = new RequisitionBL(utilities.ExecutionContext, requisitionDTO);
                        this.RequisitionListBL.Add(requisitionBL);
                    }
                }
            }

            if (this.RequisitionListBL != null && this.RequisitionListBL.Count > 0)
            {
                double prodQtyLeft = 0;
                foreach (DPLFileLinesDTO dplFileLinesDTO in this.dplFileLinesListDTO)
                {
                    prodQtyLeft = dplFileLinesDTO.ProductQuantity;
                    foreach (RequisitionBL requisitionBL in this.RequisitionListBL)
                    {
                        if (prodQtyLeft <= 0)
                            break;
                        prodQtyLeft = requisitionBL.UpdateRequisitionDetails(dplFileLinesDTO.ProductId, prodQtyLeft, receivedDate);
                    }
                }
            }
            log.LogMethodExit();
        }

        internal void GetDefaultsForProductCreation()
        {
            log.LogMethodEntry();
            LookupValuesList lookupValuesList = new LookupValuesList(utilities.ExecutionContext);
            List<KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>> searchLVParameters;
            searchLVParameters = new List<KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>>();
            searchLVParameters.Add(new KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>(LookupValuesDTO.SearchByLookupValuesParameters.LOOKUP_NAME, "DPL_PRODUCT_DEFAULTS"));
            if (utilities.ExecutionContext.IsCorporate)
            {
                searchLVParameters.Add(new KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>(LookupValuesDTO.SearchByLookupValuesParameters.SITE_ID, dplHeader.poSiteId.ToString()));
            }
            //searchLVParameters.Add(new KeyValuePair<LookupValuesDTO.SearchByLookupValuesParameters, string>(LookupValuesDTO.SearchByLookupValuesParameters.LOOKUP_VALUE, "DPL_MARKUPPERCENT_LOWERLIMIT"));
            List<LookupValuesDTO> lookupValuesListDTO = lookupValuesList.GetAllLookupValues(searchLVParameters);
            if (lookupValuesListDTO != null && lookupValuesListDTO.Count > 0)
            {
                foreach (LookupValuesDTO lookupValuesDTO in lookupValuesListDTO)
                {
                    try
                    {
                        log.LogVariableState("lookupValuesDTO.LookupValue ", lookupValuesDTO.LookupValue);
                        switch (lookupValuesDTO.LookupValue)
                        {
                            case "DEFAULT_CATEGORY_ID":
                                defaultCatagoryId = GetCategoryID(lookupValuesDTO.Description);
                                break;
                            case "DEFAULT_LOCATION_ID":
                                defaultLocationId = GetLocationID(lookupValuesDTO.Description);
                                break;
                            case "DEFAULT_OUTBOUND_LOCATION_ID":
                                defaultOutBoundLocationId = GetLocationID(lookupValuesDTO.Description);
                                break;
                            case "DEFAULT_TAX_ID":
                                defaultTaxId = GetTaxId(lookupValuesDTO.Description);
                                break;
                            case "DEFAULT_TAX_INCLUSIVE_COST":
                                defaultTaxInclusiveCost = (lookupValuesDTO.Description.ToUpper().StartsWith("Y") ? "Y" : "N");
                                break;
                            case "DEFAULT_COST_INCLUDES_TAX":
                                defaultCostIncludesTax = (lookupValuesDTO.Description.ToUpper().StartsWith("Y") ? true : false);
                                break;
                            case "DEFAULT_DISPLAY_GROUP":
                                defaultDisplayGroupName = lookupValuesDTO.Description;
                                break;
                        }

                    }
                    catch (Exception ex)
                    {
                        log.Error(ex);
                        throw new Exception(utilities.MessageUtils.getMessage("Check DPL_PRODUCT_DEFAULTS setup")); //Check the markup percent setup
                    }
                }
            }
            log.LogMethodExit();
        }

        internal int GetCategoryID(string categoryName)
        {
            log.LogMethodEntry(categoryName);
            int categoryId = -1;
            CategoryList categoryListBl = new CategoryList(utilities.ExecutionContext);
            List<KeyValuePair<CategoryDTO.SearchByCategoryParameters, string>> categorySearchParam = new List<KeyValuePair<CategoryDTO.SearchByCategoryParameters, string>>();
            categorySearchParam.Add(new KeyValuePair<CategoryDTO.SearchByCategoryParameters, string>(CategoryDTO.SearchByCategoryParameters.NAME, categoryName));
            categorySearchParam.Add(new KeyValuePair<CategoryDTO.SearchByCategoryParameters, string>(CategoryDTO.SearchByCategoryParameters.IS_ACTIVE, "Y"));            
            if (utilities.ExecutionContext.IsCorporate)
            {
                categorySearchParam.Add(new KeyValuePair<CategoryDTO.SearchByCategoryParameters, string>(CategoryDTO.SearchByCategoryParameters.SITE_ID, dplHeader.poSiteId.ToString()));
            }
            List<CategoryDTO> categoryDTOList = categoryListBl.GetAllCategory(categorySearchParam);
            if (categoryDTOList != null && categoryDTOList.Any())
            {
                categoryId = categoryDTOList[0].CategoryId;
            }
            log.LogMethodExit(categoryId);
            return categoryId;
        }

        internal int GetUOMID(string uomName)
        {
            log.LogMethodEntry(uomName);
            int uomID = -1;
            UOMList uomListBL = new UOMList(utilities.ExecutionContext);
            List<KeyValuePair<UOMDTO.SearchByUOMParameters, string>> uomSearchParam = new List<KeyValuePair<UOMDTO.SearchByUOMParameters, string>>();
            uomSearchParam.Add(new KeyValuePair<UOMDTO.SearchByUOMParameters, string>(UOMDTO.SearchByUOMParameters.UOM, uomName));
            uomSearchParam.Add(new KeyValuePair<UOMDTO.SearchByUOMParameters, string>(UOMDTO.SearchByUOMParameters.IS_ACTIVE, "1"));
            if (utilities.ExecutionContext.IsCorporate)
            {
                uomSearchParam.Add(new KeyValuePair<UOMDTO.SearchByUOMParameters, string>(UOMDTO.SearchByUOMParameters.SITEID, dplHeader.poSiteId.ToString()));
            }
            List<UOMDTO> uomDTOList = uomListBL.GetAllUOMs(uomSearchParam);
            if (uomDTOList != null && uomDTOList.Any())
            {
                uomID = uomDTOList[0].UOMId;
            }
            log.LogMethodExit(uomID);
            return uomID;
        }

        internal int GetLocationID(string locationName)
        {
            log.LogMethodEntry(locationName);
            int locationId = -1;
            LocationList locatonListBl = new LocationList(utilities.ExecutionContext);
            List<KeyValuePair<LocationDTO.SearchByLocationParameters, string>> locationSearchParam = new List<KeyValuePair<LocationDTO.SearchByLocationParameters, string>>();
            locationSearchParam.Add(new KeyValuePair<LocationDTO.SearchByLocationParameters, string>(LocationDTO.SearchByLocationParameters.LOCATION_NAME, locationName));
            locationSearchParam.Add(new KeyValuePair<LocationDTO.SearchByLocationParameters, string>(LocationDTO.SearchByLocationParameters.IS_ACTIVE, "Y"));
            if (utilities.ExecutionContext.IsCorporate)
            {
                locationSearchParam.Add(new KeyValuePair<LocationDTO.SearchByLocationParameters, string>(LocationDTO.SearchByLocationParameters.SITE_ID, dplHeader.poSiteId.ToString()));
            } 
            List<LocationDTO> locationDTOList = locatonListBl.GetAllLocations(locationSearchParam);
            if (locationDTOList != null && locationDTOList.Any())
            {
                locationId = locationDTOList[0].LocationId;
            }
            log.LogMethodExit(locationId);
            return locationId;
        }

        internal int GetTaxId(string taxName)
        {
            log.LogMethodEntry(taxName);
            int taxId = -1;
            TaxList purchaseTaxList = new TaxList(utilities.ExecutionContext);
            List<KeyValuePair<TaxDTO.SearchByTaxParameters, string>> searchByPTaxParameters;
            searchByPTaxParameters = new List<KeyValuePair<TaxDTO.SearchByTaxParameters, string>>();
            searchByPTaxParameters.Add(new KeyValuePair<TaxDTO.SearchByTaxParameters, string>(TaxDTO.SearchByTaxParameters.TAX_NAME_EXACT, taxName));
            searchByPTaxParameters.Add(new KeyValuePair<TaxDTO.SearchByTaxParameters, string>(TaxDTO.SearchByTaxParameters.ACTIVE_FLAG, "1"));
            if (utilities.ExecutionContext.IsCorporate)
            {
                searchByPTaxParameters.Add(new KeyValuePair<TaxDTO.SearchByTaxParameters, string>(TaxDTO.SearchByTaxParameters.SITE_ID, dplHeader.poSiteId.ToString()));
            }
            List<TaxDTO> purchaseTaxListDTO = purchaseTaxList.GetAllTaxes(searchByPTaxParameters);

            if (purchaseTaxListDTO != null && purchaseTaxListDTO.Any())
            {
                taxId = purchaseTaxListDTO[0].TaxId;
            }
            log.LogMethodExit(taxId);
            return taxId;
        }

        internal ProductDTO CreateNewProductEntry(DPLLine lineObj)
        {
            log.LogMethodEntry(lineObj);
            bool defaultLotProduct = (lineObj.prodExpiryDate != DateTime.MinValue);
            int defaulTLotExpiryDays = 0;
            int uomId = GetUOMID(lineObj.prodUOM);
            string productLotExpiryType = defaultLotExpiryType;
            string productLotIssuingApproach = defaultLotIssuingApproach;
            if (!defaultLotProduct)
            {
                productLotExpiryType = "N";
                productLotIssuingApproach = "None";
            }

            log.LogVariableState("productLotExpiryType: ", productLotExpiryType);
            log.LogVariableState("productLotIssuingApproach: ", productLotIssuingApproach);

            if (uomId == -1)
            {
                throw new Exception(utilities.MessageUtils.getMessage(2217, lineObj.prodUOM));// "Unable to create new product as UOM - [ "+ lineObj.prodUOM + " ] is not defined in eZeeInventory" ));
            }
            int siteId = (utilities.ExecutionContext.IsCorporate ? dplHeader.poSiteId : utilities.ExecutionContext.GetSiteId());
            ProductDTO newProductDTO = new ProductDTO(-1, lineObj.ProductCode, lineObj.prodDescription, "Created by DPL", defaultCatagoryId,
                defaultLocationId, 0, 0, uomId, 0, lineObj.prodPackSize, dplHeader.vendorId, lineObj.prodPrice, lineObj.prodPrice, "Y",
                "Y", "Y", utilities.ExecutionContext.GetUserId(), utilities.getServerTime(), true, lineObj.prodPriceInTicket, defaultOutBoundLocationId, 0,
                defaultTaxInclusiveCost, "", 0, 0, 0, siteId, "", false, 0, -1, -1, -1,
                defaultLotProduct, false, productLotExpiryType, productLotIssuingApproach, "", defaulTLotExpiryDays, "", Double.NaN, false, lineObj.prodDescription,
                utilities.ExecutionContext.GetUserId(), utilities.getServerTime(), -1, defaultTaxId, defaultCostIncludesTax, -1, 0, null, null, uomId, null);
            newProductDTO.ProductId = -1;
            log.LogMethodExit(newProductDTO);
            return newProductDTO;
        }
    }
}
