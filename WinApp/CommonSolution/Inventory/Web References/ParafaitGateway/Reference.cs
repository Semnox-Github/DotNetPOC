//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Semnox.Parafait.Inventory.ParafaitGateway {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://semnox.com/ParafaitWS/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UploadSiteDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllSiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateInitialUploadStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateServerUploadTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerCardActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback HQTrxRefreshRequiredOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRoamingSitesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastUpdateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerCardStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerCardOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::Semnox.Parafait.Inventory.Properties.Settings.Default.Inventory_ParafaitGateway_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UploadSiteDataCompletedEventHandler UploadSiteDataCompleted;
        
        /// <remarks/>
        public event GetAllSiteCompletedEventHandler GetAllSiteCompleted;
        
        /// <remarks/>
        public event UpdateInitialUploadStatusCompletedEventHandler UpdateInitialUploadStatusCompleted;
        
        /// <remarks/>
        public event UpdateServerUploadTimeCompletedEventHandler UpdateServerUploadTimeCompleted;
        
        /// <remarks/>
        public event GetServerCardActivityCompletedEventHandler GetServerCardActivityCompleted;
        
        /// <remarks/>
        public event HQTrxRefreshRequiredCompletedEventHandler HQTrxRefreshRequiredCompleted;
        
        /// <remarks/>
        public event GetRoamingSitesCompletedEventHandler GetRoamingSitesCompleted;
        
        /// <remarks/>
        public event GetServerDataCompletedEventHandler GetServerDataCompleted;
        
        /// <remarks/>
        public event GetLastUpdateTimeCompletedEventHandler GetLastUpdateTimeCompleted;
        
        /// <remarks/>
        public event GetServerCardStatusCompletedEventHandler GetServerCardStatusCompleted;
        
        /// <remarks/>
        public event GetServerCardCompletedEventHandler GetServerCardCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/UploadSiteData", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadSiteData(string CompanyKey, int SiteID, System.Data.DataSet SiteDataSet, System.DateTime UpdateTime) {
            object[] results = this.Invoke("UploadSiteData", new object[] {
                        CompanyKey,
                        SiteID,
                        SiteDataSet,
                        UpdateTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadSiteDataAsync(string CompanyKey, int SiteID, System.Data.DataSet SiteDataSet, System.DateTime UpdateTime) {
            this.UploadSiteDataAsync(CompanyKey, SiteID, SiteDataSet, UpdateTime, null);
        }
        
        /// <remarks/>
        public void UploadSiteDataAsync(string CompanyKey, int SiteID, System.Data.DataSet SiteDataSet, System.DateTime UpdateTime, object userState) {
            if ((this.UploadSiteDataOperationCompleted == null)) {
                this.UploadSiteDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadSiteDataOperationCompleted);
            }
            this.InvokeAsync("UploadSiteData", new object[] {
                        CompanyKey,
                        SiteID,
                        SiteDataSet,
                        UpdateTime}, this.UploadSiteDataOperationCompleted, userState);
        }
        
        private void OnUploadSiteDataOperationCompleted(object arg) {
            if ((this.UploadSiteDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadSiteDataCompleted(this, new UploadSiteDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/GetAllSite", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SiteDTO[] GetAllSite(string CompanyKey, int siteId, int orgId, int companyId, ref string message) {
            object[] results = this.Invoke("GetAllSite", new object[] {
                        CompanyKey,
                        siteId,
                        orgId,
                        companyId,
                        message});
            message = ((string)(results[1]));
            return ((SiteDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllSiteAsync(string CompanyKey, int siteId, int orgId, int companyId, string message) {
            this.GetAllSiteAsync(CompanyKey, siteId, orgId, companyId, message, null);
        }
        
        /// <remarks/>
        public void GetAllSiteAsync(string CompanyKey, int siteId, int orgId, int companyId, string message, object userState) {
            if ((this.GetAllSiteOperationCompleted == null)) {
                this.GetAllSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllSiteOperationCompleted);
            }
            this.InvokeAsync("GetAllSite", new object[] {
                        CompanyKey,
                        siteId,
                        orgId,
                        companyId,
                        message}, this.GetAllSiteOperationCompleted, userState);
        }
        
        private void OnGetAllSiteOperationCompleted(object arg) {
            if ((this.GetAllSiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllSiteCompleted(this, new GetAllSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/UpdateInitialUploadStatus", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateInitialUploadStatus(string CompanyKey, int SiteId, bool UploadDone, ref string message) {
            object[] results = this.Invoke("UpdateInitialUploadStatus", new object[] {
                        CompanyKey,
                        SiteId,
                        UploadDone,
                        message});
            message = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateInitialUploadStatusAsync(string CompanyKey, int SiteId, bool UploadDone, string message) {
            this.UpdateInitialUploadStatusAsync(CompanyKey, SiteId, UploadDone, message, null);
        }
        
        /// <remarks/>
        public void UpdateInitialUploadStatusAsync(string CompanyKey, int SiteId, bool UploadDone, string message, object userState) {
            if ((this.UpdateInitialUploadStatusOperationCompleted == null)) {
                this.UpdateInitialUploadStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateInitialUploadStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateInitialUploadStatus", new object[] {
                        CompanyKey,
                        SiteId,
                        UploadDone,
                        message}, this.UpdateInitialUploadStatusOperationCompleted, userState);
        }
        
        private void OnUpdateInitialUploadStatusOperationCompleted(object arg) {
            if ((this.UpdateInitialUploadStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateInitialUploadStatusCompleted(this, new UpdateInitialUploadStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/UpdateServerUploadTime", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateServerUploadTime(string CompanyKey, long SiteId, System.DateTime ServerUploadTime, ref string message) {
            object[] results = this.Invoke("UpdateServerUploadTime", new object[] {
                        CompanyKey,
                        SiteId,
                        ServerUploadTime,
                        message});
            message = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateServerUploadTimeAsync(string CompanyKey, long SiteId, System.DateTime ServerUploadTime, string message) {
            this.UpdateServerUploadTimeAsync(CompanyKey, SiteId, ServerUploadTime, message, null);
        }
        
        /// <remarks/>
        public void UpdateServerUploadTimeAsync(string CompanyKey, long SiteId, System.DateTime ServerUploadTime, string message, object userState) {
            if ((this.UpdateServerUploadTimeOperationCompleted == null)) {
                this.UpdateServerUploadTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateServerUploadTimeOperationCompleted);
            }
            this.InvokeAsync("UpdateServerUploadTime", new object[] {
                        CompanyKey,
                        SiteId,
                        ServerUploadTime,
                        message}, this.UpdateServerUploadTimeOperationCompleted, userState);
        }
        
        private void OnUpdateServerUploadTimeOperationCompleted(object arg) {
            if ((this.UpdateServerUploadTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateServerUploadTimeCompleted(this, new UpdateServerUploadTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/GetServerCardActivity", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetServerCardActivity(string CompanyKey, string CardNumber, int SiteId, ref string message) {
            object[] results = this.Invoke("GetServerCardActivity", new object[] {
                        CompanyKey,
                        CardNumber,
                        SiteId,
                        message});
            message = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerCardActivityAsync(string CompanyKey, string CardNumber, int SiteId, string message) {
            this.GetServerCardActivityAsync(CompanyKey, CardNumber, SiteId, message, null);
        }
        
        /// <remarks/>
        public void GetServerCardActivityAsync(string CompanyKey, string CardNumber, int SiteId, string message, object userState) {
            if ((this.GetServerCardActivityOperationCompleted == null)) {
                this.GetServerCardActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerCardActivityOperationCompleted);
            }
            this.InvokeAsync("GetServerCardActivity", new object[] {
                        CompanyKey,
                        CardNumber,
                        SiteId,
                        message}, this.GetServerCardActivityOperationCompleted, userState);
        }
        
        private void OnGetServerCardActivityOperationCompleted(object arg) {
            if ((this.GetServerCardActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerCardActivityCompleted(this, new GetServerCardActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/HQTrxRefreshRequired", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HQTrxRefreshRequired(string CompanyKey, int SiteId, bool UpdateFlag, ref string SiteTrxStatus, ref string message) {
            object[] results = this.Invoke("HQTrxRefreshRequired", new object[] {
                        CompanyKey,
                        SiteId,
                        UpdateFlag,
                        SiteTrxStatus,
                        message});
            SiteTrxStatus = ((string)(results[1]));
            message = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HQTrxRefreshRequiredAsync(string CompanyKey, int SiteId, bool UpdateFlag, string SiteTrxStatus, string message) {
            this.HQTrxRefreshRequiredAsync(CompanyKey, SiteId, UpdateFlag, SiteTrxStatus, message, null);
        }
        
        /// <remarks/>
        public void HQTrxRefreshRequiredAsync(string CompanyKey, int SiteId, bool UpdateFlag, string SiteTrxStatus, string message, object userState) {
            if ((this.HQTrxRefreshRequiredOperationCompleted == null)) {
                this.HQTrxRefreshRequiredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHQTrxRefreshRequiredOperationCompleted);
            }
            this.InvokeAsync("HQTrxRefreshRequired", new object[] {
                        CompanyKey,
                        SiteId,
                        UpdateFlag,
                        SiteTrxStatus,
                        message}, this.HQTrxRefreshRequiredOperationCompleted, userState);
        }
        
        private void OnHQTrxRefreshRequiredOperationCompleted(object arg) {
            if ((this.HQTrxRefreshRequiredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HQTrxRefreshRequiredCompleted(this, new HQTrxRefreshRequiredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/GetRoamingSites", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRoamingSites(string CompanyKey, int SiteId, ref string message) {
            object[] results = this.Invoke("GetRoamingSites", new object[] {
                        CompanyKey,
                        SiteId,
                        message});
            message = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRoamingSitesAsync(string CompanyKey, int SiteId, string message) {
            this.GetRoamingSitesAsync(CompanyKey, SiteId, message, null);
        }
        
        /// <remarks/>
        public void GetRoamingSitesAsync(string CompanyKey, int SiteId, string message, object userState) {
            if ((this.GetRoamingSitesOperationCompleted == null)) {
                this.GetRoamingSitesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoamingSitesOperationCompleted);
            }
            this.InvokeAsync("GetRoamingSites", new object[] {
                        CompanyKey,
                        SiteId,
                        message}, this.GetRoamingSitesOperationCompleted, userState);
        }
        
        private void OnGetRoamingSitesOperationCompleted(object arg) {
            if ((this.GetRoamingSitesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRoamingSitesCompleted(this, new GetRoamingSitesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/GetServerData", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetServerData(string CompanyKey, int SiteId, bool RoamingAllowed, ref System.DateTime ServerUploadTime, ref string message) {
            object[] results = this.Invoke("GetServerData", new object[] {
                        CompanyKey,
                        SiteId,
                        RoamingAllowed,
                        ServerUploadTime,
                        message});
            ServerUploadTime = ((System.DateTime)(results[1]));
            message = ((string)(results[2]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerDataAsync(string CompanyKey, int SiteId, bool RoamingAllowed, System.DateTime ServerUploadTime, string message) {
            this.GetServerDataAsync(CompanyKey, SiteId, RoamingAllowed, ServerUploadTime, message, null);
        }
        
        /// <remarks/>
        public void GetServerDataAsync(string CompanyKey, int SiteId, bool RoamingAllowed, System.DateTime ServerUploadTime, string message, object userState) {
            if ((this.GetServerDataOperationCompleted == null)) {
                this.GetServerDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerDataOperationCompleted);
            }
            this.InvokeAsync("GetServerData", new object[] {
                        CompanyKey,
                        SiteId,
                        RoamingAllowed,
                        ServerUploadTime,
                        message}, this.GetServerDataOperationCompleted, userState);
        }
        
        private void OnGetServerDataOperationCompleted(object arg) {
            if ((this.GetServerDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerDataCompleted(this, new GetServerDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/GetLastUpdateTime", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetLastUpdateTime(string CompanyKey, System.Data.DataSet inSiteData) {
            object[] results = this.Invoke("GetLastUpdateTime", new object[] {
                        CompanyKey,
                        inSiteData});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetLastUpdateTimeAsync(string CompanyKey, System.Data.DataSet inSiteData) {
            this.GetLastUpdateTimeAsync(CompanyKey, inSiteData, null);
        }
        
        /// <remarks/>
        public void GetLastUpdateTimeAsync(string CompanyKey, System.Data.DataSet inSiteData, object userState) {
            if ((this.GetLastUpdateTimeOperationCompleted == null)) {
                this.GetLastUpdateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastUpdateTimeOperationCompleted);
            }
            this.InvokeAsync("GetLastUpdateTime", new object[] {
                        CompanyKey,
                        inSiteData}, this.GetLastUpdateTimeOperationCompleted, userState);
        }
        
        private void OnGetLastUpdateTimeOperationCompleted(object arg) {
            if ((this.GetLastUpdateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastUpdateTimeCompleted(this, new GetLastUpdateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/GetServerCardStatus", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetServerCardStatus(string CompanyKey, System.Guid CardGuid, ref string message, ref string cardValidFlag) {
            object[] results = this.Invoke("GetServerCardStatus", new object[] {
                        CompanyKey,
                        CardGuid,
                        message,
                        cardValidFlag});
            message = ((string)(results[1]));
            cardValidFlag = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerCardStatusAsync(string CompanyKey, System.Guid CardGuid, string message, string cardValidFlag) {
            this.GetServerCardStatusAsync(CompanyKey, CardGuid, message, cardValidFlag, null);
        }
        
        /// <remarks/>
        public void GetServerCardStatusAsync(string CompanyKey, System.Guid CardGuid, string message, string cardValidFlag, object userState) {
            if ((this.GetServerCardStatusOperationCompleted == null)) {
                this.GetServerCardStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerCardStatusOperationCompleted);
            }
            this.InvokeAsync("GetServerCardStatus", new object[] {
                        CompanyKey,
                        CardGuid,
                        message,
                        cardValidFlag}, this.GetServerCardStatusOperationCompleted, userState);
        }
        
        private void OnGetServerCardStatusOperationCompleted(object arg) {
            if ((this.GetServerCardStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerCardStatusCompleted(this, new GetServerCardStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://semnox.com/ParafaitWS/GetServerCard", RequestNamespace="http://semnox.com/ParafaitWS/", ResponseNamespace="http://semnox.com/ParafaitWS/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetServerCard(string CompanyKey, string CardNumber, int SiteId, ref string message) {
            object[] results = this.Invoke("GetServerCard", new object[] {
                        CompanyKey,
                        CardNumber,
                        SiteId,
                        message});
            message = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerCardAsync(string CompanyKey, string CardNumber, int SiteId, string message) {
            this.GetServerCardAsync(CompanyKey, CardNumber, SiteId, message, null);
        }
        
        /// <remarks/>
        public void GetServerCardAsync(string CompanyKey, string CardNumber, int SiteId, string message, object userState) {
            if ((this.GetServerCardOperationCompleted == null)) {
                this.GetServerCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerCardOperationCompleted);
            }
            this.InvokeAsync("GetServerCard", new object[] {
                        CompanyKey,
                        CardNumber,
                        SiteId,
                        message}, this.GetServerCardOperationCompleted, userState);
        }
        
        private void OnGetServerCardOperationCompleted(object arg) {
            if ((this.GetServerCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerCardCompleted(this, new GetServerCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://semnox.com/ParafaitWS/")]
    public partial class SiteDTO {
        
        private int siteIdField;
        
        private string siteNameField;
        
        private string siteAddressField;
        
        private string notesField;
        
        private string siteGuidField;
        
        private string guidField;
        
        private string versionField;
        
        private int orgIdField;
        
        private System.DateTime lastUploadTimeField;
        
        private System.DateTime lastUploadServerTimeField;
        
        private string lastUploadMessageField;
        
        private string initialLoadDoneField;
        
        private string maxCardsField;
        
        private string customerKeyField;
        
        private int companyIdField;
        
        private int siteCodeField;
        
        private bool synchStatusField;
        
        private bool isMasterSiteField;
        
        private bool isChangedField;
        
        /// <remarks/>
        public int SiteId {
            get {
                return this.siteIdField;
            }
            set {
                this.siteIdField = value;
            }
        }
        
        /// <remarks/>
        public string SiteName {
            get {
                return this.siteNameField;
            }
            set {
                this.siteNameField = value;
            }
        }
        
        /// <remarks/>
        public string SiteAddress {
            get {
                return this.siteAddressField;
            }
            set {
                this.siteAddressField = value;
            }
        }
        
        /// <remarks/>
        public string Notes {
            get {
                return this.notesField;
            }
            set {
                this.notesField = value;
            }
        }
        
        /// <remarks/>
        public string SiteGuid {
            get {
                return this.siteGuidField;
            }
            set {
                this.siteGuidField = value;
            }
        }
        
        /// <remarks/>
        public string Guid {
            get {
                return this.guidField;
            }
            set {
                this.guidField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public int OrgId {
            get {
                return this.orgIdField;
            }
            set {
                this.orgIdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastUploadTime {
            get {
                return this.lastUploadTimeField;
            }
            set {
                this.lastUploadTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastUploadServerTime {
            get {
                return this.lastUploadServerTimeField;
            }
            set {
                this.lastUploadServerTimeField = value;
            }
        }
        
        /// <remarks/>
        public string LastUploadMessage {
            get {
                return this.lastUploadMessageField;
            }
            set {
                this.lastUploadMessageField = value;
            }
        }
        
        /// <remarks/>
        public string InitialLoadDone {
            get {
                return this.initialLoadDoneField;
            }
            set {
                this.initialLoadDoneField = value;
            }
        }
        
        /// <remarks/>
        public string MaxCards {
            get {
                return this.maxCardsField;
            }
            set {
                this.maxCardsField = value;
            }
        }
        
        /// <remarks/>
        public string CustomerKey {
            get {
                return this.customerKeyField;
            }
            set {
                this.customerKeyField = value;
            }
        }
        
        /// <remarks/>
        public int CompanyId {
            get {
                return this.companyIdField;
            }
            set {
                this.companyIdField = value;
            }
        }
        
        /// <remarks/>
        public int SiteCode {
            get {
                return this.siteCodeField;
            }
            set {
                this.siteCodeField = value;
            }
        }
        
        /// <remarks/>
        public bool SynchStatus {
            get {
                return this.synchStatusField;
            }
            set {
                this.synchStatusField = value;
            }
        }
        
        /// <remarks/>
        public bool IsMasterSite {
            get {
                return this.isMasterSiteField;
            }
            set {
                this.isMasterSiteField = value;
            }
        }
        
        /// <remarks/>
        public bool IsChanged {
            get {
                return this.isChangedField;
            }
            set {
                this.isChangedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void UploadSiteDataCompletedEventHandler(object sender, UploadSiteDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadSiteDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadSiteDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetAllSiteCompletedEventHandler(object sender, GetAllSiteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SiteDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SiteDTO[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void UpdateInitialUploadStatusCompletedEventHandler(object sender, UpdateInitialUploadStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateInitialUploadStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateInitialUploadStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void UpdateServerUploadTimeCompletedEventHandler(object sender, UpdateServerUploadTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateServerUploadTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateServerUploadTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetServerCardActivityCompletedEventHandler(object sender, GetServerCardActivityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerCardActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerCardActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void HQTrxRefreshRequiredCompletedEventHandler(object sender, HQTrxRefreshRequiredCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HQTrxRefreshRequiredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HQTrxRefreshRequiredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string SiteTrxStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetRoamingSitesCompletedEventHandler(object sender, GetRoamingSitesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRoamingSitesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRoamingSitesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetServerDataCompletedEventHandler(object sender, GetServerDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.DateTime ServerUploadTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetLastUpdateTimeCompletedEventHandler(object sender, GetLastUpdateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastUpdateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastUpdateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetServerCardStatusCompletedEventHandler(object sender, GetServerCardStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerCardStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerCardStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string cardValidFlag {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetServerCardCompletedEventHandler(object sender, GetServerCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591